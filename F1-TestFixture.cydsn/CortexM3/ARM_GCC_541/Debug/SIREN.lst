ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SIREN.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	SIREN_initVar
  20              		.bss
  21              		.type	SIREN_initVar, %object
  22              		.size	SIREN_initVar, 1
  23              	SIREN_initVar:
  24 0000 00       		.space	1
  25              		.global	SIREN_errorStatus
  26              		.type	SIREN_errorStatus, %object
  27              		.size	SIREN_errorStatus, 1
  28              	SIREN_errorStatus:
  29 0001 00       		.space	1
  30              		.comm	SIREN_rxBuffer,512,4
  31              		.global	SIREN_rxBufferRead
  32              		.align	1
  33              		.type	SIREN_rxBufferRead, %object
  34              		.size	SIREN_rxBufferRead, 2
  35              	SIREN_rxBufferRead:
  36 0002 0000     		.space	2
  37              		.global	SIREN_rxBufferWrite
  38              		.align	1
  39              		.type	SIREN_rxBufferWrite, %object
  40              		.size	SIREN_rxBufferWrite, 2
  41              	SIREN_rxBufferWrite:
  42 0004 0000     		.space	2
  43              		.global	SIREN_rxBufferLoopDetect
  44              		.type	SIREN_rxBufferLoopDetect, %object
  45              		.size	SIREN_rxBufferLoopDetect, 1
  46              	SIREN_rxBufferLoopDetect:
  47 0006 00       		.space	1
  48              		.global	SIREN_rxBufferOverflow
  49              		.type	SIREN_rxBufferOverflow, %object
  50              		.size	SIREN_rxBufferOverflow, 1
  51              	SIREN_rxBufferOverflow:
  52 0007 00       		.space	1
  53              		.section	.text.SIREN_Start,"ax",%progbits
  54              		.align	2
  55              		.global	SIREN_Start
  56              		.thumb
  57              		.thumb_func
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 2


  58              		.type	SIREN_Start, %function
  59              	SIREN_Start:
  60              	.LFB0:
  61              		.file 1 "Generated_Source\\PSoC5\\SIREN.c"
   1:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/SIREN.c **** * File Name: SIREN.c
   3:Generated_Source\PSoC5/SIREN.c **** * Version 2.50
   4:Generated_Source\PSoC5/SIREN.c **** *
   5:Generated_Source\PSoC5/SIREN.c **** * Description:
   6:Generated_Source\PSoC5/SIREN.c **** *  This file provides all API functionality of the UART component
   7:Generated_Source\PSoC5/SIREN.c **** *
   8:Generated_Source\PSoC5/SIREN.c **** * Note:
   9:Generated_Source\PSoC5/SIREN.c **** *
  10:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
  11:Generated_Source\PSoC5/SIREN.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/SIREN.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:Generated_Source\PSoC5/SIREN.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:Generated_Source\PSoC5/SIREN.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/SIREN.c **** 
  17:Generated_Source\PSoC5/SIREN.c **** #include "SIREN.h"
  18:Generated_Source\PSoC5/SIREN.c **** #if (SIREN_INTERNAL_CLOCK_USED)
  19:Generated_Source\PSoC5/SIREN.c ****     #include "SIREN_IntClock.h"
  20:Generated_Source\PSoC5/SIREN.c **** #endif /* End SIREN_INTERNAL_CLOCK_USED */
  21:Generated_Source\PSoC5/SIREN.c **** 
  22:Generated_Source\PSoC5/SIREN.c **** 
  23:Generated_Source\PSoC5/SIREN.c **** /***************************************
  24:Generated_Source\PSoC5/SIREN.c **** * Global data allocation
  25:Generated_Source\PSoC5/SIREN.c **** ***************************************/
  26:Generated_Source\PSoC5/SIREN.c **** 
  27:Generated_Source\PSoC5/SIREN.c **** uint8 SIREN_initVar = 0u;
  28:Generated_Source\PSoC5/SIREN.c **** 
  29:Generated_Source\PSoC5/SIREN.c **** #if (SIREN_TX_INTERRUPT_ENABLED && SIREN_TX_ENABLED)
  30:Generated_Source\PSoC5/SIREN.c ****     volatile uint8 SIREN_txBuffer[SIREN_TX_BUFFER_SIZE];
  31:Generated_Source\PSoC5/SIREN.c ****     volatile uint8 SIREN_txBufferRead = 0u;
  32:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_txBufferWrite = 0u;
  33:Generated_Source\PSoC5/SIREN.c **** #endif /* (SIREN_TX_INTERRUPT_ENABLED && SIREN_TX_ENABLED) */
  34:Generated_Source\PSoC5/SIREN.c **** 
  35:Generated_Source\PSoC5/SIREN.c **** #if (SIREN_RX_INTERRUPT_ENABLED && (SIREN_RX_ENABLED || SIREN_HD_ENABLED))
  36:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_errorStatus = 0u;
  37:Generated_Source\PSoC5/SIREN.c ****     volatile uint8 SIREN_rxBuffer[SIREN_RX_BUFFER_SIZE];
  38:Generated_Source\PSoC5/SIREN.c ****     volatile uint16 SIREN_rxBufferRead  = 0u;
  39:Generated_Source\PSoC5/SIREN.c ****     volatile uint16 SIREN_rxBufferWrite = 0u;
  40:Generated_Source\PSoC5/SIREN.c ****     volatile uint8 SIREN_rxBufferLoopDetect = 0u;
  41:Generated_Source\PSoC5/SIREN.c ****     volatile uint8 SIREN_rxBufferOverflow   = 0u;
  42:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RXHW_ADDRESS_ENABLED)
  43:Generated_Source\PSoC5/SIREN.c ****         volatile uint8 SIREN_rxAddressMode = SIREN_RX_ADDRESS_MODE;
  44:Generated_Source\PSoC5/SIREN.c ****         volatile uint8 SIREN_rxAddressDetected = 0u;
  45:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RXHW_ADDRESS_ENABLED) */
  46:Generated_Source\PSoC5/SIREN.c **** #endif /* (SIREN_RX_INTERRUPT_ENABLED && (SIREN_RX_ENABLED || SIREN_HD_ENABLED)) */
  47:Generated_Source\PSoC5/SIREN.c **** 
  48:Generated_Source\PSoC5/SIREN.c **** 
  49:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
  50:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_Start
  51:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
  52:Generated_Source\PSoC5/SIREN.c **** *
  53:Generated_Source\PSoC5/SIREN.c **** * Summary:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 3


  54:Generated_Source\PSoC5/SIREN.c **** *  This is the preferred method to begin component operation.
  55:Generated_Source\PSoC5/SIREN.c **** *  SIREN_Start() sets the initVar variable, calls the
  56:Generated_Source\PSoC5/SIREN.c **** *  SIREN_Init() function, and then calls the
  57:Generated_Source\PSoC5/SIREN.c **** *  SIREN_Enable() function.
  58:Generated_Source\PSoC5/SIREN.c **** *
  59:Generated_Source\PSoC5/SIREN.c **** * Parameters:
  60:Generated_Source\PSoC5/SIREN.c **** *  None.
  61:Generated_Source\PSoC5/SIREN.c **** *
  62:Generated_Source\PSoC5/SIREN.c **** * Return:
  63:Generated_Source\PSoC5/SIREN.c **** *  None.
  64:Generated_Source\PSoC5/SIREN.c **** *
  65:Generated_Source\PSoC5/SIREN.c **** * Global variables:
  66:Generated_Source\PSoC5/SIREN.c **** *  The SIREN_intiVar variable is used to indicate initial
  67:Generated_Source\PSoC5/SIREN.c **** *  configuration of this component. The variable is initialized to zero (0u)
  68:Generated_Source\PSoC5/SIREN.c **** *  and set to one (1u) the first time SIREN_Start() is called. This
  69:Generated_Source\PSoC5/SIREN.c **** *  allows for component initialization without re-initialization in all
  70:Generated_Source\PSoC5/SIREN.c **** *  subsequent calls to the SIREN_Start() routine.
  71:Generated_Source\PSoC5/SIREN.c **** *
  72:Generated_Source\PSoC5/SIREN.c **** * Reentrant:
  73:Generated_Source\PSoC5/SIREN.c **** *  No.
  74:Generated_Source\PSoC5/SIREN.c **** *
  75:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
  76:Generated_Source\PSoC5/SIREN.c **** void SIREN_Start(void) 
  77:Generated_Source\PSoC5/SIREN.c **** {
  62              		.loc 1 77 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 1, uses_anonymous_args = 0
  66 0000 80B5     		push	{r7, lr}
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 7, -8
  69              		.cfi_offset 14, -4
  70 0002 00AF     		add	r7, sp, #0
  71              		.cfi_def_cfa_register 7
  78:Generated_Source\PSoC5/SIREN.c ****     /* If not initialized then initialize all required hardware and software */
  79:Generated_Source\PSoC5/SIREN.c ****     if(SIREN_initVar == 0u)
  72              		.loc 1 79 0
  73 0004 064B     		ldr	r3, .L3
  74 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  75 0008 002B     		cmp	r3, #0
  76 000a 04D1     		bne	.L2
  80:Generated_Source\PSoC5/SIREN.c ****     {
  81:Generated_Source\PSoC5/SIREN.c ****         SIREN_Init();
  77              		.loc 1 81 0
  78 000c FFF7FEFF 		bl	SIREN_Init
  82:Generated_Source\PSoC5/SIREN.c ****         SIREN_initVar = 1u;
  79              		.loc 1 82 0
  80 0010 034B     		ldr	r3, .L3
  81 0012 0122     		movs	r2, #1
  82 0014 1A70     		strb	r2, [r3]
  83              	.L2:
  83:Generated_Source\PSoC5/SIREN.c ****     }
  84:Generated_Source\PSoC5/SIREN.c **** 
  85:Generated_Source\PSoC5/SIREN.c ****     SIREN_Enable();
  84              		.loc 1 85 0
  85 0016 FFF7FEFF 		bl	SIREN_Enable
  86:Generated_Source\PSoC5/SIREN.c **** }
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 4


  86              		.loc 1 86 0
  87 001a 00BF     		nop
  88 001c 80BD     		pop	{r7, pc}
  89              	.L4:
  90 001e 00BF     		.align	2
  91              	.L3:
  92 0020 00000000 		.word	SIREN_initVar
  93              		.cfi_endproc
  94              	.LFE0:
  95              		.size	SIREN_Start, .-SIREN_Start
  96              		.section	.text.SIREN_Init,"ax",%progbits
  97              		.align	2
  98              		.global	SIREN_Init
  99              		.thumb
 100              		.thumb_func
 101              		.type	SIREN_Init, %function
 102              	SIREN_Init:
 103              	.LFB1:
  87:Generated_Source\PSoC5/SIREN.c **** 
  88:Generated_Source\PSoC5/SIREN.c **** 
  89:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
  90:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_Init
  91:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
  92:Generated_Source\PSoC5/SIREN.c **** *
  93:Generated_Source\PSoC5/SIREN.c **** * Summary:
  94:Generated_Source\PSoC5/SIREN.c **** *  Initializes or restores the component according to the customizer Configure
  95:Generated_Source\PSoC5/SIREN.c **** *  dialog settings. It is not necessary to call SIREN_Init() because
  96:Generated_Source\PSoC5/SIREN.c **** *  the SIREN_Start() API calls this function and is the preferred
  97:Generated_Source\PSoC5/SIREN.c **** *  method to begin component operation.
  98:Generated_Source\PSoC5/SIREN.c **** *
  99:Generated_Source\PSoC5/SIREN.c **** * Parameters:
 100:Generated_Source\PSoC5/SIREN.c **** *  None.
 101:Generated_Source\PSoC5/SIREN.c **** *
 102:Generated_Source\PSoC5/SIREN.c **** * Return:
 103:Generated_Source\PSoC5/SIREN.c **** *  None.
 104:Generated_Source\PSoC5/SIREN.c **** *
 105:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
 106:Generated_Source\PSoC5/SIREN.c **** void SIREN_Init(void) 
 107:Generated_Source\PSoC5/SIREN.c **** {
 104              		.loc 1 107 0
 105              		.cfi_startproc
 106              		@ args = 0, pretend = 0, frame = 0
 107              		@ frame_needed = 1, uses_anonymous_args = 0
 108 0000 80B5     		push	{r7, lr}
 109              		.cfi_def_cfa_offset 8
 110              		.cfi_offset 7, -8
 111              		.cfi_offset 14, -4
 112 0002 00AF     		add	r7, sp, #0
 113              		.cfi_def_cfa_register 7
 108:Generated_Source\PSoC5/SIREN.c ****     #if(SIREN_RX_ENABLED || SIREN_HD_ENABLED)
 109:Generated_Source\PSoC5/SIREN.c **** 
 110:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_RX_INTERRUPT_ENABLED)
 111:Generated_Source\PSoC5/SIREN.c ****             /* Set RX interrupt vector and priority */
 112:Generated_Source\PSoC5/SIREN.c ****             (void) CyIntSetVector(SIREN_RX_VECT_NUM, &SIREN_RXISR);
 114              		.loc 1 112 0
 115 0004 0D49     		ldr	r1, .L6
 116 0006 0620     		movs	r0, #6
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 5


 117 0008 FFF7FEFF 		bl	CyIntSetVector
 113:Generated_Source\PSoC5/SIREN.c ****             CyIntSetPriority(SIREN_RX_VECT_NUM, SIREN_RX_PRIOR_NUM);
 118              		.loc 1 113 0
 119 000c 0721     		movs	r1, #7
 120 000e 0620     		movs	r0, #6
 121 0010 FFF7FEFF 		bl	CyIntSetPriority
 114:Generated_Source\PSoC5/SIREN.c ****             SIREN_errorStatus = 0u;
 122              		.loc 1 114 0
 123 0014 0A4B     		ldr	r3, .L6+4
 124 0016 0022     		movs	r2, #0
 125 0018 1A70     		strb	r2, [r3]
 115:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 116:Generated_Source\PSoC5/SIREN.c **** 
 117:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_RXHW_ADDRESS_ENABLED)
 118:Generated_Source\PSoC5/SIREN.c ****             SIREN_SetRxAddressMode(SIREN_RX_ADDRESS_MODE);
 119:Generated_Source\PSoC5/SIREN.c ****             SIREN_SetRxAddress1(SIREN_RX_HW_ADDRESS1);
 120:Generated_Source\PSoC5/SIREN.c ****             SIREN_SetRxAddress2(SIREN_RX_HW_ADDRESS2);
 121:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_RXHW_ADDRESS_ENABLED */
 122:Generated_Source\PSoC5/SIREN.c **** 
 123:Generated_Source\PSoC5/SIREN.c ****         /* Init Count7 period */
 124:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXBITCTR_PERIOD_REG = SIREN_RXBITCTR_INIT;
 126              		.loc 1 124 0
 127 001a 0A4B     		ldr	r3, .L6+8
 128 001c 7222     		movs	r2, #114
 129 001e 1A70     		strb	r2, [r3]
 125:Generated_Source\PSoC5/SIREN.c ****         /* Configure the Initial RX interrupt mask */
 126:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXSTATUS_MASK_REG  = SIREN_INIT_RX_INTERRUPTS_MASK;
 130              		.loc 1 126 0
 131 0020 094B     		ldr	r3, .L6+12
 132 0022 2022     		movs	r2, #32
 133 0024 1A70     		strb	r2, [r3]
 127:Generated_Source\PSoC5/SIREN.c ****     #endif /* End SIREN_RX_ENABLED || SIREN_HD_ENABLED*/
 128:Generated_Source\PSoC5/SIREN.c **** 
 129:Generated_Source\PSoC5/SIREN.c ****     #if(SIREN_TX_ENABLED)
 130:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TX_INTERRUPT_ENABLED)
 131:Generated_Source\PSoC5/SIREN.c ****             /* Set TX interrupt vector and priority */
 132:Generated_Source\PSoC5/SIREN.c ****             (void) CyIntSetVector(SIREN_TX_VECT_NUM, &SIREN_TXISR);
 133:Generated_Source\PSoC5/SIREN.c ****             CyIntSetPriority(SIREN_TX_VECT_NUM, SIREN_TX_PRIOR_NUM);
 134:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
 135:Generated_Source\PSoC5/SIREN.c **** 
 136:Generated_Source\PSoC5/SIREN.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 137:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TXCLKGEN_DP)
 138:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXBITCLKGEN_CTR_REG = SIREN_BIT_CENTER;
 134              		.loc 1 138 0
 135 0026 094B     		ldr	r3, .L6+16
 136 0028 0622     		movs	r2, #6
 137 002a 1A70     		strb	r2, [r3]
 139:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXBITCLKTX_COMPLETE_REG = ((SIREN_NUMBER_OF_DATA_BITS +
 138              		.loc 1 139 0
 139 002c 084B     		ldr	r3, .L6+20
 140 002e 4722     		movs	r2, #71
 141 0030 1A70     		strb	r2, [r3]
 140:Generated_Source\PSoC5/SIREN.c ****                         SIREN_NUMBER_OF_START_BIT) * SIREN_OVER_SAMPLE_COUNT) - 1u;
 141:Generated_Source\PSoC5/SIREN.c ****         #else
 142:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXBITCTR_PERIOD_REG = ((SIREN_NUMBER_OF_DATA_BITS +
 143:Generated_Source\PSoC5/SIREN.c ****                         SIREN_NUMBER_OF_START_BIT) * SIREN_OVER_SAMPLE_8) - 1u;
 144:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_TXCLKGEN_DP */
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 6


 145:Generated_Source\PSoC5/SIREN.c **** 
 146:Generated_Source\PSoC5/SIREN.c ****         /* Configure the Initial TX interrupt mask */
 147:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TX_INTERRUPT_ENABLED)
 148:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXSTATUS_MASK_REG = SIREN_TX_STS_FIFO_EMPTY;
 149:Generated_Source\PSoC5/SIREN.c ****         #else
 150:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXSTATUS_MASK_REG = SIREN_INIT_TX_INTERRUPTS_MASK;
 142              		.loc 1 150 0
 143 0032 084B     		ldr	r3, .L6+24
 144 0034 0022     		movs	r2, #0
 145 0036 1A70     		strb	r2, [r3]
 151:Generated_Source\PSoC5/SIREN.c ****         #endif /*End SIREN_TX_INTERRUPT_ENABLED*/
 152:Generated_Source\PSoC5/SIREN.c **** 
 153:Generated_Source\PSoC5/SIREN.c ****     #endif /* End SIREN_TX_ENABLED */
 154:Generated_Source\PSoC5/SIREN.c **** 
 155:Generated_Source\PSoC5/SIREN.c ****     #if(SIREN_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 156:Generated_Source\PSoC5/SIREN.c ****         SIREN_WriteControlRegister( \
 157:Generated_Source\PSoC5/SIREN.c ****             (SIREN_ReadControlRegister() & (uint8)~SIREN_CTRL_PARITY_TYPE_MASK) | \
 158:Generated_Source\PSoC5/SIREN.c ****             (uint8)(SIREN_PARITY_TYPE << SIREN_CTRL_PARITY_TYPE0_SHIFT) );
 159:Generated_Source\PSoC5/SIREN.c ****     #endif /* End SIREN_PARITY_TYPE_SW */
 160:Generated_Source\PSoC5/SIREN.c **** }
 146              		.loc 1 160 0
 147 0038 00BF     		nop
 148 003a 80BD     		pop	{r7, pc}
 149              	.L7:
 150              		.align	2
 151              	.L6:
 152 003c 00000000 		.word	SIREN_RXISR
 153 0040 00000000 		.word	SIREN_errorStatus
 154 0044 88650040 		.word	1073767816
 155 0048 8B650040 		.word	1073767819
 156 004c 25650040 		.word	1073767717
 157 0050 35650040 		.word	1073767733
 158 0054 86650040 		.word	1073767814
 159              		.cfi_endproc
 160              	.LFE1:
 161              		.size	SIREN_Init, .-SIREN_Init
 162              		.section	.text.SIREN_Enable,"ax",%progbits
 163              		.align	2
 164              		.global	SIREN_Enable
 165              		.thumb
 166              		.thumb_func
 167              		.type	SIREN_Enable, %function
 168              	SIREN_Enable:
 169              	.LFB2:
 161:Generated_Source\PSoC5/SIREN.c **** 
 162:Generated_Source\PSoC5/SIREN.c **** 
 163:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
 164:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_Enable
 165:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
 166:Generated_Source\PSoC5/SIREN.c **** *
 167:Generated_Source\PSoC5/SIREN.c **** * Summary:
 168:Generated_Source\PSoC5/SIREN.c **** *  Activates the hardware and begins component operation. It is not necessary
 169:Generated_Source\PSoC5/SIREN.c **** *  to call SIREN_Enable() because the SIREN_Start() API
 170:Generated_Source\PSoC5/SIREN.c **** *  calls this function, which is the preferred method to begin component
 171:Generated_Source\PSoC5/SIREN.c **** *  operation.
 172:Generated_Source\PSoC5/SIREN.c **** 
 173:Generated_Source\PSoC5/SIREN.c **** * Parameters:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 7


 174:Generated_Source\PSoC5/SIREN.c **** *  None.
 175:Generated_Source\PSoC5/SIREN.c **** *
 176:Generated_Source\PSoC5/SIREN.c **** * Return:
 177:Generated_Source\PSoC5/SIREN.c **** *  None.
 178:Generated_Source\PSoC5/SIREN.c **** *
 179:Generated_Source\PSoC5/SIREN.c **** * Global Variables:
 180:Generated_Source\PSoC5/SIREN.c **** *  SIREN_rxAddressDetected - set to initial state (0).
 181:Generated_Source\PSoC5/SIREN.c **** *
 182:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
 183:Generated_Source\PSoC5/SIREN.c **** void SIREN_Enable(void) 
 184:Generated_Source\PSoC5/SIREN.c **** {
 170              		.loc 1 184 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 80B5     		push	{r7, lr}
 175              		.cfi_def_cfa_offset 8
 176              		.cfi_offset 7, -8
 177              		.cfi_offset 14, -4
 178 0002 82B0     		sub	sp, sp, #8
 179              		.cfi_def_cfa_offset 16
 180 0004 00AF     		add	r7, sp, #0
 181              		.cfi_def_cfa_register 7
 185:Generated_Source\PSoC5/SIREN.c ****     uint8 enableInterrupts;
 186:Generated_Source\PSoC5/SIREN.c ****     enableInterrupts = CyEnterCriticalSection();
 182              		.loc 1 186 0
 183 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 184 000a 0346     		mov	r3, r0
 185 000c FB71     		strb	r3, [r7, #7]
 187:Generated_Source\PSoC5/SIREN.c **** 
 188:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_ENABLED || SIREN_HD_ENABLED)
 189:Generated_Source\PSoC5/SIREN.c ****         /* RX Counter (Count7) Enable */
 190:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXBITCTR_CONTROL_REG |= SIREN_CNTR_ENABLE;
 186              		.loc 1 190 0
 187 000e 124A     		ldr	r2, .L9
 188 0010 114B     		ldr	r3, .L9
 189 0012 1B78     		ldrb	r3, [r3]
 190 0014 DBB2     		uxtb	r3, r3
 191 0016 43F02003 		orr	r3, r3, #32
 192 001a DBB2     		uxtb	r3, r3
 193 001c 1370     		strb	r3, [r2]
 191:Generated_Source\PSoC5/SIREN.c **** 
 192:Generated_Source\PSoC5/SIREN.c ****         /* Enable the RX Interrupt */
 193:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXSTATUS_ACTL_REG  |= SIREN_INT_ENABLE;
 194              		.loc 1 193 0
 195 001e 0F4A     		ldr	r2, .L9+4
 196 0020 0E4B     		ldr	r3, .L9+4
 197 0022 1B78     		ldrb	r3, [r3]
 198 0024 DBB2     		uxtb	r3, r3
 199 0026 43F01003 		orr	r3, r3, #16
 200 002a DBB2     		uxtb	r3, r3
 201 002c 1370     		strb	r3, [r2]
 194:Generated_Source\PSoC5/SIREN.c **** 
 195:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_RX_INTERRUPT_ENABLED)
 196:Generated_Source\PSoC5/SIREN.c ****             SIREN_EnableRxInt();
 202              		.loc 1 196 0
 203 002e 0C4B     		ldr	r3, .L9+8
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 8


 204 0030 4022     		movs	r2, #64
 205 0032 1A60     		str	r2, [r3]
 197:Generated_Source\PSoC5/SIREN.c **** 
 198:Generated_Source\PSoC5/SIREN.c ****             #if (SIREN_RXHW_ADDRESS_ENABLED)
 199:Generated_Source\PSoC5/SIREN.c ****                 SIREN_rxAddressDetected = 0u;
 200:Generated_Source\PSoC5/SIREN.c ****             #endif /* (SIREN_RXHW_ADDRESS_ENABLED) */
 201:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 202:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_ENABLED || SIREN_HD_ENABLED) */
 203:Generated_Source\PSoC5/SIREN.c **** 
 204:Generated_Source\PSoC5/SIREN.c ****     #if(SIREN_TX_ENABLED)
 205:Generated_Source\PSoC5/SIREN.c ****         /* TX Counter (DP/Count7) Enable */
 206:Generated_Source\PSoC5/SIREN.c ****         #if(!SIREN_TXCLKGEN_DP)
 207:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXBITCTR_CONTROL_REG |= SIREN_CNTR_ENABLE;
 208:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_TXCLKGEN_DP */
 209:Generated_Source\PSoC5/SIREN.c **** 
 210:Generated_Source\PSoC5/SIREN.c ****         /* Enable the TX Interrupt */
 211:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXSTATUS_ACTL_REG |= SIREN_INT_ENABLE;
 206              		.loc 1 211 0
 207 0034 0B4A     		ldr	r2, .L9+12
 208 0036 0B4B     		ldr	r3, .L9+12
 209 0038 1B78     		ldrb	r3, [r3]
 210 003a DBB2     		uxtb	r3, r3
 211 003c 43F01003 		orr	r3, r3, #16
 212 0040 DBB2     		uxtb	r3, r3
 213 0042 1370     		strb	r3, [r2]
 212:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TX_INTERRUPT_ENABLED)
 213:Generated_Source\PSoC5/SIREN.c ****             SIREN_ClearPendingTxInt(); /* Clear history of TX_NOT_EMPTY */
 214:Generated_Source\PSoC5/SIREN.c ****             SIREN_EnableTxInt();
 215:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
 216:Generated_Source\PSoC5/SIREN.c ****      #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
 217:Generated_Source\PSoC5/SIREN.c **** 
 218:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_INTERNAL_CLOCK_USED)
 219:Generated_Source\PSoC5/SIREN.c ****         SIREN_IntClock_Start();  /* Enable the clock */
 214              		.loc 1 219 0
 215 0044 FFF7FEFF 		bl	SIREN_IntClock_Start
 220:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_INTERNAL_CLOCK_USED) */
 221:Generated_Source\PSoC5/SIREN.c **** 
 222:Generated_Source\PSoC5/SIREN.c ****     CyExitCriticalSection(enableInterrupts);
 216              		.loc 1 222 0
 217 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 218 004a 1846     		mov	r0, r3
 219 004c FFF7FEFF 		bl	CyExitCriticalSection
 223:Generated_Source\PSoC5/SIREN.c **** }
 220              		.loc 1 223 0
 221 0050 00BF     		nop
 222 0052 0837     		adds	r7, r7, #8
 223              		.cfi_def_cfa_offset 8
 224 0054 BD46     		mov	sp, r7
 225              		.cfi_def_cfa_register 13
 226              		@ sp needed
 227 0056 80BD     		pop	{r7, pc}
 228              	.L10:
 229              		.align	2
 230              	.L9:
 231 0058 98650040 		.word	1073767832
 232 005c 9B650040 		.word	1073767835
 233 0060 00E100E0 		.word	-536813312
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 9


 234 0064 96650040 		.word	1073767830
 235              		.cfi_endproc
 236              	.LFE2:
 237              		.size	SIREN_Enable, .-SIREN_Enable
 238              		.section	.text.SIREN_Stop,"ax",%progbits
 239              		.align	2
 240              		.global	SIREN_Stop
 241              		.thumb
 242              		.thumb_func
 243              		.type	SIREN_Stop, %function
 244              	SIREN_Stop:
 245              	.LFB3:
 224:Generated_Source\PSoC5/SIREN.c **** 
 225:Generated_Source\PSoC5/SIREN.c **** 
 226:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
 227:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_Stop
 228:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
 229:Generated_Source\PSoC5/SIREN.c **** *
 230:Generated_Source\PSoC5/SIREN.c **** * Summary:
 231:Generated_Source\PSoC5/SIREN.c **** *  Disables the UART operation.
 232:Generated_Source\PSoC5/SIREN.c **** *
 233:Generated_Source\PSoC5/SIREN.c **** * Parameters:
 234:Generated_Source\PSoC5/SIREN.c **** *  None.
 235:Generated_Source\PSoC5/SIREN.c **** *
 236:Generated_Source\PSoC5/SIREN.c **** * Return:
 237:Generated_Source\PSoC5/SIREN.c **** *  None.
 238:Generated_Source\PSoC5/SIREN.c **** *
 239:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
 240:Generated_Source\PSoC5/SIREN.c **** void SIREN_Stop(void) 
 241:Generated_Source\PSoC5/SIREN.c **** {
 246              		.loc 1 241 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 8
 249              		@ frame_needed = 1, uses_anonymous_args = 0
 250 0000 80B5     		push	{r7, lr}
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 7, -8
 253              		.cfi_offset 14, -4
 254 0002 82B0     		sub	sp, sp, #8
 255              		.cfi_def_cfa_offset 16
 256 0004 00AF     		add	r7, sp, #0
 257              		.cfi_def_cfa_register 7
 242:Generated_Source\PSoC5/SIREN.c ****     uint8 enableInterrupts;
 243:Generated_Source\PSoC5/SIREN.c ****     enableInterrupts = CyEnterCriticalSection();
 258              		.loc 1 243 0
 259 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 260 000a 0346     		mov	r3, r0
 261 000c FB71     		strb	r3, [r7, #7]
 244:Generated_Source\PSoC5/SIREN.c **** 
 245:Generated_Source\PSoC5/SIREN.c ****     /* Write Bit Counter Disable */
 246:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_ENABLED || SIREN_HD_ENABLED)
 247:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXBITCTR_CONTROL_REG &= (uint8) ~SIREN_CNTR_ENABLE;
 262              		.loc 1 247 0
 263 000e 124A     		ldr	r2, .L12
 264 0010 114B     		ldr	r3, .L12
 265 0012 1B78     		ldrb	r3, [r3]
 266 0014 DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 10


 267 0016 23F02003 		bic	r3, r3, #32
 268 001a DBB2     		uxtb	r3, r3
 269 001c 1370     		strb	r3, [r2]
 248:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_ENABLED || SIREN_HD_ENABLED) */
 249:Generated_Source\PSoC5/SIREN.c **** 
 250:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_TX_ENABLED)
 251:Generated_Source\PSoC5/SIREN.c ****         #if(!SIREN_TXCLKGEN_DP)
 252:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXBITCTR_CONTROL_REG &= (uint8) ~SIREN_CNTR_ENABLE;
 253:Generated_Source\PSoC5/SIREN.c ****         #endif /* (!SIREN_TXCLKGEN_DP) */
 254:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_TX_ENABLED) */
 255:Generated_Source\PSoC5/SIREN.c **** 
 256:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_INTERNAL_CLOCK_USED)
 257:Generated_Source\PSoC5/SIREN.c ****         SIREN_IntClock_Stop();   /* Disable the clock */
 270              		.loc 1 257 0
 271 001e FFF7FEFF 		bl	SIREN_IntClock_Stop
 258:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_INTERNAL_CLOCK_USED) */
 259:Generated_Source\PSoC5/SIREN.c **** 
 260:Generated_Source\PSoC5/SIREN.c ****     /* Disable internal interrupt component */
 261:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_ENABLED || SIREN_HD_ENABLED)
 262:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXSTATUS_ACTL_REG  &= (uint8) ~SIREN_INT_ENABLE;
 272              		.loc 1 262 0
 273 0022 0E4A     		ldr	r2, .L12+4
 274 0024 0D4B     		ldr	r3, .L12+4
 275 0026 1B78     		ldrb	r3, [r3]
 276 0028 DBB2     		uxtb	r3, r3
 277 002a 23F01003 		bic	r3, r3, #16
 278 002e DBB2     		uxtb	r3, r3
 279 0030 1370     		strb	r3, [r2]
 263:Generated_Source\PSoC5/SIREN.c **** 
 264:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_RX_INTERRUPT_ENABLED)
 265:Generated_Source\PSoC5/SIREN.c ****             SIREN_DisableRxInt();
 280              		.loc 1 265 0
 281 0032 0B4B     		ldr	r3, .L12+8
 282 0034 4022     		movs	r2, #64
 283 0036 1A60     		str	r2, [r3]
 266:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 267:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_ENABLED || SIREN_HD_ENABLED) */
 268:Generated_Source\PSoC5/SIREN.c **** 
 269:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_TX_ENABLED)
 270:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXSTATUS_ACTL_REG &= (uint8) ~SIREN_INT_ENABLE;
 284              		.loc 1 270 0
 285 0038 0A4A     		ldr	r2, .L12+12
 286 003a 0A4B     		ldr	r3, .L12+12
 287 003c 1B78     		ldrb	r3, [r3]
 288 003e DBB2     		uxtb	r3, r3
 289 0040 23F01003 		bic	r3, r3, #16
 290 0044 DBB2     		uxtb	r3, r3
 291 0046 1370     		strb	r3, [r2]
 271:Generated_Source\PSoC5/SIREN.c **** 
 272:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TX_INTERRUPT_ENABLED)
 273:Generated_Source\PSoC5/SIREN.c ****             SIREN_DisableTxInt();
 274:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
 275:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_TX_ENABLED) */
 276:Generated_Source\PSoC5/SIREN.c **** 
 277:Generated_Source\PSoC5/SIREN.c ****     CyExitCriticalSection(enableInterrupts);
 292              		.loc 1 277 0
 293 0048 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 11


 294 004a 1846     		mov	r0, r3
 295 004c FFF7FEFF 		bl	CyExitCriticalSection
 278:Generated_Source\PSoC5/SIREN.c **** }
 296              		.loc 1 278 0
 297 0050 00BF     		nop
 298 0052 0837     		adds	r7, r7, #8
 299              		.cfi_def_cfa_offset 8
 300 0054 BD46     		mov	sp, r7
 301              		.cfi_def_cfa_register 13
 302              		@ sp needed
 303 0056 80BD     		pop	{r7, pc}
 304              	.L13:
 305              		.align	2
 306              	.L12:
 307 0058 98650040 		.word	1073767832
 308 005c 9B650040 		.word	1073767835
 309 0060 80E100E0 		.word	-536813184
 310 0064 96650040 		.word	1073767830
 311              		.cfi_endproc
 312              	.LFE3:
 313              		.size	SIREN_Stop, .-SIREN_Stop
 314              		.section	.text.SIREN_ReadControlRegister,"ax",%progbits
 315              		.align	2
 316              		.global	SIREN_ReadControlRegister
 317              		.thumb
 318              		.thumb_func
 319              		.type	SIREN_ReadControlRegister, %function
 320              	SIREN_ReadControlRegister:
 321              	.LFB4:
 279:Generated_Source\PSoC5/SIREN.c **** 
 280:Generated_Source\PSoC5/SIREN.c **** 
 281:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
 282:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_ReadControlRegister
 283:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
 284:Generated_Source\PSoC5/SIREN.c **** *
 285:Generated_Source\PSoC5/SIREN.c **** * Summary:
 286:Generated_Source\PSoC5/SIREN.c **** *  Returns the current value of the control register.
 287:Generated_Source\PSoC5/SIREN.c **** *
 288:Generated_Source\PSoC5/SIREN.c **** * Parameters:
 289:Generated_Source\PSoC5/SIREN.c **** *  None.
 290:Generated_Source\PSoC5/SIREN.c **** *
 291:Generated_Source\PSoC5/SIREN.c **** * Return:
 292:Generated_Source\PSoC5/SIREN.c **** *  Contents of the control register.
 293:Generated_Source\PSoC5/SIREN.c **** *
 294:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
 295:Generated_Source\PSoC5/SIREN.c **** uint8 SIREN_ReadControlRegister(void) 
 296:Generated_Source\PSoC5/SIREN.c **** {
 322              		.loc 1 296 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 1, uses_anonymous_args = 0
 326              		@ link register save eliminated.
 327 0000 80B4     		push	{r7}
 328              		.cfi_def_cfa_offset 4
 329              		.cfi_offset 7, -4
 330 0002 00AF     		add	r7, sp, #0
 331              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 12


 297:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_CONTROL_REG_REMOVED)
 298:Generated_Source\PSoC5/SIREN.c ****         return(0u);
 332              		.loc 1 298 0
 333 0004 0023     		movs	r3, #0
 299:Generated_Source\PSoC5/SIREN.c ****     #else
 300:Generated_Source\PSoC5/SIREN.c ****         return(SIREN_CONTROL_REG);
 301:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_CONTROL_REG_REMOVED) */
 302:Generated_Source\PSoC5/SIREN.c **** }
 334              		.loc 1 302 0
 335 0006 1846     		mov	r0, r3
 336 0008 BD46     		mov	sp, r7
 337              		.cfi_def_cfa_register 13
 338              		@ sp needed
 339 000a 80BC     		pop	{r7}
 340              		.cfi_restore 7
 341              		.cfi_def_cfa_offset 0
 342 000c 7047     		bx	lr
 343              		.cfi_endproc
 344              	.LFE4:
 345              		.size	SIREN_ReadControlRegister, .-SIREN_ReadControlRegister
 346 000e 00BF     		.section	.text.SIREN_WriteControlRegister,"ax",%progbits
 347              		.align	2
 348              		.global	SIREN_WriteControlRegister
 349              		.thumb
 350              		.thumb_func
 351              		.type	SIREN_WriteControlRegister, %function
 352              	SIREN_WriteControlRegister:
 353              	.LFB5:
 303:Generated_Source\PSoC5/SIREN.c **** 
 304:Generated_Source\PSoC5/SIREN.c **** 
 305:Generated_Source\PSoC5/SIREN.c **** /*******************************************************************************
 306:Generated_Source\PSoC5/SIREN.c **** * Function Name: SIREN_WriteControlRegister
 307:Generated_Source\PSoC5/SIREN.c **** ********************************************************************************
 308:Generated_Source\PSoC5/SIREN.c **** *
 309:Generated_Source\PSoC5/SIREN.c **** * Summary:
 310:Generated_Source\PSoC5/SIREN.c **** *  Writes an 8-bit value into the control register
 311:Generated_Source\PSoC5/SIREN.c **** *
 312:Generated_Source\PSoC5/SIREN.c **** * Parameters:
 313:Generated_Source\PSoC5/SIREN.c **** *  control:  control register value
 314:Generated_Source\PSoC5/SIREN.c **** *
 315:Generated_Source\PSoC5/SIREN.c **** * Return:
 316:Generated_Source\PSoC5/SIREN.c **** *  None.
 317:Generated_Source\PSoC5/SIREN.c **** *
 318:Generated_Source\PSoC5/SIREN.c **** *******************************************************************************/
 319:Generated_Source\PSoC5/SIREN.c **** void  SIREN_WriteControlRegister(uint8 control) 
 320:Generated_Source\PSoC5/SIREN.c **** {
 354              		.loc 1 320 0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 8
 357              		@ frame_needed = 1, uses_anonymous_args = 0
 358              		@ link register save eliminated.
 359 0000 80B4     		push	{r7}
 360              		.cfi_def_cfa_offset 4
 361              		.cfi_offset 7, -4
 362 0002 83B0     		sub	sp, sp, #12
 363              		.cfi_def_cfa_offset 16
 364 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 13


 365              		.cfi_def_cfa_register 7
 366 0006 0346     		mov	r3, r0
 367 0008 FB71     		strb	r3, [r7, #7]
 321:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_CONTROL_REG_REMOVED)
 322:Generated_Source\PSoC5/SIREN.c ****         if(0u != control)
 323:Generated_Source\PSoC5/SIREN.c ****         {
 324:Generated_Source\PSoC5/SIREN.c ****             /* Suppress compiler warning */
 325:Generated_Source\PSoC5/SIREN.c ****         }
 326:Generated_Source\PSoC5/SIREN.c ****     #else
 327:Generated_Source\PSoC5/SIREN.c ****        SIREN_CONTROL_REG = control;
 328:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_CONTROL_REG_REMOVED) */
 329:Generated_Source\PSoC5/SIREN.c **** }
 368              		.loc 1 329 0
 369 000a 00BF     		nop
 370 000c 0C37     		adds	r7, r7, #12
 371              		.cfi_def_cfa_offset 4
 372 000e BD46     		mov	sp, r7
 373              		.cfi_def_cfa_register 13
 374              		@ sp needed
 375 0010 80BC     		pop	{r7}
 376              		.cfi_restore 7
 377              		.cfi_def_cfa_offset 0
 378 0012 7047     		bx	lr
 379              		.cfi_endproc
 380              	.LFE5:
 381              		.size	SIREN_WriteControlRegister, .-SIREN_WriteControlRegister
 382              		.section	.text.SIREN_SetRxInterruptMode,"ax",%progbits
 383              		.align	2
 384              		.global	SIREN_SetRxInterruptMode
 385              		.thumb
 386              		.thumb_func
 387              		.type	SIREN_SetRxInterruptMode, %function
 388              	SIREN_SetRxInterruptMode:
 389              	.LFB6:
 330:Generated_Source\PSoC5/SIREN.c **** 
 331:Generated_Source\PSoC5/SIREN.c **** 
 332:Generated_Source\PSoC5/SIREN.c **** #if(SIREN_RX_ENABLED || SIREN_HD_ENABLED)
 333:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 334:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetRxInterruptMode
 335:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 336:Generated_Source\PSoC5/SIREN.c ****     *
 337:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 338:Generated_Source\PSoC5/SIREN.c ****     *  Configures the RX interrupt sources enabled.
 339:Generated_Source\PSoC5/SIREN.c ****     *
 340:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 341:Generated_Source\PSoC5/SIREN.c ****     *  IntSrc:  Bit field containing the RX interrupts to enable. Based on the 
 342:Generated_Source\PSoC5/SIREN.c ****     *  bit-field arrangement of the status register. This value must be a 
 343:Generated_Source\PSoC5/SIREN.c ****     *  combination of status register bit-masks shown below:
 344:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_FIFO_NOTEMPTY    Interrupt on byte received.
 345:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_PAR_ERROR        Interrupt on parity error.
 346:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_STOP_ERROR       Interrupt on stop error.
 347:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_BREAK            Interrupt on break.
 348:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_OVERRUN          Interrupt on overrun error.
 349:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_ADDR_MATCH       Interrupt on address match.
 350:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_RX_STS_MRKSPC           Interrupt on address detect.
 351:Generated_Source\PSoC5/SIREN.c ****     *
 352:Generated_Source\PSoC5/SIREN.c ****     * Return:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 14


 353:Generated_Source\PSoC5/SIREN.c ****     *  None.
 354:Generated_Source\PSoC5/SIREN.c ****     *
 355:Generated_Source\PSoC5/SIREN.c ****     * Theory:
 356:Generated_Source\PSoC5/SIREN.c ****     *  Enables the output of specific status bits to the interrupt controller
 357:Generated_Source\PSoC5/SIREN.c ****     *
 358:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 359:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetRxInterruptMode(uint8 intSrc) 
 360:Generated_Source\PSoC5/SIREN.c ****     {
 390              		.loc 1 360 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 8
 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394              		@ link register save eliminated.
 395 0000 80B4     		push	{r7}
 396              		.cfi_def_cfa_offset 4
 397              		.cfi_offset 7, -4
 398 0002 83B0     		sub	sp, sp, #12
 399              		.cfi_def_cfa_offset 16
 400 0004 00AF     		add	r7, sp, #0
 401              		.cfi_def_cfa_register 7
 402 0006 0346     		mov	r3, r0
 403 0008 FB71     		strb	r3, [r7, #7]
 361:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXSTATUS_MASK_REG  = intSrc;
 404              		.loc 1 361 0
 405 000a 044A     		ldr	r2, .L18
 406 000c FB79     		ldrb	r3, [r7, #7]
 407 000e 1370     		strb	r3, [r2]
 362:Generated_Source\PSoC5/SIREN.c ****     }
 408              		.loc 1 362 0
 409 0010 00BF     		nop
 410 0012 0C37     		adds	r7, r7, #12
 411              		.cfi_def_cfa_offset 4
 412 0014 BD46     		mov	sp, r7
 413              		.cfi_def_cfa_register 13
 414              		@ sp needed
 415 0016 80BC     		pop	{r7}
 416              		.cfi_restore 7
 417              		.cfi_def_cfa_offset 0
 418 0018 7047     		bx	lr
 419              	.L19:
 420 001a 00BF     		.align	2
 421              	.L18:
 422 001c 8B650040 		.word	1073767819
 423              		.cfi_endproc
 424              	.LFE6:
 425              		.size	SIREN_SetRxInterruptMode, .-SIREN_SetRxInterruptMode
 426              		.section	.text.SIREN_ReadRxData,"ax",%progbits
 427              		.align	2
 428              		.global	SIREN_ReadRxData
 429              		.thumb
 430              		.thumb_func
 431              		.type	SIREN_ReadRxData, %function
 432              	SIREN_ReadRxData:
 433              	.LFB7:
 363:Generated_Source\PSoC5/SIREN.c **** 
 364:Generated_Source\PSoC5/SIREN.c **** 
 365:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 15


 366:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_ReadRxData
 367:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 368:Generated_Source\PSoC5/SIREN.c ****     *
 369:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 370:Generated_Source\PSoC5/SIREN.c ****     *  Returns the next byte of received data. This function returns data without
 371:Generated_Source\PSoC5/SIREN.c ****     *  checking the status. You must check the status separately.
 372:Generated_Source\PSoC5/SIREN.c ****     *
 373:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 374:Generated_Source\PSoC5/SIREN.c ****     *  None.
 375:Generated_Source\PSoC5/SIREN.c ****     *
 376:Generated_Source\PSoC5/SIREN.c ****     * Return:
 377:Generated_Source\PSoC5/SIREN.c ****     *  Received data from RX register
 378:Generated_Source\PSoC5/SIREN.c ****     *
 379:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 380:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBuffer - RAM buffer pointer for save received data.
 381:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferWrite - cyclic index for write to rxBuffer,
 382:Generated_Source\PSoC5/SIREN.c ****     *     checked to identify new data.
 383:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferRead - cyclic index for read from rxBuffer,
 384:Generated_Source\PSoC5/SIREN.c ****     *     incremented after each byte has been read from buffer.
 385:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferLoopDetect - cleared if loop condition was detected
 386:Generated_Source\PSoC5/SIREN.c ****     *     in RX ISR.
 387:Generated_Source\PSoC5/SIREN.c ****     *
 388:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 389:Generated_Source\PSoC5/SIREN.c ****     *  No.
 390:Generated_Source\PSoC5/SIREN.c ****     *
 391:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 392:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_ReadRxData(void) 
 393:Generated_Source\PSoC5/SIREN.c ****     {
 434              		.loc 1 393 0
 435              		.cfi_startproc
 436              		@ args = 0, pretend = 0, frame = 8
 437              		@ frame_needed = 1, uses_anonymous_args = 0
 438              		@ link register save eliminated.
 439 0000 80B4     		push	{r7}
 440              		.cfi_def_cfa_offset 4
 441              		.cfi_offset 7, -4
 442 0002 83B0     		sub	sp, sp, #12
 443              		.cfi_def_cfa_offset 16
 444 0004 00AF     		add	r7, sp, #0
 445              		.cfi_def_cfa_register 7
 394:Generated_Source\PSoC5/SIREN.c ****         uint8 rxData;
 395:Generated_Source\PSoC5/SIREN.c **** 
 396:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 397:Generated_Source\PSoC5/SIREN.c **** 
 398:Generated_Source\PSoC5/SIREN.c ****         uint16 locRxBufferRead;
 399:Generated_Source\PSoC5/SIREN.c ****         uint16 locRxBufferWrite;
 400:Generated_Source\PSoC5/SIREN.c **** 
 401:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt */
 402:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableRxInt();
 446              		.loc 1 402 0
 447 0006 1B4B     		ldr	r3, .L27
 448 0008 4022     		movs	r2, #64
 449 000a 1A60     		str	r2, [r3]
 403:Generated_Source\PSoC5/SIREN.c **** 
 404:Generated_Source\PSoC5/SIREN.c ****         locRxBufferRead  = SIREN_rxBufferRead;
 450              		.loc 1 404 0
 451 000c 1A4B     		ldr	r3, .L27+4
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 16


 452 000e 1B88     		ldrh	r3, [r3]	@ movhi
 453 0010 BB80     		strh	r3, [r7, #4]	@ movhi
 405:Generated_Source\PSoC5/SIREN.c ****         locRxBufferWrite = SIREN_rxBufferWrite;
 454              		.loc 1 405 0
 455 0012 1A4B     		ldr	r3, .L27+8
 456 0014 1B88     		ldrh	r3, [r3]	@ movhi
 457 0016 7B80     		strh	r3, [r7, #2]	@ movhi
 406:Generated_Source\PSoC5/SIREN.c **** 
 407:Generated_Source\PSoC5/SIREN.c ****         if( (SIREN_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 458              		.loc 1 407 0
 459 0018 194B     		ldr	r3, .L27+12
 460 001a 1B78     		ldrb	r3, [r3]
 461 001c DBB2     		uxtb	r3, r3
 462 001e 002B     		cmp	r3, #0
 463 0020 03D1     		bne	.L21
 464              		.loc 1 407 0 is_stmt 0 discriminator 1
 465 0022 BA88     		ldrh	r2, [r7, #4]
 466 0024 7B88     		ldrh	r3, [r7, #2]
 467 0026 9A42     		cmp	r2, r3
 468 0028 18D0     		beq	.L22
 469              	.L21:
 408:Generated_Source\PSoC5/SIREN.c ****         {
 409:Generated_Source\PSoC5/SIREN.c ****             rxData = SIREN_rxBuffer[locRxBufferRead];
 470              		.loc 1 409 0 is_stmt 1
 471 002a BB88     		ldrh	r3, [r7, #4]
 472 002c 154A     		ldr	r2, .L27+16
 473 002e D35C     		ldrb	r3, [r2, r3]
 474 0030 FB71     		strb	r3, [r7, #7]
 410:Generated_Source\PSoC5/SIREN.c ****             locRxBufferRead++;
 475              		.loc 1 410 0
 476 0032 BB88     		ldrh	r3, [r7, #4]
 477 0034 0133     		adds	r3, r3, #1
 478 0036 BB80     		strh	r3, [r7, #4]	@ movhi
 411:Generated_Source\PSoC5/SIREN.c **** 
 412:Generated_Source\PSoC5/SIREN.c ****             if(locRxBufferRead >= SIREN_RX_BUFFER_SIZE)
 479              		.loc 1 412 0
 480 0038 BB88     		ldrh	r3, [r7, #4]
 481 003a B3F5007F 		cmp	r3, #512
 482 003e 01D3     		bcc	.L23
 413:Generated_Source\PSoC5/SIREN.c ****             {
 414:Generated_Source\PSoC5/SIREN.c ****                 locRxBufferRead = 0u;
 483              		.loc 1 414 0
 484 0040 0023     		movs	r3, #0
 485 0042 BB80     		strh	r3, [r7, #4]	@ movhi
 486              	.L23:
 415:Generated_Source\PSoC5/SIREN.c ****             }
 416:Generated_Source\PSoC5/SIREN.c ****             /* Update the real pointer */
 417:Generated_Source\PSoC5/SIREN.c ****             SIREN_rxBufferRead = locRxBufferRead;
 487              		.loc 1 417 0
 488 0044 0C4A     		ldr	r2, .L27+4
 489 0046 BB88     		ldrh	r3, [r7, #4]	@ movhi
 490 0048 1380     		strh	r3, [r2]	@ movhi
 418:Generated_Source\PSoC5/SIREN.c **** 
 419:Generated_Source\PSoC5/SIREN.c ****             if(SIREN_rxBufferLoopDetect != 0u)
 491              		.loc 1 419 0
 492 004a 0D4B     		ldr	r3, .L27+12
 493 004c 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 17


 494 004e DBB2     		uxtb	r3, r3
 495 0050 002B     		cmp	r3, #0
 496 0052 06D0     		beq	.L25
 420:Generated_Source\PSoC5/SIREN.c ****             {
 421:Generated_Source\PSoC5/SIREN.c ****                 SIREN_rxBufferLoopDetect = 0u;
 497              		.loc 1 421 0
 498 0054 0A4B     		ldr	r3, .L27+12
 499 0056 0022     		movs	r2, #0
 500 0058 1A70     		strb	r2, [r3]
 419:Generated_Source\PSoC5/SIREN.c ****             {
 501              		.loc 1 419 0
 502 005a 02E0     		b	.L25
 503              	.L22:
 422:Generated_Source\PSoC5/SIREN.c ****                 #if ((SIREN_RX_INTERRUPT_ENABLED) && (SIREN_FLOW_CONTROL != 0u))
 423:Generated_Source\PSoC5/SIREN.c ****                     /* When Hardware Flow Control selected - return RX mask */
 424:Generated_Source\PSoC5/SIREN.c ****                     #if( SIREN_HD_ENABLED )
 425:Generated_Source\PSoC5/SIREN.c ****                         if((SIREN_CONTROL_REG & SIREN_CTRL_HD_SEND) == 0u)
 426:Generated_Source\PSoC5/SIREN.c ****                         {   /* In Half duplex mode return RX mask only in RX
 427:Generated_Source\PSoC5/SIREN.c ****                             *  configuration set, otherwise
 428:Generated_Source\PSoC5/SIREN.c ****                             *  mask will be returned in LoadRxConfig() API.
 429:Generated_Source\PSoC5/SIREN.c ****                             */
 430:Generated_Source\PSoC5/SIREN.c ****                             SIREN_RXSTATUS_MASK_REG  |= SIREN_RX_STS_FIFO_NOTEMPTY;
 431:Generated_Source\PSoC5/SIREN.c ****                         }
 432:Generated_Source\PSoC5/SIREN.c ****                     #else
 433:Generated_Source\PSoC5/SIREN.c ****                         SIREN_RXSTATUS_MASK_REG  |= SIREN_RX_STS_FIFO_NOTEMPTY;
 434:Generated_Source\PSoC5/SIREN.c ****                     #endif /* end SIREN_HD_ENABLED */
 435:Generated_Source\PSoC5/SIREN.c ****                 #endif /* ((SIREN_RX_INTERRUPT_ENABLED) && (SIREN_FLOW_CONTROL != 0u)) */
 436:Generated_Source\PSoC5/SIREN.c ****             }
 437:Generated_Source\PSoC5/SIREN.c ****         }
 438:Generated_Source\PSoC5/SIREN.c ****         else
 439:Generated_Source\PSoC5/SIREN.c ****         {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 440:Generated_Source\PSoC5/SIREN.c ****             rxData = SIREN_RXDATA_REG;
 504              		.loc 1 440 0
 505 005c 0A4B     		ldr	r3, .L27+20
 506 005e 1B78     		ldrb	r3, [r3]
 507 0060 FB71     		strb	r3, [r7, #7]
 508              	.L25:
 441:Generated_Source\PSoC5/SIREN.c ****         }
 442:Generated_Source\PSoC5/SIREN.c **** 
 443:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableRxInt();
 509              		.loc 1 443 0
 510 0062 0A4B     		ldr	r3, .L27+24
 511 0064 4022     		movs	r2, #64
 512 0066 1A60     		str	r2, [r3]
 444:Generated_Source\PSoC5/SIREN.c **** 
 445:Generated_Source\PSoC5/SIREN.c ****     #else
 446:Generated_Source\PSoC5/SIREN.c **** 
 447:Generated_Source\PSoC5/SIREN.c ****         /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit */
 448:Generated_Source\PSoC5/SIREN.c ****         rxData = SIREN_RXDATA_REG;
 449:Generated_Source\PSoC5/SIREN.c **** 
 450:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 451:Generated_Source\PSoC5/SIREN.c **** 
 452:Generated_Source\PSoC5/SIREN.c ****         return(rxData);
 513              		.loc 1 452 0
 514 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 453:Generated_Source\PSoC5/SIREN.c ****     }
 515              		.loc 1 453 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 18


 516 006a 1846     		mov	r0, r3
 517 006c 0C37     		adds	r7, r7, #12
 518              		.cfi_def_cfa_offset 4
 519 006e BD46     		mov	sp, r7
 520              		.cfi_def_cfa_register 13
 521              		@ sp needed
 522 0070 80BC     		pop	{r7}
 523              		.cfi_restore 7
 524              		.cfi_def_cfa_offset 0
 525 0072 7047     		bx	lr
 526              	.L28:
 527              		.align	2
 528              	.L27:
 529 0074 80E100E0 		.word	-536813184
 530 0078 00000000 		.word	SIREN_rxBufferRead
 531 007c 00000000 		.word	SIREN_rxBufferWrite
 532 0080 00000000 		.word	SIREN_rxBufferLoopDetect
 533 0084 00000000 		.word	SIREN_rxBuffer
 534 0088 4B650040 		.word	1073767755
 535 008c 00E100E0 		.word	-536813312
 536              		.cfi_endproc
 537              	.LFE7:
 538              		.size	SIREN_ReadRxData, .-SIREN_ReadRxData
 539              		.section	.text.SIREN_ReadRxStatus,"ax",%progbits
 540              		.align	2
 541              		.global	SIREN_ReadRxStatus
 542              		.thumb
 543              		.thumb_func
 544              		.type	SIREN_ReadRxStatus, %function
 545              	SIREN_ReadRxStatus:
 546              	.LFB8:
 454:Generated_Source\PSoC5/SIREN.c **** 
 455:Generated_Source\PSoC5/SIREN.c **** 
 456:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 457:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_ReadRxStatus
 458:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 459:Generated_Source\PSoC5/SIREN.c ****     *
 460:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 461:Generated_Source\PSoC5/SIREN.c ****     *  Returns the current state of the receiver status register and the software
 462:Generated_Source\PSoC5/SIREN.c ****     *  buffer overflow status.
 463:Generated_Source\PSoC5/SIREN.c ****     *
 464:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 465:Generated_Source\PSoC5/SIREN.c ****     *  None.
 466:Generated_Source\PSoC5/SIREN.c ****     *
 467:Generated_Source\PSoC5/SIREN.c ****     * Return:
 468:Generated_Source\PSoC5/SIREN.c ****     *  Current state of the status register.
 469:Generated_Source\PSoC5/SIREN.c ****     *
 470:Generated_Source\PSoC5/SIREN.c ****     * Side Effect:
 471:Generated_Source\PSoC5/SIREN.c ****     *  All status register bits are clear-on-read except
 472:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_RX_STS_FIFO_NOTEMPTY.
 473:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_RX_STS_FIFO_NOTEMPTY clears immediately after RX data
 474:Generated_Source\PSoC5/SIREN.c ****     *  register read.
 475:Generated_Source\PSoC5/SIREN.c ****     *
 476:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 477:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferOverflow - used to indicate overload condition.
 478:Generated_Source\PSoC5/SIREN.c ****     *   It set to one in RX interrupt when there isn't free space in
 479:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_rxBufferRead to write new data. This condition returned
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 19


 480:Generated_Source\PSoC5/SIREN.c ****     *   and cleared to zero by this API as an
 481:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 482:Generated_Source\PSoC5/SIREN.c ****     *   bits.
 483:Generated_Source\PSoC5/SIREN.c ****     *
 484:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 485:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_ReadRxStatus(void) 
 486:Generated_Source\PSoC5/SIREN.c ****     {
 547              		.loc 1 486 0
 548              		.cfi_startproc
 549              		@ args = 0, pretend = 0, frame = 8
 550              		@ frame_needed = 1, uses_anonymous_args = 0
 551              		@ link register save eliminated.
 552 0000 80B4     		push	{r7}
 553              		.cfi_def_cfa_offset 4
 554              		.cfi_offset 7, -4
 555 0002 83B0     		sub	sp, sp, #12
 556              		.cfi_def_cfa_offset 16
 557 0004 00AF     		add	r7, sp, #0
 558              		.cfi_def_cfa_register 7
 487:Generated_Source\PSoC5/SIREN.c ****         uint8 status;
 488:Generated_Source\PSoC5/SIREN.c **** 
 489:Generated_Source\PSoC5/SIREN.c ****         status = SIREN_RXSTATUS_REG & SIREN_RX_HW_MASK;
 559              		.loc 1 489 0
 560 0006 0C4B     		ldr	r3, .L32
 561 0008 1B78     		ldrb	r3, [r3]
 562 000a DBB2     		uxtb	r3, r3
 563 000c 03F07F03 		and	r3, r3, #127
 564 0010 FB71     		strb	r3, [r7, #7]
 490:Generated_Source\PSoC5/SIREN.c **** 
 491:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 492:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_rxBufferOverflow != 0u)
 565              		.loc 1 492 0
 566 0012 0A4B     		ldr	r3, .L32+4
 567 0014 1B78     		ldrb	r3, [r3]
 568 0016 DBB2     		uxtb	r3, r3
 569 0018 002B     		cmp	r3, #0
 570 001a 06D0     		beq	.L30
 493:Generated_Source\PSoC5/SIREN.c ****         {
 494:Generated_Source\PSoC5/SIREN.c ****             status |= SIREN_RX_STS_SOFT_BUFF_OVER;
 571              		.loc 1 494 0
 572 001c FB79     		ldrb	r3, [r7, #7]
 573 001e 63F07F03 		orn	r3, r3, #127
 574 0022 FB71     		strb	r3, [r7, #7]
 495:Generated_Source\PSoC5/SIREN.c ****             SIREN_rxBufferOverflow = 0u;
 575              		.loc 1 495 0
 576 0024 054B     		ldr	r3, .L32+4
 577 0026 0022     		movs	r2, #0
 578 0028 1A70     		strb	r2, [r3]
 579              	.L30:
 496:Generated_Source\PSoC5/SIREN.c ****         }
 497:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 498:Generated_Source\PSoC5/SIREN.c **** 
 499:Generated_Source\PSoC5/SIREN.c ****         return(status);
 580              		.loc 1 499 0
 581 002a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 500:Generated_Source\PSoC5/SIREN.c ****     }
 582              		.loc 1 500 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 20


 583 002c 1846     		mov	r0, r3
 584 002e 0C37     		adds	r7, r7, #12
 585              		.cfi_def_cfa_offset 4
 586 0030 BD46     		mov	sp, r7
 587              		.cfi_def_cfa_register 13
 588              		@ sp needed
 589 0032 80BC     		pop	{r7}
 590              		.cfi_restore 7
 591              		.cfi_def_cfa_offset 0
 592 0034 7047     		bx	lr
 593              	.L33:
 594 0036 00BF     		.align	2
 595              	.L32:
 596 0038 6B650040 		.word	1073767787
 597 003c 00000000 		.word	SIREN_rxBufferOverflow
 598              		.cfi_endproc
 599              	.LFE8:
 600              		.size	SIREN_ReadRxStatus, .-SIREN_ReadRxStatus
 601              		.section	.text.SIREN_GetChar,"ax",%progbits
 602              		.align	2
 603              		.global	SIREN_GetChar
 604              		.thumb
 605              		.thumb_func
 606              		.type	SIREN_GetChar, %function
 607              	SIREN_GetChar:
 608              	.LFB9:
 501:Generated_Source\PSoC5/SIREN.c **** 
 502:Generated_Source\PSoC5/SIREN.c **** 
 503:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 504:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_GetChar
 505:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 506:Generated_Source\PSoC5/SIREN.c ****     *
 507:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 508:Generated_Source\PSoC5/SIREN.c ****     *  Returns the last received byte of data. SIREN_GetChar() is
 509:Generated_Source\PSoC5/SIREN.c ****     *  designed for ASCII characters and returns a uint8 where 1 to 255 are values
 510:Generated_Source\PSoC5/SIREN.c ****     *  for valid characters and 0 indicates an error occurred or no data is present.
 511:Generated_Source\PSoC5/SIREN.c ****     *
 512:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 513:Generated_Source\PSoC5/SIREN.c ****     *  None.
 514:Generated_Source\PSoC5/SIREN.c ****     *
 515:Generated_Source\PSoC5/SIREN.c ****     * Return:
 516:Generated_Source\PSoC5/SIREN.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 517:Generated_Source\PSoC5/SIREN.c ****     *  A returned zero signifies an error condition or no data available.
 518:Generated_Source\PSoC5/SIREN.c ****     *
 519:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 520:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBuffer - RAM buffer pointer for save received data.
 521:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferWrite - cyclic index for write to rxBuffer,
 522:Generated_Source\PSoC5/SIREN.c ****     *     checked to identify new data.
 523:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferRead - cyclic index for read from rxBuffer,
 524:Generated_Source\PSoC5/SIREN.c ****     *     incremented after each byte has been read from buffer.
 525:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferLoopDetect - cleared if loop condition was detected
 526:Generated_Source\PSoC5/SIREN.c ****     *     in RX ISR.
 527:Generated_Source\PSoC5/SIREN.c ****     *
 528:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 529:Generated_Source\PSoC5/SIREN.c ****     *  No.
 530:Generated_Source\PSoC5/SIREN.c ****     *
 531:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 21


 532:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_GetChar(void) 
 533:Generated_Source\PSoC5/SIREN.c ****     {
 609              		.loc 1 533 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 8
 612              		@ frame_needed = 1, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614 0000 80B4     		push	{r7}
 615              		.cfi_def_cfa_offset 4
 616              		.cfi_offset 7, -4
 617 0002 83B0     		sub	sp, sp, #12
 618              		.cfi_def_cfa_offset 16
 619 0004 00AF     		add	r7, sp, #0
 620              		.cfi_def_cfa_register 7
 534:Generated_Source\PSoC5/SIREN.c ****         uint8 rxData = 0u;
 621              		.loc 1 534 0
 622 0006 0023     		movs	r3, #0
 623 0008 FB71     		strb	r3, [r7, #7]
 535:Generated_Source\PSoC5/SIREN.c ****         uint8 rxStatus;
 536:Generated_Source\PSoC5/SIREN.c **** 
 537:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 538:Generated_Source\PSoC5/SIREN.c ****         uint16 locRxBufferRead;
 539:Generated_Source\PSoC5/SIREN.c ****         uint16 locRxBufferWrite;
 540:Generated_Source\PSoC5/SIREN.c **** 
 541:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt */
 542:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableRxInt();
 624              		.loc 1 542 0
 625 000a 234B     		ldr	r3, .L41
 626 000c 4022     		movs	r2, #64
 627 000e 1A60     		str	r2, [r3]
 543:Generated_Source\PSoC5/SIREN.c **** 
 544:Generated_Source\PSoC5/SIREN.c ****         locRxBufferRead  = SIREN_rxBufferRead;
 628              		.loc 1 544 0
 629 0010 224B     		ldr	r3, .L41+4
 630 0012 1B88     		ldrh	r3, [r3]	@ movhi
 631 0014 BB80     		strh	r3, [r7, #4]	@ movhi
 545:Generated_Source\PSoC5/SIREN.c ****         locRxBufferWrite = SIREN_rxBufferWrite;
 632              		.loc 1 545 0
 633 0016 224B     		ldr	r3, .L41+8
 634 0018 1B88     		ldrh	r3, [r3]	@ movhi
 635 001a 7B80     		strh	r3, [r7, #2]	@ movhi
 546:Generated_Source\PSoC5/SIREN.c **** 
 547:Generated_Source\PSoC5/SIREN.c ****         if( (SIREN_rxBufferLoopDetect != 0u) || (locRxBufferRead != locRxBufferWrite) )
 636              		.loc 1 547 0
 637 001c 214B     		ldr	r3, .L41+12
 638 001e 1B78     		ldrb	r3, [r3]
 639 0020 DBB2     		uxtb	r3, r3
 640 0022 002B     		cmp	r3, #0
 641 0024 03D1     		bne	.L35
 642              		.loc 1 547 0 is_stmt 0 discriminator 1
 643 0026 BA88     		ldrh	r2, [r7, #4]
 644 0028 7B88     		ldrh	r3, [r7, #2]
 645 002a 9A42     		cmp	r2, r3
 646 002c 18D0     		beq	.L36
 647              	.L35:
 548:Generated_Source\PSoC5/SIREN.c ****         {
 549:Generated_Source\PSoC5/SIREN.c ****             rxData = SIREN_rxBuffer[locRxBufferRead];
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 22


 648              		.loc 1 549 0 is_stmt 1
 649 002e BB88     		ldrh	r3, [r7, #4]
 650 0030 1D4A     		ldr	r2, .L41+16
 651 0032 D35C     		ldrb	r3, [r2, r3]
 652 0034 FB71     		strb	r3, [r7, #7]
 550:Generated_Source\PSoC5/SIREN.c ****             locRxBufferRead++;
 653              		.loc 1 550 0
 654 0036 BB88     		ldrh	r3, [r7, #4]
 655 0038 0133     		adds	r3, r3, #1
 656 003a BB80     		strh	r3, [r7, #4]	@ movhi
 551:Generated_Source\PSoC5/SIREN.c ****             if(locRxBufferRead >= SIREN_RX_BUFFER_SIZE)
 657              		.loc 1 551 0
 658 003c BB88     		ldrh	r3, [r7, #4]
 659 003e B3F5007F 		cmp	r3, #512
 660 0042 01D3     		bcc	.L37
 552:Generated_Source\PSoC5/SIREN.c ****             {
 553:Generated_Source\PSoC5/SIREN.c ****                 locRxBufferRead = 0u;
 661              		.loc 1 553 0
 662 0044 0023     		movs	r3, #0
 663 0046 BB80     		strh	r3, [r7, #4]	@ movhi
 664              	.L37:
 554:Generated_Source\PSoC5/SIREN.c ****             }
 555:Generated_Source\PSoC5/SIREN.c ****             /* Update the real pointer */
 556:Generated_Source\PSoC5/SIREN.c ****             SIREN_rxBufferRead = locRxBufferRead;
 665              		.loc 1 556 0
 666 0048 144A     		ldr	r2, .L41+4
 667 004a BB88     		ldrh	r3, [r7, #4]	@ movhi
 668 004c 1380     		strh	r3, [r2]	@ movhi
 557:Generated_Source\PSoC5/SIREN.c **** 
 558:Generated_Source\PSoC5/SIREN.c ****             if(SIREN_rxBufferLoopDetect != 0u)
 669              		.loc 1 558 0
 670 004e 154B     		ldr	r3, .L41+12
 671 0050 1B78     		ldrb	r3, [r3]
 672 0052 DBB2     		uxtb	r3, r3
 673 0054 002B     		cmp	r3, #0
 674 0056 15D0     		beq	.L39
 559:Generated_Source\PSoC5/SIREN.c ****             {
 560:Generated_Source\PSoC5/SIREN.c ****                 SIREN_rxBufferLoopDetect = 0u;
 675              		.loc 1 560 0
 676 0058 124B     		ldr	r3, .L41+12
 677 005a 0022     		movs	r2, #0
 678 005c 1A70     		strb	r2, [r3]
 558:Generated_Source\PSoC5/SIREN.c ****             {
 679              		.loc 1 558 0
 680 005e 11E0     		b	.L39
 681              	.L36:
 561:Generated_Source\PSoC5/SIREN.c ****                 #if( (SIREN_RX_INTERRUPT_ENABLED) && (SIREN_FLOW_CONTROL != 0u) )
 562:Generated_Source\PSoC5/SIREN.c ****                     /* When Hardware Flow Control selected - return RX mask */
 563:Generated_Source\PSoC5/SIREN.c ****                     #if( SIREN_HD_ENABLED )
 564:Generated_Source\PSoC5/SIREN.c ****                         if((SIREN_CONTROL_REG & SIREN_CTRL_HD_SEND) == 0u)
 565:Generated_Source\PSoC5/SIREN.c ****                         {   /* In Half duplex mode return RX mask only if
 566:Generated_Source\PSoC5/SIREN.c ****                             *  RX configuration set, otherwise
 567:Generated_Source\PSoC5/SIREN.c ****                             *  mask will be returned in LoadRxConfig() API.
 568:Generated_Source\PSoC5/SIREN.c ****                             */
 569:Generated_Source\PSoC5/SIREN.c ****                             SIREN_RXSTATUS_MASK_REG |= SIREN_RX_STS_FIFO_NOTEMPTY;
 570:Generated_Source\PSoC5/SIREN.c ****                         }
 571:Generated_Source\PSoC5/SIREN.c ****                     #else
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 23


 572:Generated_Source\PSoC5/SIREN.c ****                         SIREN_RXSTATUS_MASK_REG |= SIREN_RX_STS_FIFO_NOTEMPTY;
 573:Generated_Source\PSoC5/SIREN.c ****                     #endif /* end SIREN_HD_ENABLED */
 574:Generated_Source\PSoC5/SIREN.c ****                 #endif /* SIREN_RX_INTERRUPT_ENABLED and Hardware flow control*/
 575:Generated_Source\PSoC5/SIREN.c ****             }
 576:Generated_Source\PSoC5/SIREN.c **** 
 577:Generated_Source\PSoC5/SIREN.c ****         }
 578:Generated_Source\PSoC5/SIREN.c ****         else
 579:Generated_Source\PSoC5/SIREN.c ****         {   rxStatus = SIREN_RXSTATUS_REG;
 682              		.loc 1 579 0
 683 0060 124B     		ldr	r3, .L41+20
 684 0062 1B78     		ldrb	r3, [r3]
 685 0064 7B70     		strb	r3, [r7, #1]
 580:Generated_Source\PSoC5/SIREN.c ****             if((rxStatus & SIREN_RX_STS_FIFO_NOTEMPTY) != 0u)
 686              		.loc 1 580 0
 687 0066 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 688 0068 03F02003 		and	r3, r3, #32
 689 006c 002B     		cmp	r3, #0
 690 006e 09D0     		beq	.L39
 581:Generated_Source\PSoC5/SIREN.c ****             {   /* Read received data from FIFO */
 582:Generated_Source\PSoC5/SIREN.c ****                 rxData = SIREN_RXDATA_REG;
 691              		.loc 1 582 0
 692 0070 0F4B     		ldr	r3, .L41+24
 693 0072 1B78     		ldrb	r3, [r3]
 694 0074 FB71     		strb	r3, [r7, #7]
 583:Generated_Source\PSoC5/SIREN.c ****                 /*Check status on error*/
 584:Generated_Source\PSoC5/SIREN.c ****                 if((rxStatus & (SIREN_RX_STS_BREAK | SIREN_RX_STS_PAR_ERROR |
 585:Generated_Source\PSoC5/SIREN.c ****                                 SIREN_RX_STS_STOP_ERROR | SIREN_RX_STS_OVERRUN)) != 0u)
 695              		.loc 1 585 0
 696 0076 7B78     		ldrb	r3, [r7, #1]	@ zero_extendqisi2
 697 0078 03F01E03 		and	r3, r3, #30
 584:Generated_Source\PSoC5/SIREN.c ****                                 SIREN_RX_STS_STOP_ERROR | SIREN_RX_STS_OVERRUN)) != 0u)
 698              		.loc 1 584 0
 699 007c 002B     		cmp	r3, #0
 700 007e 01D0     		beq	.L39
 586:Generated_Source\PSoC5/SIREN.c ****                 {
 587:Generated_Source\PSoC5/SIREN.c ****                     rxData = 0u;
 701              		.loc 1 587 0
 702 0080 0023     		movs	r3, #0
 703 0082 FB71     		strb	r3, [r7, #7]
 704              	.L39:
 588:Generated_Source\PSoC5/SIREN.c ****                 }
 589:Generated_Source\PSoC5/SIREN.c ****             }
 590:Generated_Source\PSoC5/SIREN.c ****         }
 591:Generated_Source\PSoC5/SIREN.c **** 
 592:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableRxInt();
 705              		.loc 1 592 0
 706 0084 0B4B     		ldr	r3, .L41+28
 707 0086 4022     		movs	r2, #64
 708 0088 1A60     		str	r2, [r3]
 593:Generated_Source\PSoC5/SIREN.c **** 
 594:Generated_Source\PSoC5/SIREN.c ****     #else
 595:Generated_Source\PSoC5/SIREN.c **** 
 596:Generated_Source\PSoC5/SIREN.c ****         rxStatus =SIREN_RXSTATUS_REG;
 597:Generated_Source\PSoC5/SIREN.c ****         if((rxStatus & SIREN_RX_STS_FIFO_NOTEMPTY) != 0u)
 598:Generated_Source\PSoC5/SIREN.c ****         {
 599:Generated_Source\PSoC5/SIREN.c ****             /* Read received data from FIFO */
 600:Generated_Source\PSoC5/SIREN.c ****             rxData = SIREN_RXDATA_REG;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 24


 601:Generated_Source\PSoC5/SIREN.c **** 
 602:Generated_Source\PSoC5/SIREN.c ****             /*Check status on error*/
 603:Generated_Source\PSoC5/SIREN.c ****             if((rxStatus & (SIREN_RX_STS_BREAK | SIREN_RX_STS_PAR_ERROR |
 604:Generated_Source\PSoC5/SIREN.c ****                             SIREN_RX_STS_STOP_ERROR | SIREN_RX_STS_OVERRUN)) != 0u)
 605:Generated_Source\PSoC5/SIREN.c ****             {
 606:Generated_Source\PSoC5/SIREN.c ****                 rxData = 0u;
 607:Generated_Source\PSoC5/SIREN.c ****             }
 608:Generated_Source\PSoC5/SIREN.c ****         }
 609:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 610:Generated_Source\PSoC5/SIREN.c **** 
 611:Generated_Source\PSoC5/SIREN.c ****         return(rxData);
 709              		.loc 1 611 0
 710 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 612:Generated_Source\PSoC5/SIREN.c ****     }
 711              		.loc 1 612 0
 712 008c 1846     		mov	r0, r3
 713 008e 0C37     		adds	r7, r7, #12
 714              		.cfi_def_cfa_offset 4
 715 0090 BD46     		mov	sp, r7
 716              		.cfi_def_cfa_register 13
 717              		@ sp needed
 718 0092 80BC     		pop	{r7}
 719              		.cfi_restore 7
 720              		.cfi_def_cfa_offset 0
 721 0094 7047     		bx	lr
 722              	.L42:
 723 0096 00BF     		.align	2
 724              	.L41:
 725 0098 80E100E0 		.word	-536813184
 726 009c 00000000 		.word	SIREN_rxBufferRead
 727 00a0 00000000 		.word	SIREN_rxBufferWrite
 728 00a4 00000000 		.word	SIREN_rxBufferLoopDetect
 729 00a8 00000000 		.word	SIREN_rxBuffer
 730 00ac 6B650040 		.word	1073767787
 731 00b0 4B650040 		.word	1073767755
 732 00b4 00E100E0 		.word	-536813312
 733              		.cfi_endproc
 734              	.LFE9:
 735              		.size	SIREN_GetChar, .-SIREN_GetChar
 736              		.section	.text.SIREN_GetByte,"ax",%progbits
 737              		.align	2
 738              		.global	SIREN_GetByte
 739              		.thumb
 740              		.thumb_func
 741              		.type	SIREN_GetByte, %function
 742              	SIREN_GetByte:
 743              	.LFB10:
 613:Generated_Source\PSoC5/SIREN.c **** 
 614:Generated_Source\PSoC5/SIREN.c **** 
 615:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 616:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_GetByte
 617:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 618:Generated_Source\PSoC5/SIREN.c ****     *
 619:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 620:Generated_Source\PSoC5/SIREN.c ****     *  Reads UART RX buffer immediately, returns received character and error
 621:Generated_Source\PSoC5/SIREN.c ****     *  condition.
 622:Generated_Source\PSoC5/SIREN.c ****     *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 25


 623:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 624:Generated_Source\PSoC5/SIREN.c ****     *  None.
 625:Generated_Source\PSoC5/SIREN.c ****     *
 626:Generated_Source\PSoC5/SIREN.c ****     * Return:
 627:Generated_Source\PSoC5/SIREN.c ****     *  MSB contains status and LSB contains UART RX data. If the MSB is nonzero,
 628:Generated_Source\PSoC5/SIREN.c ****     *  an error has occurred.
 629:Generated_Source\PSoC5/SIREN.c ****     *
 630:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 631:Generated_Source\PSoC5/SIREN.c ****     *  No.
 632:Generated_Source\PSoC5/SIREN.c ****     *
 633:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 634:Generated_Source\PSoC5/SIREN.c ****     uint16 SIREN_GetByte(void) 
 635:Generated_Source\PSoC5/SIREN.c ****     {
 744              		.loc 1 635 0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 8
 747              		@ frame_needed = 1, uses_anonymous_args = 0
 748 0000 90B5     		push	{r4, r7, lr}
 749              		.cfi_def_cfa_offset 12
 750              		.cfi_offset 4, -12
 751              		.cfi_offset 7, -8
 752              		.cfi_offset 14, -4
 753 0002 83B0     		sub	sp, sp, #12
 754              		.cfi_def_cfa_offset 24
 755 0004 00AF     		add	r7, sp, #0
 756              		.cfi_def_cfa_register 7
 636:Generated_Source\PSoC5/SIREN.c ****         
 637:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 638:Generated_Source\PSoC5/SIREN.c ****         uint16 locErrorStatus;
 639:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt */
 640:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableRxInt();
 757              		.loc 1 640 0
 758 0006 0C4B     		ldr	r3, .L45
 759 0008 4022     		movs	r2, #64
 760 000a 1A60     		str	r2, [r3]
 641:Generated_Source\PSoC5/SIREN.c ****         locErrorStatus = (uint16)SIREN_errorStatus;
 761              		.loc 1 641 0
 762 000c 0B4B     		ldr	r3, .L45+4
 763 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 764 0010 FB80     		strh	r3, [r7, #6]	@ movhi
 642:Generated_Source\PSoC5/SIREN.c ****         SIREN_errorStatus = 0u;
 765              		.loc 1 642 0
 766 0012 0A4B     		ldr	r3, .L45+4
 767 0014 0022     		movs	r2, #0
 768 0016 1A70     		strb	r2, [r3]
 643:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableRxInt();
 769              		.loc 1 643 0
 770 0018 094B     		ldr	r3, .L45+8
 771 001a 4022     		movs	r2, #64
 772 001c 1A60     		str	r2, [r3]
 644:Generated_Source\PSoC5/SIREN.c ****         return ( (uint16)(locErrorStatus << 8u) | SIREN_ReadRxData() );
 773              		.loc 1 644 0
 774 001e FB88     		ldrh	r3, [r7, #6]	@ movhi
 775 0020 1B02     		lsls	r3, r3, #8
 776 0022 9CB2     		uxth	r4, r3
 777 0024 FFF7FEFF 		bl	SIREN_ReadRxData
 778 0028 0346     		mov	r3, r0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 26


 779 002a 9BB2     		uxth	r3, r3
 780 002c 2343     		orrs	r3, r3, r4
 781 002e 9BB2     		uxth	r3, r3
 645:Generated_Source\PSoC5/SIREN.c ****     #else
 646:Generated_Source\PSoC5/SIREN.c ****         return ( ((uint16)SIREN_ReadRxStatus() << 8u) | SIREN_ReadRxData() );
 647:Generated_Source\PSoC5/SIREN.c ****     #endif /* SIREN_RX_INTERRUPT_ENABLED */
 648:Generated_Source\PSoC5/SIREN.c ****         
 649:Generated_Source\PSoC5/SIREN.c ****     }
 782              		.loc 1 649 0
 783 0030 1846     		mov	r0, r3
 784 0032 0C37     		adds	r7, r7, #12
 785              		.cfi_def_cfa_offset 12
 786 0034 BD46     		mov	sp, r7
 787              		.cfi_def_cfa_register 13
 788              		@ sp needed
 789 0036 90BD     		pop	{r4, r7, pc}
 790              	.L46:
 791              		.align	2
 792              	.L45:
 793 0038 80E100E0 		.word	-536813184
 794 003c 00000000 		.word	SIREN_errorStatus
 795 0040 00E100E0 		.word	-536813312
 796              		.cfi_endproc
 797              	.LFE10:
 798              		.size	SIREN_GetByte, .-SIREN_GetByte
 799              		.section	.text.SIREN_GetRxBufferSize,"ax",%progbits
 800              		.align	2
 801              		.global	SIREN_GetRxBufferSize
 802              		.thumb
 803              		.thumb_func
 804              		.type	SIREN_GetRxBufferSize, %function
 805              	SIREN_GetRxBufferSize:
 806              	.LFB11:
 650:Generated_Source\PSoC5/SIREN.c **** 
 651:Generated_Source\PSoC5/SIREN.c **** 
 652:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 653:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_GetRxBufferSize
 654:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 655:Generated_Source\PSoC5/SIREN.c ****     *
 656:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 657:Generated_Source\PSoC5/SIREN.c ****     *  Returns the number of received bytes available in the RX buffer.
 658:Generated_Source\PSoC5/SIREN.c ****     *  * RX software buffer is disabled (RX Buffer Size parameter is equal to 4): 
 659:Generated_Source\PSoC5/SIREN.c ****     *    returns 0 for empty RX FIFO or 1 for not empty RX FIFO.
 660:Generated_Source\PSoC5/SIREN.c ****     *  * RX software buffer is enabled: returns the number of bytes available in 
 661:Generated_Source\PSoC5/SIREN.c ****     *    the RX software buffer. Bytes available in the RX FIFO do not take to 
 662:Generated_Source\PSoC5/SIREN.c ****     *    account.
 663:Generated_Source\PSoC5/SIREN.c ****     *
 664:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 665:Generated_Source\PSoC5/SIREN.c ****     *  None.
 666:Generated_Source\PSoC5/SIREN.c ****     *
 667:Generated_Source\PSoC5/SIREN.c ****     * Return:
 668:Generated_Source\PSoC5/SIREN.c ****     *  uint16: Number of bytes in the RX buffer. 
 669:Generated_Source\PSoC5/SIREN.c ****     *    Return value type depends on RX Buffer Size parameter.
 670:Generated_Source\PSoC5/SIREN.c ****     *
 671:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 672:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferWrite - used to calculate left bytes.
 673:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferRead - used to calculate left bytes.
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 27


 674:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferLoopDetect - checked to decide left bytes amount.
 675:Generated_Source\PSoC5/SIREN.c ****     *
 676:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 677:Generated_Source\PSoC5/SIREN.c ****     *  No.
 678:Generated_Source\PSoC5/SIREN.c ****     *
 679:Generated_Source\PSoC5/SIREN.c ****     * Theory:
 680:Generated_Source\PSoC5/SIREN.c ****     *  Allows the user to find out how full the RX Buffer is.
 681:Generated_Source\PSoC5/SIREN.c ****     *
 682:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 683:Generated_Source\PSoC5/SIREN.c ****     uint16 SIREN_GetRxBufferSize(void)
 684:Generated_Source\PSoC5/SIREN.c ****                                                             
 685:Generated_Source\PSoC5/SIREN.c ****     {
 807              		.loc 1 685 0
 808              		.cfi_startproc
 809              		@ args = 0, pretend = 0, frame = 8
 810              		@ frame_needed = 1, uses_anonymous_args = 0
 811              		@ link register save eliminated.
 812 0000 80B4     		push	{r7}
 813              		.cfi_def_cfa_offset 4
 814              		.cfi_offset 7, -4
 815 0002 83B0     		sub	sp, sp, #12
 816              		.cfi_def_cfa_offset 16
 817 0004 00AF     		add	r7, sp, #0
 818              		.cfi_def_cfa_register 7
 686:Generated_Source\PSoC5/SIREN.c ****         uint16 size;
 687:Generated_Source\PSoC5/SIREN.c **** 
 688:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 689:Generated_Source\PSoC5/SIREN.c **** 
 690:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt */
 691:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableRxInt();
 819              		.loc 1 691 0
 820 0006 1E4B     		ldr	r3, .L54
 821 0008 4022     		movs	r2, #64
 822 000a 1A60     		str	r2, [r3]
 692:Generated_Source\PSoC5/SIREN.c **** 
 693:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_rxBufferRead == SIREN_rxBufferWrite)
 823              		.loc 1 693 0
 824 000c 1D4B     		ldr	r3, .L54+4
 825 000e 1B88     		ldrh	r3, [r3]	@ movhi
 826 0010 9AB2     		uxth	r2, r3
 827 0012 1D4B     		ldr	r3, .L54+8
 828 0014 1B88     		ldrh	r3, [r3]	@ movhi
 829 0016 9BB2     		uxth	r3, r3
 830 0018 9A42     		cmp	r2, r3
 831 001a 0BD1     		bne	.L48
 694:Generated_Source\PSoC5/SIREN.c ****         {
 695:Generated_Source\PSoC5/SIREN.c ****             if(SIREN_rxBufferLoopDetect != 0u)
 832              		.loc 1 695 0
 833 001c 1B4B     		ldr	r3, .L54+12
 834 001e 1B78     		ldrb	r3, [r3]
 835 0020 DBB2     		uxtb	r3, r3
 836 0022 002B     		cmp	r3, #0
 837 0024 03D0     		beq	.L49
 696:Generated_Source\PSoC5/SIREN.c ****             {
 697:Generated_Source\PSoC5/SIREN.c ****                 size = SIREN_RX_BUFFER_SIZE;
 838              		.loc 1 697 0
 839 0026 4FF40073 		mov	r3, #512
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 28


 840 002a FB80     		strh	r3, [r7, #6]	@ movhi
 841 002c 1EE0     		b	.L51
 842              	.L49:
 698:Generated_Source\PSoC5/SIREN.c ****             }
 699:Generated_Source\PSoC5/SIREN.c ****             else
 700:Generated_Source\PSoC5/SIREN.c ****             {
 701:Generated_Source\PSoC5/SIREN.c ****                 size = 0u;
 843              		.loc 1 701 0
 844 002e 0023     		movs	r3, #0
 845 0030 FB80     		strh	r3, [r7, #6]	@ movhi
 846 0032 1BE0     		b	.L51
 847              	.L48:
 702:Generated_Source\PSoC5/SIREN.c ****             }
 703:Generated_Source\PSoC5/SIREN.c ****         }
 704:Generated_Source\PSoC5/SIREN.c ****         else if(SIREN_rxBufferRead < SIREN_rxBufferWrite)
 848              		.loc 1 704 0
 849 0034 134B     		ldr	r3, .L54+4
 850 0036 1B88     		ldrh	r3, [r3]	@ movhi
 851 0038 9AB2     		uxth	r2, r3
 852 003a 134B     		ldr	r3, .L54+8
 853 003c 1B88     		ldrh	r3, [r3]	@ movhi
 854 003e 9BB2     		uxth	r3, r3
 855 0040 9A42     		cmp	r2, r3
 856 0042 08D2     		bcs	.L52
 705:Generated_Source\PSoC5/SIREN.c ****         {
 706:Generated_Source\PSoC5/SIREN.c ****             size = (SIREN_rxBufferWrite - SIREN_rxBufferRead);
 857              		.loc 1 706 0
 858 0044 104B     		ldr	r3, .L54+8
 859 0046 1B88     		ldrh	r3, [r3]	@ movhi
 860 0048 9AB2     		uxth	r2, r3
 861 004a 0E4B     		ldr	r3, .L54+4
 862 004c 1B88     		ldrh	r3, [r3]	@ movhi
 863 004e 9BB2     		uxth	r3, r3
 864 0050 D31A     		subs	r3, r2, r3
 865 0052 FB80     		strh	r3, [r7, #6]	@ movhi
 866 0054 0AE0     		b	.L51
 867              	.L52:
 707:Generated_Source\PSoC5/SIREN.c ****         }
 708:Generated_Source\PSoC5/SIREN.c ****         else
 709:Generated_Source\PSoC5/SIREN.c ****         {
 710:Generated_Source\PSoC5/SIREN.c ****             size = (SIREN_RX_BUFFER_SIZE - SIREN_rxBufferRead) + SIREN_rxBufferWrite;
 868              		.loc 1 710 0
 869 0056 0C4B     		ldr	r3, .L54+8
 870 0058 1B88     		ldrh	r3, [r3]	@ movhi
 871 005a 9AB2     		uxth	r2, r3
 872 005c 094B     		ldr	r3, .L54+4
 873 005e 1B88     		ldrh	r3, [r3]	@ movhi
 874 0060 9BB2     		uxth	r3, r3
 875 0062 D31A     		subs	r3, r2, r3
 876 0064 9BB2     		uxth	r3, r3
 877 0066 03F50073 		add	r3, r3, #512
 878 006a FB80     		strh	r3, [r7, #6]	@ movhi
 879              	.L51:
 711:Generated_Source\PSoC5/SIREN.c ****         }
 712:Generated_Source\PSoC5/SIREN.c **** 
 713:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableRxInt();
 880              		.loc 1 713 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 29


 881 006c 084B     		ldr	r3, .L54+16
 882 006e 4022     		movs	r2, #64
 883 0070 1A60     		str	r2, [r3]
 714:Generated_Source\PSoC5/SIREN.c **** 
 715:Generated_Source\PSoC5/SIREN.c ****     #else
 716:Generated_Source\PSoC5/SIREN.c **** 
 717:Generated_Source\PSoC5/SIREN.c ****         /* We can only know if there is data in the fifo. */
 718:Generated_Source\PSoC5/SIREN.c ****         size = ((SIREN_RXSTATUS_REG & SIREN_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 719:Generated_Source\PSoC5/SIREN.c **** 
 720:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 721:Generated_Source\PSoC5/SIREN.c **** 
 722:Generated_Source\PSoC5/SIREN.c ****         return(size);
 884              		.loc 1 722 0
 885 0072 FB88     		ldrh	r3, [r7, #6]
 723:Generated_Source\PSoC5/SIREN.c ****     }
 886              		.loc 1 723 0
 887 0074 1846     		mov	r0, r3
 888 0076 0C37     		adds	r7, r7, #12
 889              		.cfi_def_cfa_offset 4
 890 0078 BD46     		mov	sp, r7
 891              		.cfi_def_cfa_register 13
 892              		@ sp needed
 893 007a 80BC     		pop	{r7}
 894              		.cfi_restore 7
 895              		.cfi_def_cfa_offset 0
 896 007c 7047     		bx	lr
 897              	.L55:
 898 007e 00BF     		.align	2
 899              	.L54:
 900 0080 80E100E0 		.word	-536813184
 901 0084 00000000 		.word	SIREN_rxBufferRead
 902 0088 00000000 		.word	SIREN_rxBufferWrite
 903 008c 00000000 		.word	SIREN_rxBufferLoopDetect
 904 0090 00E100E0 		.word	-536813312
 905              		.cfi_endproc
 906              	.LFE11:
 907              		.size	SIREN_GetRxBufferSize, .-SIREN_GetRxBufferSize
 908              		.section	.text.SIREN_ClearRxBuffer,"ax",%progbits
 909              		.align	2
 910              		.global	SIREN_ClearRxBuffer
 911              		.thumb
 912              		.thumb_func
 913              		.type	SIREN_ClearRxBuffer, %function
 914              	SIREN_ClearRxBuffer:
 915              	.LFB12:
 724:Generated_Source\PSoC5/SIREN.c **** 
 725:Generated_Source\PSoC5/SIREN.c **** 
 726:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 727:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_ClearRxBuffer
 728:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 729:Generated_Source\PSoC5/SIREN.c ****     *
 730:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 731:Generated_Source\PSoC5/SIREN.c ****     *  Clears the receiver memory buffer and hardware RX FIFO of all received data.
 732:Generated_Source\PSoC5/SIREN.c ****     *
 733:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 734:Generated_Source\PSoC5/SIREN.c ****     *  None.
 735:Generated_Source\PSoC5/SIREN.c ****     *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 30


 736:Generated_Source\PSoC5/SIREN.c ****     * Return:
 737:Generated_Source\PSoC5/SIREN.c ****     *  None.
 738:Generated_Source\PSoC5/SIREN.c ****     *
 739:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 740:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferWrite - cleared to zero.
 741:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferRead - cleared to zero.
 742:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferLoopDetect - cleared to zero.
 743:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxBufferOverflow - cleared to zero.
 744:Generated_Source\PSoC5/SIREN.c ****     *
 745:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 746:Generated_Source\PSoC5/SIREN.c ****     *  No.
 747:Generated_Source\PSoC5/SIREN.c ****     *
 748:Generated_Source\PSoC5/SIREN.c ****     * Theory:
 749:Generated_Source\PSoC5/SIREN.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 750:Generated_Source\PSoC5/SIREN.c ****     *  read and writing will resume at address 0 overwriting any data that may
 751:Generated_Source\PSoC5/SIREN.c ****     *  have remained in the RAM.
 752:Generated_Source\PSoC5/SIREN.c ****     *
 753:Generated_Source\PSoC5/SIREN.c ****     * Side Effects:
 754:Generated_Source\PSoC5/SIREN.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 755:Generated_Source\PSoC5/SIREN.c ****     *
 756:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 757:Generated_Source\PSoC5/SIREN.c ****     void SIREN_ClearRxBuffer(void) 
 758:Generated_Source\PSoC5/SIREN.c ****     {
 916              		.loc 1 758 0
 917              		.cfi_startproc
 918              		@ args = 0, pretend = 0, frame = 8
 919              		@ frame_needed = 1, uses_anonymous_args = 0
 920 0000 80B5     		push	{r7, lr}
 921              		.cfi_def_cfa_offset 8
 922              		.cfi_offset 7, -8
 923              		.cfi_offset 14, -4
 924 0002 82B0     		sub	sp, sp, #8
 925              		.cfi_def_cfa_offset 16
 926 0004 00AF     		add	r7, sp, #0
 927              		.cfi_def_cfa_register 7
 759:Generated_Source\PSoC5/SIREN.c ****         uint8 enableInterrupts;
 760:Generated_Source\PSoC5/SIREN.c **** 
 761:Generated_Source\PSoC5/SIREN.c ****         /* Clear the HW FIFO */
 762:Generated_Source\PSoC5/SIREN.c ****         enableInterrupts = CyEnterCriticalSection();
 928              		.loc 1 762 0
 929 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 930 000a 0346     		mov	r3, r0
 931 000c FB71     		strb	r3, [r7, #7]
 763:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXDATA_AUX_CTL_REG |= (uint8)  SIREN_RX_FIFO_CLR;
 932              		.loc 1 763 0
 933 000e 154A     		ldr	r2, .L57
 934 0010 144B     		ldr	r3, .L57
 935 0012 1B78     		ldrb	r3, [r3]
 936 0014 DBB2     		uxtb	r3, r3
 937 0016 43F00103 		orr	r3, r3, #1
 938 001a DBB2     		uxtb	r3, r3
 939 001c 1370     		strb	r3, [r2]
 764:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXDATA_AUX_CTL_REG &= (uint8) ~SIREN_RX_FIFO_CLR;
 940              		.loc 1 764 0
 941 001e 114A     		ldr	r2, .L57
 942 0020 104B     		ldr	r3, .L57
 943 0022 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 31


 944 0024 DBB2     		uxtb	r3, r3
 945 0026 23F00103 		bic	r3, r3, #1
 946 002a DBB2     		uxtb	r3, r3
 947 002c 1370     		strb	r3, [r2]
 765:Generated_Source\PSoC5/SIREN.c ****         CyExitCriticalSection(enableInterrupts);
 948              		.loc 1 765 0
 949 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 950 0030 1846     		mov	r0, r3
 951 0032 FFF7FEFF 		bl	CyExitCriticalSection
 766:Generated_Source\PSoC5/SIREN.c **** 
 767:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_RX_INTERRUPT_ENABLED)
 768:Generated_Source\PSoC5/SIREN.c **** 
 769:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt. */
 770:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableRxInt();
 952              		.loc 1 770 0
 953 0036 0C4B     		ldr	r3, .L57+4
 954 0038 4022     		movs	r2, #64
 955 003a 1A60     		str	r2, [r3]
 771:Generated_Source\PSoC5/SIREN.c **** 
 772:Generated_Source\PSoC5/SIREN.c ****         SIREN_rxBufferRead = 0u;
 956              		.loc 1 772 0
 957 003c 0B4B     		ldr	r3, .L57+8
 958 003e 0022     		movs	r2, #0
 959 0040 1A80     		strh	r2, [r3]	@ movhi
 773:Generated_Source\PSoC5/SIREN.c ****         SIREN_rxBufferWrite = 0u;
 960              		.loc 1 773 0
 961 0042 0B4B     		ldr	r3, .L57+12
 962 0044 0022     		movs	r2, #0
 963 0046 1A80     		strh	r2, [r3]	@ movhi
 774:Generated_Source\PSoC5/SIREN.c ****         SIREN_rxBufferLoopDetect = 0u;
 964              		.loc 1 774 0
 965 0048 0A4B     		ldr	r3, .L57+16
 966 004a 0022     		movs	r2, #0
 967 004c 1A70     		strb	r2, [r3]
 775:Generated_Source\PSoC5/SIREN.c ****         SIREN_rxBufferOverflow = 0u;
 968              		.loc 1 775 0
 969 004e 0A4B     		ldr	r3, .L57+20
 970 0050 0022     		movs	r2, #0
 971 0052 1A70     		strb	r2, [r3]
 776:Generated_Source\PSoC5/SIREN.c **** 
 777:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableRxInt();
 972              		.loc 1 777 0
 973 0054 094B     		ldr	r3, .L57+24
 974 0056 4022     		movs	r2, #64
 975 0058 1A60     		str	r2, [r3]
 778:Generated_Source\PSoC5/SIREN.c **** 
 779:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_RX_INTERRUPT_ENABLED) */
 780:Generated_Source\PSoC5/SIREN.c **** 
 781:Generated_Source\PSoC5/SIREN.c ****     }
 976              		.loc 1 781 0
 977 005a 00BF     		nop
 978 005c 0837     		adds	r7, r7, #8
 979              		.cfi_def_cfa_offset 8
 980 005e BD46     		mov	sp, r7
 981              		.cfi_def_cfa_register 13
 982              		@ sp needed
 983 0060 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 32


 984              	.L58:
 985 0062 00BF     		.align	2
 986              	.L57:
 987 0064 9B650040 		.word	1073767835
 988 0068 80E100E0 		.word	-536813184
 989 006c 00000000 		.word	SIREN_rxBufferRead
 990 0070 00000000 		.word	SIREN_rxBufferWrite
 991 0074 00000000 		.word	SIREN_rxBufferLoopDetect
 992 0078 00000000 		.word	SIREN_rxBufferOverflow
 993 007c 00E100E0 		.word	-536813312
 994              		.cfi_endproc
 995              	.LFE12:
 996              		.size	SIREN_ClearRxBuffer, .-SIREN_ClearRxBuffer
 997              		.section	.text.SIREN_SetRxAddressMode,"ax",%progbits
 998              		.align	2
 999              		.global	SIREN_SetRxAddressMode
 1000              		.thumb
 1001              		.thumb_func
 1002              		.type	SIREN_SetRxAddressMode, %function
 1003              	SIREN_SetRxAddressMode:
 1004              	.LFB13:
 782:Generated_Source\PSoC5/SIREN.c **** 
 783:Generated_Source\PSoC5/SIREN.c **** 
 784:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 785:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetRxAddressMode
 786:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 787:Generated_Source\PSoC5/SIREN.c ****     *
 788:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 789:Generated_Source\PSoC5/SIREN.c ****     *  Sets the software controlled Addressing mode used by the RX portion of the
 790:Generated_Source\PSoC5/SIREN.c ****     *  UART.
 791:Generated_Source\PSoC5/SIREN.c ****     *
 792:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 793:Generated_Source\PSoC5/SIREN.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 794:Generated_Source\PSoC5/SIREN.c ****     *  SIREN__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 795:Generated_Source\PSoC5/SIREN.c ****     *                                               detection
 796:Generated_Source\PSoC5/SIREN.c ****     *  SIREN__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 797:Generated_Source\PSoC5/SIREN.c ****     *                                               address detection
 798:Generated_Source\PSoC5/SIREN.c ****     *  SIREN__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 799:Generated_Source\PSoC5/SIREN.c ****     *                                               detection
 800:Generated_Source\PSoC5/SIREN.c ****     *  SIREN__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 801:Generated_Source\PSoC5/SIREN.c ****     *                                               address detection
 802:Generated_Source\PSoC5/SIREN.c ****     *  SIREN__B_UART__AM_NONE - No address detection
 803:Generated_Source\PSoC5/SIREN.c ****     *
 804:Generated_Source\PSoC5/SIREN.c ****     * Return:
 805:Generated_Source\PSoC5/SIREN.c ****     *  None.
 806:Generated_Source\PSoC5/SIREN.c ****     *
 807:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 808:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxAddressMode - the parameter stored in this variable for
 809:Generated_Source\PSoC5/SIREN.c ****     *   the farther usage in RX ISR.
 810:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_rxAddressDetected - set to initial state (0).
 811:Generated_Source\PSoC5/SIREN.c ****     *
 812:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 813:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetRxAddressMode(uint8 addressMode)
 814:Generated_Source\PSoC5/SIREN.c ****                                                         
 815:Generated_Source\PSoC5/SIREN.c ****     {
 1005              		.loc 1 815 0
 1006              		.cfi_startproc
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 33


 1007              		@ args = 0, pretend = 0, frame = 8
 1008              		@ frame_needed = 1, uses_anonymous_args = 0
 1009              		@ link register save eliminated.
 1010 0000 80B4     		push	{r7}
 1011              		.cfi_def_cfa_offset 4
 1012              		.cfi_offset 7, -4
 1013 0002 83B0     		sub	sp, sp, #12
 1014              		.cfi_def_cfa_offset 16
 1015 0004 00AF     		add	r7, sp, #0
 1016              		.cfi_def_cfa_register 7
 1017 0006 0346     		mov	r3, r0
 1018 0008 FB71     		strb	r3, [r7, #7]
 816:Generated_Source\PSoC5/SIREN.c ****         #if(SIREN_RXHW_ADDRESS_ENABLED)
 817:Generated_Source\PSoC5/SIREN.c ****             #if(SIREN_CONTROL_REG_REMOVED)
 818:Generated_Source\PSoC5/SIREN.c ****                 if(0u != addressMode)
 819:Generated_Source\PSoC5/SIREN.c ****                 {
 820:Generated_Source\PSoC5/SIREN.c ****                     /* Suppress compiler warning */
 821:Generated_Source\PSoC5/SIREN.c ****                 }
 822:Generated_Source\PSoC5/SIREN.c ****             #else /* SIREN_CONTROL_REG_REMOVED */
 823:Generated_Source\PSoC5/SIREN.c ****                 uint8 tmpCtrl;
 824:Generated_Source\PSoC5/SIREN.c ****                 tmpCtrl = SIREN_CONTROL_REG & (uint8)~SIREN_CTRL_RXADDR_MODE_MASK;
 825:Generated_Source\PSoC5/SIREN.c ****                 tmpCtrl |= (uint8)(addressMode << SIREN_CTRL_RXADDR_MODE0_SHIFT);
 826:Generated_Source\PSoC5/SIREN.c ****                 SIREN_CONTROL_REG = tmpCtrl;
 827:Generated_Source\PSoC5/SIREN.c **** 
 828:Generated_Source\PSoC5/SIREN.c ****                 #if(SIREN_RX_INTERRUPT_ENABLED && \
 829:Generated_Source\PSoC5/SIREN.c ****                    (SIREN_RXBUFFERSIZE > SIREN_FIFO_LENGTH) )
 830:Generated_Source\PSoC5/SIREN.c ****                     SIREN_rxAddressMode = addressMode;
 831:Generated_Source\PSoC5/SIREN.c ****                     SIREN_rxAddressDetected = 0u;
 832:Generated_Source\PSoC5/SIREN.c ****                 #endif /* End SIREN_RXBUFFERSIZE > SIREN_FIFO_LENGTH*/
 833:Generated_Source\PSoC5/SIREN.c ****             #endif /* End SIREN_CONTROL_REG_REMOVED */
 834:Generated_Source\PSoC5/SIREN.c ****         #else /* SIREN_RXHW_ADDRESS_ENABLED */
 835:Generated_Source\PSoC5/SIREN.c ****             if(0u != addressMode)
 836:Generated_Source\PSoC5/SIREN.c ****             {
 837:Generated_Source\PSoC5/SIREN.c ****                 /* Suppress compiler warning */
 838:Generated_Source\PSoC5/SIREN.c ****             }
 839:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_RXHW_ADDRESS_ENABLED */
 840:Generated_Source\PSoC5/SIREN.c ****     }
 1019              		.loc 1 840 0
 1020 000a 00BF     		nop
 1021 000c 0C37     		adds	r7, r7, #12
 1022              		.cfi_def_cfa_offset 4
 1023 000e BD46     		mov	sp, r7
 1024              		.cfi_def_cfa_register 13
 1025              		@ sp needed
 1026 0010 80BC     		pop	{r7}
 1027              		.cfi_restore 7
 1028              		.cfi_def_cfa_offset 0
 1029 0012 7047     		bx	lr
 1030              		.cfi_endproc
 1031              	.LFE13:
 1032              		.size	SIREN_SetRxAddressMode, .-SIREN_SetRxAddressMode
 1033              		.section	.text.SIREN_SetRxAddress1,"ax",%progbits
 1034              		.align	2
 1035              		.global	SIREN_SetRxAddress1
 1036              		.thumb
 1037              		.thumb_func
 1038              		.type	SIREN_SetRxAddress1, %function
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 34


 1039              	SIREN_SetRxAddress1:
 1040              	.LFB14:
 841:Generated_Source\PSoC5/SIREN.c **** 
 842:Generated_Source\PSoC5/SIREN.c **** 
 843:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 844:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetRxAddress1
 845:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 846:Generated_Source\PSoC5/SIREN.c ****     *
 847:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 848:Generated_Source\PSoC5/SIREN.c ****     *  Sets the first of two hardware-detectable receiver addresses.
 849:Generated_Source\PSoC5/SIREN.c ****     *
 850:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 851:Generated_Source\PSoC5/SIREN.c ****     *  address: Address #1 for hardware address detection.
 852:Generated_Source\PSoC5/SIREN.c ****     *
 853:Generated_Source\PSoC5/SIREN.c ****     * Return:
 854:Generated_Source\PSoC5/SIREN.c ****     *  None.
 855:Generated_Source\PSoC5/SIREN.c ****     *
 856:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 857:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetRxAddress1(uint8 address) 
 858:Generated_Source\PSoC5/SIREN.c ****     {
 1041              		.loc 1 858 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 8
 1044              		@ frame_needed = 1, uses_anonymous_args = 0
 1045              		@ link register save eliminated.
 1046 0000 80B4     		push	{r7}
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 7, -4
 1049 0002 83B0     		sub	sp, sp, #12
 1050              		.cfi_def_cfa_offset 16
 1051 0004 00AF     		add	r7, sp, #0
 1052              		.cfi_def_cfa_register 7
 1053 0006 0346     		mov	r3, r0
 1054 0008 FB71     		strb	r3, [r7, #7]
 859:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXADDRESS1_REG = address;
 1055              		.loc 1 859 0
 1056 000a 044A     		ldr	r2, .L61
 1057 000c FB79     		ldrb	r3, [r7, #7]
 1058 000e 1370     		strb	r3, [r2]
 860:Generated_Source\PSoC5/SIREN.c ****     }
 1059              		.loc 1 860 0
 1060 0010 00BF     		nop
 1061 0012 0C37     		adds	r7, r7, #12
 1062              		.cfi_def_cfa_offset 4
 1063 0014 BD46     		mov	sp, r7
 1064              		.cfi_def_cfa_register 13
 1065              		@ sp needed
 1066 0016 80BC     		pop	{r7}
 1067              		.cfi_restore 7
 1068              		.cfi_def_cfa_offset 0
 1069 0018 7047     		bx	lr
 1070              	.L62:
 1071 001a 00BF     		.align	2
 1072              	.L61:
 1073 001c 2B650040 		.word	1073767723
 1074              		.cfi_endproc
 1075              	.LFE14:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 35


 1076              		.size	SIREN_SetRxAddress1, .-SIREN_SetRxAddress1
 1077              		.section	.text.SIREN_SetRxAddress2,"ax",%progbits
 1078              		.align	2
 1079              		.global	SIREN_SetRxAddress2
 1080              		.thumb
 1081              		.thumb_func
 1082              		.type	SIREN_SetRxAddress2, %function
 1083              	SIREN_SetRxAddress2:
 1084              	.LFB15:
 861:Generated_Source\PSoC5/SIREN.c **** 
 862:Generated_Source\PSoC5/SIREN.c **** 
 863:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 864:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetRxAddress2
 865:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 866:Generated_Source\PSoC5/SIREN.c ****     *
 867:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 868:Generated_Source\PSoC5/SIREN.c ****     *  Sets the second of two hardware-detectable receiver addresses.
 869:Generated_Source\PSoC5/SIREN.c ****     *
 870:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 871:Generated_Source\PSoC5/SIREN.c ****     *  address: Address #2 for hardware address detection.
 872:Generated_Source\PSoC5/SIREN.c ****     *
 873:Generated_Source\PSoC5/SIREN.c ****     * Return:
 874:Generated_Source\PSoC5/SIREN.c ****     *  None.
 875:Generated_Source\PSoC5/SIREN.c ****     *
 876:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 877:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetRxAddress2(uint8 address) 
 878:Generated_Source\PSoC5/SIREN.c ****     {
 1085              		.loc 1 878 0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 8
 1088              		@ frame_needed = 1, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 1090 0000 80B4     		push	{r7}
 1091              		.cfi_def_cfa_offset 4
 1092              		.cfi_offset 7, -4
 1093 0002 83B0     		sub	sp, sp, #12
 1094              		.cfi_def_cfa_offset 16
 1095 0004 00AF     		add	r7, sp, #0
 1096              		.cfi_def_cfa_register 7
 1097 0006 0346     		mov	r3, r0
 1098 0008 FB71     		strb	r3, [r7, #7]
 879:Generated_Source\PSoC5/SIREN.c ****         SIREN_RXADDRESS2_REG = address;
 1099              		.loc 1 879 0
 1100 000a 044A     		ldr	r2, .L64
 1101 000c FB79     		ldrb	r3, [r7, #7]
 1102 000e 1370     		strb	r3, [r2]
 880:Generated_Source\PSoC5/SIREN.c ****     }
 1103              		.loc 1 880 0
 1104 0010 00BF     		nop
 1105 0012 0C37     		adds	r7, r7, #12
 1106              		.cfi_def_cfa_offset 4
 1107 0014 BD46     		mov	sp, r7
 1108              		.cfi_def_cfa_register 13
 1109              		@ sp needed
 1110 0016 80BC     		pop	{r7}
 1111              		.cfi_restore 7
 1112              		.cfi_def_cfa_offset 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 36


 1113 0018 7047     		bx	lr
 1114              	.L65:
 1115 001a 00BF     		.align	2
 1116              	.L64:
 1117 001c 3B650040 		.word	1073767739
 1118              		.cfi_endproc
 1119              	.LFE15:
 1120              		.size	SIREN_SetRxAddress2, .-SIREN_SetRxAddress2
 1121              		.section	.text.SIREN_SetTxInterruptMode,"ax",%progbits
 1122              		.align	2
 1123              		.global	SIREN_SetTxInterruptMode
 1124              		.thumb
 1125              		.thumb_func
 1126              		.type	SIREN_SetTxInterruptMode, %function
 1127              	SIREN_SetTxInterruptMode:
 1128              	.LFB16:
 881:Generated_Source\PSoC5/SIREN.c **** 
 882:Generated_Source\PSoC5/SIREN.c **** #endif  /* SIREN_RX_ENABLED || SIREN_HD_ENABLED*/
 883:Generated_Source\PSoC5/SIREN.c **** 
 884:Generated_Source\PSoC5/SIREN.c **** 
 885:Generated_Source\PSoC5/SIREN.c **** #if( (SIREN_TX_ENABLED) || (SIREN_HD_ENABLED) )
 886:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 887:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetTxInterruptMode
 888:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 889:Generated_Source\PSoC5/SIREN.c ****     *
 890:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 891:Generated_Source\PSoC5/SIREN.c ****     *  Configures the TX interrupt sources to be enabled, but does not enable the
 892:Generated_Source\PSoC5/SIREN.c ****     *  interrupt.
 893:Generated_Source\PSoC5/SIREN.c ****     *
 894:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 895:Generated_Source\PSoC5/SIREN.c ****     *  intSrc: Bit field containing the TX interrupt sources to enable
 896:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_TX_STS_COMPLETE        Interrupt on TX byte complete
 897:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_TX_STS_FIFO_EMPTY      Interrupt when TX FIFO is empty
 898:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_TX_STS_FIFO_FULL       Interrupt when TX FIFO is full
 899:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_TX_STS_FIFO_NOT_FULL   Interrupt when TX FIFO is not full
 900:Generated_Source\PSoC5/SIREN.c ****     *
 901:Generated_Source\PSoC5/SIREN.c ****     * Return:
 902:Generated_Source\PSoC5/SIREN.c ****     *  None.
 903:Generated_Source\PSoC5/SIREN.c ****     *
 904:Generated_Source\PSoC5/SIREN.c ****     * Theory:
 905:Generated_Source\PSoC5/SIREN.c ****     *  Enables the output of specific status bits to the interrupt controller
 906:Generated_Source\PSoC5/SIREN.c ****     *
 907:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 908:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetTxInterruptMode(uint8 intSrc) 
 909:Generated_Source\PSoC5/SIREN.c ****     {
 1129              		.loc 1 909 0
 1130              		.cfi_startproc
 1131              		@ args = 0, pretend = 0, frame = 8
 1132              		@ frame_needed = 1, uses_anonymous_args = 0
 1133              		@ link register save eliminated.
 1134 0000 80B4     		push	{r7}
 1135              		.cfi_def_cfa_offset 4
 1136              		.cfi_offset 7, -4
 1137 0002 83B0     		sub	sp, sp, #12
 1138              		.cfi_def_cfa_offset 16
 1139 0004 00AF     		add	r7, sp, #0
 1140              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 37


 1141 0006 0346     		mov	r3, r0
 1142 0008 FB71     		strb	r3, [r7, #7]
 910:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXSTATUS_MASK_REG = intSrc;
 1143              		.loc 1 910 0
 1144 000a 044A     		ldr	r2, .L67
 1145 000c FB79     		ldrb	r3, [r7, #7]
 1146 000e 1370     		strb	r3, [r2]
 911:Generated_Source\PSoC5/SIREN.c ****     }
 1147              		.loc 1 911 0
 1148 0010 00BF     		nop
 1149 0012 0C37     		adds	r7, r7, #12
 1150              		.cfi_def_cfa_offset 4
 1151 0014 BD46     		mov	sp, r7
 1152              		.cfi_def_cfa_register 13
 1153              		@ sp needed
 1154 0016 80BC     		pop	{r7}
 1155              		.cfi_restore 7
 1156              		.cfi_def_cfa_offset 0
 1157 0018 7047     		bx	lr
 1158              	.L68:
 1159 001a 00BF     		.align	2
 1160              	.L67:
 1161 001c 86650040 		.word	1073767814
 1162              		.cfi_endproc
 1163              	.LFE16:
 1164              		.size	SIREN_SetTxInterruptMode, .-SIREN_SetTxInterruptMode
 1165              		.section	.text.SIREN_WriteTxData,"ax",%progbits
 1166              		.align	2
 1167              		.global	SIREN_WriteTxData
 1168              		.thumb
 1169              		.thumb_func
 1170              		.type	SIREN_WriteTxData, %function
 1171              	SIREN_WriteTxData:
 1172              	.LFB17:
 912:Generated_Source\PSoC5/SIREN.c **** 
 913:Generated_Source\PSoC5/SIREN.c **** 
 914:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 915:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_WriteTxData
 916:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 917:Generated_Source\PSoC5/SIREN.c ****     *
 918:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 919:Generated_Source\PSoC5/SIREN.c ****     *  Places a byte of data into the transmit buffer to be sent when the bus is
 920:Generated_Source\PSoC5/SIREN.c ****     *  available without checking the TX status register. You must check status
 921:Generated_Source\PSoC5/SIREN.c ****     *  separately.
 922:Generated_Source\PSoC5/SIREN.c ****     *
 923:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 924:Generated_Source\PSoC5/SIREN.c ****     *  txDataByte: data byte
 925:Generated_Source\PSoC5/SIREN.c ****     *
 926:Generated_Source\PSoC5/SIREN.c ****     * Return:
 927:Generated_Source\PSoC5/SIREN.c ****     * None.
 928:Generated_Source\PSoC5/SIREN.c ****     *
 929:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
 930:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBuffer - RAM buffer pointer for save data for transmission
 931:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferWrite - cyclic index for write to txBuffer,
 932:Generated_Source\PSoC5/SIREN.c ****     *    incremented after each byte saved to buffer.
 933:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferRead - cyclic index for read from txBuffer,
 934:Generated_Source\PSoC5/SIREN.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 38


 935:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
 936:Generated_Source\PSoC5/SIREN.c ****     *    initialized.
 937:Generated_Source\PSoC5/SIREN.c ****     *
 938:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
 939:Generated_Source\PSoC5/SIREN.c ****     *  No.
 940:Generated_Source\PSoC5/SIREN.c ****     *
 941:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
 942:Generated_Source\PSoC5/SIREN.c ****     void SIREN_WriteTxData(uint8 txDataByte) 
 943:Generated_Source\PSoC5/SIREN.c ****     {
 1173              		.loc 1 943 0
 1174              		.cfi_startproc
 1175              		@ args = 0, pretend = 0, frame = 8
 1176              		@ frame_needed = 1, uses_anonymous_args = 0
 1177              		@ link register save eliminated.
 1178 0000 80B4     		push	{r7}
 1179              		.cfi_def_cfa_offset 4
 1180              		.cfi_offset 7, -4
 1181 0002 83B0     		sub	sp, sp, #12
 1182              		.cfi_def_cfa_offset 16
 1183 0004 00AF     		add	r7, sp, #0
 1184              		.cfi_def_cfa_register 7
 1185 0006 0346     		mov	r3, r0
 1186 0008 FB71     		strb	r3, [r7, #7]
 944:Generated_Source\PSoC5/SIREN.c ****         /* If not Initialized then skip this function*/
 945:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_initVar != 0u)
 1187              		.loc 1 945 0
 1188 000a 064B     		ldr	r3, .L72
 1189 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1190 000e 002B     		cmp	r3, #0
 1191 0010 02D0     		beq	.L71
 946:Generated_Source\PSoC5/SIREN.c ****         {
 947:Generated_Source\PSoC5/SIREN.c ****         #if (SIREN_TX_INTERRUPT_ENABLED)
 948:Generated_Source\PSoC5/SIREN.c **** 
 949:Generated_Source\PSoC5/SIREN.c ****             /* Protect variables that could change on interrupt. */
 950:Generated_Source\PSoC5/SIREN.c ****             SIREN_DisableTxInt();
 951:Generated_Source\PSoC5/SIREN.c **** 
 952:Generated_Source\PSoC5/SIREN.c ****             if( (SIREN_txBufferRead == SIREN_txBufferWrite) &&
 953:Generated_Source\PSoC5/SIREN.c ****                 ((SIREN_TXSTATUS_REG & SIREN_TX_STS_FIFO_FULL) == 0u) )
 954:Generated_Source\PSoC5/SIREN.c ****             {
 955:Generated_Source\PSoC5/SIREN.c ****                 /* Add directly to the FIFO. */
 956:Generated_Source\PSoC5/SIREN.c ****                 SIREN_TXDATA_REG = txDataByte;
 957:Generated_Source\PSoC5/SIREN.c ****             }
 958:Generated_Source\PSoC5/SIREN.c ****             else
 959:Generated_Source\PSoC5/SIREN.c ****             {
 960:Generated_Source\PSoC5/SIREN.c ****                 if(SIREN_txBufferWrite >= SIREN_TX_BUFFER_SIZE)
 961:Generated_Source\PSoC5/SIREN.c ****                 {
 962:Generated_Source\PSoC5/SIREN.c ****                     SIREN_txBufferWrite = 0u;
 963:Generated_Source\PSoC5/SIREN.c ****                 }
 964:Generated_Source\PSoC5/SIREN.c **** 
 965:Generated_Source\PSoC5/SIREN.c ****                 SIREN_txBuffer[SIREN_txBufferWrite] = txDataByte;
 966:Generated_Source\PSoC5/SIREN.c **** 
 967:Generated_Source\PSoC5/SIREN.c ****                 /* Add to the software buffer. */
 968:Generated_Source\PSoC5/SIREN.c ****                 SIREN_txBufferWrite++;
 969:Generated_Source\PSoC5/SIREN.c ****             }
 970:Generated_Source\PSoC5/SIREN.c **** 
 971:Generated_Source\PSoC5/SIREN.c ****             SIREN_EnableTxInt();
 972:Generated_Source\PSoC5/SIREN.c **** 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 39


 973:Generated_Source\PSoC5/SIREN.c ****         #else
 974:Generated_Source\PSoC5/SIREN.c **** 
 975:Generated_Source\PSoC5/SIREN.c ****             /* Add directly to the FIFO. */
 976:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXDATA_REG = txDataByte;
 1192              		.loc 1 976 0
 1193 0012 054A     		ldr	r2, .L72+4
 1194 0014 FB79     		ldrb	r3, [r7, #7]
 1195 0016 1370     		strb	r3, [r2]
 1196              	.L71:
 977:Generated_Source\PSoC5/SIREN.c **** 
 978:Generated_Source\PSoC5/SIREN.c ****         #endif /*(SIREN_TX_INTERRUPT_ENABLED) */
 979:Generated_Source\PSoC5/SIREN.c ****         }
 980:Generated_Source\PSoC5/SIREN.c ****     }
 1197              		.loc 1 980 0
 1198 0018 00BF     		nop
 1199 001a 0C37     		adds	r7, r7, #12
 1200              		.cfi_def_cfa_offset 4
 1201 001c BD46     		mov	sp, r7
 1202              		.cfi_def_cfa_register 13
 1203              		@ sp needed
 1204 001e 80BC     		pop	{r7}
 1205              		.cfi_restore 7
 1206              		.cfi_def_cfa_offset 0
 1207 0020 7047     		bx	lr
 1208              	.L73:
 1209 0022 00BF     		.align	2
 1210              	.L72:
 1211 0024 00000000 		.word	SIREN_initVar
 1212 0028 46650040 		.word	1073767750
 1213              		.cfi_endproc
 1214              	.LFE17:
 1215              		.size	SIREN_WriteTxData, .-SIREN_WriteTxData
 1216              		.section	.text.SIREN_ReadTxStatus,"ax",%progbits
 1217              		.align	2
 1218              		.global	SIREN_ReadTxStatus
 1219              		.thumb
 1220              		.thumb_func
 1221              		.type	SIREN_ReadTxStatus, %function
 1222              	SIREN_ReadTxStatus:
 1223              	.LFB18:
 981:Generated_Source\PSoC5/SIREN.c **** 
 982:Generated_Source\PSoC5/SIREN.c **** 
 983:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
 984:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_ReadTxStatus
 985:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
 986:Generated_Source\PSoC5/SIREN.c ****     *
 987:Generated_Source\PSoC5/SIREN.c ****     * Summary:
 988:Generated_Source\PSoC5/SIREN.c ****     *  Reads the status register for the TX portion of the UART.
 989:Generated_Source\PSoC5/SIREN.c ****     *
 990:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
 991:Generated_Source\PSoC5/SIREN.c ****     *  None.
 992:Generated_Source\PSoC5/SIREN.c ****     *
 993:Generated_Source\PSoC5/SIREN.c ****     * Return:
 994:Generated_Source\PSoC5/SIREN.c ****     *  Contents of the status register
 995:Generated_Source\PSoC5/SIREN.c ****     *
 996:Generated_Source\PSoC5/SIREN.c ****     * Theory:
 997:Generated_Source\PSoC5/SIREN.c ****     *  This function reads the TX status register, which is cleared on read.
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 40


 998:Generated_Source\PSoC5/SIREN.c ****     *  It is up to the user to handle all bits in this return value accordingly,
 999:Generated_Source\PSoC5/SIREN.c ****     *  even if the bit was not enabled as an interrupt source the event happened
1000:Generated_Source\PSoC5/SIREN.c ****     *  and must be handled accordingly.
1001:Generated_Source\PSoC5/SIREN.c ****     *
1002:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1003:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_ReadTxStatus(void) 
1004:Generated_Source\PSoC5/SIREN.c ****     {
 1224              		.loc 1 1004 0
 1225              		.cfi_startproc
 1226              		@ args = 0, pretend = 0, frame = 0
 1227              		@ frame_needed = 1, uses_anonymous_args = 0
 1228              		@ link register save eliminated.
 1229 0000 80B4     		push	{r7}
 1230              		.cfi_def_cfa_offset 4
 1231              		.cfi_offset 7, -4
 1232 0002 00AF     		add	r7, sp, #0
 1233              		.cfi_def_cfa_register 7
1005:Generated_Source\PSoC5/SIREN.c ****         return(SIREN_TXSTATUS_REG);
 1234              		.loc 1 1005 0
 1235 0004 034B     		ldr	r3, .L76
 1236 0006 1B78     		ldrb	r3, [r3]
 1237 0008 DBB2     		uxtb	r3, r3
1006:Generated_Source\PSoC5/SIREN.c ****     }
 1238              		.loc 1 1006 0
 1239 000a 1846     		mov	r0, r3
 1240 000c BD46     		mov	sp, r7
 1241              		.cfi_def_cfa_register 13
 1242              		@ sp needed
 1243 000e 80BC     		pop	{r7}
 1244              		.cfi_restore 7
 1245              		.cfi_def_cfa_offset 0
 1246 0010 7047     		bx	lr
 1247              	.L77:
 1248 0012 00BF     		.align	2
 1249              	.L76:
 1250 0014 66650040 		.word	1073767782
 1251              		.cfi_endproc
 1252              	.LFE18:
 1253              		.size	SIREN_ReadTxStatus, .-SIREN_ReadTxStatus
 1254              		.section	.text.SIREN_PutChar,"ax",%progbits
 1255              		.align	2
 1256              		.global	SIREN_PutChar
 1257              		.thumb
 1258              		.thumb_func
 1259              		.type	SIREN_PutChar, %function
 1260              	SIREN_PutChar:
 1261              	.LFB19:
1007:Generated_Source\PSoC5/SIREN.c **** 
1008:Generated_Source\PSoC5/SIREN.c **** 
1009:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1010:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_PutChar
1011:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1012:Generated_Source\PSoC5/SIREN.c ****     *
1013:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1014:Generated_Source\PSoC5/SIREN.c ****     *  Puts a byte of data into the transmit buffer to be sent when the bus is
1015:Generated_Source\PSoC5/SIREN.c ****     *  available. This is a blocking API that waits until the TX buffer has room to
1016:Generated_Source\PSoC5/SIREN.c ****     *  hold the data.
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 41


1017:Generated_Source\PSoC5/SIREN.c ****     *
1018:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1019:Generated_Source\PSoC5/SIREN.c ****     *  txDataByte: Byte containing the data to transmit
1020:Generated_Source\PSoC5/SIREN.c ****     *
1021:Generated_Source\PSoC5/SIREN.c ****     * Return:
1022:Generated_Source\PSoC5/SIREN.c ****     *  None.
1023:Generated_Source\PSoC5/SIREN.c ****     *
1024:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
1025:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBuffer - RAM buffer pointer for save data for transmission
1026:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferWrite - cyclic index for write to txBuffer,
1027:Generated_Source\PSoC5/SIREN.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1028:Generated_Source\PSoC5/SIREN.c ****     *     saved to buffer.
1029:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferRead - cyclic index for read from txBuffer,
1030:Generated_Source\PSoC5/SIREN.c ****     *     checked to identify free space in txBuffer.
1031:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
1032:Generated_Source\PSoC5/SIREN.c ****     *     initialized.
1033:Generated_Source\PSoC5/SIREN.c ****     *
1034:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1035:Generated_Source\PSoC5/SIREN.c ****     *  No.
1036:Generated_Source\PSoC5/SIREN.c ****     *
1037:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1038:Generated_Source\PSoC5/SIREN.c ****     *  Allows the user to transmit any byte of data in a single transfer
1039:Generated_Source\PSoC5/SIREN.c ****     *
1040:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1041:Generated_Source\PSoC5/SIREN.c ****     void SIREN_PutChar(uint8 txDataByte) 
1042:Generated_Source\PSoC5/SIREN.c ****     {
 1262              		.loc 1 1042 0
 1263              		.cfi_startproc
 1264              		@ args = 0, pretend = 0, frame = 8
 1265              		@ frame_needed = 1, uses_anonymous_args = 0
 1266              		@ link register save eliminated.
 1267 0000 80B4     		push	{r7}
 1268              		.cfi_def_cfa_offset 4
 1269              		.cfi_offset 7, -4
 1270 0002 83B0     		sub	sp, sp, #12
 1271              		.cfi_def_cfa_offset 16
 1272 0004 00AF     		add	r7, sp, #0
 1273              		.cfi_def_cfa_register 7
 1274 0006 0346     		mov	r3, r0
 1275 0008 FB71     		strb	r3, [r7, #7]
1043:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_TX_INTERRUPT_ENABLED)
1044:Generated_Source\PSoC5/SIREN.c ****         /* The temporary output pointer is used since it takes two instructions
1045:Generated_Source\PSoC5/SIREN.c ****         *  to increment with a wrap, and we can't risk doing that with the real
1046:Generated_Source\PSoC5/SIREN.c ****         *  pointer and getting an interrupt in between instructions.
1047:Generated_Source\PSoC5/SIREN.c ****         */
1048:Generated_Source\PSoC5/SIREN.c ****         uint8 locTxBufferWrite;
1049:Generated_Source\PSoC5/SIREN.c ****         uint8 locTxBufferRead;
1050:Generated_Source\PSoC5/SIREN.c **** 
1051:Generated_Source\PSoC5/SIREN.c ****         do
1052:Generated_Source\PSoC5/SIREN.c ****         { /* Block if software buffer is full, so we don't overwrite. */
1053:Generated_Source\PSoC5/SIREN.c **** 
1054:Generated_Source\PSoC5/SIREN.c ****         #if ((SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3))
1055:Generated_Source\PSoC5/SIREN.c ****             /* Disable TX interrupt to protect variables from modification */
1056:Generated_Source\PSoC5/SIREN.c ****             SIREN_DisableTxInt();
1057:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3) */
1058:Generated_Source\PSoC5/SIREN.c **** 
1059:Generated_Source\PSoC5/SIREN.c ****             locTxBufferWrite = SIREN_txBufferWrite;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 42


1060:Generated_Source\PSoC5/SIREN.c ****             locTxBufferRead  = SIREN_txBufferRead;
1061:Generated_Source\PSoC5/SIREN.c **** 
1062:Generated_Source\PSoC5/SIREN.c ****         #if ((SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3))
1063:Generated_Source\PSoC5/SIREN.c ****             /* Enable interrupt to continue transmission */
1064:Generated_Source\PSoC5/SIREN.c ****             SIREN_EnableTxInt();
1065:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3) */
1066:Generated_Source\PSoC5/SIREN.c ****         }
1067:Generated_Source\PSoC5/SIREN.c ****         while( (locTxBufferWrite < locTxBufferRead) ? (locTxBufferWrite == (locTxBufferRead - 1u)) 
1068:Generated_Source\PSoC5/SIREN.c ****                                 ((locTxBufferWrite - locTxBufferRead) ==
1069:Generated_Source\PSoC5/SIREN.c ****                                 (uint8)(SIREN_TX_BUFFER_SIZE - 1u)) );
1070:Generated_Source\PSoC5/SIREN.c **** 
1071:Generated_Source\PSoC5/SIREN.c ****         if( (locTxBufferRead == locTxBufferWrite) &&
1072:Generated_Source\PSoC5/SIREN.c ****             ((SIREN_TXSTATUS_REG & SIREN_TX_STS_FIFO_FULL) == 0u) )
1073:Generated_Source\PSoC5/SIREN.c ****         {
1074:Generated_Source\PSoC5/SIREN.c ****             /* Add directly to the FIFO */
1075:Generated_Source\PSoC5/SIREN.c ****             SIREN_TXDATA_REG = txDataByte;
1076:Generated_Source\PSoC5/SIREN.c ****         }
1077:Generated_Source\PSoC5/SIREN.c ****         else
1078:Generated_Source\PSoC5/SIREN.c ****         {
1079:Generated_Source\PSoC5/SIREN.c ****             if(locTxBufferWrite >= SIREN_TX_BUFFER_SIZE)
1080:Generated_Source\PSoC5/SIREN.c ****             {
1081:Generated_Source\PSoC5/SIREN.c ****                 locTxBufferWrite = 0u;
1082:Generated_Source\PSoC5/SIREN.c ****             }
1083:Generated_Source\PSoC5/SIREN.c ****             /* Add to the software buffer. */
1084:Generated_Source\PSoC5/SIREN.c ****             SIREN_txBuffer[locTxBufferWrite] = txDataByte;
1085:Generated_Source\PSoC5/SIREN.c ****             locTxBufferWrite++;
1086:Generated_Source\PSoC5/SIREN.c **** 
1087:Generated_Source\PSoC5/SIREN.c ****             /* Finally, update the real output pointer */
1088:Generated_Source\PSoC5/SIREN.c ****         #if ((SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3))
1089:Generated_Source\PSoC5/SIREN.c ****             SIREN_DisableTxInt();
1090:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3) */
1091:Generated_Source\PSoC5/SIREN.c **** 
1092:Generated_Source\PSoC5/SIREN.c ****             SIREN_txBufferWrite = locTxBufferWrite;
1093:Generated_Source\PSoC5/SIREN.c **** 
1094:Generated_Source\PSoC5/SIREN.c ****         #if ((SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3))
1095:Generated_Source\PSoC5/SIREN.c ****             SIREN_EnableTxInt();
1096:Generated_Source\PSoC5/SIREN.c ****         #endif /* (SIREN_TX_BUFFER_SIZE > SIREN_MAX_BYTE_VALUE) && (CY_PSOC3) */
1097:Generated_Source\PSoC5/SIREN.c **** 
1098:Generated_Source\PSoC5/SIREN.c ****             if(0u != (SIREN_TXSTATUS_REG & SIREN_TX_STS_FIFO_EMPTY))
1099:Generated_Source\PSoC5/SIREN.c ****             {
1100:Generated_Source\PSoC5/SIREN.c ****                 /* Trigger TX interrupt to send software buffer */
1101:Generated_Source\PSoC5/SIREN.c ****                 SIREN_SetPendingTxInt();
1102:Generated_Source\PSoC5/SIREN.c ****             }
1103:Generated_Source\PSoC5/SIREN.c ****         }
1104:Generated_Source\PSoC5/SIREN.c **** 
1105:Generated_Source\PSoC5/SIREN.c ****     #else
1106:Generated_Source\PSoC5/SIREN.c **** 
1107:Generated_Source\PSoC5/SIREN.c ****         while((SIREN_TXSTATUS_REG & SIREN_TX_STS_FIFO_FULL) != 0u)
 1276              		.loc 1 1107 0
 1277 000a 00BF     		nop
 1278              	.L79:
 1279              		.loc 1 1107 0 is_stmt 0 discriminator 1
 1280 000c 074B     		ldr	r3, .L80
 1281 000e 1B78     		ldrb	r3, [r3]
 1282 0010 DBB2     		uxtb	r3, r3
 1283 0012 03F00403 		and	r3, r3, #4
 1284 0016 002B     		cmp	r3, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 43


 1285 0018 F8D1     		bne	.L79
1108:Generated_Source\PSoC5/SIREN.c ****         {
1109:Generated_Source\PSoC5/SIREN.c ****             /* Wait for room in the FIFO */
1110:Generated_Source\PSoC5/SIREN.c ****         }
1111:Generated_Source\PSoC5/SIREN.c **** 
1112:Generated_Source\PSoC5/SIREN.c ****         /* Add directly to the FIFO */
1113:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXDATA_REG = txDataByte;
 1286              		.loc 1 1113 0 is_stmt 1
 1287 001a 054A     		ldr	r2, .L80+4
 1288 001c FB79     		ldrb	r3, [r7, #7]
 1289 001e 1370     		strb	r3, [r2]
1114:Generated_Source\PSoC5/SIREN.c **** 
1115:Generated_Source\PSoC5/SIREN.c ****     #endif /* SIREN_TX_INTERRUPT_ENABLED */
1116:Generated_Source\PSoC5/SIREN.c ****     }
 1290              		.loc 1 1116 0
 1291 0020 00BF     		nop
 1292 0022 0C37     		adds	r7, r7, #12
 1293              		.cfi_def_cfa_offset 4
 1294 0024 BD46     		mov	sp, r7
 1295              		.cfi_def_cfa_register 13
 1296              		@ sp needed
 1297 0026 80BC     		pop	{r7}
 1298              		.cfi_restore 7
 1299              		.cfi_def_cfa_offset 0
 1300 0028 7047     		bx	lr
 1301              	.L81:
 1302 002a 00BF     		.align	2
 1303              	.L80:
 1304 002c 66650040 		.word	1073767782
 1305 0030 46650040 		.word	1073767750
 1306              		.cfi_endproc
 1307              	.LFE19:
 1308              		.size	SIREN_PutChar, .-SIREN_PutChar
 1309              		.section	.text.SIREN_PutString,"ax",%progbits
 1310              		.align	2
 1311              		.global	SIREN_PutString
 1312              		.thumb
 1313              		.thumb_func
 1314              		.type	SIREN_PutString, %function
 1315              	SIREN_PutString:
 1316              	.LFB20:
1117:Generated_Source\PSoC5/SIREN.c **** 
1118:Generated_Source\PSoC5/SIREN.c **** 
1119:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1120:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_PutString
1121:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1122:Generated_Source\PSoC5/SIREN.c ****     *
1123:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1124:Generated_Source\PSoC5/SIREN.c ****     *  Sends a NULL terminated string to the TX buffer for transmission.
1125:Generated_Source\PSoC5/SIREN.c ****     *
1126:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1127:Generated_Source\PSoC5/SIREN.c ****     *  string[]: Pointer to the null terminated string array residing in RAM or ROM
1128:Generated_Source\PSoC5/SIREN.c ****     *
1129:Generated_Source\PSoC5/SIREN.c ****     * Return:
1130:Generated_Source\PSoC5/SIREN.c ****     *  None.
1131:Generated_Source\PSoC5/SIREN.c ****     *
1132:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 44


1133:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
1134:Generated_Source\PSoC5/SIREN.c ****     *     initialized.
1135:Generated_Source\PSoC5/SIREN.c ****     *
1136:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1137:Generated_Source\PSoC5/SIREN.c ****     *  No.
1138:Generated_Source\PSoC5/SIREN.c ****     *
1139:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1140:Generated_Source\PSoC5/SIREN.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1141:Generated_Source\PSoC5/SIREN.c ****     *  function blocks until the last character of the string is loaded into the
1142:Generated_Source\PSoC5/SIREN.c ****     *  TX buffer.
1143:Generated_Source\PSoC5/SIREN.c ****     *
1144:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1145:Generated_Source\PSoC5/SIREN.c ****     void SIREN_PutString(const char8 string[]) 
1146:Generated_Source\PSoC5/SIREN.c ****     {
 1317              		.loc 1 1146 0
 1318              		.cfi_startproc
 1319              		@ args = 0, pretend = 0, frame = 16
 1320              		@ frame_needed = 1, uses_anonymous_args = 0
 1321 0000 80B5     		push	{r7, lr}
 1322              		.cfi_def_cfa_offset 8
 1323              		.cfi_offset 7, -8
 1324              		.cfi_offset 14, -4
 1325 0002 84B0     		sub	sp, sp, #16
 1326              		.cfi_def_cfa_offset 24
 1327 0004 00AF     		add	r7, sp, #0
 1328              		.cfi_def_cfa_register 7
 1329 0006 7860     		str	r0, [r7, #4]
1147:Generated_Source\PSoC5/SIREN.c ****         uint16 bufIndex = 0u;
 1330              		.loc 1 1147 0
 1331 0008 0023     		movs	r3, #0
 1332 000a FB81     		strh	r3, [r7, #14]	@ movhi
1148:Generated_Source\PSoC5/SIREN.c **** 
1149:Generated_Source\PSoC5/SIREN.c ****         /* If not Initialized then skip this function */
1150:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_initVar != 0u)
 1333              		.loc 1 1150 0
 1334 000c 0C4B     		ldr	r3, .L87
 1335 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1336 0010 002B     		cmp	r3, #0
 1337 0012 10D0     		beq	.L86
1151:Generated_Source\PSoC5/SIREN.c ****         {
1152:Generated_Source\PSoC5/SIREN.c ****             /* This is a blocking function, it will not exit until all data is sent */
1153:Generated_Source\PSoC5/SIREN.c ****             while(string[bufIndex] != (char8) 0)
 1338              		.loc 1 1153 0
 1339 0014 09E0     		b	.L84
 1340              	.L85:
1154:Generated_Source\PSoC5/SIREN.c ****             {
1155:Generated_Source\PSoC5/SIREN.c ****                 SIREN_PutChar((uint8)string[bufIndex]);
 1341              		.loc 1 1155 0
 1342 0016 FB89     		ldrh	r3, [r7, #14]
 1343 0018 7A68     		ldr	r2, [r7, #4]
 1344 001a 1344     		add	r3, r3, r2
 1345 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1346 001e 1846     		mov	r0, r3
 1347 0020 FFF7FEFF 		bl	SIREN_PutChar
1156:Generated_Source\PSoC5/SIREN.c ****                 bufIndex++;
 1348              		.loc 1 1156 0
 1349 0024 FB89     		ldrh	r3, [r7, #14]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 45


 1350 0026 0133     		adds	r3, r3, #1
 1351 0028 FB81     		strh	r3, [r7, #14]	@ movhi
 1352              	.L84:
1153:Generated_Source\PSoC5/SIREN.c ****             {
 1353              		.loc 1 1153 0
 1354 002a FB89     		ldrh	r3, [r7, #14]
 1355 002c 7A68     		ldr	r2, [r7, #4]
 1356 002e 1344     		add	r3, r3, r2
 1357 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1358 0032 002B     		cmp	r3, #0
 1359 0034 EFD1     		bne	.L85
 1360              	.L86:
1157:Generated_Source\PSoC5/SIREN.c ****             }
1158:Generated_Source\PSoC5/SIREN.c ****         }
1159:Generated_Source\PSoC5/SIREN.c ****     }
 1361              		.loc 1 1159 0
 1362 0036 00BF     		nop
 1363 0038 1037     		adds	r7, r7, #16
 1364              		.cfi_def_cfa_offset 8
 1365 003a BD46     		mov	sp, r7
 1366              		.cfi_def_cfa_register 13
 1367              		@ sp needed
 1368 003c 80BD     		pop	{r7, pc}
 1369              	.L88:
 1370 003e 00BF     		.align	2
 1371              	.L87:
 1372 0040 00000000 		.word	SIREN_initVar
 1373              		.cfi_endproc
 1374              	.LFE20:
 1375              		.size	SIREN_PutString, .-SIREN_PutString
 1376              		.section	.text.SIREN_PutArray,"ax",%progbits
 1377              		.align	2
 1378              		.global	SIREN_PutArray
 1379              		.thumb
 1380              		.thumb_func
 1381              		.type	SIREN_PutArray, %function
 1382              	SIREN_PutArray:
 1383              	.LFB21:
1160:Generated_Source\PSoC5/SIREN.c **** 
1161:Generated_Source\PSoC5/SIREN.c **** 
1162:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1163:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_PutArray
1164:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1165:Generated_Source\PSoC5/SIREN.c ****     *
1166:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1167:Generated_Source\PSoC5/SIREN.c ****     *  Places N bytes of data from a memory array into the TX buffer for
1168:Generated_Source\PSoC5/SIREN.c ****     *  transmission.
1169:Generated_Source\PSoC5/SIREN.c ****     *
1170:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1171:Generated_Source\PSoC5/SIREN.c ****     *  string[]: Address of the memory array residing in RAM or ROM.
1172:Generated_Source\PSoC5/SIREN.c ****     *  byteCount: Number of bytes to be transmitted. The type depends on TX Buffer
1173:Generated_Source\PSoC5/SIREN.c ****     *             Size parameter.
1174:Generated_Source\PSoC5/SIREN.c ****     *
1175:Generated_Source\PSoC5/SIREN.c ****     * Return:
1176:Generated_Source\PSoC5/SIREN.c ****     *  None.
1177:Generated_Source\PSoC5/SIREN.c ****     *
1178:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 46


1179:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
1180:Generated_Source\PSoC5/SIREN.c ****     *     initialized.
1181:Generated_Source\PSoC5/SIREN.c ****     *
1182:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1183:Generated_Source\PSoC5/SIREN.c ****     *  No.
1184:Generated_Source\PSoC5/SIREN.c ****     *
1185:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1186:Generated_Source\PSoC5/SIREN.c ****     *  If there is not enough memory in the TX buffer for the entire string, this
1187:Generated_Source\PSoC5/SIREN.c ****     *  function blocks until the last character of the string is loaded into the
1188:Generated_Source\PSoC5/SIREN.c ****     *  TX buffer.
1189:Generated_Source\PSoC5/SIREN.c ****     *
1190:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1191:Generated_Source\PSoC5/SIREN.c ****     void SIREN_PutArray(const uint8 string[], uint8 byteCount)
1192:Generated_Source\PSoC5/SIREN.c ****                                                                     
1193:Generated_Source\PSoC5/SIREN.c ****     {
 1384              		.loc 1 1193 0
 1385              		.cfi_startproc
 1386              		@ args = 0, pretend = 0, frame = 16
 1387              		@ frame_needed = 1, uses_anonymous_args = 0
 1388 0000 80B5     		push	{r7, lr}
 1389              		.cfi_def_cfa_offset 8
 1390              		.cfi_offset 7, -8
 1391              		.cfi_offset 14, -4
 1392 0002 84B0     		sub	sp, sp, #16
 1393              		.cfi_def_cfa_offset 24
 1394 0004 00AF     		add	r7, sp, #0
 1395              		.cfi_def_cfa_register 7
 1396 0006 7860     		str	r0, [r7, #4]
 1397 0008 0B46     		mov	r3, r1
 1398 000a FB70     		strb	r3, [r7, #3]
1194:Generated_Source\PSoC5/SIREN.c ****         uint8 bufIndex = 0u;
 1399              		.loc 1 1194 0
 1400 000c 0023     		movs	r3, #0
 1401 000e FB73     		strb	r3, [r7, #15]
1195:Generated_Source\PSoC5/SIREN.c **** 
1196:Generated_Source\PSoC5/SIREN.c ****         /* If not Initialized then skip this function */
1197:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_initVar != 0u)
 1402              		.loc 1 1197 0
 1403 0010 0B4B     		ldr	r3, .L94
 1404 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1405 0014 002B     		cmp	r3, #0
 1406 0016 0ED0     		beq	.L93
1198:Generated_Source\PSoC5/SIREN.c ****         {
1199:Generated_Source\PSoC5/SIREN.c ****             while(bufIndex < byteCount)
 1407              		.loc 1 1199 0
 1408 0018 09E0     		b	.L91
 1409              	.L92:
1200:Generated_Source\PSoC5/SIREN.c ****             {
1201:Generated_Source\PSoC5/SIREN.c ****                 SIREN_PutChar(string[bufIndex]);
 1410              		.loc 1 1201 0
 1411 001a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1412 001c 7A68     		ldr	r2, [r7, #4]
 1413 001e 1344     		add	r3, r3, r2
 1414 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1415 0022 1846     		mov	r0, r3
 1416 0024 FFF7FEFF 		bl	SIREN_PutChar
1202:Generated_Source\PSoC5/SIREN.c ****                 bufIndex++;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 47


 1417              		.loc 1 1202 0
 1418 0028 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1419 002a 0133     		adds	r3, r3, #1
 1420 002c FB73     		strb	r3, [r7, #15]
 1421              	.L91:
1199:Generated_Source\PSoC5/SIREN.c ****             {
 1422              		.loc 1 1199 0
 1423 002e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1424 0030 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 1425 0032 9A42     		cmp	r2, r3
 1426 0034 F1D3     		bcc	.L92
 1427              	.L93:
1203:Generated_Source\PSoC5/SIREN.c ****             }
1204:Generated_Source\PSoC5/SIREN.c ****         }
1205:Generated_Source\PSoC5/SIREN.c ****     }
 1428              		.loc 1 1205 0
 1429 0036 00BF     		nop
 1430 0038 1037     		adds	r7, r7, #16
 1431              		.cfi_def_cfa_offset 8
 1432 003a BD46     		mov	sp, r7
 1433              		.cfi_def_cfa_register 13
 1434              		@ sp needed
 1435 003c 80BD     		pop	{r7, pc}
 1436              	.L95:
 1437 003e 00BF     		.align	2
 1438              	.L94:
 1439 0040 00000000 		.word	SIREN_initVar
 1440              		.cfi_endproc
 1441              	.LFE21:
 1442              		.size	SIREN_PutArray, .-SIREN_PutArray
 1443              		.section	.text.SIREN_PutCRLF,"ax",%progbits
 1444              		.align	2
 1445              		.global	SIREN_PutCRLF
 1446              		.thumb
 1447              		.thumb_func
 1448              		.type	SIREN_PutCRLF, %function
 1449              	SIREN_PutCRLF:
 1450              	.LFB22:
1206:Generated_Source\PSoC5/SIREN.c **** 
1207:Generated_Source\PSoC5/SIREN.c **** 
1208:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1209:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_PutCRLF
1210:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1211:Generated_Source\PSoC5/SIREN.c ****     *
1212:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1213:Generated_Source\PSoC5/SIREN.c ****     *  Writes a byte of data followed by a carriage return (0x0D) and line feed
1214:Generated_Source\PSoC5/SIREN.c ****     *  (0x0A) to the transmit buffer.
1215:Generated_Source\PSoC5/SIREN.c ****     *
1216:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1217:Generated_Source\PSoC5/SIREN.c ****     *  txDataByte: Data byte to transmit before the carriage return and line feed.
1218:Generated_Source\PSoC5/SIREN.c ****     *
1219:Generated_Source\PSoC5/SIREN.c ****     * Return:
1220:Generated_Source\PSoC5/SIREN.c ****     *  None.
1221:Generated_Source\PSoC5/SIREN.c ****     *
1222:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
1223:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
1224:Generated_Source\PSoC5/SIREN.c ****     *     initialized.
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 48


1225:Generated_Source\PSoC5/SIREN.c ****     *
1226:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1227:Generated_Source\PSoC5/SIREN.c ****     *  No.
1228:Generated_Source\PSoC5/SIREN.c ****     *
1229:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1230:Generated_Source\PSoC5/SIREN.c ****     void SIREN_PutCRLF(uint8 txDataByte) 
1231:Generated_Source\PSoC5/SIREN.c ****     {
 1451              		.loc 1 1231 0
 1452              		.cfi_startproc
 1453              		@ args = 0, pretend = 0, frame = 8
 1454              		@ frame_needed = 1, uses_anonymous_args = 0
 1455 0000 80B5     		push	{r7, lr}
 1456              		.cfi_def_cfa_offset 8
 1457              		.cfi_offset 7, -8
 1458              		.cfi_offset 14, -4
 1459 0002 82B0     		sub	sp, sp, #8
 1460              		.cfi_def_cfa_offset 16
 1461 0004 00AF     		add	r7, sp, #0
 1462              		.cfi_def_cfa_register 7
 1463 0006 0346     		mov	r3, r0
 1464 0008 FB71     		strb	r3, [r7, #7]
1232:Generated_Source\PSoC5/SIREN.c ****         /* If not Initialized then skip this function */
1233:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_initVar != 0u)
 1465              		.loc 1 1233 0
 1466 000a 094B     		ldr	r3, .L99
 1467 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1468 000e 002B     		cmp	r3, #0
 1469 0010 09D0     		beq	.L98
1234:Generated_Source\PSoC5/SIREN.c ****         {
1235:Generated_Source\PSoC5/SIREN.c ****             SIREN_PutChar(txDataByte);
 1470              		.loc 1 1235 0
 1471 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1472 0014 1846     		mov	r0, r3
 1473 0016 FFF7FEFF 		bl	SIREN_PutChar
1236:Generated_Source\PSoC5/SIREN.c ****             SIREN_PutChar(0x0Du);
 1474              		.loc 1 1236 0
 1475 001a 0D20     		movs	r0, #13
 1476 001c FFF7FEFF 		bl	SIREN_PutChar
1237:Generated_Source\PSoC5/SIREN.c ****             SIREN_PutChar(0x0Au);
 1477              		.loc 1 1237 0
 1478 0020 0A20     		movs	r0, #10
 1479 0022 FFF7FEFF 		bl	SIREN_PutChar
 1480              	.L98:
1238:Generated_Source\PSoC5/SIREN.c ****         }
1239:Generated_Source\PSoC5/SIREN.c ****     }
 1481              		.loc 1 1239 0
 1482 0026 00BF     		nop
 1483 0028 0837     		adds	r7, r7, #8
 1484              		.cfi_def_cfa_offset 8
 1485 002a BD46     		mov	sp, r7
 1486              		.cfi_def_cfa_register 13
 1487              		@ sp needed
 1488 002c 80BD     		pop	{r7, pc}
 1489              	.L100:
 1490 002e 00BF     		.align	2
 1491              	.L99:
 1492 0030 00000000 		.word	SIREN_initVar
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 49


 1493              		.cfi_endproc
 1494              	.LFE22:
 1495              		.size	SIREN_PutCRLF, .-SIREN_PutCRLF
 1496              		.section	.text.SIREN_GetTxBufferSize,"ax",%progbits
 1497              		.align	2
 1498              		.global	SIREN_GetTxBufferSize
 1499              		.thumb
 1500              		.thumb_func
 1501              		.type	SIREN_GetTxBufferSize, %function
 1502              	SIREN_GetTxBufferSize:
 1503              	.LFB23:
1240:Generated_Source\PSoC5/SIREN.c **** 
1241:Generated_Source\PSoC5/SIREN.c **** 
1242:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1243:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_GetTxBufferSize
1244:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1245:Generated_Source\PSoC5/SIREN.c ****     *
1246:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1247:Generated_Source\PSoC5/SIREN.c ****     *  Returns the number of bytes in the TX buffer which are waiting to be 
1248:Generated_Source\PSoC5/SIREN.c ****     *  transmitted.
1249:Generated_Source\PSoC5/SIREN.c ****     *  * TX software buffer is disabled (TX Buffer Size parameter is equal to 4): 
1250:Generated_Source\PSoC5/SIREN.c ****     *    returns 0 for empty TX FIFO, 1 for not full TX FIFO or 4 for full TX FIFO.
1251:Generated_Source\PSoC5/SIREN.c ****     *  * TX software buffer is enabled: returns the number of bytes in the TX 
1252:Generated_Source\PSoC5/SIREN.c ****     *    software buffer which are waiting to be transmitted. Bytes available in the
1253:Generated_Source\PSoC5/SIREN.c ****     *    TX FIFO do not count.
1254:Generated_Source\PSoC5/SIREN.c ****     *
1255:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1256:Generated_Source\PSoC5/SIREN.c ****     *  None.
1257:Generated_Source\PSoC5/SIREN.c ****     *
1258:Generated_Source\PSoC5/SIREN.c ****     * Return:
1259:Generated_Source\PSoC5/SIREN.c ****     *  Number of bytes used in the TX buffer. Return value type depends on the TX 
1260:Generated_Source\PSoC5/SIREN.c ****     *  Buffer Size parameter.
1261:Generated_Source\PSoC5/SIREN.c ****     *
1262:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
1263:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferWrite - used to calculate left space.
1264:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferRead - used to calculate left space.
1265:Generated_Source\PSoC5/SIREN.c ****     *
1266:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1267:Generated_Source\PSoC5/SIREN.c ****     *  No.
1268:Generated_Source\PSoC5/SIREN.c ****     *
1269:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1270:Generated_Source\PSoC5/SIREN.c ****     *  Allows the user to find out how full the TX Buffer is.
1271:Generated_Source\PSoC5/SIREN.c ****     *
1272:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1273:Generated_Source\PSoC5/SIREN.c ****     uint8 SIREN_GetTxBufferSize(void)
1274:Generated_Source\PSoC5/SIREN.c ****                                                             
1275:Generated_Source\PSoC5/SIREN.c ****     {
 1504              		.loc 1 1275 0
 1505              		.cfi_startproc
 1506              		@ args = 0, pretend = 0, frame = 8
 1507              		@ frame_needed = 1, uses_anonymous_args = 0
 1508              		@ link register save eliminated.
 1509 0000 80B4     		push	{r7}
 1510              		.cfi_def_cfa_offset 4
 1511              		.cfi_offset 7, -4
 1512 0002 83B0     		sub	sp, sp, #12
 1513              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 50


 1514 0004 00AF     		add	r7, sp, #0
 1515              		.cfi_def_cfa_register 7
1276:Generated_Source\PSoC5/SIREN.c ****         uint8 size;
1277:Generated_Source\PSoC5/SIREN.c **** 
1278:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_TX_INTERRUPT_ENABLED)
1279:Generated_Source\PSoC5/SIREN.c **** 
1280:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt. */
1281:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableTxInt();
1282:Generated_Source\PSoC5/SIREN.c **** 
1283:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_txBufferRead == SIREN_txBufferWrite)
1284:Generated_Source\PSoC5/SIREN.c ****         {
1285:Generated_Source\PSoC5/SIREN.c ****             size = 0u;
1286:Generated_Source\PSoC5/SIREN.c ****         }
1287:Generated_Source\PSoC5/SIREN.c ****         else if(SIREN_txBufferRead < SIREN_txBufferWrite)
1288:Generated_Source\PSoC5/SIREN.c ****         {
1289:Generated_Source\PSoC5/SIREN.c ****             size = (SIREN_txBufferWrite - SIREN_txBufferRead);
1290:Generated_Source\PSoC5/SIREN.c ****         }
1291:Generated_Source\PSoC5/SIREN.c ****         else
1292:Generated_Source\PSoC5/SIREN.c ****         {
1293:Generated_Source\PSoC5/SIREN.c ****             size = (SIREN_TX_BUFFER_SIZE - SIREN_txBufferRead) +
1294:Generated_Source\PSoC5/SIREN.c ****                     SIREN_txBufferWrite;
1295:Generated_Source\PSoC5/SIREN.c ****         }
1296:Generated_Source\PSoC5/SIREN.c **** 
1297:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableTxInt();
1298:Generated_Source\PSoC5/SIREN.c **** 
1299:Generated_Source\PSoC5/SIREN.c ****     #else
1300:Generated_Source\PSoC5/SIREN.c **** 
1301:Generated_Source\PSoC5/SIREN.c ****         size = SIREN_TXSTATUS_REG;
 1516              		.loc 1 1301 0
 1517 0006 0D4B     		ldr	r3, .L106
 1518 0008 1B78     		ldrb	r3, [r3]
 1519 000a FB71     		strb	r3, [r7, #7]
1302:Generated_Source\PSoC5/SIREN.c **** 
1303:Generated_Source\PSoC5/SIREN.c ****         /* Is the fifo is full. */
1304:Generated_Source\PSoC5/SIREN.c ****         if((size & SIREN_TX_STS_FIFO_FULL) != 0u)
 1520              		.loc 1 1304 0
 1521 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1522 000e 03F00403 		and	r3, r3, #4
 1523 0012 002B     		cmp	r3, #0
 1524 0014 02D0     		beq	.L102
1305:Generated_Source\PSoC5/SIREN.c ****         {
1306:Generated_Source\PSoC5/SIREN.c ****             size = SIREN_FIFO_LENGTH;
 1525              		.loc 1 1306 0
 1526 0016 0423     		movs	r3, #4
 1527 0018 FB71     		strb	r3, [r7, #7]
 1528 001a 09E0     		b	.L103
 1529              	.L102:
1307:Generated_Source\PSoC5/SIREN.c ****         }
1308:Generated_Source\PSoC5/SIREN.c ****         else if((size & SIREN_TX_STS_FIFO_EMPTY) != 0u)
 1530              		.loc 1 1308 0
 1531 001c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1532 001e 03F00203 		and	r3, r3, #2
 1533 0022 002B     		cmp	r3, #0
 1534 0024 02D0     		beq	.L104
1309:Generated_Source\PSoC5/SIREN.c ****         {
1310:Generated_Source\PSoC5/SIREN.c ****             size = 0u;
 1535              		.loc 1 1310 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 51


 1536 0026 0023     		movs	r3, #0
 1537 0028 FB71     		strb	r3, [r7, #7]
 1538 002a 01E0     		b	.L103
 1539              	.L104:
1311:Generated_Source\PSoC5/SIREN.c ****         }
1312:Generated_Source\PSoC5/SIREN.c ****         else
1313:Generated_Source\PSoC5/SIREN.c ****         {
1314:Generated_Source\PSoC5/SIREN.c ****             /* We only know there is data in the fifo. */
1315:Generated_Source\PSoC5/SIREN.c ****             size = 1u;
 1540              		.loc 1 1315 0
 1541 002c 0123     		movs	r3, #1
 1542 002e FB71     		strb	r3, [r7, #7]
 1543              	.L103:
1316:Generated_Source\PSoC5/SIREN.c ****         }
1317:Generated_Source\PSoC5/SIREN.c **** 
1318:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
1319:Generated_Source\PSoC5/SIREN.c **** 
1320:Generated_Source\PSoC5/SIREN.c ****     return(size);
 1544              		.loc 1 1320 0
 1545 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
1321:Generated_Source\PSoC5/SIREN.c ****     }
 1546              		.loc 1 1321 0
 1547 0032 1846     		mov	r0, r3
 1548 0034 0C37     		adds	r7, r7, #12
 1549              		.cfi_def_cfa_offset 4
 1550 0036 BD46     		mov	sp, r7
 1551              		.cfi_def_cfa_register 13
 1552              		@ sp needed
 1553 0038 80BC     		pop	{r7}
 1554              		.cfi_restore 7
 1555              		.cfi_def_cfa_offset 0
 1556 003a 7047     		bx	lr
 1557              	.L107:
 1558              		.align	2
 1559              	.L106:
 1560 003c 66650040 		.word	1073767782
 1561              		.cfi_endproc
 1562              	.LFE23:
 1563              		.size	SIREN_GetTxBufferSize, .-SIREN_GetTxBufferSize
 1564              		.section	.text.SIREN_ClearTxBuffer,"ax",%progbits
 1565              		.align	2
 1566              		.global	SIREN_ClearTxBuffer
 1567              		.thumb
 1568              		.thumb_func
 1569              		.type	SIREN_ClearTxBuffer, %function
 1570              	SIREN_ClearTxBuffer:
 1571              	.LFB24:
1322:Generated_Source\PSoC5/SIREN.c **** 
1323:Generated_Source\PSoC5/SIREN.c **** 
1324:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1325:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_ClearTxBuffer
1326:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1327:Generated_Source\PSoC5/SIREN.c ****     *
1328:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1329:Generated_Source\PSoC5/SIREN.c ****     *  Clears all data from the TX buffer and hardware TX FIFO.
1330:Generated_Source\PSoC5/SIREN.c ****     *
1331:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 52


1332:Generated_Source\PSoC5/SIREN.c ****     *  None.
1333:Generated_Source\PSoC5/SIREN.c ****     *
1334:Generated_Source\PSoC5/SIREN.c ****     * Return:
1335:Generated_Source\PSoC5/SIREN.c ****     *  None.
1336:Generated_Source\PSoC5/SIREN.c ****     *
1337:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
1338:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferWrite - cleared to zero.
1339:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_txBufferRead - cleared to zero.
1340:Generated_Source\PSoC5/SIREN.c ****     *
1341:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1342:Generated_Source\PSoC5/SIREN.c ****     *  No.
1343:Generated_Source\PSoC5/SIREN.c ****     *
1344:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1345:Generated_Source\PSoC5/SIREN.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1346:Generated_Source\PSoC5/SIREN.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1347:Generated_Source\PSoC5/SIREN.c ****     *  remained in the RAM.
1348:Generated_Source\PSoC5/SIREN.c ****     *
1349:Generated_Source\PSoC5/SIREN.c ****     * Side Effects:
1350:Generated_Source\PSoC5/SIREN.c ****     *  Data waiting in the transmit buffer is not sent; a byte that is currently
1351:Generated_Source\PSoC5/SIREN.c ****     *  transmitting finishes transmitting.
1352:Generated_Source\PSoC5/SIREN.c ****     *
1353:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1354:Generated_Source\PSoC5/SIREN.c ****     void SIREN_ClearTxBuffer(void) 
1355:Generated_Source\PSoC5/SIREN.c ****     {
 1572              		.loc 1 1355 0
 1573              		.cfi_startproc
 1574              		@ args = 0, pretend = 0, frame = 8
 1575              		@ frame_needed = 1, uses_anonymous_args = 0
 1576 0000 80B5     		push	{r7, lr}
 1577              		.cfi_def_cfa_offset 8
 1578              		.cfi_offset 7, -8
 1579              		.cfi_offset 14, -4
 1580 0002 82B0     		sub	sp, sp, #8
 1581              		.cfi_def_cfa_offset 16
 1582 0004 00AF     		add	r7, sp, #0
 1583              		.cfi_def_cfa_register 7
1356:Generated_Source\PSoC5/SIREN.c ****         uint8 enableInterrupts;
1357:Generated_Source\PSoC5/SIREN.c **** 
1358:Generated_Source\PSoC5/SIREN.c ****         enableInterrupts = CyEnterCriticalSection();
 1584              		.loc 1 1358 0
 1585 0006 FFF7FEFF 		bl	CyEnterCriticalSection
 1586 000a 0346     		mov	r3, r0
 1587 000c FB71     		strb	r3, [r7, #7]
1359:Generated_Source\PSoC5/SIREN.c ****         /* Clear the HW FIFO */
1360:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXDATA_AUX_CTL_REG |= (uint8)  SIREN_TX_FIFO_CLR;
 1588              		.loc 1 1360 0
 1589 000e 0C4A     		ldr	r2, .L109
 1590 0010 0B4B     		ldr	r3, .L109
 1591 0012 1B78     		ldrb	r3, [r3]
 1592 0014 DBB2     		uxtb	r3, r3
 1593 0016 43F00103 		orr	r3, r3, #1
 1594 001a DBB2     		uxtb	r3, r3
 1595 001c 1370     		strb	r3, [r2]
1361:Generated_Source\PSoC5/SIREN.c ****         SIREN_TXDATA_AUX_CTL_REG &= (uint8) ~SIREN_TX_FIFO_CLR;
 1596              		.loc 1 1361 0
 1597 001e 084A     		ldr	r2, .L109
 1598 0020 074B     		ldr	r3, .L109
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 53


 1599 0022 1B78     		ldrb	r3, [r3]
 1600 0024 DBB2     		uxtb	r3, r3
 1601 0026 23F00103 		bic	r3, r3, #1
 1602 002a DBB2     		uxtb	r3, r3
 1603 002c 1370     		strb	r3, [r2]
1362:Generated_Source\PSoC5/SIREN.c ****         CyExitCriticalSection(enableInterrupts);
 1604              		.loc 1 1362 0
 1605 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1606 0030 1846     		mov	r0, r3
 1607 0032 FFF7FEFF 		bl	CyExitCriticalSection
1363:Generated_Source\PSoC5/SIREN.c **** 
1364:Generated_Source\PSoC5/SIREN.c ****     #if (SIREN_TX_INTERRUPT_ENABLED)
1365:Generated_Source\PSoC5/SIREN.c **** 
1366:Generated_Source\PSoC5/SIREN.c ****         /* Protect variables that could change on interrupt. */
1367:Generated_Source\PSoC5/SIREN.c ****         SIREN_DisableTxInt();
1368:Generated_Source\PSoC5/SIREN.c **** 
1369:Generated_Source\PSoC5/SIREN.c ****         SIREN_txBufferRead = 0u;
1370:Generated_Source\PSoC5/SIREN.c ****         SIREN_txBufferWrite = 0u;
1371:Generated_Source\PSoC5/SIREN.c **** 
1372:Generated_Source\PSoC5/SIREN.c ****         /* Enable Tx interrupt. */
1373:Generated_Source\PSoC5/SIREN.c ****         SIREN_EnableTxInt();
1374:Generated_Source\PSoC5/SIREN.c **** 
1375:Generated_Source\PSoC5/SIREN.c ****     #endif /* (SIREN_TX_INTERRUPT_ENABLED) */
1376:Generated_Source\PSoC5/SIREN.c ****     }
 1608              		.loc 1 1376 0
 1609 0036 00BF     		nop
 1610 0038 0837     		adds	r7, r7, #8
 1611              		.cfi_def_cfa_offset 8
 1612 003a BD46     		mov	sp, r7
 1613              		.cfi_def_cfa_register 13
 1614              		@ sp needed
 1615 003c 80BD     		pop	{r7, pc}
 1616              	.L110:
 1617 003e 00BF     		.align	2
 1618              	.L109:
 1619 0040 96650040 		.word	1073767830
 1620              		.cfi_endproc
 1621              	.LFE24:
 1622              		.size	SIREN_ClearTxBuffer, .-SIREN_ClearTxBuffer
 1623              		.section	.text.SIREN_SendBreak,"ax",%progbits
 1624              		.align	2
 1625              		.global	SIREN_SendBreak
 1626              		.thumb
 1627              		.thumb_func
 1628              		.type	SIREN_SendBreak, %function
 1629              	SIREN_SendBreak:
 1630              	.LFB25:
1377:Generated_Source\PSoC5/SIREN.c **** 
1378:Generated_Source\PSoC5/SIREN.c **** 
1379:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1380:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SendBreak
1381:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1382:Generated_Source\PSoC5/SIREN.c ****     *
1383:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1384:Generated_Source\PSoC5/SIREN.c ****     *  Transmits a break signal on the bus.
1385:Generated_Source\PSoC5/SIREN.c ****     *
1386:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 54


1387:Generated_Source\PSoC5/SIREN.c ****     *  uint8 retMode:  Send Break return mode. See the following table for options.
1388:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_SEND_BREAK - Initialize registers for break, send the Break
1389:Generated_Source\PSoC5/SIREN.c ****     *       signal and return immediately.
1390:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_WAIT_FOR_COMPLETE_REINIT - Wait until break transmission is
1391:Generated_Source\PSoC5/SIREN.c ****     *       complete, reinitialize registers to normal transmission mode then return
1392:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_REINIT - Reinitialize registers to normal transmission mode
1393:Generated_Source\PSoC5/SIREN.c ****     *       then return.
1394:Generated_Source\PSoC5/SIREN.c ****     *   SIREN_SEND_WAIT_REINIT - Performs both options: 
1395:Generated_Source\PSoC5/SIREN.c ****     *      SIREN_SEND_BREAK and SIREN_WAIT_FOR_COMPLETE_REINIT.
1396:Generated_Source\PSoC5/SIREN.c ****     *      This option is recommended for most cases.
1397:Generated_Source\PSoC5/SIREN.c ****     *
1398:Generated_Source\PSoC5/SIREN.c ****     * Return:
1399:Generated_Source\PSoC5/SIREN.c ****     *  None.
1400:Generated_Source\PSoC5/SIREN.c ****     *
1401:Generated_Source\PSoC5/SIREN.c ****     * Global Variables:
1402:Generated_Source\PSoC5/SIREN.c ****     *  SIREN_initVar - checked to identify that the component has been
1403:Generated_Source\PSoC5/SIREN.c ****     *     initialized.
1404:Generated_Source\PSoC5/SIREN.c ****     *  txPeriod - static variable, used for keeping TX period configuration.
1405:Generated_Source\PSoC5/SIREN.c ****     *
1406:Generated_Source\PSoC5/SIREN.c ****     * Reentrant:
1407:Generated_Source\PSoC5/SIREN.c ****     *  No.
1408:Generated_Source\PSoC5/SIREN.c ****     *
1409:Generated_Source\PSoC5/SIREN.c ****     * Theory:
1410:Generated_Source\PSoC5/SIREN.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1411:Generated_Source\PSoC5/SIREN.c ****     *  important to return the registers configuration to normal for continue 8-bit
1412:Generated_Source\PSoC5/SIREN.c ****     *  operation.
1413:Generated_Source\PSoC5/SIREN.c ****     *  There are 3 variants for this API usage:
1414:Generated_Source\PSoC5/SIREN.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1415:Generated_Source\PSoC5/SIREN.c ****     *     configuration returning. Function will block CPU until transmission
1416:Generated_Source\PSoC5/SIREN.c ****     *     complete.
1417:Generated_Source\PSoC5/SIREN.c ****     *  2) User may want to use blocking time if UART configured to the low speed
1418:Generated_Source\PSoC5/SIREN.c ****     *     operation
1419:Generated_Source\PSoC5/SIREN.c ****     *     Example for this case:
1420:Generated_Source\PSoC5/SIREN.c ****     *     SendBreak(0);     - initialize Break signal transmission
1421:Generated_Source\PSoC5/SIREN.c ****     *         Add your code here to use CPU time
1422:Generated_Source\PSoC5/SIREN.c ****     *     SendBreak(1);     - complete Break operation
1423:Generated_Source\PSoC5/SIREN.c ****     *  3) Same to 2) but user may want to initialize and use the interrupt to
1424:Generated_Source\PSoC5/SIREN.c ****     *     complete break operation.
1425:Generated_Source\PSoC5/SIREN.c ****     *     Example for this case:
1426:Generated_Source\PSoC5/SIREN.c ****     *     Initialize TX interrupt with "TX - On TX Complete" parameter
1427:Generated_Source\PSoC5/SIREN.c ****     *     SendBreak(0);     - initialize Break signal transmission
1428:Generated_Source\PSoC5/SIREN.c ****     *         Add your code here to use CPU time
1429:Generated_Source\PSoC5/SIREN.c ****     *     When interrupt appear with SIREN_TX_STS_COMPLETE status:
1430:Generated_Source\PSoC5/SIREN.c ****     *     SendBreak(2);     - complete Break operation
1431:Generated_Source\PSoC5/SIREN.c ****     *
1432:Generated_Source\PSoC5/SIREN.c ****     * Side Effects:
1433:Generated_Source\PSoC5/SIREN.c ****     *  The SIREN_SendBreak() function initializes registers to send a
1434:Generated_Source\PSoC5/SIREN.c ****     *  break signal.
1435:Generated_Source\PSoC5/SIREN.c ****     *  Break signal length depends on the break signal bits configuration.
1436:Generated_Source\PSoC5/SIREN.c ****     *  The register configuration should be reinitialized before normal 8-bit
1437:Generated_Source\PSoC5/SIREN.c ****     *  communication can continue.
1438:Generated_Source\PSoC5/SIREN.c ****     *
1439:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1440:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SendBreak(uint8 retMode) 
1441:Generated_Source\PSoC5/SIREN.c ****     {
 1631              		.loc 1 1441 0
 1632              		.cfi_startproc
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 55


 1633              		@ args = 0, pretend = 0, frame = 16
 1634              		@ frame_needed = 1, uses_anonymous_args = 0
 1635              		@ link register save eliminated.
 1636 0000 80B4     		push	{r7}
 1637              		.cfi_def_cfa_offset 4
 1638              		.cfi_offset 7, -4
 1639 0002 85B0     		sub	sp, sp, #20
 1640              		.cfi_def_cfa_offset 24
 1641 0004 00AF     		add	r7, sp, #0
 1642              		.cfi_def_cfa_register 7
 1643 0006 0346     		mov	r3, r0
 1644 0008 FB71     		strb	r3, [r7, #7]
1442:Generated_Source\PSoC5/SIREN.c **** 
1443:Generated_Source\PSoC5/SIREN.c ****         /* If not Initialized then skip this function*/
1444:Generated_Source\PSoC5/SIREN.c ****         if(SIREN_initVar != 0u)
 1645              		.loc 1 1444 0
 1646 000a 1F4B     		ldr	r3, .L120
 1647 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1648 000e 002B     		cmp	r3, #0
 1649 0010 35D0     		beq	.L119
 1650              	.LBB2:
1445:Generated_Source\PSoC5/SIREN.c ****         {
1446:Generated_Source\PSoC5/SIREN.c ****             /* Set the Counter to 13-bits and transmit a 00 byte */
1447:Generated_Source\PSoC5/SIREN.c ****             /* When that is done then reset the counter value back */
1448:Generated_Source\PSoC5/SIREN.c ****             uint8 tmpStat;
1449:Generated_Source\PSoC5/SIREN.c **** 
1450:Generated_Source\PSoC5/SIREN.c ****         #if(SIREN_HD_ENABLED) /* Half Duplex mode*/
1451:Generated_Source\PSoC5/SIREN.c **** 
1452:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_SEND_BREAK) ||
1453:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT ) )
1454:Generated_Source\PSoC5/SIREN.c ****             {
1455:Generated_Source\PSoC5/SIREN.c ****                 /* CTRL_HD_SEND_BREAK - sends break bits in HD mode */
1456:Generated_Source\PSoC5/SIREN.c ****                 SIREN_WriteControlRegister(SIREN_ReadControlRegister() |
1457:Generated_Source\PSoC5/SIREN.c ****                                                       SIREN_CTRL_HD_SEND_BREAK);
1458:Generated_Source\PSoC5/SIREN.c ****                 /* Send zeros */
1459:Generated_Source\PSoC5/SIREN.c ****                 SIREN_TXDATA_REG = 0u;
1460:Generated_Source\PSoC5/SIREN.c **** 
1461:Generated_Source\PSoC5/SIREN.c ****                 do /* Wait until transmit starts */
1462:Generated_Source\PSoC5/SIREN.c ****                 {
1463:Generated_Source\PSoC5/SIREN.c ****                     tmpStat = SIREN_TXSTATUS_REG;
1464:Generated_Source\PSoC5/SIREN.c ****                 }
1465:Generated_Source\PSoC5/SIREN.c ****                 while((tmpStat & SIREN_TX_STS_FIFO_EMPTY) != 0u);
1466:Generated_Source\PSoC5/SIREN.c ****             }
1467:Generated_Source\PSoC5/SIREN.c **** 
1468:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_WAIT_FOR_COMPLETE_REINIT) ||
1469:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT) )
1470:Generated_Source\PSoC5/SIREN.c ****             {
1471:Generated_Source\PSoC5/SIREN.c ****                 do /* Wait until transmit complete */
1472:Generated_Source\PSoC5/SIREN.c ****                 {
1473:Generated_Source\PSoC5/SIREN.c ****                     tmpStat = SIREN_TXSTATUS_REG;
1474:Generated_Source\PSoC5/SIREN.c ****                 }
1475:Generated_Source\PSoC5/SIREN.c ****                 while(((uint8)~tmpStat & SIREN_TX_STS_COMPLETE) != 0u);
1476:Generated_Source\PSoC5/SIREN.c ****             }
1477:Generated_Source\PSoC5/SIREN.c **** 
1478:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_WAIT_FOR_COMPLETE_REINIT) ||
1479:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_REINIT) ||
1480:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT) )
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 56


1481:Generated_Source\PSoC5/SIREN.c ****             {
1482:Generated_Source\PSoC5/SIREN.c ****                 SIREN_WriteControlRegister(SIREN_ReadControlRegister() &
1483:Generated_Source\PSoC5/SIREN.c ****                                               (uint8)~SIREN_CTRL_HD_SEND_BREAK);
1484:Generated_Source\PSoC5/SIREN.c ****             }
1485:Generated_Source\PSoC5/SIREN.c **** 
1486:Generated_Source\PSoC5/SIREN.c ****         #else /* SIREN_HD_ENABLED Full Duplex mode */
1487:Generated_Source\PSoC5/SIREN.c **** 
1488:Generated_Source\PSoC5/SIREN.c ****             static uint8 txPeriod;
1489:Generated_Source\PSoC5/SIREN.c **** 
1490:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_SEND_BREAK) ||
 1651              		.loc 1 1490 0
 1652 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1653 0014 002B     		cmp	r3, #0
 1654 0016 02D0     		beq	.L113
 1655              		.loc 1 1490 0 is_stmt 0 discriminator 1
 1656 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1657 001a 032B     		cmp	r3, #3
 1658 001c 12D1     		bne	.L114
 1659              	.L113:
1491:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT) )
1492:Generated_Source\PSoC5/SIREN.c ****             {
1493:Generated_Source\PSoC5/SIREN.c ****                 /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex mode
1494:Generated_Source\PSoC5/SIREN.c ****                 #if( (SIREN_PARITY_TYPE != SIREN__B_UART__NONE_REVB) || \
1495:Generated_Source\PSoC5/SIREN.c ****                                     (SIREN_PARITY_TYPE_SW != 0u) )
1496:Generated_Source\PSoC5/SIREN.c ****                     SIREN_WriteControlRegister(SIREN_ReadControlRegister() |
1497:Generated_Source\PSoC5/SIREN.c ****                                                           SIREN_CTRL_HD_SEND_BREAK);
1498:Generated_Source\PSoC5/SIREN.c ****                 #endif /* End SIREN_PARITY_TYPE != SIREN__B_UART__NONE_REVB  */
1499:Generated_Source\PSoC5/SIREN.c **** 
1500:Generated_Source\PSoC5/SIREN.c ****                 #if(SIREN_TXCLKGEN_DP)
1501:Generated_Source\PSoC5/SIREN.c ****                     txPeriod = SIREN_TXBITCLKTX_COMPLETE_REG;
 1660              		.loc 1 1501 0 is_stmt 1
 1661 001e 1B4B     		ldr	r3, .L120+4
 1662 0020 1B78     		ldrb	r3, [r3]
 1663 0022 DAB2     		uxtb	r2, r3
 1664 0024 1A4B     		ldr	r3, .L120+8
 1665 0026 1A70     		strb	r2, [r3]
1502:Generated_Source\PSoC5/SIREN.c ****                     SIREN_TXBITCLKTX_COMPLETE_REG = SIREN_TXBITCTR_BREAKBITS;
 1666              		.loc 1 1502 0
 1667 0028 184B     		ldr	r3, .L120+4
 1668 002a 6722     		movs	r2, #103
 1669 002c 1A70     		strb	r2, [r3]
1503:Generated_Source\PSoC5/SIREN.c ****                 #else
1504:Generated_Source\PSoC5/SIREN.c ****                     txPeriod = SIREN_TXBITCTR_PERIOD_REG;
1505:Generated_Source\PSoC5/SIREN.c ****                     SIREN_TXBITCTR_PERIOD_REG = SIREN_TXBITCTR_BREAKBITS8X;
1506:Generated_Source\PSoC5/SIREN.c ****                 #endif /* End SIREN_TXCLKGEN_DP */
1507:Generated_Source\PSoC5/SIREN.c **** 
1508:Generated_Source\PSoC5/SIREN.c ****                 /* Send zeros */
1509:Generated_Source\PSoC5/SIREN.c ****                 SIREN_TXDATA_REG = 0u;
 1670              		.loc 1 1509 0
 1671 002e 194B     		ldr	r3, .L120+12
 1672 0030 0022     		movs	r2, #0
 1673 0032 1A70     		strb	r2, [r3]
 1674              	.L115:
1510:Generated_Source\PSoC5/SIREN.c **** 
1511:Generated_Source\PSoC5/SIREN.c ****                 do /* Wait until transmit starts */
1512:Generated_Source\PSoC5/SIREN.c ****                 {
1513:Generated_Source\PSoC5/SIREN.c ****                     tmpStat = SIREN_TXSTATUS_REG;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 57


 1675              		.loc 1 1513 0 discriminator 1
 1676 0034 184B     		ldr	r3, .L120+16
 1677 0036 1B78     		ldrb	r3, [r3]
 1678 0038 FB73     		strb	r3, [r7, #15]
1514:Generated_Source\PSoC5/SIREN.c ****                 }
1515:Generated_Source\PSoC5/SIREN.c ****                 while((tmpStat & SIREN_TX_STS_FIFO_EMPTY) != 0u);
 1679              		.loc 1 1515 0 discriminator 1
 1680 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1681 003c 03F00203 		and	r3, r3, #2
 1682 0040 002B     		cmp	r3, #0
 1683 0042 F7D1     		bne	.L115
 1684              	.L114:
1516:Generated_Source\PSoC5/SIREN.c ****             }
1517:Generated_Source\PSoC5/SIREN.c **** 
1518:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_WAIT_FOR_COMPLETE_REINIT) ||
 1685              		.loc 1 1518 0
 1686 0044 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1687 0046 012B     		cmp	r3, #1
 1688 0048 02D0     		beq	.L116
 1689              		.loc 1 1518 0 is_stmt 0 discriminator 1
 1690 004a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1691 004c 032B     		cmp	r3, #3
 1692 004e 09D1     		bne	.L117
 1693              	.L116:
1519:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT) )
1520:Generated_Source\PSoC5/SIREN.c ****             {
1521:Generated_Source\PSoC5/SIREN.c ****                 do /* Wait until transmit complete */
1522:Generated_Source\PSoC5/SIREN.c ****                 {
1523:Generated_Source\PSoC5/SIREN.c ****                     tmpStat = SIREN_TXSTATUS_REG;
 1694              		.loc 1 1523 0 is_stmt 1 discriminator 1
 1695 0050 114B     		ldr	r3, .L120+16
 1696 0052 1B78     		ldrb	r3, [r3]
 1697 0054 FB73     		strb	r3, [r7, #15]
1524:Generated_Source\PSoC5/SIREN.c ****                 }
1525:Generated_Source\PSoC5/SIREN.c ****                 while(((uint8)~tmpStat & SIREN_TX_STS_COMPLETE) != 0u);
 1698              		.loc 1 1525 0 discriminator 1
 1699 0056 FB7B     		ldrb	r3, [r7, #15]
 1700 0058 DB43     		mvns	r3, r3
 1701 005a DBB2     		uxtb	r3, r3
 1702 005c 03F00103 		and	r3, r3, #1
 1703 0060 002B     		cmp	r3, #0
 1704 0062 F5D1     		bne	.L116
 1705              	.L117:
1526:Generated_Source\PSoC5/SIREN.c ****             }
1527:Generated_Source\PSoC5/SIREN.c **** 
1528:Generated_Source\PSoC5/SIREN.c ****             if( (retMode == SIREN_WAIT_FOR_COMPLETE_REINIT) ||
 1706              		.loc 1 1528 0
 1707 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1708 0066 012B     		cmp	r3, #1
 1709 0068 05D0     		beq	.L118
 1710              		.loc 1 1528 0 is_stmt 0 discriminator 1
 1711 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1712 006c 022B     		cmp	r3, #2
 1713 006e 02D0     		beq	.L118
1529:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_REINIT) ||
 1714              		.loc 1 1529 0 is_stmt 1
 1715 0070 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 58


 1716 0072 032B     		cmp	r3, #3
 1717 0074 03D1     		bne	.L119
 1718              	.L118:
1530:Generated_Source\PSoC5/SIREN.c ****                 (retMode == SIREN_SEND_WAIT_REINIT) )
1531:Generated_Source\PSoC5/SIREN.c ****             {
1532:Generated_Source\PSoC5/SIREN.c **** 
1533:Generated_Source\PSoC5/SIREN.c ****             #if(SIREN_TXCLKGEN_DP)
1534:Generated_Source\PSoC5/SIREN.c ****                 SIREN_TXBITCLKTX_COMPLETE_REG = txPeriod;
 1719              		.loc 1 1534 0
 1720 0076 054B     		ldr	r3, .L120+4
 1721 0078 054A     		ldr	r2, .L120+8
 1722 007a 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 1723 007c 1A70     		strb	r2, [r3]
 1724              	.L119:
 1725              	.LBE2:
1535:Generated_Source\PSoC5/SIREN.c ****             #else
1536:Generated_Source\PSoC5/SIREN.c ****                 SIREN_TXBITCTR_PERIOD_REG = txPeriod;
1537:Generated_Source\PSoC5/SIREN.c ****             #endif /* End SIREN_TXCLKGEN_DP */
1538:Generated_Source\PSoC5/SIREN.c **** 
1539:Generated_Source\PSoC5/SIREN.c ****             #if( (SIREN_PARITY_TYPE != SIREN__B_UART__NONE_REVB) || \
1540:Generated_Source\PSoC5/SIREN.c ****                  (SIREN_PARITY_TYPE_SW != 0u) )
1541:Generated_Source\PSoC5/SIREN.c ****                 SIREN_WriteControlRegister(SIREN_ReadControlRegister() &
1542:Generated_Source\PSoC5/SIREN.c ****                                                       (uint8) ~SIREN_CTRL_HD_SEND_BREAK);
1543:Generated_Source\PSoC5/SIREN.c ****             #endif /* End SIREN_PARITY_TYPE != NONE */
1544:Generated_Source\PSoC5/SIREN.c ****             }
1545:Generated_Source\PSoC5/SIREN.c ****         #endif    /* End SIREN_HD_ENABLED */
1546:Generated_Source\PSoC5/SIREN.c ****         }
1547:Generated_Source\PSoC5/SIREN.c ****     }
 1726              		.loc 1 1547 0
 1727 007e 00BF     		nop
 1728 0080 1437     		adds	r7, r7, #20
 1729              		.cfi_def_cfa_offset 4
 1730 0082 BD46     		mov	sp, r7
 1731              		.cfi_def_cfa_register 13
 1732              		@ sp needed
 1733 0084 80BC     		pop	{r7}
 1734              		.cfi_restore 7
 1735              		.cfi_def_cfa_offset 0
 1736 0086 7047     		bx	lr
 1737              	.L121:
 1738              		.align	2
 1739              	.L120:
 1740 0088 00000000 		.word	SIREN_initVar
 1741 008c 35650040 		.word	1073767733
 1742 0090 08000000 		.word	txPeriod.5141
 1743 0094 46650040 		.word	1073767750
 1744 0098 66650040 		.word	1073767782
 1745              		.cfi_endproc
 1746              	.LFE25:
 1747              		.size	SIREN_SendBreak, .-SIREN_SendBreak
 1748              		.section	.text.SIREN_SetTxAddressMode,"ax",%progbits
 1749              		.align	2
 1750              		.global	SIREN_SetTxAddressMode
 1751              		.thumb
 1752              		.thumb_func
 1753              		.type	SIREN_SetTxAddressMode, %function
 1754              	SIREN_SetTxAddressMode:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 59


 1755              	.LFB26:
1548:Generated_Source\PSoC5/SIREN.c **** 
1549:Generated_Source\PSoC5/SIREN.c **** 
1550:Generated_Source\PSoC5/SIREN.c ****     /*******************************************************************************
1551:Generated_Source\PSoC5/SIREN.c ****     * Function Name: SIREN_SetTxAddressMode
1552:Generated_Source\PSoC5/SIREN.c ****     ********************************************************************************
1553:Generated_Source\PSoC5/SIREN.c ****     *
1554:Generated_Source\PSoC5/SIREN.c ****     * Summary:
1555:Generated_Source\PSoC5/SIREN.c ****     *  Configures the transmitter to signal the next bytes is address or data.
1556:Generated_Source\PSoC5/SIREN.c ****     *
1557:Generated_Source\PSoC5/SIREN.c ****     * Parameters:
1558:Generated_Source\PSoC5/SIREN.c ****     *  addressMode: 
1559:Generated_Source\PSoC5/SIREN.c ****     *       SIREN_SET_SPACE - Configure the transmitter to send the next
1560:Generated_Source\PSoC5/SIREN.c ****     *                                    byte as a data.
1561:Generated_Source\PSoC5/SIREN.c ****     *       SIREN_SET_MARK  - Configure the transmitter to send the next
1562:Generated_Source\PSoC5/SIREN.c ****     *                                    byte as an address.
1563:Generated_Source\PSoC5/SIREN.c ****     *
1564:Generated_Source\PSoC5/SIREN.c ****     * Return:
1565:Generated_Source\PSoC5/SIREN.c ****     *  None.
1566:Generated_Source\PSoC5/SIREN.c ****     *
1567:Generated_Source\PSoC5/SIREN.c ****     * Side Effects:
1568:Generated_Source\PSoC5/SIREN.c ****     *  This function sets and clears SIREN_CTRL_MARK bit in the Control
1569:Generated_Source\PSoC5/SIREN.c ****     *  register.
1570:Generated_Source\PSoC5/SIREN.c ****     *
1571:Generated_Source\PSoC5/SIREN.c ****     *******************************************************************************/
1572:Generated_Source\PSoC5/SIREN.c ****     void SIREN_SetTxAddressMode(uint8 addressMode) 
1573:Generated_Source\PSoC5/SIREN.c ****     {
 1756              		.loc 1 1573 0
 1757              		.cfi_startproc
 1758              		@ args = 0, pretend = 0, frame = 8
 1759              		@ frame_needed = 1, uses_anonymous_args = 0
 1760              		@ link register save eliminated.
 1761 0000 80B4     		push	{r7}
 1762              		.cfi_def_cfa_offset 4
 1763              		.cfi_offset 7, -4
 1764 0002 83B0     		sub	sp, sp, #12
 1765              		.cfi_def_cfa_offset 16
 1766 0004 00AF     		add	r7, sp, #0
 1767              		.cfi_def_cfa_register 7
 1768 0006 0346     		mov	r3, r0
 1769 0008 FB71     		strb	r3, [r7, #7]
1574:Generated_Source\PSoC5/SIREN.c ****         /* Mark/Space sending enable */
1575:Generated_Source\PSoC5/SIREN.c ****         if(addressMode != 0u)
1576:Generated_Source\PSoC5/SIREN.c ****         {
1577:Generated_Source\PSoC5/SIREN.c ****         #if( SIREN_CONTROL_REG_REMOVED == 0u )
1578:Generated_Source\PSoC5/SIREN.c ****             SIREN_WriteControlRegister(SIREN_ReadControlRegister() |
1579:Generated_Source\PSoC5/SIREN.c ****                                                   SIREN_CTRL_MARK);
1580:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_CONTROL_REG_REMOVED == 0u */
1581:Generated_Source\PSoC5/SIREN.c ****         }
1582:Generated_Source\PSoC5/SIREN.c ****         else
1583:Generated_Source\PSoC5/SIREN.c ****         {
1584:Generated_Source\PSoC5/SIREN.c ****         #if( SIREN_CONTROL_REG_REMOVED == 0u )
1585:Generated_Source\PSoC5/SIREN.c ****             SIREN_WriteControlRegister(SIREN_ReadControlRegister() &
1586:Generated_Source\PSoC5/SIREN.c ****                                                   (uint8) ~SIREN_CTRL_MARK);
1587:Generated_Source\PSoC5/SIREN.c ****         #endif /* End SIREN_CONTROL_REG_REMOVED == 0u */
1588:Generated_Source\PSoC5/SIREN.c ****         }
1589:Generated_Source\PSoC5/SIREN.c ****     }
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 60


 1770              		.loc 1 1589 0
 1771 000a 00BF     		nop
 1772 000c 0C37     		adds	r7, r7, #12
 1773              		.cfi_def_cfa_offset 4
 1774 000e BD46     		mov	sp, r7
 1775              		.cfi_def_cfa_register 13
 1776              		@ sp needed
 1777 0010 80BC     		pop	{r7}
 1778              		.cfi_restore 7
 1779              		.cfi_def_cfa_offset 0
 1780 0012 7047     		bx	lr
 1781              		.cfi_endproc
 1782              	.LFE26:
 1783              		.size	SIREN_SetTxAddressMode, .-SIREN_SetTxAddressMode
 1784              		.bss
 1785              	txPeriod.5141:
 1786 0008 00       		.space	1
 1787              		.text
 1788              	.Letext0:
 1789              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 1790              		.section	.debug_info,"",%progbits
 1791              	.Ldebug_info0:
 1792 0000 F4050000 		.4byte	0x5f4
 1793 0004 0400     		.2byte	0x4
 1794 0006 00000000 		.4byte	.Ldebug_abbrev0
 1795 000a 04       		.byte	0x4
 1796 000b 01       		.uleb128 0x1
 1797 000c 5E000000 		.4byte	.LASF73
 1798 0010 0C       		.byte	0xc
 1799 0011 AC030000 		.4byte	.LASF74
 1800 0015 0E020000 		.4byte	.LASF75
 1801 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1802 001d 00000000 		.4byte	0
 1803 0021 00000000 		.4byte	.Ldebug_line0
 1804 0025 02       		.uleb128 0x2
 1805 0026 01       		.byte	0x1
 1806 0027 06       		.byte	0x6
 1807 0028 5C010000 		.4byte	.LASF0
 1808 002c 02       		.uleb128 0x2
 1809 002d 01       		.byte	0x1
 1810 002e 08       		.byte	0x8
 1811 002f D0030000 		.4byte	.LASF1
 1812 0033 02       		.uleb128 0x2
 1813 0034 02       		.byte	0x2
 1814 0035 05       		.byte	0x5
 1815 0036 0C040000 		.4byte	.LASF2
 1816 003a 02       		.uleb128 0x2
 1817 003b 02       		.byte	0x2
 1818 003c 07       		.byte	0x7
 1819 003d 81020000 		.4byte	.LASF3
 1820 0041 02       		.uleb128 0x2
 1821 0042 04       		.byte	0x4
 1822 0043 05       		.byte	0x5
 1823 0044 A1010000 		.4byte	.LASF4
 1824 0048 02       		.uleb128 0x2
 1825 0049 04       		.byte	0x4
 1826 004a 07       		.byte	0x7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 61


 1827 004b 4D020000 		.4byte	.LASF5
 1828 004f 02       		.uleb128 0x2
 1829 0050 08       		.byte	0x8
 1830 0051 05       		.byte	0x5
 1831 0052 4E010000 		.4byte	.LASF6
 1832 0056 02       		.uleb128 0x2
 1833 0057 08       		.byte	0x8
 1834 0058 07       		.byte	0x7
 1835 0059 0D010000 		.4byte	.LASF7
 1836 005d 03       		.uleb128 0x3
 1837 005e 04       		.byte	0x4
 1838 005f 05       		.byte	0x5
 1839 0060 696E7400 		.ascii	"int\000"
 1840 0064 02       		.uleb128 0x2
 1841 0065 04       		.byte	0x4
 1842 0066 07       		.byte	0x7
 1843 0067 F4010000 		.4byte	.LASF8
 1844 006b 04       		.uleb128 0x4
 1845 006c AA010000 		.4byte	.LASF9
 1846 0070 02       		.byte	0x2
 1847 0071 E401     		.2byte	0x1e4
 1848 0073 2C000000 		.4byte	0x2c
 1849 0077 04       		.uleb128 0x4
 1850 0078 00000000 		.4byte	.LASF10
 1851 007c 02       		.byte	0x2
 1852 007d E501     		.2byte	0x1e5
 1853 007f 3A000000 		.4byte	0x3a
 1854 0083 04       		.uleb128 0x4
 1855 0084 DD010000 		.4byte	.LASF11
 1856 0088 02       		.byte	0x2
 1857 0089 E601     		.2byte	0x1e6
 1858 008b 48000000 		.4byte	0x48
 1859 008f 02       		.uleb128 0x2
 1860 0090 04       		.byte	0x4
 1861 0091 04       		.byte	0x4
 1862 0092 A6030000 		.4byte	.LASF12
 1863 0096 02       		.uleb128 0x2
 1864 0097 08       		.byte	0x8
 1865 0098 04       		.byte	0x4
 1866 0099 CA010000 		.4byte	.LASF13
 1867 009d 04       		.uleb128 0x4
 1868 009e 80040000 		.4byte	.LASF14
 1869 00a2 02       		.byte	0x2
 1870 00a3 F501     		.2byte	0x1f5
 1871 00a5 A9000000 		.4byte	0xa9
 1872 00a9 02       		.uleb128 0x2
 1873 00aa 01       		.byte	0x1
 1874 00ab 08       		.byte	0x8
 1875 00ac 56040000 		.4byte	.LASF15
 1876 00b0 04       		.uleb128 0x4
 1877 00b1 CB030000 		.4byte	.LASF16
 1878 00b5 02       		.byte	0x2
 1879 00b6 8E02     		.2byte	0x28e
 1880 00b8 BC000000 		.4byte	0xbc
 1881 00bc 05       		.uleb128 0x5
 1882 00bd 6B000000 		.4byte	0x6b
 1883 00c1 05       		.uleb128 0x5
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 62


 1884 00c2 77000000 		.4byte	0x77
 1885 00c6 04       		.uleb128 0x4
 1886 00c7 11030000 		.4byte	.LASF17
 1887 00cb 02       		.byte	0x2
 1888 00cc 9002     		.2byte	0x290
 1889 00ce D2000000 		.4byte	0xd2
 1890 00d2 05       		.uleb128 0x5
 1891 00d3 83000000 		.4byte	0x83
 1892 00d7 02       		.uleb128 0x2
 1893 00d8 08       		.byte	0x8
 1894 00d9 04       		.byte	0x4
 1895 00da 38030000 		.4byte	.LASF18
 1896 00de 02       		.uleb128 0x2
 1897 00df 04       		.byte	0x4
 1898 00e0 07       		.byte	0x7
 1899 00e1 2F030000 		.4byte	.LASF19
 1900 00e5 06       		.uleb128 0x6
 1901 00e6 16040000 		.4byte	.LASF20
 1902 00ea 01       		.byte	0x1
 1903 00eb 4C       		.byte	0x4c
 1904 00ec 00000000 		.4byte	.LFB0
 1905 00f0 24000000 		.4byte	.LFE0-.LFB0
 1906 00f4 01       		.uleb128 0x1
 1907 00f5 9C       		.byte	0x9c
 1908 00f6 06       		.uleb128 0x6
 1909 00f7 B6020000 		.4byte	.LASF21
 1910 00fb 01       		.byte	0x1
 1911 00fc 6A       		.byte	0x6a
 1912 00fd 00000000 		.4byte	.LFB1
 1913 0101 58000000 		.4byte	.LFE1-.LFB1
 1914 0105 01       		.uleb128 0x1
 1915 0106 9C       		.byte	0x9c
 1916 0107 07       		.uleb128 0x7
 1917 0108 01020000 		.4byte	.LASF22
 1918 010c 01       		.byte	0x1
 1919 010d B7       		.byte	0xb7
 1920 010e 00000000 		.4byte	.LFB2
 1921 0112 68000000 		.4byte	.LFE2-.LFB2
 1922 0116 01       		.uleb128 0x1
 1923 0117 9C       		.byte	0x9c
 1924 0118 2B010000 		.4byte	0x12b
 1925 011c 08       		.uleb128 0x8
 1926 011d BB040000 		.4byte	.LASF24
 1927 0121 01       		.byte	0x1
 1928 0122 B9       		.byte	0xb9
 1929 0123 6B000000 		.4byte	0x6b
 1930 0127 02       		.uleb128 0x2
 1931 0128 91       		.byte	0x91
 1932 0129 77       		.sleb128 -9
 1933 012a 00       		.byte	0
 1934 012b 07       		.uleb128 0x7
 1935 012c 41000000 		.4byte	.LASF23
 1936 0130 01       		.byte	0x1
 1937 0131 F0       		.byte	0xf0
 1938 0132 00000000 		.4byte	.LFB3
 1939 0136 68000000 		.4byte	.LFE3-.LFB3
 1940 013a 01       		.uleb128 0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 63


 1941 013b 9C       		.byte	0x9c
 1942 013c 4F010000 		.4byte	0x14f
 1943 0140 08       		.uleb128 0x8
 1944 0141 BB040000 		.4byte	.LASF24
 1945 0145 01       		.byte	0x1
 1946 0146 F2       		.byte	0xf2
 1947 0147 6B000000 		.4byte	0x6b
 1948 014b 02       		.uleb128 0x2
 1949 014c 91       		.byte	0x91
 1950 014d 77       		.sleb128 -9
 1951 014e 00       		.byte	0
 1952 014f 09       		.uleb128 0x9
 1953 0150 B0010000 		.4byte	.LASF50
 1954 0154 01       		.byte	0x1
 1955 0155 2701     		.2byte	0x127
 1956 0157 6B000000 		.4byte	0x6b
 1957 015b 00000000 		.4byte	.LFB4
 1958 015f 0E000000 		.4byte	.LFE4-.LFB4
 1959 0163 01       		.uleb128 0x1
 1960 0164 9C       		.byte	0x9c
 1961 0165 0A       		.uleb128 0xa
 1962 0166 8B030000 		.4byte	.LASF25
 1963 016a 01       		.byte	0x1
 1964 016b 3F01     		.2byte	0x13f
 1965 016d 00000000 		.4byte	.LFB5
 1966 0171 14000000 		.4byte	.LFE5-.LFB5
 1967 0175 01       		.uleb128 0x1
 1968 0176 9C       		.byte	0x9c
 1969 0177 8B010000 		.4byte	0x18b
 1970 017b 0B       		.uleb128 0xb
 1971 017c E4010000 		.4byte	.LASF27
 1972 0180 01       		.byte	0x1
 1973 0181 3F01     		.2byte	0x13f
 1974 0183 6B000000 		.4byte	0x6b
 1975 0187 02       		.uleb128 0x2
 1976 0188 91       		.byte	0x91
 1977 0189 77       		.sleb128 -9
 1978 018a 00       		.byte	0
 1979 018b 0A       		.uleb128 0xa
 1980 018c 68010000 		.4byte	.LASF26
 1981 0190 01       		.byte	0x1
 1982 0191 6701     		.2byte	0x167
 1983 0193 00000000 		.4byte	.LFB6
 1984 0197 20000000 		.4byte	.LFE6-.LFB6
 1985 019b 01       		.uleb128 0x1
 1986 019c 9C       		.byte	0x9c
 1987 019d B1010000 		.4byte	0x1b1
 1988 01a1 0B       		.uleb128 0xb
 1989 01a2 CF020000 		.4byte	.LASF28
 1990 01a6 01       		.byte	0x1
 1991 01a7 6701     		.2byte	0x167
 1992 01a9 6B000000 		.4byte	0x6b
 1993 01ad 02       		.uleb128 0x2
 1994 01ae 91       		.byte	0x91
 1995 01af 77       		.sleb128 -9
 1996 01b0 00       		.byte	0
 1997 01b1 0C       		.uleb128 0xc
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 64


 1998 01b2 60030000 		.4byte	.LASF32
 1999 01b6 01       		.byte	0x1
 2000 01b7 8801     		.2byte	0x188
 2001 01b9 6B000000 		.4byte	0x6b
 2002 01bd 00000000 		.4byte	.LFB7
 2003 01c1 90000000 		.4byte	.LFE7-.LFB7
 2004 01c5 01       		.uleb128 0x1
 2005 01c6 9C       		.byte	0x9c
 2006 01c7 F9010000 		.4byte	0x1f9
 2007 01cb 0D       		.uleb128 0xd
 2008 01cc 4F040000 		.4byte	.LASF29
 2009 01d0 01       		.byte	0x1
 2010 01d1 8A01     		.2byte	0x18a
 2011 01d3 6B000000 		.4byte	0x6b
 2012 01d7 02       		.uleb128 0x2
 2013 01d8 91       		.byte	0x91
 2014 01d9 77       		.sleb128 -9
 2015 01da 0D       		.uleb128 0xd
 2016 01db 95040000 		.4byte	.LASF30
 2017 01df 01       		.byte	0x1
 2018 01e0 8E01     		.2byte	0x18e
 2019 01e2 77000000 		.4byte	0x77
 2020 01e6 02       		.uleb128 0x2
 2021 01e7 91       		.byte	0x91
 2022 01e8 74       		.sleb128 -12
 2023 01e9 0D       		.uleb128 0xd
 2024 01ea 71030000 		.4byte	.LASF31
 2025 01ee 01       		.byte	0x1
 2026 01ef 8F01     		.2byte	0x18f
 2027 01f1 77000000 		.4byte	0x77
 2028 01f5 02       		.uleb128 0x2
 2029 01f6 91       		.byte	0x91
 2030 01f7 72       		.sleb128 -14
 2031 01f8 00       		.byte	0
 2032 01f9 0C       		.uleb128 0xc
 2033 01fa 22040000 		.4byte	.LASF33
 2034 01fe 01       		.byte	0x1
 2035 01ff E501     		.2byte	0x1e5
 2036 0201 6B000000 		.4byte	0x6b
 2037 0205 00000000 		.4byte	.LFB8
 2038 0209 40000000 		.4byte	.LFE8-.LFB8
 2039 020d 01       		.uleb128 0x1
 2040 020e 9C       		.byte	0x9c
 2041 020f 23020000 		.4byte	0x223
 2042 0213 0D       		.uleb128 0xd
 2043 0214 DA040000 		.4byte	.LASF34
 2044 0218 01       		.byte	0x1
 2045 0219 E701     		.2byte	0x1e7
 2046 021b 6B000000 		.4byte	0x6b
 2047 021f 02       		.uleb128 0x2
 2048 0220 91       		.byte	0x91
 2049 0221 77       		.sleb128 -9
 2050 0222 00       		.byte	0
 2051 0223 0C       		.uleb128 0xc
 2052 0224 5F020000 		.4byte	.LASF35
 2053 0228 01       		.byte	0x1
 2054 0229 1402     		.2byte	0x214
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 65


 2055 022b 6B000000 		.4byte	0x6b
 2056 022f 00000000 		.4byte	.LFB9
 2057 0233 B8000000 		.4byte	.LFE9-.LFB9
 2058 0237 01       		.uleb128 0x1
 2059 0238 9C       		.byte	0x9c
 2060 0239 7A020000 		.4byte	0x27a
 2061 023d 0D       		.uleb128 0xd
 2062 023e 4F040000 		.4byte	.LASF29
 2063 0242 01       		.byte	0x1
 2064 0243 1602     		.2byte	0x216
 2065 0245 6B000000 		.4byte	0x6b
 2066 0249 02       		.uleb128 0x2
 2067 024a 91       		.byte	0x91
 2068 024b 77       		.sleb128 -9
 2069 024c 0D       		.uleb128 0xd
 2070 024d 82030000 		.4byte	.LASF36
 2071 0251 01       		.byte	0x1
 2072 0252 1702     		.2byte	0x217
 2073 0254 6B000000 		.4byte	0x6b
 2074 0258 02       		.uleb128 0x2
 2075 0259 91       		.byte	0x91
 2076 025a 71       		.sleb128 -15
 2077 025b 0D       		.uleb128 0xd
 2078 025c 95040000 		.4byte	.LASF30
 2079 0260 01       		.byte	0x1
 2080 0261 1A02     		.2byte	0x21a
 2081 0263 77000000 		.4byte	0x77
 2082 0267 02       		.uleb128 0x2
 2083 0268 91       		.byte	0x91
 2084 0269 74       		.sleb128 -12
 2085 026a 0D       		.uleb128 0xd
 2086 026b 71030000 		.4byte	.LASF31
 2087 026f 01       		.byte	0x1
 2088 0270 1B02     		.2byte	0x21b
 2089 0272 77000000 		.4byte	0x77
 2090 0276 02       		.uleb128 0x2
 2091 0277 91       		.byte	0x91
 2092 0278 72       		.sleb128 -14
 2093 0279 00       		.byte	0
 2094 027a 0E       		.uleb128 0xe
 2095 027b CC040000 		.4byte	.LASF37
 2096 027f 01       		.byte	0x1
 2097 0280 7A02     		.2byte	0x27a
 2098 0282 77000000 		.4byte	0x77
 2099 0286 00000000 		.4byte	.LFB10
 2100 028a 44000000 		.4byte	.LFE10-.LFB10
 2101 028e 01       		.uleb128 0x1
 2102 028f 9C       		.byte	0x9c
 2103 0290 A4020000 		.4byte	0x2a4
 2104 0294 0D       		.uleb128 0xd
 2105 0295 3E020000 		.4byte	.LASF38
 2106 0299 01       		.byte	0x1
 2107 029a 7E02     		.2byte	0x27e
 2108 029c 77000000 		.4byte	0x77
 2109 02a0 02       		.uleb128 0x2
 2110 02a1 91       		.byte	0x91
 2111 02a2 6E       		.sleb128 -18
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 66


 2112 02a3 00       		.byte	0
 2113 02a4 0C       		.uleb128 0xc
 2114 02a5 38010000 		.4byte	.LASF39
 2115 02a9 01       		.byte	0x1
 2116 02aa AB02     		.2byte	0x2ab
 2117 02ac 77000000 		.4byte	0x77
 2118 02b0 00000000 		.4byte	.LFB11
 2119 02b4 94000000 		.4byte	.LFE11-.LFB11
 2120 02b8 01       		.uleb128 0x1
 2121 02b9 9C       		.byte	0x9c
 2122 02ba CE020000 		.4byte	0x2ce
 2123 02be 0D       		.uleb128 0xd
 2124 02bf 7C020000 		.4byte	.LASF40
 2125 02c3 01       		.byte	0x1
 2126 02c4 AE02     		.2byte	0x2ae
 2127 02c6 77000000 		.4byte	0x77
 2128 02ca 02       		.uleb128 0x2
 2129 02cb 91       		.byte	0x91
 2130 02cc 76       		.sleb128 -10
 2131 02cd 00       		.byte	0
 2132 02ce 0F       		.uleb128 0xf
 2133 02cf 24010000 		.4byte	.LASF41
 2134 02d3 01       		.byte	0x1
 2135 02d4 F502     		.2byte	0x2f5
 2136 02d6 00000000 		.4byte	.LFB12
 2137 02da 80000000 		.4byte	.LFE12-.LFB12
 2138 02de 01       		.uleb128 0x1
 2139 02df 9C       		.byte	0x9c
 2140 02e0 F4020000 		.4byte	0x2f4
 2141 02e4 0D       		.uleb128 0xd
 2142 02e5 BB040000 		.4byte	.LASF24
 2143 02e9 01       		.byte	0x1
 2144 02ea F702     		.2byte	0x2f7
 2145 02ec 6B000000 		.4byte	0x6b
 2146 02f0 02       		.uleb128 0x2
 2147 02f1 91       		.byte	0x91
 2148 02f2 77       		.sleb128 -9
 2149 02f3 00       		.byte	0
 2150 02f4 0A       		.uleb128 0xa
 2151 02f5 8A010000 		.4byte	.LASF42
 2152 02f9 01       		.byte	0x1
 2153 02fa 2D03     		.2byte	0x32d
 2154 02fc 00000000 		.4byte	.LFB13
 2155 0300 14000000 		.4byte	.LFE13-.LFB13
 2156 0304 01       		.uleb128 0x1
 2157 0305 9C       		.byte	0x9c
 2158 0306 1A030000 		.4byte	0x31a
 2159 030a 0B       		.uleb128 0xb
 2160 030b D1010000 		.4byte	.LASF43
 2161 030f 01       		.byte	0x1
 2162 0310 2D03     		.2byte	0x32d
 2163 0312 6B000000 		.4byte	0x6b
 2164 0316 02       		.uleb128 0x2
 2165 0317 91       		.byte	0x91
 2166 0318 77       		.sleb128 -9
 2167 0319 00       		.byte	0
 2168 031a 0A       		.uleb128 0xa
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 67


 2169 031b 19000000 		.4byte	.LASF44
 2170 031f 01       		.byte	0x1
 2171 0320 5903     		.2byte	0x359
 2172 0322 00000000 		.4byte	.LFB14
 2173 0326 20000000 		.4byte	.LFE14-.LFB14
 2174 032a 01       		.uleb128 0x1
 2175 032b 9C       		.byte	0x9c
 2176 032c 40030000 		.4byte	0x340
 2177 0330 0B       		.uleb128 0xb
 2178 0331 58030000 		.4byte	.LASF45
 2179 0335 01       		.byte	0x1
 2180 0336 5903     		.2byte	0x359
 2181 0338 6B000000 		.4byte	0x6b
 2182 033c 02       		.uleb128 0x2
 2183 033d 91       		.byte	0x91
 2184 033e 77       		.sleb128 -9
 2185 033f 00       		.byte	0
 2186 0340 0A       		.uleb128 0xa
 2187 0341 2D000000 		.4byte	.LASF46
 2188 0345 01       		.byte	0x1
 2189 0346 6D03     		.2byte	0x36d
 2190 0348 00000000 		.4byte	.LFB15
 2191 034c 20000000 		.4byte	.LFE15-.LFB15
 2192 0350 01       		.uleb128 0x1
 2193 0351 9C       		.byte	0x9c
 2194 0352 66030000 		.4byte	0x366
 2195 0356 0B       		.uleb128 0xb
 2196 0357 58030000 		.4byte	.LASF45
 2197 035b 01       		.byte	0x1
 2198 035c 6D03     		.2byte	0x36d
 2199 035e 6B000000 		.4byte	0x6b
 2200 0362 02       		.uleb128 0x2
 2201 0363 91       		.byte	0x91
 2202 0364 77       		.sleb128 -9
 2203 0365 00       		.byte	0
 2204 0366 0A       		.uleb128 0xa
 2205 0367 EA020000 		.4byte	.LASF47
 2206 036b 01       		.byte	0x1
 2207 036c 8C03     		.2byte	0x38c
 2208 036e 00000000 		.4byte	.LFB16
 2209 0372 20000000 		.4byte	.LFE16-.LFB16
 2210 0376 01       		.uleb128 0x1
 2211 0377 9C       		.byte	0x9c
 2212 0378 8C030000 		.4byte	0x38c
 2213 037c 0B       		.uleb128 0xb
 2214 037d CF020000 		.4byte	.LASF28
 2215 0381 01       		.byte	0x1
 2216 0382 8C03     		.2byte	0x38c
 2217 0384 6B000000 		.4byte	0x6b
 2218 0388 02       		.uleb128 0x2
 2219 0389 91       		.byte	0x91
 2220 038a 77       		.sleb128 -9
 2221 038b 00       		.byte	0
 2222 038c 0A       		.uleb128 0xa
 2223 038d 6E040000 		.4byte	.LASF48
 2224 0391 01       		.byte	0x1
 2225 0392 AE03     		.2byte	0x3ae
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 68


 2226 0394 00000000 		.4byte	.LFB17
 2227 0398 2C000000 		.4byte	.LFE17-.LFB17
 2228 039c 01       		.uleb128 0x1
 2229 039d 9C       		.byte	0x9c
 2230 039e B2030000 		.4byte	0x3b2
 2231 03a2 0B       		.uleb128 0xb
 2232 03a3 4C000000 		.4byte	.LASF49
 2233 03a7 01       		.byte	0x1
 2234 03a8 AE03     		.2byte	0x3ae
 2235 03aa 6B000000 		.4byte	0x6b
 2236 03ae 02       		.uleb128 0x2
 2237 03af 91       		.byte	0x91
 2238 03b0 77       		.sleb128 -9
 2239 03b1 00       		.byte	0
 2240 03b2 09       		.uleb128 0x9
 2241 03b3 5B040000 		.4byte	.LASF51
 2242 03b7 01       		.byte	0x1
 2243 03b8 EB03     		.2byte	0x3eb
 2244 03ba 6B000000 		.4byte	0x6b
 2245 03be 00000000 		.4byte	.LFB18
 2246 03c2 18000000 		.4byte	.LFE18-.LFB18
 2247 03c6 01       		.uleb128 0x1
 2248 03c7 9C       		.byte	0x9c
 2249 03c8 0A       		.uleb128 0xa
 2250 03c9 03030000 		.4byte	.LASF52
 2251 03cd 01       		.byte	0x1
 2252 03ce 1104     		.2byte	0x411
 2253 03d0 00000000 		.4byte	.LFB19
 2254 03d4 34000000 		.4byte	.LFE19-.LFB19
 2255 03d8 01       		.uleb128 0x1
 2256 03d9 9C       		.byte	0x9c
 2257 03da EE030000 		.4byte	0x3ee
 2258 03de 0B       		.uleb128 0xb
 2259 03df 4C000000 		.4byte	.LASF49
 2260 03e3 01       		.byte	0x1
 2261 03e4 1104     		.2byte	0x411
 2262 03e6 6B000000 		.4byte	0x6b
 2263 03ea 02       		.uleb128 0x2
 2264 03eb 91       		.byte	0x91
 2265 03ec 77       		.sleb128 -9
 2266 03ed 00       		.byte	0
 2267 03ee 0F       		.uleb128 0xf
 2268 03ef 3F040000 		.4byte	.LASF53
 2269 03f3 01       		.byte	0x1
 2270 03f4 7904     		.2byte	0x479
 2271 03f6 00000000 		.4byte	.LFB20
 2272 03fa 44000000 		.4byte	.LFE20-.LFB20
 2273 03fe 01       		.uleb128 0x1
 2274 03ff 9C       		.byte	0x9c
 2275 0400 23040000 		.4byte	0x423
 2276 0404 0B       		.uleb128 0xb
 2277 0405 57000000 		.4byte	.LASF54
 2278 0409 01       		.byte	0x1
 2279 040a 7904     		.2byte	0x479
 2280 040c 23040000 		.4byte	0x423
 2281 0410 02       		.uleb128 0x2
 2282 0411 91       		.byte	0x91
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 69


 2283 0412 6C       		.sleb128 -20
 2284 0413 0D       		.uleb128 0xd
 2285 0414 94020000 		.4byte	.LASF55
 2286 0418 01       		.byte	0x1
 2287 0419 7B04     		.2byte	0x47b
 2288 041b 77000000 		.4byte	0x77
 2289 041f 02       		.uleb128 0x2
 2290 0420 91       		.byte	0x91
 2291 0421 76       		.sleb128 -10
 2292 0422 00       		.byte	0
 2293 0423 10       		.uleb128 0x10
 2294 0424 04       		.byte	0x4
 2295 0425 29040000 		.4byte	0x429
 2296 0429 11       		.uleb128 0x11
 2297 042a 9D000000 		.4byte	0x9d
 2298 042e 0F       		.uleb128 0xf
 2299 042f 86040000 		.4byte	.LASF56
 2300 0433 01       		.byte	0x1
 2301 0434 A704     		.2byte	0x4a7
 2302 0436 00000000 		.4byte	.LFB21
 2303 043a 44000000 		.4byte	.LFE21-.LFB21
 2304 043e 01       		.uleb128 0x1
 2305 043f 9C       		.byte	0x9c
 2306 0440 72040000 		.4byte	0x472
 2307 0444 0B       		.uleb128 0xb
 2308 0445 57000000 		.4byte	.LASF54
 2309 0449 01       		.byte	0x1
 2310 044a A704     		.2byte	0x4a7
 2311 044c 72040000 		.4byte	0x472
 2312 0450 02       		.uleb128 0x2
 2313 0451 91       		.byte	0x91
 2314 0452 6C       		.sleb128 -20
 2315 0453 0B       		.uleb128 0xb
 2316 0454 35040000 		.4byte	.LASF57
 2317 0458 01       		.byte	0x1
 2318 0459 A704     		.2byte	0x4a7
 2319 045b 6B000000 		.4byte	0x6b
 2320 045f 02       		.uleb128 0x2
 2321 0460 91       		.byte	0x91
 2322 0461 6B       		.sleb128 -21
 2323 0462 0D       		.uleb128 0xd
 2324 0463 94020000 		.4byte	.LASF55
 2325 0467 01       		.byte	0x1
 2326 0468 AA04     		.2byte	0x4aa
 2327 046a 6B000000 		.4byte	0x6b
 2328 046e 02       		.uleb128 0x2
 2329 046f 91       		.byte	0x91
 2330 0470 77       		.sleb128 -9
 2331 0471 00       		.byte	0
 2332 0472 10       		.uleb128 0x10
 2333 0473 04       		.byte	0x4
 2334 0474 78040000 		.4byte	0x478
 2335 0478 11       		.uleb128 0x11
 2336 0479 6B000000 		.4byte	0x6b
 2337 047d 0F       		.uleb128 0xf
 2338 047e FF000000 		.4byte	.LASF58
 2339 0482 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 70


 2340 0483 CE04     		.2byte	0x4ce
 2341 0485 00000000 		.4byte	.LFB22
 2342 0489 34000000 		.4byte	.LFE22-.LFB22
 2343 048d 01       		.uleb128 0x1
 2344 048e 9C       		.byte	0x9c
 2345 048f A3040000 		.4byte	0x4a3
 2346 0493 0B       		.uleb128 0xb
 2347 0494 4C000000 		.4byte	.LASF49
 2348 0498 01       		.byte	0x1
 2349 0499 CE04     		.2byte	0x4ce
 2350 049b 6B000000 		.4byte	0x6b
 2351 049f 02       		.uleb128 0x2
 2352 04a0 91       		.byte	0x91
 2353 04a1 77       		.sleb128 -9
 2354 04a2 00       		.byte	0
 2355 04a3 0C       		.uleb128 0xc
 2356 04a4 A5040000 		.4byte	.LASF59
 2357 04a8 01       		.byte	0x1
 2358 04a9 F904     		.2byte	0x4f9
 2359 04ab 6B000000 		.4byte	0x6b
 2360 04af 00000000 		.4byte	.LFB23
 2361 04b3 40000000 		.4byte	.LFE23-.LFB23
 2362 04b7 01       		.uleb128 0x1
 2363 04b8 9C       		.byte	0x9c
 2364 04b9 CD040000 		.4byte	0x4cd
 2365 04bd 0D       		.uleb128 0xd
 2366 04be 7C020000 		.4byte	.LASF40
 2367 04c2 01       		.byte	0x1
 2368 04c3 FC04     		.2byte	0x4fc
 2369 04c5 6B000000 		.4byte	0x6b
 2370 04c9 02       		.uleb128 0x2
 2371 04ca 91       		.byte	0x91
 2372 04cb 77       		.sleb128 -9
 2373 04cc 00       		.byte	0
 2374 04cd 0F       		.uleb128 0xf
 2375 04ce 44030000 		.4byte	.LASF60
 2376 04d2 01       		.byte	0x1
 2377 04d3 4A05     		.2byte	0x54a
 2378 04d5 00000000 		.4byte	.LFB24
 2379 04d9 44000000 		.4byte	.LFE24-.LFB24
 2380 04dd 01       		.uleb128 0x1
 2381 04de 9C       		.byte	0x9c
 2382 04df F3040000 		.4byte	0x4f3
 2383 04e3 0D       		.uleb128 0xd
 2384 04e4 BB040000 		.4byte	.LASF24
 2385 04e8 01       		.byte	0x1
 2386 04e9 4C05     		.2byte	0x54c
 2387 04eb 6B000000 		.4byte	0x6b
 2388 04ef 02       		.uleb128 0x2
 2389 04f0 91       		.byte	0x91
 2390 04f1 77       		.sleb128 -9
 2391 04f2 00       		.byte	0
 2392 04f3 0A       		.uleb128 0xa
 2393 04f4 17030000 		.4byte	.LASF61
 2394 04f8 01       		.byte	0x1
 2395 04f9 A005     		.2byte	0x5a0
 2396 04fb 00000000 		.4byte	.LFB25
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 71


 2397 04ff 9C000000 		.4byte	.LFE25-.LFB25
 2398 0503 01       		.uleb128 0x1
 2399 0504 9C       		.byte	0x9c
 2400 0505 44050000 		.4byte	0x544
 2401 0509 0B       		.uleb128 0xb
 2402 050a EC010000 		.4byte	.LASF62
 2403 050e 01       		.byte	0x1
 2404 050f A005     		.2byte	0x5a0
 2405 0511 6B000000 		.4byte	0x6b
 2406 0515 02       		.uleb128 0x2
 2407 0516 91       		.byte	0x91
 2408 0517 6F       		.sleb128 -17
 2409 0518 12       		.uleb128 0x12
 2410 0519 12000000 		.4byte	.LBB2
 2411 051d 6C000000 		.4byte	.LBE2-.LBB2
 2412 0521 0D       		.uleb128 0xd
 2413 0522 27030000 		.4byte	.LASF63
 2414 0526 01       		.byte	0x1
 2415 0527 A805     		.2byte	0x5a8
 2416 0529 6B000000 		.4byte	0x6b
 2417 052d 02       		.uleb128 0x2
 2418 052e 91       		.byte	0x91
 2419 052f 77       		.sleb128 -9
 2420 0530 0D       		.uleb128 0xd
 2421 0531 81010000 		.4byte	.LASF64
 2422 0535 01       		.byte	0x1
 2423 0536 D005     		.2byte	0x5d0
 2424 0538 6B000000 		.4byte	0x6b
 2425 053c 05       		.uleb128 0x5
 2426 053d 03       		.byte	0x3
 2427 053e 08000000 		.4byte	txPeriod.5141
 2428 0542 00       		.byte	0
 2429 0543 00       		.byte	0
 2430 0544 0A       		.uleb128 0xa
 2431 0545 F5030000 		.4byte	.LASF65
 2432 0549 01       		.byte	0x1
 2433 054a 2406     		.2byte	0x624
 2434 054c 00000000 		.4byte	.LFB26
 2435 0550 14000000 		.4byte	.LFE26-.LFB26
 2436 0554 01       		.uleb128 0x1
 2437 0555 9C       		.byte	0x9c
 2438 0556 6A050000 		.4byte	0x56a
 2439 055a 0B       		.uleb128 0xb
 2440 055b D1010000 		.4byte	.LASF43
 2441 055f 01       		.byte	0x1
 2442 0560 2406     		.2byte	0x624
 2443 0562 6B000000 		.4byte	0x6b
 2444 0566 02       		.uleb128 0x2
 2445 0567 91       		.byte	0x91
 2446 0568 77       		.sleb128 -9
 2447 0569 00       		.byte	0
 2448 056a 13       		.uleb128 0x13
 2449 056b C1020000 		.4byte	.LASF66
 2450 056f 01       		.byte	0x1
 2451 0570 1B       		.byte	0x1b
 2452 0571 6B000000 		.4byte	0x6b
 2453 0575 05       		.uleb128 0x5
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 72


 2454 0576 03       		.byte	0x3
 2455 0577 00000000 		.4byte	SIREN_initVar
 2456 057b 13       		.uleb128 0x13
 2457 057c 07000000 		.4byte	.LASF67
 2458 0580 01       		.byte	0x1
 2459 0581 24       		.byte	0x24
 2460 0582 6B000000 		.4byte	0x6b
 2461 0586 05       		.uleb128 0x5
 2462 0587 03       		.byte	0x3
 2463 0588 00000000 		.4byte	SIREN_errorStatus
 2464 058c 14       		.uleb128 0x14
 2465 058d BC000000 		.4byte	0xbc
 2466 0591 9D050000 		.4byte	0x59d
 2467 0595 15       		.uleb128 0x15
 2468 0596 DE000000 		.4byte	0xde
 2469 059a FF01     		.2byte	0x1ff
 2470 059c 00       		.byte	0
 2471 059d 13       		.uleb128 0x13
 2472 059e 6D020000 		.4byte	.LASF68
 2473 05a2 01       		.byte	0x1
 2474 05a3 25       		.byte	0x25
 2475 05a4 AE050000 		.4byte	0x5ae
 2476 05a8 05       		.uleb128 0x5
 2477 05a9 03       		.byte	0x3
 2478 05aa 00000000 		.4byte	SIREN_rxBuffer
 2479 05ae 05       		.uleb128 0x5
 2480 05af 8C050000 		.4byte	0x58c
 2481 05b3 13       		.uleb128 0x13
 2482 05b4 EC000000 		.4byte	.LASF69
 2483 05b8 01       		.byte	0x1
 2484 05b9 26       		.byte	0x26
 2485 05ba C1000000 		.4byte	0xc1
 2486 05be 05       		.uleb128 0x5
 2487 05bf 03       		.byte	0x3
 2488 05c0 00000000 		.4byte	SIREN_rxBufferRead
 2489 05c4 13       		.uleb128 0x13
 2490 05c5 D6020000 		.4byte	.LASF70
 2491 05c9 01       		.byte	0x1
 2492 05ca 27       		.byte	0x27
 2493 05cb C1000000 		.4byte	0xc1
 2494 05cf 05       		.uleb128 0x5
 2495 05d0 03       		.byte	0x3
 2496 05d1 00000000 		.4byte	SIREN_rxBufferWrite
 2497 05d5 13       		.uleb128 0x13
 2498 05d6 9D020000 		.4byte	.LASF71
 2499 05da 01       		.byte	0x1
 2500 05db 28       		.byte	0x28
 2501 05dc BC000000 		.4byte	0xbc
 2502 05e0 05       		.uleb128 0x5
 2503 05e1 03       		.byte	0x3
 2504 05e2 00000000 		.4byte	SIREN_rxBufferLoopDetect
 2505 05e6 13       		.uleb128 0x13
 2506 05e7 DE030000 		.4byte	.LASF72
 2507 05eb 01       		.byte	0x1
 2508 05ec 29       		.byte	0x29
 2509 05ed BC000000 		.4byte	0xbc
 2510 05f1 05       		.uleb128 0x5
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 73


 2511 05f2 03       		.byte	0x3
 2512 05f3 00000000 		.4byte	SIREN_rxBufferOverflow
 2513 05f7 00       		.byte	0
 2514              		.section	.debug_abbrev,"",%progbits
 2515              	.Ldebug_abbrev0:
 2516 0000 01       		.uleb128 0x1
 2517 0001 11       		.uleb128 0x11
 2518 0002 01       		.byte	0x1
 2519 0003 25       		.uleb128 0x25
 2520 0004 0E       		.uleb128 0xe
 2521 0005 13       		.uleb128 0x13
 2522 0006 0B       		.uleb128 0xb
 2523 0007 03       		.uleb128 0x3
 2524 0008 0E       		.uleb128 0xe
 2525 0009 1B       		.uleb128 0x1b
 2526 000a 0E       		.uleb128 0xe
 2527 000b 55       		.uleb128 0x55
 2528 000c 17       		.uleb128 0x17
 2529 000d 11       		.uleb128 0x11
 2530 000e 01       		.uleb128 0x1
 2531 000f 10       		.uleb128 0x10
 2532 0010 17       		.uleb128 0x17
 2533 0011 00       		.byte	0
 2534 0012 00       		.byte	0
 2535 0013 02       		.uleb128 0x2
 2536 0014 24       		.uleb128 0x24
 2537 0015 00       		.byte	0
 2538 0016 0B       		.uleb128 0xb
 2539 0017 0B       		.uleb128 0xb
 2540 0018 3E       		.uleb128 0x3e
 2541 0019 0B       		.uleb128 0xb
 2542 001a 03       		.uleb128 0x3
 2543 001b 0E       		.uleb128 0xe
 2544 001c 00       		.byte	0
 2545 001d 00       		.byte	0
 2546 001e 03       		.uleb128 0x3
 2547 001f 24       		.uleb128 0x24
 2548 0020 00       		.byte	0
 2549 0021 0B       		.uleb128 0xb
 2550 0022 0B       		.uleb128 0xb
 2551 0023 3E       		.uleb128 0x3e
 2552 0024 0B       		.uleb128 0xb
 2553 0025 03       		.uleb128 0x3
 2554 0026 08       		.uleb128 0x8
 2555 0027 00       		.byte	0
 2556 0028 00       		.byte	0
 2557 0029 04       		.uleb128 0x4
 2558 002a 16       		.uleb128 0x16
 2559 002b 00       		.byte	0
 2560 002c 03       		.uleb128 0x3
 2561 002d 0E       		.uleb128 0xe
 2562 002e 3A       		.uleb128 0x3a
 2563 002f 0B       		.uleb128 0xb
 2564 0030 3B       		.uleb128 0x3b
 2565 0031 05       		.uleb128 0x5
 2566 0032 49       		.uleb128 0x49
 2567 0033 13       		.uleb128 0x13
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 74


 2568 0034 00       		.byte	0
 2569 0035 00       		.byte	0
 2570 0036 05       		.uleb128 0x5
 2571 0037 35       		.uleb128 0x35
 2572 0038 00       		.byte	0
 2573 0039 49       		.uleb128 0x49
 2574 003a 13       		.uleb128 0x13
 2575 003b 00       		.byte	0
 2576 003c 00       		.byte	0
 2577 003d 06       		.uleb128 0x6
 2578 003e 2E       		.uleb128 0x2e
 2579 003f 00       		.byte	0
 2580 0040 3F       		.uleb128 0x3f
 2581 0041 19       		.uleb128 0x19
 2582 0042 03       		.uleb128 0x3
 2583 0043 0E       		.uleb128 0xe
 2584 0044 3A       		.uleb128 0x3a
 2585 0045 0B       		.uleb128 0xb
 2586 0046 3B       		.uleb128 0x3b
 2587 0047 0B       		.uleb128 0xb
 2588 0048 27       		.uleb128 0x27
 2589 0049 19       		.uleb128 0x19
 2590 004a 11       		.uleb128 0x11
 2591 004b 01       		.uleb128 0x1
 2592 004c 12       		.uleb128 0x12
 2593 004d 06       		.uleb128 0x6
 2594 004e 40       		.uleb128 0x40
 2595 004f 18       		.uleb128 0x18
 2596 0050 9642     		.uleb128 0x2116
 2597 0052 19       		.uleb128 0x19
 2598 0053 00       		.byte	0
 2599 0054 00       		.byte	0
 2600 0055 07       		.uleb128 0x7
 2601 0056 2E       		.uleb128 0x2e
 2602 0057 01       		.byte	0x1
 2603 0058 3F       		.uleb128 0x3f
 2604 0059 19       		.uleb128 0x19
 2605 005a 03       		.uleb128 0x3
 2606 005b 0E       		.uleb128 0xe
 2607 005c 3A       		.uleb128 0x3a
 2608 005d 0B       		.uleb128 0xb
 2609 005e 3B       		.uleb128 0x3b
 2610 005f 0B       		.uleb128 0xb
 2611 0060 27       		.uleb128 0x27
 2612 0061 19       		.uleb128 0x19
 2613 0062 11       		.uleb128 0x11
 2614 0063 01       		.uleb128 0x1
 2615 0064 12       		.uleb128 0x12
 2616 0065 06       		.uleb128 0x6
 2617 0066 40       		.uleb128 0x40
 2618 0067 18       		.uleb128 0x18
 2619 0068 9642     		.uleb128 0x2116
 2620 006a 19       		.uleb128 0x19
 2621 006b 01       		.uleb128 0x1
 2622 006c 13       		.uleb128 0x13
 2623 006d 00       		.byte	0
 2624 006e 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 75


 2625 006f 08       		.uleb128 0x8
 2626 0070 34       		.uleb128 0x34
 2627 0071 00       		.byte	0
 2628 0072 03       		.uleb128 0x3
 2629 0073 0E       		.uleb128 0xe
 2630 0074 3A       		.uleb128 0x3a
 2631 0075 0B       		.uleb128 0xb
 2632 0076 3B       		.uleb128 0x3b
 2633 0077 0B       		.uleb128 0xb
 2634 0078 49       		.uleb128 0x49
 2635 0079 13       		.uleb128 0x13
 2636 007a 02       		.uleb128 0x2
 2637 007b 18       		.uleb128 0x18
 2638 007c 00       		.byte	0
 2639 007d 00       		.byte	0
 2640 007e 09       		.uleb128 0x9
 2641 007f 2E       		.uleb128 0x2e
 2642 0080 00       		.byte	0
 2643 0081 3F       		.uleb128 0x3f
 2644 0082 19       		.uleb128 0x19
 2645 0083 03       		.uleb128 0x3
 2646 0084 0E       		.uleb128 0xe
 2647 0085 3A       		.uleb128 0x3a
 2648 0086 0B       		.uleb128 0xb
 2649 0087 3B       		.uleb128 0x3b
 2650 0088 05       		.uleb128 0x5
 2651 0089 27       		.uleb128 0x27
 2652 008a 19       		.uleb128 0x19
 2653 008b 49       		.uleb128 0x49
 2654 008c 13       		.uleb128 0x13
 2655 008d 11       		.uleb128 0x11
 2656 008e 01       		.uleb128 0x1
 2657 008f 12       		.uleb128 0x12
 2658 0090 06       		.uleb128 0x6
 2659 0091 40       		.uleb128 0x40
 2660 0092 18       		.uleb128 0x18
 2661 0093 9742     		.uleb128 0x2117
 2662 0095 19       		.uleb128 0x19
 2663 0096 00       		.byte	0
 2664 0097 00       		.byte	0
 2665 0098 0A       		.uleb128 0xa
 2666 0099 2E       		.uleb128 0x2e
 2667 009a 01       		.byte	0x1
 2668 009b 3F       		.uleb128 0x3f
 2669 009c 19       		.uleb128 0x19
 2670 009d 03       		.uleb128 0x3
 2671 009e 0E       		.uleb128 0xe
 2672 009f 3A       		.uleb128 0x3a
 2673 00a0 0B       		.uleb128 0xb
 2674 00a1 3B       		.uleb128 0x3b
 2675 00a2 05       		.uleb128 0x5
 2676 00a3 27       		.uleb128 0x27
 2677 00a4 19       		.uleb128 0x19
 2678 00a5 11       		.uleb128 0x11
 2679 00a6 01       		.uleb128 0x1
 2680 00a7 12       		.uleb128 0x12
 2681 00a8 06       		.uleb128 0x6
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 76


 2682 00a9 40       		.uleb128 0x40
 2683 00aa 18       		.uleb128 0x18
 2684 00ab 9742     		.uleb128 0x2117
 2685 00ad 19       		.uleb128 0x19
 2686 00ae 01       		.uleb128 0x1
 2687 00af 13       		.uleb128 0x13
 2688 00b0 00       		.byte	0
 2689 00b1 00       		.byte	0
 2690 00b2 0B       		.uleb128 0xb
 2691 00b3 05       		.uleb128 0x5
 2692 00b4 00       		.byte	0
 2693 00b5 03       		.uleb128 0x3
 2694 00b6 0E       		.uleb128 0xe
 2695 00b7 3A       		.uleb128 0x3a
 2696 00b8 0B       		.uleb128 0xb
 2697 00b9 3B       		.uleb128 0x3b
 2698 00ba 05       		.uleb128 0x5
 2699 00bb 49       		.uleb128 0x49
 2700 00bc 13       		.uleb128 0x13
 2701 00bd 02       		.uleb128 0x2
 2702 00be 18       		.uleb128 0x18
 2703 00bf 00       		.byte	0
 2704 00c0 00       		.byte	0
 2705 00c1 0C       		.uleb128 0xc
 2706 00c2 2E       		.uleb128 0x2e
 2707 00c3 01       		.byte	0x1
 2708 00c4 3F       		.uleb128 0x3f
 2709 00c5 19       		.uleb128 0x19
 2710 00c6 03       		.uleb128 0x3
 2711 00c7 0E       		.uleb128 0xe
 2712 00c8 3A       		.uleb128 0x3a
 2713 00c9 0B       		.uleb128 0xb
 2714 00ca 3B       		.uleb128 0x3b
 2715 00cb 05       		.uleb128 0x5
 2716 00cc 27       		.uleb128 0x27
 2717 00cd 19       		.uleb128 0x19
 2718 00ce 49       		.uleb128 0x49
 2719 00cf 13       		.uleb128 0x13
 2720 00d0 11       		.uleb128 0x11
 2721 00d1 01       		.uleb128 0x1
 2722 00d2 12       		.uleb128 0x12
 2723 00d3 06       		.uleb128 0x6
 2724 00d4 40       		.uleb128 0x40
 2725 00d5 18       		.uleb128 0x18
 2726 00d6 9742     		.uleb128 0x2117
 2727 00d8 19       		.uleb128 0x19
 2728 00d9 01       		.uleb128 0x1
 2729 00da 13       		.uleb128 0x13
 2730 00db 00       		.byte	0
 2731 00dc 00       		.byte	0
 2732 00dd 0D       		.uleb128 0xd
 2733 00de 34       		.uleb128 0x34
 2734 00df 00       		.byte	0
 2735 00e0 03       		.uleb128 0x3
 2736 00e1 0E       		.uleb128 0xe
 2737 00e2 3A       		.uleb128 0x3a
 2738 00e3 0B       		.uleb128 0xb
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 77


 2739 00e4 3B       		.uleb128 0x3b
 2740 00e5 05       		.uleb128 0x5
 2741 00e6 49       		.uleb128 0x49
 2742 00e7 13       		.uleb128 0x13
 2743 00e8 02       		.uleb128 0x2
 2744 00e9 18       		.uleb128 0x18
 2745 00ea 00       		.byte	0
 2746 00eb 00       		.byte	0
 2747 00ec 0E       		.uleb128 0xe
 2748 00ed 2E       		.uleb128 0x2e
 2749 00ee 01       		.byte	0x1
 2750 00ef 3F       		.uleb128 0x3f
 2751 00f0 19       		.uleb128 0x19
 2752 00f1 03       		.uleb128 0x3
 2753 00f2 0E       		.uleb128 0xe
 2754 00f3 3A       		.uleb128 0x3a
 2755 00f4 0B       		.uleb128 0xb
 2756 00f5 3B       		.uleb128 0x3b
 2757 00f6 05       		.uleb128 0x5
 2758 00f7 27       		.uleb128 0x27
 2759 00f8 19       		.uleb128 0x19
 2760 00f9 49       		.uleb128 0x49
 2761 00fa 13       		.uleb128 0x13
 2762 00fb 11       		.uleb128 0x11
 2763 00fc 01       		.uleb128 0x1
 2764 00fd 12       		.uleb128 0x12
 2765 00fe 06       		.uleb128 0x6
 2766 00ff 40       		.uleb128 0x40
 2767 0100 18       		.uleb128 0x18
 2768 0101 9642     		.uleb128 0x2116
 2769 0103 19       		.uleb128 0x19
 2770 0104 01       		.uleb128 0x1
 2771 0105 13       		.uleb128 0x13
 2772 0106 00       		.byte	0
 2773 0107 00       		.byte	0
 2774 0108 0F       		.uleb128 0xf
 2775 0109 2E       		.uleb128 0x2e
 2776 010a 01       		.byte	0x1
 2777 010b 3F       		.uleb128 0x3f
 2778 010c 19       		.uleb128 0x19
 2779 010d 03       		.uleb128 0x3
 2780 010e 0E       		.uleb128 0xe
 2781 010f 3A       		.uleb128 0x3a
 2782 0110 0B       		.uleb128 0xb
 2783 0111 3B       		.uleb128 0x3b
 2784 0112 05       		.uleb128 0x5
 2785 0113 27       		.uleb128 0x27
 2786 0114 19       		.uleb128 0x19
 2787 0115 11       		.uleb128 0x11
 2788 0116 01       		.uleb128 0x1
 2789 0117 12       		.uleb128 0x12
 2790 0118 06       		.uleb128 0x6
 2791 0119 40       		.uleb128 0x40
 2792 011a 18       		.uleb128 0x18
 2793 011b 9642     		.uleb128 0x2116
 2794 011d 19       		.uleb128 0x19
 2795 011e 01       		.uleb128 0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 78


 2796 011f 13       		.uleb128 0x13
 2797 0120 00       		.byte	0
 2798 0121 00       		.byte	0
 2799 0122 10       		.uleb128 0x10
 2800 0123 0F       		.uleb128 0xf
 2801 0124 00       		.byte	0
 2802 0125 0B       		.uleb128 0xb
 2803 0126 0B       		.uleb128 0xb
 2804 0127 49       		.uleb128 0x49
 2805 0128 13       		.uleb128 0x13
 2806 0129 00       		.byte	0
 2807 012a 00       		.byte	0
 2808 012b 11       		.uleb128 0x11
 2809 012c 26       		.uleb128 0x26
 2810 012d 00       		.byte	0
 2811 012e 49       		.uleb128 0x49
 2812 012f 13       		.uleb128 0x13
 2813 0130 00       		.byte	0
 2814 0131 00       		.byte	0
 2815 0132 12       		.uleb128 0x12
 2816 0133 0B       		.uleb128 0xb
 2817 0134 01       		.byte	0x1
 2818 0135 11       		.uleb128 0x11
 2819 0136 01       		.uleb128 0x1
 2820 0137 12       		.uleb128 0x12
 2821 0138 06       		.uleb128 0x6
 2822 0139 00       		.byte	0
 2823 013a 00       		.byte	0
 2824 013b 13       		.uleb128 0x13
 2825 013c 34       		.uleb128 0x34
 2826 013d 00       		.byte	0
 2827 013e 03       		.uleb128 0x3
 2828 013f 0E       		.uleb128 0xe
 2829 0140 3A       		.uleb128 0x3a
 2830 0141 0B       		.uleb128 0xb
 2831 0142 3B       		.uleb128 0x3b
 2832 0143 0B       		.uleb128 0xb
 2833 0144 49       		.uleb128 0x49
 2834 0145 13       		.uleb128 0x13
 2835 0146 3F       		.uleb128 0x3f
 2836 0147 19       		.uleb128 0x19
 2837 0148 02       		.uleb128 0x2
 2838 0149 18       		.uleb128 0x18
 2839 014a 00       		.byte	0
 2840 014b 00       		.byte	0
 2841 014c 14       		.uleb128 0x14
 2842 014d 01       		.uleb128 0x1
 2843 014e 01       		.byte	0x1
 2844 014f 49       		.uleb128 0x49
 2845 0150 13       		.uleb128 0x13
 2846 0151 01       		.uleb128 0x1
 2847 0152 13       		.uleb128 0x13
 2848 0153 00       		.byte	0
 2849 0154 00       		.byte	0
 2850 0155 15       		.uleb128 0x15
 2851 0156 21       		.uleb128 0x21
 2852 0157 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 79


 2853 0158 49       		.uleb128 0x49
 2854 0159 13       		.uleb128 0x13
 2855 015a 2F       		.uleb128 0x2f
 2856 015b 05       		.uleb128 0x5
 2857 015c 00       		.byte	0
 2858 015d 00       		.byte	0
 2859 015e 00       		.byte	0
 2860              		.section	.debug_aranges,"",%progbits
 2861 0000 EC000000 		.4byte	0xec
 2862 0004 0200     		.2byte	0x2
 2863 0006 00000000 		.4byte	.Ldebug_info0
 2864 000a 04       		.byte	0x4
 2865 000b 00       		.byte	0
 2866 000c 0000     		.2byte	0
 2867 000e 0000     		.2byte	0
 2868 0010 00000000 		.4byte	.LFB0
 2869 0014 24000000 		.4byte	.LFE0-.LFB0
 2870 0018 00000000 		.4byte	.LFB1
 2871 001c 58000000 		.4byte	.LFE1-.LFB1
 2872 0020 00000000 		.4byte	.LFB2
 2873 0024 68000000 		.4byte	.LFE2-.LFB2
 2874 0028 00000000 		.4byte	.LFB3
 2875 002c 68000000 		.4byte	.LFE3-.LFB3
 2876 0030 00000000 		.4byte	.LFB4
 2877 0034 0E000000 		.4byte	.LFE4-.LFB4
 2878 0038 00000000 		.4byte	.LFB5
 2879 003c 14000000 		.4byte	.LFE5-.LFB5
 2880 0040 00000000 		.4byte	.LFB6
 2881 0044 20000000 		.4byte	.LFE6-.LFB6
 2882 0048 00000000 		.4byte	.LFB7
 2883 004c 90000000 		.4byte	.LFE7-.LFB7
 2884 0050 00000000 		.4byte	.LFB8
 2885 0054 40000000 		.4byte	.LFE8-.LFB8
 2886 0058 00000000 		.4byte	.LFB9
 2887 005c B8000000 		.4byte	.LFE9-.LFB9
 2888 0060 00000000 		.4byte	.LFB10
 2889 0064 44000000 		.4byte	.LFE10-.LFB10
 2890 0068 00000000 		.4byte	.LFB11
 2891 006c 94000000 		.4byte	.LFE11-.LFB11
 2892 0070 00000000 		.4byte	.LFB12
 2893 0074 80000000 		.4byte	.LFE12-.LFB12
 2894 0078 00000000 		.4byte	.LFB13
 2895 007c 14000000 		.4byte	.LFE13-.LFB13
 2896 0080 00000000 		.4byte	.LFB14
 2897 0084 20000000 		.4byte	.LFE14-.LFB14
 2898 0088 00000000 		.4byte	.LFB15
 2899 008c 20000000 		.4byte	.LFE15-.LFB15
 2900 0090 00000000 		.4byte	.LFB16
 2901 0094 20000000 		.4byte	.LFE16-.LFB16
 2902 0098 00000000 		.4byte	.LFB17
 2903 009c 2C000000 		.4byte	.LFE17-.LFB17
 2904 00a0 00000000 		.4byte	.LFB18
 2905 00a4 18000000 		.4byte	.LFE18-.LFB18
 2906 00a8 00000000 		.4byte	.LFB19
 2907 00ac 34000000 		.4byte	.LFE19-.LFB19
 2908 00b0 00000000 		.4byte	.LFB20
 2909 00b4 44000000 		.4byte	.LFE20-.LFB20
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 80


 2910 00b8 00000000 		.4byte	.LFB21
 2911 00bc 44000000 		.4byte	.LFE21-.LFB21
 2912 00c0 00000000 		.4byte	.LFB22
 2913 00c4 34000000 		.4byte	.LFE22-.LFB22
 2914 00c8 00000000 		.4byte	.LFB23
 2915 00cc 40000000 		.4byte	.LFE23-.LFB23
 2916 00d0 00000000 		.4byte	.LFB24
 2917 00d4 44000000 		.4byte	.LFE24-.LFB24
 2918 00d8 00000000 		.4byte	.LFB25
 2919 00dc 9C000000 		.4byte	.LFE25-.LFB25
 2920 00e0 00000000 		.4byte	.LFB26
 2921 00e4 14000000 		.4byte	.LFE26-.LFB26
 2922 00e8 00000000 		.4byte	0
 2923 00ec 00000000 		.4byte	0
 2924              		.section	.debug_ranges,"",%progbits
 2925              	.Ldebug_ranges0:
 2926 0000 00000000 		.4byte	.LFB0
 2927 0004 24000000 		.4byte	.LFE0
 2928 0008 00000000 		.4byte	.LFB1
 2929 000c 58000000 		.4byte	.LFE1
 2930 0010 00000000 		.4byte	.LFB2
 2931 0014 68000000 		.4byte	.LFE2
 2932 0018 00000000 		.4byte	.LFB3
 2933 001c 68000000 		.4byte	.LFE3
 2934 0020 00000000 		.4byte	.LFB4
 2935 0024 0E000000 		.4byte	.LFE4
 2936 0028 00000000 		.4byte	.LFB5
 2937 002c 14000000 		.4byte	.LFE5
 2938 0030 00000000 		.4byte	.LFB6
 2939 0034 20000000 		.4byte	.LFE6
 2940 0038 00000000 		.4byte	.LFB7
 2941 003c 90000000 		.4byte	.LFE7
 2942 0040 00000000 		.4byte	.LFB8
 2943 0044 40000000 		.4byte	.LFE8
 2944 0048 00000000 		.4byte	.LFB9
 2945 004c B8000000 		.4byte	.LFE9
 2946 0050 00000000 		.4byte	.LFB10
 2947 0054 44000000 		.4byte	.LFE10
 2948 0058 00000000 		.4byte	.LFB11
 2949 005c 94000000 		.4byte	.LFE11
 2950 0060 00000000 		.4byte	.LFB12
 2951 0064 80000000 		.4byte	.LFE12
 2952 0068 00000000 		.4byte	.LFB13
 2953 006c 14000000 		.4byte	.LFE13
 2954 0070 00000000 		.4byte	.LFB14
 2955 0074 20000000 		.4byte	.LFE14
 2956 0078 00000000 		.4byte	.LFB15
 2957 007c 20000000 		.4byte	.LFE15
 2958 0080 00000000 		.4byte	.LFB16
 2959 0084 20000000 		.4byte	.LFE16
 2960 0088 00000000 		.4byte	.LFB17
 2961 008c 2C000000 		.4byte	.LFE17
 2962 0090 00000000 		.4byte	.LFB18
 2963 0094 18000000 		.4byte	.LFE18
 2964 0098 00000000 		.4byte	.LFB19
 2965 009c 34000000 		.4byte	.LFE19
 2966 00a0 00000000 		.4byte	.LFB20
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 81


 2967 00a4 44000000 		.4byte	.LFE20
 2968 00a8 00000000 		.4byte	.LFB21
 2969 00ac 44000000 		.4byte	.LFE21
 2970 00b0 00000000 		.4byte	.LFB22
 2971 00b4 34000000 		.4byte	.LFE22
 2972 00b8 00000000 		.4byte	.LFB23
 2973 00bc 40000000 		.4byte	.LFE23
 2974 00c0 00000000 		.4byte	.LFB24
 2975 00c4 44000000 		.4byte	.LFE24
 2976 00c8 00000000 		.4byte	.LFB25
 2977 00cc 9C000000 		.4byte	.LFE25
 2978 00d0 00000000 		.4byte	.LFB26
 2979 00d4 14000000 		.4byte	.LFE26
 2980 00d8 00000000 		.4byte	0
 2981 00dc 00000000 		.4byte	0
 2982              		.section	.debug_line,"",%progbits
 2983              	.Ldebug_line0:
 2984 0000 08030000 		.section	.debug_str,"MS",%progbits,1
 2984      02004200 
 2984      00000201 
 2984      FB0E0D00 
 2984      01010101 
 2985              	.LASF10:
 2986 0000 75696E74 		.ascii	"uint16\000"
 2986      313600
 2987              	.LASF67:
 2988 0007 53495245 		.ascii	"SIREN_errorStatus\000"
 2988      4E5F6572 
 2988      726F7253 
 2988      74617475 
 2988      7300
 2989              	.LASF44:
 2990 0019 53495245 		.ascii	"SIREN_SetRxAddress1\000"
 2990      4E5F5365 
 2990      74527841 
 2990      64647265 
 2990      73733100 
 2991              	.LASF46:
 2992 002d 53495245 		.ascii	"SIREN_SetRxAddress2\000"
 2992      4E5F5365 
 2992      74527841 
 2992      64647265 
 2992      73733200 
 2993              	.LASF23:
 2994 0041 53495245 		.ascii	"SIREN_Stop\000"
 2994      4E5F5374 
 2994      6F7000
 2995              	.LASF49:
 2996 004c 74784461 		.ascii	"txDataByte\000"
 2996      74614279 
 2996      746500
 2997              	.LASF54:
 2998 0057 73747269 		.ascii	"string\000"
 2998      6E6700
 2999              	.LASF73:
 3000 005e 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3000      43313120 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 82


 3000      352E342E 
 3000      31203230 
 3000      31363036 
 3001 0091 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3001      20726576 
 3001      6973696F 
 3001      6E203233 
 3001      37373135 
 3002 00c4 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3002      66756E63 
 3002      74696F6E 
 3002      2D736563 
 3002      74696F6E 
 3003              	.LASF69:
 3004 00ec 53495245 		.ascii	"SIREN_rxBufferRead\000"
 3004      4E5F7278 
 3004      42756666 
 3004      65725265 
 3004      616400
 3005              	.LASF58:
 3006 00ff 53495245 		.ascii	"SIREN_PutCRLF\000"
 3006      4E5F5075 
 3006      7443524C 
 3006      4600
 3007              	.LASF7:
 3008 010d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3008      206C6F6E 
 3008      6720756E 
 3008      7369676E 
 3008      65642069 
 3009              	.LASF41:
 3010 0124 53495245 		.ascii	"SIREN_ClearRxBuffer\000"
 3010      4E5F436C 
 3010      65617252 
 3010      78427566 
 3010      66657200 
 3011              	.LASF39:
 3012 0138 53495245 		.ascii	"SIREN_GetRxBufferSize\000"
 3012      4E5F4765 
 3012      74527842 
 3012      75666665 
 3012      7253697A 
 3013              	.LASF6:
 3014 014e 6C6F6E67 		.ascii	"long long int\000"
 3014      206C6F6E 
 3014      6720696E 
 3014      7400
 3015              	.LASF0:
 3016 015c 7369676E 		.ascii	"signed char\000"
 3016      65642063 
 3016      68617200 
 3017              	.LASF26:
 3018 0168 53495245 		.ascii	"SIREN_SetRxInterruptMode\000"
 3018      4E5F5365 
 3018      74527849 
 3018      6E746572 
 3018      72757074 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 83


 3019              	.LASF64:
 3020 0181 74785065 		.ascii	"txPeriod\000"
 3020      72696F64 
 3020      00
 3021              	.LASF42:
 3022 018a 53495245 		.ascii	"SIREN_SetRxAddressMode\000"
 3022      4E5F5365 
 3022      74527841 
 3022      64647265 
 3022      73734D6F 
 3023              	.LASF4:
 3024 01a1 6C6F6E67 		.ascii	"long int\000"
 3024      20696E74 
 3024      00
 3025              	.LASF9:
 3026 01aa 75696E74 		.ascii	"uint8\000"
 3026      3800
 3027              	.LASF50:
 3028 01b0 53495245 		.ascii	"SIREN_ReadControlRegister\000"
 3028      4E5F5265 
 3028      6164436F 
 3028      6E74726F 
 3028      6C526567 
 3029              	.LASF13:
 3030 01ca 646F7562 		.ascii	"double\000"
 3030      6C6500
 3031              	.LASF43:
 3032 01d1 61646472 		.ascii	"addressMode\000"
 3032      6573734D 
 3032      6F646500 
 3033              	.LASF11:
 3034 01dd 75696E74 		.ascii	"uint32\000"
 3034      333200
 3035              	.LASF27:
 3036 01e4 636F6E74 		.ascii	"control\000"
 3036      726F6C00 
 3037              	.LASF62:
 3038 01ec 7265744D 		.ascii	"retMode\000"
 3038      6F646500 
 3039              	.LASF8:
 3040 01f4 756E7369 		.ascii	"unsigned int\000"
 3040      676E6564 
 3040      20696E74 
 3040      00
 3041              	.LASF22:
 3042 0201 53495245 		.ascii	"SIREN_Enable\000"
 3042      4E5F456E 
 3042      61626C65 
 3042      00
 3043              	.LASF75:
 3044 020e 433A5C55 		.ascii	"C:\\Users\\marthnick\\Desktop\\ReleaseVersion.cydsn"
 3044      73657273 
 3044      5C6D6172 
 3044      74686E69 
 3044      636B5C44 
 3045 023d 00       		.ascii	"\000"
 3046              	.LASF38:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 84


 3047 023e 6C6F6345 		.ascii	"locErrorStatus\000"
 3047      72726F72 
 3047      53746174 
 3047      757300
 3048              	.LASF5:
 3049 024d 6C6F6E67 		.ascii	"long unsigned int\000"
 3049      20756E73 
 3049      69676E65 
 3049      6420696E 
 3049      7400
 3050              	.LASF35:
 3051 025f 53495245 		.ascii	"SIREN_GetChar\000"
 3051      4E5F4765 
 3051      74436861 
 3051      7200
 3052              	.LASF68:
 3053 026d 53495245 		.ascii	"SIREN_rxBuffer\000"
 3053      4E5F7278 
 3053      42756666 
 3053      657200
 3054              	.LASF40:
 3055 027c 73697A65 		.ascii	"size\000"
 3055      00
 3056              	.LASF3:
 3057 0281 73686F72 		.ascii	"short unsigned int\000"
 3057      7420756E 
 3057      7369676E 
 3057      65642069 
 3057      6E7400
 3058              	.LASF55:
 3059 0294 62756649 		.ascii	"bufIndex\000"
 3059      6E646578 
 3059      00
 3060              	.LASF71:
 3061 029d 53495245 		.ascii	"SIREN_rxBufferLoopDetect\000"
 3061      4E5F7278 
 3061      42756666 
 3061      65724C6F 
 3061      6F704465 
 3062              	.LASF21:
 3063 02b6 53495245 		.ascii	"SIREN_Init\000"
 3063      4E5F496E 
 3063      697400
 3064              	.LASF66:
 3065 02c1 53495245 		.ascii	"SIREN_initVar\000"
 3065      4E5F696E 
 3065      69745661 
 3065      7200
 3066              	.LASF28:
 3067 02cf 696E7453 		.ascii	"intSrc\000"
 3067      726300
 3068              	.LASF70:
 3069 02d6 53495245 		.ascii	"SIREN_rxBufferWrite\000"
 3069      4E5F7278 
 3069      42756666 
 3069      65725772 
 3069      69746500 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 85


 3070              	.LASF47:
 3071 02ea 53495245 		.ascii	"SIREN_SetTxInterruptMode\000"
 3071      4E5F5365 
 3071      74547849 
 3071      6E746572 
 3071      72757074 
 3072              	.LASF52:
 3073 0303 53495245 		.ascii	"SIREN_PutChar\000"
 3073      4E5F5075 
 3073      74436861 
 3073      7200
 3074              	.LASF17:
 3075 0311 72656733 		.ascii	"reg32\000"
 3075      3200
 3076              	.LASF61:
 3077 0317 53495245 		.ascii	"SIREN_SendBreak\000"
 3077      4E5F5365 
 3077      6E644272 
 3077      65616B00 
 3078              	.LASF63:
 3079 0327 746D7053 		.ascii	"tmpStat\000"
 3079      74617400 
 3080              	.LASF19:
 3081 032f 73697A65 		.ascii	"sizetype\000"
 3081      74797065 
 3081      00
 3082              	.LASF18:
 3083 0338 6C6F6E67 		.ascii	"long double\000"
 3083      20646F75 
 3083      626C6500 
 3084              	.LASF60:
 3085 0344 53495245 		.ascii	"SIREN_ClearTxBuffer\000"
 3085      4E5F436C 
 3085      65617254 
 3085      78427566 
 3085      66657200 
 3086              	.LASF45:
 3087 0358 61646472 		.ascii	"address\000"
 3087      65737300 
 3088              	.LASF32:
 3089 0360 53495245 		.ascii	"SIREN_ReadRxData\000"
 3089      4E5F5265 
 3089      61645278 
 3089      44617461 
 3089      00
 3090              	.LASF31:
 3091 0371 6C6F6352 		.ascii	"locRxBufferWrite\000"
 3091      78427566 
 3091      66657257 
 3091      72697465 
 3091      00
 3092              	.LASF36:
 3093 0382 72785374 		.ascii	"rxStatus\000"
 3093      61747573 
 3093      00
 3094              	.LASF25:
 3095 038b 53495245 		.ascii	"SIREN_WriteControlRegister\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 86


 3095      4E5F5772 
 3095      69746543 
 3095      6F6E7472 
 3095      6F6C5265 
 3096              	.LASF12:
 3097 03a6 666C6F61 		.ascii	"float\000"
 3097      7400
 3098              	.LASF74:
 3099 03ac 47656E65 		.ascii	"Generated_Source\\PSoC5\\SIREN.c\000"
 3099      72617465 
 3099      645F536F 
 3099      75726365 
 3099      5C50536F 
 3100              	.LASF16:
 3101 03cb 72656738 		.ascii	"reg8\000"
 3101      00
 3102              	.LASF1:
 3103 03d0 756E7369 		.ascii	"unsigned char\000"
 3103      676E6564 
 3103      20636861 
 3103      7200
 3104              	.LASF72:
 3105 03de 53495245 		.ascii	"SIREN_rxBufferOverflow\000"
 3105      4E5F7278 
 3105      42756666 
 3105      65724F76 
 3105      6572666C 
 3106              	.LASF65:
 3107 03f5 53495245 		.ascii	"SIREN_SetTxAddressMode\000"
 3107      4E5F5365 
 3107      74547841 
 3107      64647265 
 3107      73734D6F 
 3108              	.LASF2:
 3109 040c 73686F72 		.ascii	"short int\000"
 3109      7420696E 
 3109      7400
 3110              	.LASF20:
 3111 0416 53495245 		.ascii	"SIREN_Start\000"
 3111      4E5F5374 
 3111      61727400 
 3112              	.LASF33:
 3113 0422 53495245 		.ascii	"SIREN_ReadRxStatus\000"
 3113      4E5F5265 
 3113      61645278 
 3113      53746174 
 3113      757300
 3114              	.LASF57:
 3115 0435 62797465 		.ascii	"byteCount\000"
 3115      436F756E 
 3115      7400
 3116              	.LASF53:
 3117 043f 53495245 		.ascii	"SIREN_PutString\000"
 3117      4E5F5075 
 3117      74537472 
 3117      696E6700 
 3118              	.LASF29:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccSGtS6r.s 			page 87


 3119 044f 72784461 		.ascii	"rxData\000"
 3119      746100
 3120              	.LASF15:
 3121 0456 63686172 		.ascii	"char\000"
 3121      00
 3122              	.LASF51:
 3123 045b 53495245 		.ascii	"SIREN_ReadTxStatus\000"
 3123      4E5F5265 
 3123      61645478 
 3123      53746174 
 3123      757300
 3124              	.LASF48:
 3125 046e 53495245 		.ascii	"SIREN_WriteTxData\000"
 3125      4E5F5772 
 3125      69746554 
 3125      78446174 
 3125      6100
 3126              	.LASF14:
 3127 0480 63686172 		.ascii	"char8\000"
 3127      3800
 3128              	.LASF56:
 3129 0486 53495245 		.ascii	"SIREN_PutArray\000"
 3129      4E5F5075 
 3129      74417272 
 3129      617900
 3130              	.LASF30:
 3131 0495 6C6F6352 		.ascii	"locRxBufferRead\000"
 3131      78427566 
 3131      66657252 
 3131      65616400 
 3132              	.LASF59:
 3133 04a5 53495245 		.ascii	"SIREN_GetTxBufferSize\000"
 3133      4E5F4765 
 3133      74547842 
 3133      75666665 
 3133      7253697A 
 3134              	.LASF24:
 3135 04bb 656E6162 		.ascii	"enableInterrupts\000"
 3135      6C65496E 
 3135      74657272 
 3135      75707473 
 3135      00
 3136              	.LASF37:
 3137 04cc 53495245 		.ascii	"SIREN_GetByte\000"
 3137      4E5F4765 
 3137      74427974 
 3137      6500
 3138              	.LASF34:
 3139 04da 73746174 		.ascii	"status\000"
 3139      757300
 3140              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
