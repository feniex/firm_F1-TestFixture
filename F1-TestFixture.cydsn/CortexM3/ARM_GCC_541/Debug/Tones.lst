ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"Tones.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	1
  21              		.type	HORN_FIRST_FREQUENCY, %object
  22              		.size	HORN_FIRST_FREQUENCY, 2
  23              	HORN_FIRST_FREQUENCY:
  24 0000 FA04     		.short	1274
  25              		.data
  26              		.align	2
  27              		.type	toneList, %object
  28              		.size	toneList, 96
  29              	toneList:
  30 0000 0000     		.short	0
  31 0002 0000     		.short	0
  32 0004 7003     		.short	880
  33 0006 00       		.byte	0
  34 0007 00       		.byte	0
  35 0008 D502     		.short	725
  36 000a DC05     		.short	1500
  37 000c AC0D     		.short	3500
  38 000e 01       		.byte	1
  39 000f 00       		.byte	0
  40 0010 D502     		.short	725
  41 0012 4006     		.short	1600
  42 0014 DC00     		.short	220
  43 0016 00       		.byte	0
  44 0017 00       		.byte	0
  45 0018 D502     		.short	725
  46 001a 4006     		.short	1600
  47 001c 6E00     		.short	110
  48 001e 00       		.byte	0
  49 001f 00       		.byte	0
  50 0020 8A02     		.short	650
  51 0022 BD06     		.short	1725
  52 0024 2800     		.short	40
  53 0026 00       		.byte	0
  54 0027 00       		.byte	0
  55 0028 5802     		.short	600
  56 002a B004     		.short	1200
  57 002c 8813     		.short	5000
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 2


  58 002e 00       		.byte	0
  59 002f 00       		.byte	0
  60 0030 0203     		.short	770
  61 0032 5A05     		.short	1370
  62 0034 C05D     		.short	24000
  63 0036 01       		.byte	1
  64 0037 01       		.byte	1
  65 0038 D502     		.short	725
  66 003a DC05     		.short	1500
  67 003c AC0D     		.short	3500
  68 003e 01       		.byte	1
  69 003f 00       		.byte	0
  70 0040 2602     		.short	550
  71 0042 EE02     		.short	750
  72 0044 A00F     		.short	4000
  73 0046 00       		.byte	0
  74 0047 00       		.byte	0
  75 0048 F401     		.short	500
  76 004a 3304     		.short	1075
  77 004c 6400     		.short	100
  78 004e 00       		.byte	0
  79 004f 00       		.byte	0
  80 0050 F401     		.short	500
  81 0052 3304     		.short	1075
  82 0054 3C00     		.short	60
  83 0056 00       		.byte	0
  84 0057 00       		.byte	0
  85 0058 B801     		.short	440
  86 005a E006     		.short	1760
  87 005c A00F     		.short	4000
  88 005e 00       		.byte	0
  89 005f 00       		.byte	0
  90              		.section	.rodata
  91 0002 0000     		.align	2
  92              		.type	NOTES_FREQUENCY_LIST, %object
  93              		.size	NOTES_FREQUENCY_LIST, 50
  94              	NOTES_FREQUENCY_LIST:
  95 0004 B801     		.short	440
  96 0006 D201     		.short	466
  97 0008 EE01     		.short	494
  98 000a 0C02     		.short	524
  99 000c 2A02     		.short	554
 100 000e 4C02     		.short	588
 101 0010 6E02     		.short	622
 102 0012 9402     		.short	660
 103 0014 BA02     		.short	698
 104 0016 E402     		.short	740
 105 0018 1003     		.short	784
 106 001a 3E03     		.short	830
 107 001c 7003     		.short	880
 108 001e A403     		.short	932
 109 0020 DC03     		.short	988
 110 0022 1604     		.short	1046
 111 0024 5404     		.short	1108
 112 0026 9604     		.short	1174
 113 0028 DC04     		.short	1244
 114 002a 2605     		.short	1318
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 3


 115 002c 7405     		.short	1396
 116 002e C805     		.short	1480
 117 0030 2006     		.short	1568
 118 0032 7C06     		.short	1660
 119 0034 E006     		.short	1760
 120              		.data
 121              		.align	2
 122              		.type	speakerDataList, %object
 123              		.size	speakerDataList, 48
 124              	speakerDataList:
 125 0060 00       		.byte	0
 126 0061 00       		.space	1
 127 0062 E803     		.short	1000
 128 0064 0000     		.short	0
 129 0066 0000     		.short	0
 130 0068 0000     		.short	0
 131 006a 0000     		.space	2
 132 006c 00000000 		.word	0
 133 0070 01       		.byte	1
 134 0071 00       		.byte	0
 135 0072 00       		.byte	0
 136 0073 00       		.byte	0
 137 0074 00       		.byte	0
 138 0075 00       		.byte	0
 139 0076 00       		.byte	0
 140 0077 00       		.space	1
 141 0078 00       		.byte	0
 142 0079 00       		.space	1
 143 007a E803     		.short	1000
 144 007c 0000     		.short	0
 145 007e 0000     		.short	0
 146 0080 0000     		.short	0
 147 0082 0000     		.space	2
 148 0084 00000000 		.word	0
 149 0088 01       		.byte	1
 150 0089 00       		.byte	0
 151 008a 00       		.byte	0
 152 008b 00       		.byte	0
 153 008c 00       		.byte	0
 154 008d 00       		.byte	0
 155 008e 00       		.byte	0
 156 008f 00       		.space	1
 157              		.bss
 158              	toneEffectStatus:
 159 0000 00       		.space	1
 160              	bEchoEnable:
 161 0001 00       		.space	1
 162              		.section	.text.playPWMTone,"ax",%progbits
 163              		.align	2
 164              		.global	playPWMTone
 165              		.thumb
 166              		.thumb_func
 167              		.type	playPWMTone, %function
 168              	playPWMTone:
 169              	.LFB63:
 170              		.file 1 "Tones.c"
   1:Tones.c       **** /* ========================================
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 4


   2:Tones.c       ****  *
   3:Tones.c       ****  * Copyright YOUR COMPANY, THE YEAR
   4:Tones.c       ****  * All Rights Reserved
   5:Tones.c       ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:Tones.c       ****  *
   7:Tones.c       ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:Tones.c       ****  * WHICH IS THE PROPERTY OF your company.
   9:Tones.c       ****  *
  10:Tones.c       ****  * ========================================
  11:Tones.c       **** */
  12:Tones.c       **** 
  13:Tones.c       **** /**********PREPROCESSOR DIRECTIVES**********/
  14:Tones.c       **** #include "CommonVariables.h"
  15:Tones.c       **** #include "SirenState.h"
  16:Tones.c       **** #include "Tones.h"
  17:Tones.c       **** 
  18:Tones.c       **** #define DECREASING	0
  19:Tones.c       **** #define INCREASING	1
  20:Tones.c       **** 
  21:Tones.c       **** #define LOW_PITCH	0
  22:Tones.c       **** #define HIGH_PITCH	1
  23:Tones.c       **** 
  24:Tones.c       **** #define TONE_STRUCT_SIZE    12
  25:Tones.c       **** #define NOTES_TABLE_SIZE    25
  26:Tones.c       **** #define TEST_TONE_INDEX     11
  27:Tones.c       **** 
  28:Tones.c       **** /**********DEFINED CONSTANTS**********/
  29:Tones.c       **** static const uint16 HORN_FIRST_FREQUENCY = 1274;
  30:Tones.c       **** 
  31:Tones.c       **** enum ToneEffect
  32:Tones.c       **** {
  33:Tones.c       ****     NO_EFFECT,
  34:Tones.c       ****     SYNC_TONES,
  35:Tones.c       ****     DELAY_TONES
  36:Tones.c       **** };
  37:Tones.c       **** 
  38:Tones.c       **** /**********DATA STRUCTURES**********/
  39:Tones.c       **** typedef struct
  40:Tones.c       **** {
  41:Tones.c       ****     uint16 lowestFrequency;
  42:Tones.c       ****     uint16 highestFrequency;
  43:Tones.c       ****     uint16 delayUs;
  44:Tones.c       ****     uint8 bWailEnable;
  45:Tones.c       ****     uint8 bHornEnable;
  46:Tones.c       **** }ToneStruct;
  47:Tones.c       **** 
  48:Tones.c       **** static ToneStruct toneList[TONE_STRUCT_SIZE] = 
  49:Tones.c       **** {
  50:Tones.c       ****     {0, 0, 880, false, false},          //0 NO TONE
  51:Tones.c       ****     {725, 1500, 3500, true, false},     //1 WAIL
  52:Tones.c       ****     {725, 1600, 220, false, false},     //2 SLOW YELP
  53:Tones.c       ****     {725, 1600, 110, false, false},     //3 FAST YELP
  54:Tones.c       ****     {650, 1725, 40, false, false},      //4 PHASER
  55:Tones.c       ****     {600, 1200, 5000, false, false},    //5 HORN (this list order should match the enum list order)
  56:Tones.c       ****     {770, 1370, 24000, true, true},     //6 MECHANICAL
  57:Tones.c       ****     {725, 1500, 3500, true, false},     //7 MANUAL WAIL   
  58:Tones.c       ****     {550, 750, 4000, false, false},     //8 HIGH/LOW    
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 5


  59:Tones.c       ****     {500, 1075, 100, false, false},     //9 PCALL SLOW
  60:Tones.c       ****     {500, 1075, 60, false, false},      //10 PCALL FAST
  61:Tones.c       ****     {440, 1760, 4000, false, false}     //11 TEST TONE
  62:Tones.c       **** };
  63:Tones.c       **** 
  64:Tones.c       **** typedef struct
  65:Tones.c       **** {
  66:Tones.c       ****     enum ToneType currentToneNumber;
  67:Tones.c       ****     uint16 PWMperiodCount;
  68:Tones.c       ****     uint16 PWMcountDifference;
  69:Tones.c       ****     uint16 mechanicalRampUpCount;
  70:Tones.c       ****     uint16 PCallHoldNoteCount;
  71:Tones.c       ****     uint32 comboCount;
  72:Tones.c       ****     uint8 bFrequencyChange;  
  73:Tones.c       ****     uint8 bComboSwitch;
  74:Tones.c       ****     uint8 bTonePlaying;
  75:Tones.c       ****     uint8 bManualWailActiveFlag;
  76:Tones.c       ****     uint8 bManualWailInputFlag;
  77:Tones.c       ****     uint8 bHornPWMenable;   
  78:Tones.c       ****     uint8 noteListIndex;
  79:Tones.c       **** }CurrentToneData;
  80:Tones.c       **** 
  81:Tones.c       **** static const uint16 NOTES_FREQUENCY_LIST[NOTES_TABLE_SIZE] = {440, 466, 494, 524, 554, 588, 622, 66
  82:Tones.c       ****     880, 932, 988, 1046, 1108, 1174, 1244, 1318, 1396, 1480, 1568, 1660, 1760};
  83:Tones.c       **** 
  84:Tones.c       **** /**********GLOBAL VARIABLES**********/
  85:Tones.c       **** static CurrentToneData speakerDataList[SPEAKER_COUNT] =
  86:Tones.c       ****     {{NO_TONE, 1000, 0, 0, 0, 0, INCREASING, false, false, false, false, false, 0},
  87:Tones.c       ****     {NO_TONE, 1000, 0, 0, 0, 0, INCREASING, false, false, false, false, false, 0}};
  88:Tones.c       ****     
  89:Tones.c       **** static enum ToneEffect toneEffectStatus = NO_EFFECT;
  90:Tones.c       **** static uint8 bEchoEnable = false;
  91:Tones.c       **** 
  92:Tones.c       **** /**********FUNCTION PROTOTYPES**********/
  93:Tones.c       **** static uint8 setToneEffectStatus(enum ToneType firstTone, enum ToneType secondTone, uint8 bDualDela
  94:Tones.c       **** static uint8 playHornTone(CurrentToneData* currentSpeaker);
  95:Tones.c       **** static uint8 playGradualChangeTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
  96:Tones.c       **** static uint8 playManualWailTone(uint8 bSpeaker, CurrentToneData* currentSpeaker);
  97:Tones.c       **** static uint8 playHighLowTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
  98:Tones.c       **** static uint8 playMechanicalTone(CurrentToneData* currentSpeaker);
  99:Tones.c       **** static uint8 playPCallTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
 100:Tones.c       **** static uint8 playComboTone(uint8 bSpeaker, ToneStruct* firstToneChoice, ToneStruct* secondToneChoic
 101:Tones.c       **** static uint8 playTestTone(CurrentToneData* currentSpeaker);
 102:Tones.c       **** static uint16 getCaptureValue(uint16 frequency);
 103:Tones.c       **** 
 104:Tones.c       **** /**********DEFINED FUNCTIONS**********/
 105:Tones.c       **** 
 106:Tones.c       **** /*******************************************************************************
 107:Tones.c       **** * Function Name: playCurrentTone
 108:Tones.c       **** ********************************************************************************
 109:Tones.c       **** *
 110:Tones.c       **** * Summary:
 111:Tones.c       **** *  Starts playing the selected tone by setting the PWM timer period and enabling
 112:Tones.c       **** *  the PWM timer
 113:Tones.c       **** *
 114:Tones.c       **** * Parameters:  
 115:Tones.c       **** *   bSpeaker: The speaker number SPEAKER_1 or SPEAKER_2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 6


 116:Tones.c       **** *   newTone: The value that represents the tone to play
 117:Tones.c       **** *   bManualWailInput: The current status for the manual wail input
 118:Tones.c       **** *   bDualDelayInput: The currant status for the dual delay input
 119:Tones.c       **** *
 120:Tones.c       **** * Return:
 121:Tones.c       **** *   TRUE for valid input, FALSE otherwise
 122:Tones.c       **** *
 123:Tones.c       **** *******************************************************************************/
 124:Tones.c       **** uint8 playPWMTone(uint8 bSpeaker, enum ToneType newTone, uint8 bManualWailInput, uint8 bDualDelayIn
 125:Tones.c       **** {
 171              		.loc 1 125 0
 172              		.cfi_startproc
 173              		@ args = 0, pretend = 0, frame = 8
 174              		@ frame_needed = 1, uses_anonymous_args = 0
 175 0000 90B5     		push	{r4, r7, lr}
 176              		.cfi_def_cfa_offset 12
 177              		.cfi_offset 4, -12
 178              		.cfi_offset 7, -8
 179              		.cfi_offset 14, -4
 180 0002 83B0     		sub	sp, sp, #12
 181              		.cfi_def_cfa_offset 24
 182 0004 00AF     		add	r7, sp, #0
 183              		.cfi_def_cfa_register 7
 184 0006 0446     		mov	r4, r0
 185 0008 0846     		mov	r0, r1
 186 000a 1146     		mov	r1, r2
 187 000c 1A46     		mov	r2, r3
 188 000e 2346     		mov	r3, r4
 189 0010 FB71     		strb	r3, [r7, #7]
 190 0012 0346     		mov	r3, r0
 191 0014 BB71     		strb	r3, [r7, #6]
 192 0016 0B46     		mov	r3, r1
 193 0018 7B71     		strb	r3, [r7, #5]
 194 001a 1346     		mov	r3, r2
 195 001c 3B71     		strb	r3, [r7, #4]
 126:Tones.c       ****     if(((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2)) ||
 196              		.loc 1 126 0
 197 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 198 0020 002B     		cmp	r3, #0
 199 0022 02D0     		beq	.L2
 200              		.loc 1 126 0 is_stmt 0 discriminator 1
 201 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 202 0026 012B     		cmp	r3, #1
 203 0028 11D1     		bne	.L3
 204              	.L2:
 205              		.loc 1 126 0 discriminator 3
 206 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 207 002c 0D2B     		cmp	r3, #13
 208 002e 02D9     		bls	.L4
 127:Tones.c       ****         ((newTone < NO_TONE) || (newTone > PHASER_YELP && newTone != TEST_TONE)) ||
 209              		.loc 1 127 0 is_stmt 1
 210 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 211 0032 162B     		cmp	r3, #22
 212 0034 0BD1     		bne	.L3
 213              	.L4:
 214              		.loc 1 127 0 is_stmt 0 discriminator 1
 215 0036 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 7


 216 0038 002B     		cmp	r3, #0
 217 003a 02D0     		beq	.L5
 128:Tones.c       ****         ((bManualWailInput != false) && (bManualWailInput != true)) ||
 218              		.loc 1 128 0 is_stmt 1
 219 003c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 220 003e 012B     		cmp	r3, #1
 221 0040 05D1     		bne	.L3
 222              	.L5:
 223              		.loc 1 128 0 is_stmt 0 discriminator 1
 224 0042 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 225 0044 002B     		cmp	r3, #0
 226 0046 04D0     		beq	.L6
 129:Tones.c       ****         ((bDualDelayInput != false) && (bDualDelayInput != true)))
 227              		.loc 1 129 0 is_stmt 1
 228 0048 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 229 004a 012B     		cmp	r3, #1
 230 004c 01D0     		beq	.L6
 231              	.L3:
 130:Tones.c       ****         return false;
 232              		.loc 1 130 0
 233 004e 0023     		movs	r3, #0
 234 0050 13E1     		b	.L7
 235              	.L6:
 131:Tones.c       ****     
 132:Tones.c       ****     speakerDataList[bSpeaker].currentToneNumber = newTone; //Update global variables
 236              		.loc 1 132 0
 237 0052 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 238 0054 8B49     		ldr	r1, .L29
 239 0056 1346     		mov	r3, r2
 240 0058 5B00     		lsls	r3, r3, #1
 241 005a 1344     		add	r3, r3, r2
 242 005c DB00     		lsls	r3, r3, #3
 243 005e 0B44     		add	r3, r3, r1
 244 0060 BA79     		ldrb	r2, [r7, #6]
 245 0062 1A70     		strb	r2, [r3]
 133:Tones.c       ****     speakerDataList[bSpeaker].bManualWailInputFlag = bManualWailInput;
 246              		.loc 1 133 0
 247 0064 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 248 0066 8749     		ldr	r1, .L29
 249 0068 1346     		mov	r3, r2
 250 006a 5B00     		lsls	r3, r3, #1
 251 006c 1344     		add	r3, r3, r2
 252 006e DB00     		lsls	r3, r3, #3
 253 0070 0B44     		add	r3, r3, r1
 254 0072 1433     		adds	r3, r3, #20
 255 0074 7A79     		ldrb	r2, [r7, #5]
 256 0076 1A70     		strb	r2, [r3]
 134:Tones.c       ****     
 135:Tones.c       ****     setToneEffectStatus(speakerDataList[SPEAKER_1].currentToneNumber,   //Updates global variable t
 257              		.loc 1 135 0
 258 0078 824B     		ldr	r3, .L29
 259 007a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 260 007c 814B     		ldr	r3, .L29
 261 007e 1B7E     		ldrb	r3, [r3, #24]	@ zero_extendqisi2
 262 0080 3A79     		ldrb	r2, [r7, #4]	@ zero_extendqisi2
 263 0082 1946     		mov	r1, r3
 264 0084 FFF7FEFF 		bl	setToneEffectStatus
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 8


 136:Tones.c       ****         speakerDataList[SPEAKER_2].currentToneNumber, bDualDelayInput);
 137:Tones.c       ****        
 138:Tones.c       ****     if(speakerDataList[bSpeaker].currentToneNumber != NO_TONE)
 265              		.loc 1 138 0
 266 0088 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 267 008a 7E49     		ldr	r1, .L29
 268 008c 1346     		mov	r3, r2
 269 008e 5B00     		lsls	r3, r3, #1
 270 0090 1344     		add	r3, r3, r2
 271 0092 DB00     		lsls	r3, r3, #3
 272 0094 0B44     		add	r3, r3, r1
 273 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 274 0098 002B     		cmp	r3, #0
 275 009a 00F0ED80 		beq	.L8
 139:Tones.c       ****     {
 140:Tones.c       ****         if(!bSpeaker)
 276              		.loc 1 140 0
 277 009e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 278 00a0 002B     		cmp	r3, #0
 279 00a2 67D1     		bne	.L9
 280              	.LBB2:
 141:Tones.c       ****         {   //Start timer and PWM for SPEAKER 1
 142:Tones.c       ****             PWMtimer1_Start();    //Need to start timer before updating the period
 281              		.loc 1 142 0
 282 00a4 FFF7FEFF 		bl	PWMtimer1_Start
 143:Tones.c       ****             
 144:Tones.c       ****             if((speakerDataList[bSpeaker].currentToneNumber >= HORN_PHASER) && 
 283              		.loc 1 144 0
 284 00a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 285 00aa 7649     		ldr	r1, .L29
 286 00ac 1346     		mov	r3, r2
 287 00ae 5B00     		lsls	r3, r3, #1
 288 00b0 1344     		add	r3, r3, r2
 289 00b2 DB00     		lsls	r3, r3, #3
 290 00b4 0B44     		add	r3, r3, r1
 291 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 292 00b8 0A2B     		cmp	r3, #10
 293 00ba 35D9     		bls	.L10
 145:Tones.c       ****                 (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 294              		.loc 1 145 0 discriminator 1
 295 00bc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 296 00be 7149     		ldr	r1, .L29
 297 00c0 1346     		mov	r3, r2
 298 00c2 5B00     		lsls	r3, r3, #1
 299 00c4 1344     		add	r3, r3, r2
 300 00c6 DB00     		lsls	r3, r3, #3
 301 00c8 0B44     		add	r3, r3, r1
 302 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 144:Tones.c       ****                 (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 303              		.loc 1 144 0 discriminator 1
 304 00cc 0D2B     		cmp	r3, #13
 305 00ce 2BD8     		bhi	.L10
 146:Tones.c       ****             {   //Update timer period for a combo tone
 147:Tones.c       ****                 switch(speakerDataList[bSpeaker].currentToneNumber)
 306              		.loc 1 147 0
 307 00d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 308 00d2 6C49     		ldr	r1, .L29
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 9


 309 00d4 1346     		mov	r3, r2
 310 00d6 5B00     		lsls	r3, r3, #1
 311 00d8 1344     		add	r3, r3, r2
 312 00da DB00     		lsls	r3, r3, #3
 313 00dc 0B44     		add	r3, r3, r1
 314 00de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 315 00e0 0C2B     		cmp	r3, #12
 316 00e2 0AD0     		beq	.L12
 317 00e4 0D2B     		cmp	r3, #13
 318 00e6 0ED0     		beq	.L13
 319 00e8 0B2B     		cmp	r3, #11
 320 00ea 00D0     		beq	.L14
 321              	.LBB3:
 148:Tones.c       ****                 {
 149:Tones.c       ****                     case HORN_PHASER:
 150:Tones.c       ****                         PWMtimer1_WritePeriod(toneList[HORN].delayUs);
 151:Tones.c       ****                         break;
 152:Tones.c       ****                     case HORN_YELP:
 153:Tones.c       ****                         PWMtimer1_WritePeriod(toneList[HORN].delayUs);
 154:Tones.c       ****                         break;
 155:Tones.c       ****                     case PHASER_YELP:
 156:Tones.c       ****                         PWMtimer1_WritePeriod(toneList[PHASER].delayUs);
 157:Tones.c       ****                         break;
 158:Tones.c       ****                     default:
 159:Tones.c       ****                         break;
 322              		.loc 1 159 0
 323 00ec 11E0     		b	.L15
 324              	.L14:
 150:Tones.c       ****                         break;
 325              		.loc 1 150 0
 326 00ee 664B     		ldr	r3, .L29+4
 327 00f0 9B8D     		ldrh	r3, [r3, #44]
 328 00f2 1846     		mov	r0, r3
 329 00f4 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 151:Tones.c       ****                     case HORN_YELP:
 330              		.loc 1 151 0
 331 00f8 0BE0     		b	.L15
 332              	.L12:
 153:Tones.c       ****                         break;
 333              		.loc 1 153 0
 334 00fa 634B     		ldr	r3, .L29+4
 335 00fc 9B8D     		ldrh	r3, [r3, #44]
 336 00fe 1846     		mov	r0, r3
 337 0100 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 154:Tones.c       ****                     case PHASER_YELP:
 338              		.loc 1 154 0
 339 0104 05E0     		b	.L15
 340              	.L13:
 156:Tones.c       ****                         break;
 341              		.loc 1 156 0
 342 0106 604B     		ldr	r3, .L29+4
 343 0108 9B8C     		ldrh	r3, [r3, #36]
 344 010a 1846     		mov	r0, r3
 345 010c FFF7FEFF 		bl	PWMtimer1_WritePeriod
 157:Tones.c       ****                     default:
 346              		.loc 1 157 0
 347 0110 00BF     		nop
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 10


 348              	.L15:
 349              	.LBE3:
 160:Tones.c       ****                 }
 161:Tones.c       ****                 
 162:Tones.c       ****                 speakerDataList[bSpeaker].bComboSwitch = false;            
 350              		.loc 1 162 0
 351 0112 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 352 0114 5B49     		ldr	r1, .L29
 353 0116 1346     		mov	r3, r2
 354 0118 5B00     		lsls	r3, r3, #1
 355 011a 1344     		add	r3, r3, r2
 356 011c DB00     		lsls	r3, r3, #3
 357 011e 0B44     		add	r3, r3, r1
 358 0120 1133     		adds	r3, r3, #17
 359 0122 0022     		movs	r2, #0
 360 0124 1A70     		strb	r2, [r3]
 361 0126 1FE0     		b	.L16
 362              	.L10:
 163:Tones.c       ****             }
 164:Tones.c       ****             else if(speakerDataList[bSpeaker].currentToneNumber == TEST_TONE)
 363              		.loc 1 164 0
 364 0128 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 365 012a 5649     		ldr	r1, .L29
 366 012c 1346     		mov	r3, r2
 367 012e 5B00     		lsls	r3, r3, #1
 368 0130 1344     		add	r3, r3, r2
 369 0132 DB00     		lsls	r3, r3, #3
 370 0134 0B44     		add	r3, r3, r1
 371 0136 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0138 162B     		cmp	r3, #22
 373 013a 06D1     		bne	.L17
 374              	.LBB4:
 165:Tones.c       ****                 PWMtimer1_WritePeriod(toneList[TEST_TONE_INDEX].delayUs);
 375              		.loc 1 165 0
 376 013c 524B     		ldr	r3, .L29+4
 377 013e B3F85C30 		ldrh	r3, [r3, #92]
 378 0142 1846     		mov	r0, r3
 379 0144 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 380              	.LBE4:
 381 0148 0EE0     		b	.L16
 382              	.L17:
 383              	.LBB5:
 166:Tones.c       ****             else    //Update timer period for every other siren tone
 167:Tones.c       ****                 PWMtimer1_WritePeriod(toneList[speakerDataList[bSpeaker].currentToneNumber].delayUs
 384              		.loc 1 167 0
 385 014a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 386 014c 4D49     		ldr	r1, .L29
 387 014e 1346     		mov	r3, r2
 388 0150 5B00     		lsls	r3, r3, #1
 389 0152 1344     		add	r3, r3, r2
 390 0154 DB00     		lsls	r3, r3, #3
 391 0156 0B44     		add	r3, r3, r1
 392 0158 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 393 015a 4B4A     		ldr	r2, .L29+4
 394 015c DB00     		lsls	r3, r3, #3
 395 015e 1344     		add	r3, r3, r2
 396 0160 9B88     		ldrh	r3, [r3, #4]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 11


 397 0162 1846     		mov	r0, r3
 398 0164 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 399              	.L16:
 400              	.LBE5:
 168:Tones.c       ****             
 169:Tones.c       ****             AMux1_FastSelect(PWM_MODE);
 401              		.loc 1 169 0
 402 0168 0020     		movs	r0, #0
 403 016a FFF7FEFF 		bl	AMux1_FastSelect
 170:Tones.c       ****             PWM_1_Start();
 404              		.loc 1 170 0
 405 016e FFF7FEFF 		bl	PWM_1_Start
 406              	.LBE2:
 407 0172 81E0     		b	.L8
 408              	.L9:
 171:Tones.c       ****         }
 172:Tones.c       ****         else
 173:Tones.c       ****         {   //Start timer and PWM for SPEAKER 2
 174:Tones.c       ****             if(toneEffectStatus != SYNC_TONES)
 409              		.loc 1 174 0
 410 0174 454B     		ldr	r3, .L29+8
 411 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 412 0178 012B     		cmp	r3, #1
 413 017a 69D0     		beq	.L18
 175:Tones.c       ****             {   //this timer is only used when the tones are NOT in sync
 176:Tones.c       ****                 if((toneEffectStatus != DELAY_TONES) || (bEchoEnable == true))
 414              		.loc 1 176 0
 415 017c 434B     		ldr	r3, .L29+8
 416 017e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 417 0180 022B     		cmp	r3, #2
 418 0182 03D1     		bne	.L19
 419              		.loc 1 176 0 is_stmt 0 discriminator 1
 420 0184 424B     		ldr	r3, .L29+12
 421 0186 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 422 0188 012B     		cmp	r3, #1
 423 018a 61D1     		bne	.L18
 424              	.L19:
 425              	.LBB6:
 177:Tones.c       ****                 {   //The timer for Speaker 2 will be called later to create delay
 178:Tones.c       ****                     PWMtimer2_Start();   //Need to start timer before updating the period
 426              		.loc 1 178 0 is_stmt 1
 427 018c FFF7FEFF 		bl	PWMtimer2_Start
 179:Tones.c       ****                     
 180:Tones.c       ****                     if((speakerDataList[bSpeaker].currentToneNumber >= HORN_PHASER) && 
 428              		.loc 1 180 0
 429 0190 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 430 0192 3C49     		ldr	r1, .L29
 431 0194 1346     		mov	r3, r2
 432 0196 5B00     		lsls	r3, r3, #1
 433 0198 1344     		add	r3, r3, r2
 434 019a DB00     		lsls	r3, r3, #3
 435 019c 0B44     		add	r3, r3, r1
 436 019e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 437 01a0 0A2B     		cmp	r3, #10
 438 01a2 35D9     		bls	.L20
 181:Tones.c       ****                         (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 439              		.loc 1 181 0 discriminator 1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 12


 440 01a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 441 01a6 3749     		ldr	r1, .L29
 442 01a8 1346     		mov	r3, r2
 443 01aa 5B00     		lsls	r3, r3, #1
 444 01ac 1344     		add	r3, r3, r2
 445 01ae DB00     		lsls	r3, r3, #3
 446 01b0 0B44     		add	r3, r3, r1
 447 01b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 180:Tones.c       ****                         (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 448              		.loc 1 180 0 discriminator 1
 449 01b4 0D2B     		cmp	r3, #13
 450 01b6 2BD8     		bhi	.L20
 182:Tones.c       ****                     {
 183:Tones.c       ****                         switch(speakerDataList[bSpeaker].currentToneNumber)
 451              		.loc 1 183 0
 452 01b8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 453 01ba 3249     		ldr	r1, .L29
 454 01bc 1346     		mov	r3, r2
 455 01be 5B00     		lsls	r3, r3, #1
 456 01c0 1344     		add	r3, r3, r2
 457 01c2 DB00     		lsls	r3, r3, #3
 458 01c4 0B44     		add	r3, r3, r1
 459 01c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 460 01c8 0C2B     		cmp	r3, #12
 461 01ca 0AD0     		beq	.L22
 462 01cc 0D2B     		cmp	r3, #13
 463 01ce 0ED0     		beq	.L23
 464 01d0 0B2B     		cmp	r3, #11
 465 01d2 00D0     		beq	.L24
 466              	.LBB7:
 184:Tones.c       ****                         {   //Update timer period for a combo tone
 185:Tones.c       ****                             case HORN_PHASER:
 186:Tones.c       ****                                 PWMtimer2_WritePeriod(toneList[HORN].delayUs);
 187:Tones.c       ****                                 break;
 188:Tones.c       ****                             case HORN_YELP:
 189:Tones.c       ****                                 PWMtimer2_WritePeriod(toneList[HORN].delayUs);
 190:Tones.c       ****                                 break;
 191:Tones.c       ****                             case PHASER_YELP:
 192:Tones.c       ****                                 PWMtimer2_WritePeriod(toneList[PHASER].delayUs);
 193:Tones.c       ****                                 break;
 194:Tones.c       ****                             default:
 195:Tones.c       ****                                 break;
 467              		.loc 1 195 0
 468 01d4 11E0     		b	.L25
 469              	.L24:
 186:Tones.c       ****                                 break;
 470              		.loc 1 186 0
 471 01d6 2C4B     		ldr	r3, .L29+4
 472 01d8 9B8D     		ldrh	r3, [r3, #44]
 473 01da 1846     		mov	r0, r3
 474 01dc FFF7FEFF 		bl	PWMtimer2_WritePeriod
 187:Tones.c       ****                             case HORN_YELP:
 475              		.loc 1 187 0
 476 01e0 0BE0     		b	.L25
 477              	.L22:
 189:Tones.c       ****                                 break;
 478              		.loc 1 189 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 13


 479 01e2 294B     		ldr	r3, .L29+4
 480 01e4 9B8D     		ldrh	r3, [r3, #44]
 481 01e6 1846     		mov	r0, r3
 482 01e8 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 190:Tones.c       ****                             case PHASER_YELP:
 483              		.loc 1 190 0
 484 01ec 05E0     		b	.L25
 485              	.L23:
 192:Tones.c       ****                                 break;
 486              		.loc 1 192 0
 487 01ee 264B     		ldr	r3, .L29+4
 488 01f0 9B8C     		ldrh	r3, [r3, #36]
 489 01f2 1846     		mov	r0, r3
 490 01f4 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 193:Tones.c       ****                             default:
 491              		.loc 1 193 0
 492 01f8 00BF     		nop
 493              	.L25:
 494              	.LBE7:
 196:Tones.c       ****                         }
 197:Tones.c       ****                         
 198:Tones.c       ****                         speakerDataList[bSpeaker].bComboSwitch = false;            
 495              		.loc 1 198 0
 496 01fa FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 497 01fc 2149     		ldr	r1, .L29
 498 01fe 1346     		mov	r3, r2
 499 0200 5B00     		lsls	r3, r3, #1
 500 0202 1344     		add	r3, r3, r2
 501 0204 DB00     		lsls	r3, r3, #3
 502 0206 0B44     		add	r3, r3, r1
 503 0208 1133     		adds	r3, r3, #17
 504 020a 0022     		movs	r2, #0
 505 020c 1A70     		strb	r2, [r3]
 506 020e 1FE0     		b	.L18
 507              	.L20:
 199:Tones.c       ****                     }
 200:Tones.c       ****                     else if(speakerDataList[bSpeaker].currentToneNumber == TEST_TONE)
 508              		.loc 1 200 0
 509 0210 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 510 0212 1C49     		ldr	r1, .L29
 511 0214 1346     		mov	r3, r2
 512 0216 5B00     		lsls	r3, r3, #1
 513 0218 1344     		add	r3, r3, r2
 514 021a DB00     		lsls	r3, r3, #3
 515 021c 0B44     		add	r3, r3, r1
 516 021e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 517 0220 162B     		cmp	r3, #22
 518 0222 06D1     		bne	.L26
 519              	.LBB8:
 201:Tones.c       ****                         PWMtimer2_WritePeriod(toneList[TEST_TONE_INDEX].delayUs);
 520              		.loc 1 201 0
 521 0224 184B     		ldr	r3, .L29+4
 522 0226 B3F85C30 		ldrh	r3, [r3, #92]
 523 022a 1846     		mov	r0, r3
 524 022c FFF7FEFF 		bl	PWMtimer2_WritePeriod
 525              	.LBE8:
 526 0230 0EE0     		b	.L18
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 14


 527              	.L26:
 528              	.LBB9:
 202:Tones.c       ****                     else    //Update timer period for every other siren tone
 203:Tones.c       ****                         PWMtimer2_WritePeriod(toneList[speakerDataList[bSpeaker].currentToneNumber]
 529              		.loc 1 203 0
 530 0232 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 531 0234 1349     		ldr	r1, .L29
 532 0236 1346     		mov	r3, r2
 533 0238 5B00     		lsls	r3, r3, #1
 534 023a 1344     		add	r3, r3, r2
 535 023c DB00     		lsls	r3, r3, #3
 536 023e 0B44     		add	r3, r3, r1
 537 0240 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 538 0242 114A     		ldr	r2, .L29+4
 539 0244 DB00     		lsls	r3, r3, #3
 540 0246 1344     		add	r3, r3, r2
 541 0248 9B88     		ldrh	r3, [r3, #4]
 542 024a 1846     		mov	r0, r3
 543 024c FFF7FEFF 		bl	PWMtimer2_WritePeriod
 544              	.L18:
 545              	.LBE9:
 546              	.LBE6:
 204:Tones.c       ****                 }
 205:Tones.c       ****             }
 206:Tones.c       ****             
 207:Tones.c       ****             if((toneEffectStatus != DELAY_TONES) || (bEchoEnable == true))
 547              		.loc 1 207 0
 548 0250 0E4B     		ldr	r3, .L29+8
 549 0252 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 550 0254 022B     		cmp	r3, #2
 551 0256 03D1     		bne	.L27
 552              		.loc 1 207 0 is_stmt 0 discriminator 1
 553 0258 0D4B     		ldr	r3, .L29+12
 554 025a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 555 025c 012B     		cmp	r3, #1
 556 025e 04D1     		bne	.L28
 557              	.L27:
 558              	.LBB10:
 208:Tones.c       ****             {   //The PWM for Speaker 2 will be called later to create delay, still needs to be ena
 209:Tones.c       ****                 AMux2_FastSelect(PWM_MODE);
 559              		.loc 1 209 0 is_stmt 1
 560 0260 0020     		movs	r0, #0
 561 0262 FFF7FEFF 		bl	AMux2_FastSelect
 210:Tones.c       ****                 PWM_2_Start();
 562              		.loc 1 210 0
 563 0266 FFF7FEFF 		bl	PWM_2_Start
 564              	.L28:
 565              	.LBE10:
 211:Tones.c       ****             }
 212:Tones.c       ****             
 213:Tones.c       ****             if(toneEffectStatus == DELAY_TONES)
 566              		.loc 1 213 0
 567 026a 084B     		ldr	r3, .L29+8
 568 026c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 569 026e 022B     		cmp	r3, #2
 570 0270 02D1     		bne	.L8
 214:Tones.c       ****                 bEchoEnable = true;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 15


 571              		.loc 1 214 0
 572 0272 074B     		ldr	r3, .L29+12
 573 0274 0122     		movs	r2, #1
 574 0276 1A70     		strb	r2, [r3]
 575              	.L8:
 215:Tones.c       ****         }
 216:Tones.c       ****     }
 217:Tones.c       ****     
 218:Tones.c       ****     return true;
 576              		.loc 1 218 0
 577 0278 0123     		movs	r3, #1
 578              	.L7:
 219:Tones.c       **** }
 579              		.loc 1 219 0
 580 027a 1846     		mov	r0, r3
 581 027c 0C37     		adds	r7, r7, #12
 582              		.cfi_def_cfa_offset 12
 583 027e BD46     		mov	sp, r7
 584              		.cfi_def_cfa_register 13
 585              		@ sp needed
 586 0280 90BD     		pop	{r4, r7, pc}
 587              	.L30:
 588 0282 00BF     		.align	2
 589              	.L29:
 590 0284 60000000 		.word	speakerDataList
 591 0288 00000000 		.word	toneList
 592 028c 00000000 		.word	toneEffectStatus
 593 0290 01000000 		.word	bEchoEnable
 594              		.cfi_endproc
 595              	.LFE63:
 596              		.size	playPWMTone, .-playPWMTone
 597              		.section	.text.stopPWMTone,"ax",%progbits
 598              		.align	2
 599              		.global	stopPWMTone
 600              		.thumb
 601              		.thumb_func
 602              		.type	stopPWMTone, %function
 603              	stopPWMTone:
 604              	.LFB64:
 220:Tones.c       **** 
 221:Tones.c       **** /*******************************************************************************
 222:Tones.c       **** * Function Name: stopCurrentTone
 223:Tones.c       **** ********************************************************************************
 224:Tones.c       **** *
 225:Tones.c       **** * Summary:
 226:Tones.c       **** *  Stops playing the selected tone by disabling the PWM timer, typically called
 227:Tones.c       **** *  during an input change
 228:Tones.c       **** *
 229:Tones.c       **** * Parameters:  
 230:Tones.c       **** *   bSpeaker: The speaker number SPEAKER_1 or SPEAKER_2
 231:Tones.c       **** *
 232:Tones.c       **** * Return:
 233:Tones.c       **** *   TRUE for valid input, FALSE otherwise
 234:Tones.c       **** *
 235:Tones.c       **** *******************************************************************************/
 236:Tones.c       **** uint8 stopPWMTone(uint8 bSpeaker)
 237:Tones.c       **** {
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 16


 605              		.loc 1 237 0
 606              		.cfi_startproc
 607              		@ args = 0, pretend = 0, frame = 8
 608              		@ frame_needed = 1, uses_anonymous_args = 0
 609 0000 80B5     		push	{r7, lr}
 610              		.cfi_def_cfa_offset 8
 611              		.cfi_offset 7, -8
 612              		.cfi_offset 14, -4
 613 0002 82B0     		sub	sp, sp, #8
 614              		.cfi_def_cfa_offset 16
 615 0004 00AF     		add	r7, sp, #0
 616              		.cfi_def_cfa_register 7
 617 0006 0346     		mov	r3, r0
 618 0008 FB71     		strb	r3, [r7, #7]
 238:Tones.c       ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 619              		.loc 1 238 0
 620 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 621 000c 002B     		cmp	r3, #0
 622 000e 04D0     		beq	.L32
 623              		.loc 1 238 0 is_stmt 0 discriminator 1
 624 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 625 0012 012B     		cmp	r3, #1
 626 0014 01D0     		beq	.L32
 239:Tones.c       ****         return false;
 627              		.loc 1 239 0 is_stmt 1
 628 0016 0023     		movs	r3, #0
 629 0018 3DE0     		b	.L33
 630              	.L32:
 240:Tones.c       ****     
 241:Tones.c       ****     if(bSpeaker)
 631              		.loc 1 241 0
 632 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 633 001c 002B     		cmp	r3, #0
 634 001e 07D0     		beq	.L34
 635              	.LBB11:
 242:Tones.c       ****     {
 243:Tones.c       ****         PWM_2_WriteCompare(0);
 636              		.loc 1 243 0
 637 0020 0020     		movs	r0, #0
 638 0022 FFF7FEFF 		bl	PWM_2_WriteCompare
 244:Tones.c       ****         PWM_2_Stop();
 639              		.loc 1 244 0
 640 0026 FFF7FEFF 		bl	PWM_2_Stop
 245:Tones.c       ****         PWMtimer2_Stop();
 641              		.loc 1 245 0
 642 002a FFF7FEFF 		bl	PWMtimer2_Stop
 643              	.LBE11:
 644 002e 06E0     		b	.L35
 645              	.L34:
 646              	.LBB12:
 246:Tones.c       ****     }
 247:Tones.c       ****     else
 248:Tones.c       ****     {
 249:Tones.c       ****         PWM_1_WriteCompare(0);     //Keeps PWM signals low once tone stops
 647              		.loc 1 249 0
 648 0030 0020     		movs	r0, #0
 649 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 17


 250:Tones.c       ****         PWM_1_Stop();
 650              		.loc 1 250 0
 651 0036 FFF7FEFF 		bl	PWM_1_Stop
 251:Tones.c       ****         PWMtimer1_Stop(); 
 652              		.loc 1 251 0
 653 003a FFF7FEFF 		bl	PWMtimer1_Stop
 654              	.L35:
 655              	.LBE12:
 252:Tones.c       ****     }
 253:Tones.c       ****     
 254:Tones.c       ****     toneEffectStatus = NO_EFFECT;
 656              		.loc 1 254 0
 657 003e 184B     		ldr	r3, .L36
 658 0040 0022     		movs	r2, #0
 659 0042 1A70     		strb	r2, [r3]
 255:Tones.c       ****     speakerDataList[bSpeaker].bFrequencyChange = INCREASING;
 660              		.loc 1 255 0
 661 0044 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 662 0046 1749     		ldr	r1, .L36+4
 663 0048 1346     		mov	r3, r2
 664 004a 5B00     		lsls	r3, r3, #1
 665 004c 1344     		add	r3, r3, r2
 666 004e DB00     		lsls	r3, r3, #3
 667 0050 0B44     		add	r3, r3, r1
 668 0052 1033     		adds	r3, r3, #16
 669 0054 0122     		movs	r2, #1
 670 0056 1A70     		strb	r2, [r3]
 256:Tones.c       ****     speakerDataList[bSpeaker].bTonePlaying = false;
 671              		.loc 1 256 0
 672 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 673 005a 1249     		ldr	r1, .L36+4
 674 005c 1346     		mov	r3, r2
 675 005e 5B00     		lsls	r3, r3, #1
 676 0060 1344     		add	r3, r3, r2
 677 0062 DB00     		lsls	r3, r3, #3
 678 0064 0B44     		add	r3, r3, r1
 679 0066 1233     		adds	r3, r3, #18
 680 0068 0022     		movs	r2, #0
 681 006a 1A70     		strb	r2, [r3]
 257:Tones.c       ****     speakerDataList[bSpeaker].bHornPWMenable = false;   
 682              		.loc 1 257 0
 683 006c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 684 006e 0D49     		ldr	r1, .L36+4
 685 0070 1346     		mov	r3, r2
 686 0072 5B00     		lsls	r3, r3, #1
 687 0074 1344     		add	r3, r3, r2
 688 0076 DB00     		lsls	r3, r3, #3
 689 0078 0B44     		add	r3, r3, r1
 690 007a 1533     		adds	r3, r3, #21
 691 007c 0022     		movs	r2, #0
 692 007e 1A70     		strb	r2, [r3]
 258:Tones.c       ****     speakerDataList[bSpeaker].noteListIndex = 0;
 693              		.loc 1 258 0
 694 0080 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 695 0082 0849     		ldr	r1, .L36+4
 696 0084 1346     		mov	r3, r2
 697 0086 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 18


 698 0088 1344     		add	r3, r3, r2
 699 008a DB00     		lsls	r3, r3, #3
 700 008c 0B44     		add	r3, r3, r1
 701 008e 1633     		adds	r3, r3, #22
 702 0090 0022     		movs	r2, #0
 703 0092 1A70     		strb	r2, [r3]
 259:Tones.c       ****        
 260:Tones.c       ****     return true;
 704              		.loc 1 260 0
 705 0094 0123     		movs	r3, #1
 706              	.L33:
 261:Tones.c       **** }
 707              		.loc 1 261 0
 708 0096 1846     		mov	r0, r3
 709 0098 0837     		adds	r7, r7, #8
 710              		.cfi_def_cfa_offset 8
 711 009a BD46     		mov	sp, r7
 712              		.cfi_def_cfa_register 13
 713              		@ sp needed
 714 009c 80BD     		pop	{r7, pc}
 715              	.L37:
 716 009e 00BF     		.align	2
 717              	.L36:
 718 00a0 00000000 		.word	toneEffectStatus
 719 00a4 60000000 		.word	speakerDataList
 720              		.cfi_endproc
 721              	.LFE64:
 722              		.size	stopPWMTone, .-stopPWMTone
 723              		.section	.text.processPWMtimerRoutine,"ax",%progbits
 724              		.align	2
 725              		.global	processPWMtimerRoutine
 726              		.thumb
 727              		.thumb_func
 728              		.type	processPWMtimerRoutine, %function
 729              	processPWMtimerRoutine:
 730              	.LFB65:
 262:Tones.c       **** 
 263:Tones.c       **** /*******************************************************************************
 264:Tones.c       **** * Function Name: processPWMtimerRoutine
 265:Tones.c       **** ********************************************************************************
 266:Tones.c       **** *
 267:Tones.c       **** * Summary:
 268:Tones.c       **** *  Updates the PWM frequency value periodically depending on the selected tone
 269:Tones.c       **** *  and speaker, called in the PWMtimerISR
 270:Tones.c       **** *
 271:Tones.c       **** * Parameters:  
 272:Tones.c       **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 273:Tones.c       **** *
 274:Tones.c       **** * Return:
 275:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 276:Tones.c       **** *
 277:Tones.c       **** *******************************************************************************/
 278:Tones.c       **** uint8 processPWMtimerRoutine(uint8 bSpeaker)
 279:Tones.c       **** {   
 731              		.loc 1 279 0
 732              		.cfi_startproc
 733              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 19


 734              		@ frame_needed = 1, uses_anonymous_args = 0
 735 0000 80B5     		push	{r7, lr}
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 7, -8
 738              		.cfi_offset 14, -4
 739 0002 82B0     		sub	sp, sp, #8
 740              		.cfi_def_cfa_offset 16
 741 0004 00AF     		add	r7, sp, #0
 742              		.cfi_def_cfa_register 7
 743 0006 0346     		mov	r3, r0
 744 0008 FB71     		strb	r3, [r7, #7]
 280:Tones.c       ****     if(bSpeaker)
 745              		.loc 1 280 0
 746 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 747 000c 002B     		cmp	r3, #0
 748 000e 02D0     		beq	.L39
 749              	.LBB13:
 281:Tones.c       ****         PWMtimer2_ReadStatusRegister();  //Clears the sticky interrupt bit
 750              		.loc 1 281 0
 751 0010 FFF7FEFF 		bl	PWMtimer2_ReadStatusRegister
 752              	.LBE13:
 753 0014 01E0     		b	.L40
 754              	.L39:
 755              	.LBB14:
 282:Tones.c       ****     else
 283:Tones.c       ****         PWMtimer1_ReadStatusRegister();
 756              		.loc 1 283 0
 757 0016 FFF7FEFF 		bl	PWMtimer1_ReadStatusRegister
 758              	.L40:
 759              	.LBE14:
 284:Tones.c       ****     
 285:Tones.c       ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 760              		.loc 1 285 0
 761 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 762 001c 002B     		cmp	r3, #0
 763 001e 04D0     		beq	.L41
 764              		.loc 1 285 0 is_stmt 0 discriminator 1
 765 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 766 0022 012B     		cmp	r3, #1
 767 0024 01D0     		beq	.L41
 286:Tones.c       ****         return false;
 768              		.loc 1 286 0 is_stmt 1
 769 0026 0023     		movs	r3, #0
 770 0028 C3E0     		b	.L42
 771              	.L41:
 287:Tones.c       ****     
 288:Tones.c       ****     CyWdtClear();   //Reset watchdog timer periodically
 772              		.loc 1 288 0
 773 002a FFF7FEFF 		bl	CyWdtClear
 289:Tones.c       **** 
 290:Tones.c       ****     switch(speakerDataList[bSpeaker].currentToneNumber)
 774              		.loc 1 290 0
 775 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 776 0030 6249     		ldr	r1, .L57
 777 0032 1346     		mov	r3, r2
 778 0034 5B00     		lsls	r3, r3, #1
 779 0036 1344     		add	r3, r3, r2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 20


 780 0038 DB00     		lsls	r3, r3, #3
 781 003a 0B44     		add	r3, r3, r1
 782 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 783 003e 013B     		subs	r3, r3, #1
 784 0040 152B     		cmp	r3, #21
 785 0042 00F2B480 		bhi	.L56
 786 0046 01A2     		adr	r2, .L45
 787 0048 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 788              		.p2align 2
 789              	.L45:
 790 004c A5000000 		.word	.L44+1
 791 0050 A5000000 		.word	.L44+1
 792 0054 A5000000 		.word	.L44+1
 793 0058 A5000000 		.word	.L44+1
 794 005c D1000000 		.word	.L46+1
 795 0060 E7000000 		.word	.L47+1
 796 0064 FD000000 		.word	.L48+1
 797 0068 17010000 		.word	.L49+1
 798 006c 43010000 		.word	.L50+1
 799 0070 43010000 		.word	.L50+1
 800 0074 6F010000 		.word	.L51+1
 801 0078 7D010000 		.word	.L52+1
 802 007c 8B010000 		.word	.L53+1
 803 0080 AF010000 		.word	.L56+1
 804 0084 AF010000 		.word	.L56+1
 805 0088 AF010000 		.word	.L56+1
 806 008c AF010000 		.word	.L56+1
 807 0090 AF010000 		.word	.L56+1
 808 0094 AF010000 		.word	.L56+1
 809 0098 AF010000 		.word	.L56+1
 810 009c AF010000 		.word	.L56+1
 811 00a0 99010000 		.word	.L54+1
 812              		.p2align 1
 813              	.L44:
 291:Tones.c       **** 	{
 292:Tones.c       ****         case WAIL:
 293:Tones.c       ****         case SLOW_YELP:
 294:Tones.c       ****         case FAST_YELP:
 295:Tones.c       **** 		case PHASER:
 296:Tones.c       ****             playGradualChangeTone(&speakerDataList[bSpeaker], &toneList[speakerDataList[bSpeaker].c
 814              		.loc 1 296 0
 815 00a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 816 00a6 1346     		mov	r3, r2
 817 00a8 5B00     		lsls	r3, r3, #1
 818 00aa 1344     		add	r3, r3, r2
 819 00ac DB00     		lsls	r3, r3, #3
 820 00ae 434A     		ldr	r2, .L57
 821 00b0 9818     		adds	r0, r3, r2
 822 00b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 823 00b4 4149     		ldr	r1, .L57
 824 00b6 1346     		mov	r3, r2
 825 00b8 5B00     		lsls	r3, r3, #1
 826 00ba 1344     		add	r3, r3, r2
 827 00bc DB00     		lsls	r3, r3, #3
 828 00be 0B44     		add	r3, r3, r1
 829 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 830 00c2 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 21


 831 00c4 3E4A     		ldr	r2, .L57+4
 832 00c6 1344     		add	r3, r3, r2
 833 00c8 1946     		mov	r1, r3
 834 00ca FFF7FEFF 		bl	playGradualChangeTone
 297:Tones.c       ****             break;
 835              		.loc 1 297 0
 836 00ce 6FE0     		b	.L55
 837              	.L46:
 298:Tones.c       ****         case HORN:
 299:Tones.c       **** 			playHornTone(&speakerDataList[bSpeaker]);
 838              		.loc 1 299 0
 839 00d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 840 00d2 1346     		mov	r3, r2
 841 00d4 5B00     		lsls	r3, r3, #1
 842 00d6 1344     		add	r3, r3, r2
 843 00d8 DB00     		lsls	r3, r3, #3
 844 00da 384A     		ldr	r2, .L57
 845 00dc 1344     		add	r3, r3, r2
 846 00de 1846     		mov	r0, r3
 847 00e0 FFF7FEFF 		bl	playHornTone
 300:Tones.c       **** 			break;
 848              		.loc 1 300 0
 849 00e4 64E0     		b	.L55
 850              	.L47:
 301:Tones.c       ****         case MECHANICAL:
 302:Tones.c       **** 			playMechanicalTone(&speakerDataList[bSpeaker]);
 851              		.loc 1 302 0
 852 00e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 853 00e8 1346     		mov	r3, r2
 854 00ea 5B00     		lsls	r3, r3, #1
 855 00ec 1344     		add	r3, r3, r2
 856 00ee DB00     		lsls	r3, r3, #3
 857 00f0 324A     		ldr	r2, .L57
 858 00f2 1344     		add	r3, r3, r2
 859 00f4 1846     		mov	r0, r3
 860 00f6 FFF7FEFF 		bl	playMechanicalTone
 303:Tones.c       **** 			break;
 861              		.loc 1 303 0
 862 00fa 59E0     		b	.L55
 863              	.L48:
 304:Tones.c       **** 		case MANUAL_WAIL:
 305:Tones.c       **** 			playManualWailTone(bSpeaker, &speakerDataList[bSpeaker]);
 864              		.loc 1 305 0
 865 00fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 866 00fe 1346     		mov	r3, r2
 867 0100 5B00     		lsls	r3, r3, #1
 868 0102 1344     		add	r3, r3, r2
 869 0104 DB00     		lsls	r3, r3, #3
 870 0106 2D4A     		ldr	r2, .L57
 871 0108 1A44     		add	r2, r2, r3
 872 010a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 873 010c 1146     		mov	r1, r2
 874 010e 1846     		mov	r0, r3
 875 0110 FFF7FEFF 		bl	playManualWailTone
 306:Tones.c       **** 			break;		
 876              		.loc 1 306 0
 877 0114 4CE0     		b	.L55
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 22


 878              	.L49:
 307:Tones.c       **** 		case HIGH_LOW:
 308:Tones.c       ****             playHighLowTone(&speakerDataList[bSpeaker],&toneList[speakerDataList[bSpeaker].currentT
 879              		.loc 1 308 0
 880 0116 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 881 0118 1346     		mov	r3, r2
 882 011a 5B00     		lsls	r3, r3, #1
 883 011c 1344     		add	r3, r3, r2
 884 011e DB00     		lsls	r3, r3, #3
 885 0120 264A     		ldr	r2, .L57
 886 0122 9818     		adds	r0, r3, r2
 887 0124 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 888 0126 2549     		ldr	r1, .L57
 889 0128 1346     		mov	r3, r2
 890 012a 5B00     		lsls	r3, r3, #1
 891 012c 1344     		add	r3, r3, r2
 892 012e DB00     		lsls	r3, r3, #3
 893 0130 0B44     		add	r3, r3, r1
 894 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 895 0134 DB00     		lsls	r3, r3, #3
 896 0136 224A     		ldr	r2, .L57+4
 897 0138 1344     		add	r3, r3, r2
 898 013a 1946     		mov	r1, r3
 899 013c FFF7FEFF 		bl	playHighLowTone
 309:Tones.c       ****             break;
 900              		.loc 1 309 0
 901 0140 36E0     		b	.L55
 902              	.L50:
 310:Tones.c       ****         case PCALL_SLOW:
 311:Tones.c       ****         case PCALL_FAST:             
 312:Tones.c       ****             playPCallTone(&speakerDataList[bSpeaker], &toneList[speakerDataList[bSpeaker].currentTo
 903              		.loc 1 312 0
 904 0142 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 905 0144 1346     		mov	r3, r2
 906 0146 5B00     		lsls	r3, r3, #1
 907 0148 1344     		add	r3, r3, r2
 908 014a DB00     		lsls	r3, r3, #3
 909 014c 1B4A     		ldr	r2, .L57
 910 014e 9818     		adds	r0, r3, r2
 911 0150 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 912 0152 1A49     		ldr	r1, .L57
 913 0154 1346     		mov	r3, r2
 914 0156 5B00     		lsls	r3, r3, #1
 915 0158 1344     		add	r3, r3, r2
 916 015a DB00     		lsls	r3, r3, #3
 917 015c 0B44     		add	r3, r3, r1
 918 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 919 0160 DB00     		lsls	r3, r3, #3
 920 0162 174A     		ldr	r2, .L57+4
 921 0164 1344     		add	r3, r3, r2
 922 0166 1946     		mov	r1, r3
 923 0168 FFF7FEFF 		bl	playPCallTone
 313:Tones.c       **** 			break;
 924              		.loc 1 313 0
 925 016c 20E0     		b	.L55
 926              	.L51:
 314:Tones.c       ****         case HORN_PHASER:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 23


 315:Tones.c       ****             playComboTone(bSpeaker, &toneList[HORN], &toneList[PHASER]);
 927              		.loc 1 315 0
 928 016e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 929 0170 144A     		ldr	r2, .L57+8
 930 0172 1549     		ldr	r1, .L57+12
 931 0174 1846     		mov	r0, r3
 932 0176 FFF7FEFF 		bl	playComboTone
 316:Tones.c       ****             break;
 933              		.loc 1 316 0
 934 017a 19E0     		b	.L55
 935              	.L52:
 317:Tones.c       ****         case HORN_YELP:
 318:Tones.c       ****             playComboTone(bSpeaker, &toneList[HORN], &toneList[FAST_YELP]);
 936              		.loc 1 318 0
 937 017c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 938 017e 134A     		ldr	r2, .L57+16
 939 0180 1149     		ldr	r1, .L57+12
 940 0182 1846     		mov	r0, r3
 941 0184 FFF7FEFF 		bl	playComboTone
 319:Tones.c       ****             break;
 942              		.loc 1 319 0
 943 0188 12E0     		b	.L55
 944              	.L53:
 320:Tones.c       ****         case PHASER_YELP:
 321:Tones.c       ****             playComboTone(bSpeaker, &toneList[PHASER], &toneList[FAST_YELP]);
 945              		.loc 1 321 0
 946 018a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 947 018c 0F4A     		ldr	r2, .L57+16
 948 018e 0D49     		ldr	r1, .L57+8
 949 0190 1846     		mov	r0, r3
 950 0192 FFF7FEFF 		bl	playComboTone
 322:Tones.c       ****             break;
 951              		.loc 1 322 0
 952 0196 0BE0     		b	.L55
 953              	.L54:
 323:Tones.c       ****         case TEST_TONE:
 324:Tones.c       ****             playTestTone(&speakerDataList[bSpeaker]);
 954              		.loc 1 324 0
 955 0198 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 956 019a 1346     		mov	r3, r2
 957 019c 5B00     		lsls	r3, r3, #1
 958 019e 1344     		add	r3, r3, r2
 959 01a0 DB00     		lsls	r3, r3, #3
 960 01a2 064A     		ldr	r2, .L57
 961 01a4 1344     		add	r3, r3, r2
 962 01a6 1846     		mov	r0, r3
 963 01a8 FFF7FEFF 		bl	playTestTone
 325:Tones.c       ****             break;
 964              		.loc 1 325 0
 965 01ac 00E0     		b	.L55
 966              	.L56:
 326:Tones.c       ****         default:
 327:Tones.c       ****             break;
 967              		.loc 1 327 0
 968 01ae 00BF     		nop
 969              	.L55:
 328:Tones.c       **** 	}
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 24


 329:Tones.c       ****     
 330:Tones.c       ****     return true;
 970              		.loc 1 330 0
 971 01b0 0123     		movs	r3, #1
 972              	.L42:
 331:Tones.c       **** }
 973              		.loc 1 331 0
 974 01b2 1846     		mov	r0, r3
 975 01b4 0837     		adds	r7, r7, #8
 976              		.cfi_def_cfa_offset 8
 977 01b6 BD46     		mov	sp, r7
 978              		.cfi_def_cfa_register 13
 979              		@ sp needed
 980 01b8 80BD     		pop	{r7, pc}
 981              	.L58:
 982 01ba 00BF     		.align	2
 983              	.L57:
 984 01bc 60000000 		.word	speakerDataList
 985 01c0 00000000 		.word	toneList
 986 01c4 20000000 		.word	toneList+32
 987 01c8 28000000 		.word	toneList+40
 988 01cc 18000000 		.word	toneList+24
 989              		.cfi_endproc
 990              	.LFE65:
 991              		.size	processPWMtimerRoutine, .-processPWMtimerRoutine
 992              		.section	.text.processPWM1updateRoutine,"ax",%progbits
 993              		.align	2
 994              		.global	processPWM1updateRoutine
 995              		.thumb
 996              		.thumb_func
 997              		.type	processPWM1updateRoutine, %function
 998              	processPWM1updateRoutine:
 999              	.LFB66:
 332:Tones.c       **** 
 333:Tones.c       **** /*******************************************************************************
 334:Tones.c       **** * Function Name: processPWM1updateRoutine
 335:Tones.c       **** ********************************************************************************
 336:Tones.c       **** *
 337:Tones.c       **** * Summary:
 338:Tones.c       **** *  Updates the PWM frequency value and duty cycle value at the end of each PWM cycle,
 339:Tones.c       **** *  called in the PWM_ISR
 340:Tones.c       **** *
 341:Tones.c       **** * Parameters:  
 342:Tones.c       **** *   None
 343:Tones.c       **** *
 344:Tones.c       **** * Return:
 345:Tones.c       **** *   None
 346:Tones.c       **** *
 347:Tones.c       **** *******************************************************************************/
 348:Tones.c       **** void processPWM1updateRoutine(void)
 349:Tones.c       **** {
 1000              		.loc 1 349 0
 1001              		.cfi_startproc
 1002              		@ args = 0, pretend = 0, frame = 8
 1003              		@ frame_needed = 1, uses_anonymous_args = 0
 1004 0000 80B5     		push	{r7, lr}
 1005              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 25


 1006              		.cfi_offset 7, -8
 1007              		.cfi_offset 14, -4
 1008 0002 82B0     		sub	sp, sp, #8
 1009              		.cfi_def_cfa_offset 16
 1010 0004 00AF     		add	r7, sp, #0
 1011              		.cfi_def_cfa_register 7
 350:Tones.c       ****     static const uint8 HORN_FREQUENCY_COUNT_LIMIT = 1;
 351:Tones.c       ****     static uint8 hornFrequencyCount = 0;
 352:Tones.c       ****     uint16 captureValue = 0;
 1012              		.loc 1 352 0
 1013 0006 0023     		movs	r3, #0
 1014 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 353:Tones.c       ****     
 354:Tones.c       ****     static const uint8 HORN_WIGGLE_WIDTH = 20;
 355:Tones.c       ****     static uint8 bFrequencyChange = INCREASING;
 356:Tones.c       ****     static uint8 hornWiggleCount = 0;
 357:Tones.c       ****     
 358:Tones.c       ****     PWM_1_ReadStatusRegister();    //Clears the sticky interrupt bit
 1015              		.loc 1 358 0
 1016 000a FFF7FEFF 		bl	PWM_1_ReadStatusRegister
 359:Tones.c       ****     
 360:Tones.c       ****     if(speakerDataList[SPEAKER_1].bHornPWMenable)
 1017              		.loc 1 360 0
 1018 000e 374B     		ldr	r3, .L74
 1019 0010 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 1020 0012 002B     		cmp	r3, #0
 1021 0014 4BD0     		beq	.L60
 361:Tones.c       ****     {
 362:Tones.c       ****         switch(hornFrequencyCount)
 1022              		.loc 1 362 0
 1023 0016 364B     		ldr	r3, .L74+4
 1024 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1025 001a 002B     		cmp	r3, #0
 1026 001c 02D0     		beq	.L62
 1027 001e 012B     		cmp	r3, #1
 1028 0020 2FD0     		beq	.L63
 1029 0022 33E0     		b	.L61
 1030              	.L62:
 363:Tones.c       ****         {   //Used to switch between 2 PWM patterns to create the horn effect
 364:Tones.c       ****             case 0:
 365:Tones.c       ****                 captureValue = getCaptureValue(HORN_FIRST_FREQUENCY) + hornWiggleCount;
 1031              		.loc 1 365 0
 1032 0024 40F2FA43 		movw	r3, #1274
 1033 0028 1846     		mov	r0, r3
 1034 002a FFF7FEFF 		bl	getCaptureValue
 1035 002e 0346     		mov	r3, r0
 1036 0030 1A46     		mov	r2, r3
 1037 0032 304B     		ldr	r3, .L74+8
 1038 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1039 0036 9BB2     		uxth	r3, r3
 1040 0038 1344     		add	r3, r3, r2
 1041 003a FB80     		strh	r3, [r7, #6]	@ movhi
 366:Tones.c       ****                 
 367:Tones.c       ****                 if(bFrequencyChange == INCREASING)
 1042              		.loc 1 367 0
 1043 003c 2E4B     		ldr	r3, .L74+12
 1044 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 26


 1045 0040 012B     		cmp	r3, #1
 1046 0042 06D1     		bne	.L64
 368:Tones.c       ****                     hornWiggleCount += 2;   //Creates vibrato effect at this frequency
 1047              		.loc 1 368 0
 1048 0044 2B4B     		ldr	r3, .L74+8
 1049 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1050 0048 0233     		adds	r3, r3, #2
 1051 004a DAB2     		uxtb	r2, r3
 1052 004c 294B     		ldr	r3, .L74+8
 1053 004e 1A70     		strb	r2, [r3]
 1054 0050 05E0     		b	.L65
 1055              	.L64:
 369:Tones.c       ****                 else
 370:Tones.c       ****                     hornWiggleCount -= 2;
 1056              		.loc 1 370 0
 1057 0052 284B     		ldr	r3, .L74+8
 1058 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1059 0056 023B     		subs	r3, r3, #2
 1060 0058 DAB2     		uxtb	r2, r3
 1061 005a 264B     		ldr	r3, .L74+8
 1062 005c 1A70     		strb	r2, [r3]
 1063              	.L65:
 371:Tones.c       ****                 
 372:Tones.c       ****                 if(hornWiggleCount <= 0)
 1064              		.loc 1 372 0
 1065 005e 254B     		ldr	r3, .L74+8
 1066 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067 0062 002B     		cmp	r3, #0
 1068 0064 03D1     		bne	.L66
 373:Tones.c       ****                     bFrequencyChange = INCREASING;
 1069              		.loc 1 373 0
 1070 0066 244B     		ldr	r3, .L74+12
 1071 0068 0122     		movs	r2, #1
 1072 006a 1A70     		strb	r2, [r3]
 374:Tones.c       ****                 else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 375:Tones.c       ****                     bFrequencyChange = DECREASING;
 376:Tones.c       ****                 break;
 1073              		.loc 1 376 0
 1074 006c 0DE0     		b	.L72
 1075              	.L66:
 374:Tones.c       ****                 else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 1076              		.loc 1 374 0
 1077 006e 214B     		ldr	r3, .L74+8
 1078 0070 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1079 0072 224B     		ldr	r3, .L74+16
 1080 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 0076 9A42     		cmp	r2, r3
 1082 0078 07D3     		bcc	.L72
 375:Tones.c       ****                 break;
 1083              		.loc 1 375 0
 1084 007a 1F4B     		ldr	r3, .L74+12
 1085 007c 0022     		movs	r2, #0
 1086 007e 1A70     		strb	r2, [r3]
 1087              		.loc 1 376 0
 1088 0080 03E0     		b	.L72
 1089              	.L63:
 377:Tones.c       ****             case 1:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 27


 378:Tones.c       ****                 captureValue = speakerDataList[SPEAKER_1].PWMperiodCount;
 1090              		.loc 1 378 0
 1091 0082 1A4B     		ldr	r3, .L74
 1092 0084 5B88     		ldrh	r3, [r3, #2]	@ movhi
 1093 0086 FB80     		strh	r3, [r7, #6]	@ movhi
 379:Tones.c       ****                 break;
 1094              		.loc 1 379 0
 1095 0088 00E0     		b	.L61
 1096              	.L72:
 376:Tones.c       ****             case 1:
 1097              		.loc 1 376 0
 1098 008a 00BF     		nop
 1099              	.L61:
 380:Tones.c       ****         }
 381:Tones.c       ****         
 382:Tones.c       ****         if(hornFrequencyCount < HORN_FREQUENCY_COUNT_LIMIT)
 1100              		.loc 1 382 0
 1101 008c 184B     		ldr	r3, .L74+4
 1102 008e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1103 0090 1B4B     		ldr	r3, .L74+20
 1104 0092 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1105 0094 9A42     		cmp	r2, r3
 1106 0096 06D2     		bcs	.L68
 383:Tones.c       ****             hornFrequencyCount++;
 1107              		.loc 1 383 0
 1108 0098 154B     		ldr	r3, .L74+4
 1109 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1110 009c 0133     		adds	r3, r3, #1
 1111 009e DAB2     		uxtb	r2, r3
 1112 00a0 134B     		ldr	r3, .L74+4
 1113 00a2 1A70     		strb	r2, [r3]
 1114 00a4 06E0     		b	.L70
 1115              	.L68:
 384:Tones.c       ****         else
 385:Tones.c       ****             hornFrequencyCount = 0;
 1116              		.loc 1 385 0
 1117 00a6 124B     		ldr	r3, .L74+4
 1118 00a8 0022     		movs	r2, #0
 1119 00aa 1A70     		strb	r2, [r3]
 1120 00ac 02E0     		b	.L70
 1121              	.L60:
 386:Tones.c       ****     }
 387:Tones.c       ****     else    //When there is no horn effect
 388:Tones.c       ****         captureValue = speakerDataList[SPEAKER_1].PWMperiodCount;
 1122              		.loc 1 388 0
 1123 00ae 0F4B     		ldr	r3, .L74
 1124 00b0 5B88     		ldrh	r3, [r3, #2]	@ movhi
 1125 00b2 FB80     		strh	r3, [r7, #6]	@ movhi
 1126              	.L70:
 389:Tones.c       ****         
 390:Tones.c       ****     PWM_1_WritePeriod(captureValue);    //Load new value to the PWM peripheral
 1127              		.loc 1 390 0
 1128 00b4 FB88     		ldrh	r3, [r7, #6]
 1129 00b6 1846     		mov	r0, r3
 1130 00b8 FFF7FEFF 		bl	PWM_1_WritePeriod
 391:Tones.c       ****     PWM_1_WriteCompare(captureValue/2);
 1131              		.loc 1 391 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 28


 1132 00bc FB88     		ldrh	r3, [r7, #6]
 1133 00be 5B08     		lsrs	r3, r3, #1
 1134 00c0 9BB2     		uxth	r3, r3
 1135 00c2 1846     		mov	r0, r3
 1136 00c4 FFF7FEFF 		bl	PWM_1_WriteCompare
 392:Tones.c       ****     
 393:Tones.c       ****     if(toneEffectStatus == SYNC_TONES)
 1137              		.loc 1 393 0
 1138 00c8 0E4B     		ldr	r3, .L74+24
 1139 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1140 00cc 012B     		cmp	r3, #1
 1141 00ce 09D1     		bne	.L73
 1142              	.LBB15:
 394:Tones.c       ****     {   //Update PWM 2 as well during sync, uses Speaker 1's capture value
 395:Tones.c       ****         PWM_2_WritePeriod(captureValue);
 1143              		.loc 1 395 0
 1144 00d0 FB88     		ldrh	r3, [r7, #6]
 1145 00d2 1846     		mov	r0, r3
 1146 00d4 FFF7FEFF 		bl	PWM_2_WritePeriod
 396:Tones.c       ****         PWM_2_WriteCompare(captureValue/2);
 1147              		.loc 1 396 0
 1148 00d8 FB88     		ldrh	r3, [r7, #6]
 1149 00da 5B08     		lsrs	r3, r3, #1
 1150 00dc 9BB2     		uxth	r3, r3
 1151 00de 1846     		mov	r0, r3
 1152 00e0 FFF7FEFF 		bl	PWM_2_WriteCompare
 1153              	.L73:
 1154              	.LBE15:
 397:Tones.c       ****     }
 398:Tones.c       **** }
 1155              		.loc 1 398 0
 1156 00e4 00BF     		nop
 1157 00e6 0837     		adds	r7, r7, #8
 1158              		.cfi_def_cfa_offset 8
 1159 00e8 BD46     		mov	sp, r7
 1160              		.cfi_def_cfa_register 13
 1161              		@ sp needed
 1162 00ea 80BD     		pop	{r7, pc}
 1163              	.L75:
 1164              		.align	2
 1165              	.L74:
 1166 00ec 60000000 		.word	speakerDataList
 1167 00f0 02000000 		.word	hornFrequencyCount.6341
 1168 00f4 03000000 		.word	hornWiggleCount.6345
 1169 00f8 90000000 		.word	bFrequencyChange.6344
 1170 00fc 36000000 		.word	HORN_WIGGLE_WIDTH.6343
 1171 0100 37000000 		.word	HORN_FREQUENCY_COUNT_LIMIT.6340
 1172 0104 00000000 		.word	toneEffectStatus
 1173              		.cfi_endproc
 1174              	.LFE66:
 1175              		.size	processPWM1updateRoutine, .-processPWM1updateRoutine
 1176              		.section	.text.processPWM2updateRoutine,"ax",%progbits
 1177              		.align	2
 1178              		.global	processPWM2updateRoutine
 1179              		.thumb
 1180              		.thumb_func
 1181              		.type	processPWM2updateRoutine, %function
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 29


 1182              	processPWM2updateRoutine:
 1183              	.LFB67:
 399:Tones.c       **** 
 400:Tones.c       **** /*******************************************************************************
 401:Tones.c       **** * Function Name: processPWM2updateRoutine
 402:Tones.c       **** ********************************************************************************
 403:Tones.c       **** *
 404:Tones.c       **** * Summary:
 405:Tones.c       **** *  Updates the PWM frequency value and duty cycle value at the end of each PWM cycle,
 406:Tones.c       **** *  called in the PWM_ISR
 407:Tones.c       **** *
 408:Tones.c       **** * Parameters:  
 409:Tones.c       **** *   None
 410:Tones.c       **** *
 411:Tones.c       **** * Return:
 412:Tones.c       **** *   None
 413:Tones.c       **** *
 414:Tones.c       **** *******************************************************************************/
 415:Tones.c       **** void processPWM2updateRoutine(void)
 416:Tones.c       **** {
 1184              		.loc 1 416 0
 1185              		.cfi_startproc
 1186              		@ args = 0, pretend = 0, frame = 8
 1187              		@ frame_needed = 1, uses_anonymous_args = 0
 1188 0000 80B5     		push	{r7, lr}
 1189              		.cfi_def_cfa_offset 8
 1190              		.cfi_offset 7, -8
 1191              		.cfi_offset 14, -4
 1192 0002 82B0     		sub	sp, sp, #8
 1193              		.cfi_def_cfa_offset 16
 1194 0004 00AF     		add	r7, sp, #0
 1195              		.cfi_def_cfa_register 7
 417:Tones.c       ****     static const uint8 HORN_FREQUENCY_COUNT_LIMIT = 1;
 418:Tones.c       ****     static uint8 hornFrequencyCount = 0;
 419:Tones.c       ****     uint16 captureValue = 0;
 1196              		.loc 1 419 0
 1197 0006 0023     		movs	r3, #0
 1198 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 420:Tones.c       ****     
 421:Tones.c       ****     static const uint8 HORN_WIGGLE_WIDTH = 20;
 422:Tones.c       ****     static uint8 bFrequencyChange = INCREASING;
 423:Tones.c       ****     static uint8 hornWiggleCount = 0;
 424:Tones.c       ****     
 425:Tones.c       ****     PWM_2_ReadStatusRegister();    //Clears the sticky interrupt bit
 1199              		.loc 1 425 0
 1200 000a FFF7FEFF 		bl	PWM_2_ReadStatusRegister
 426:Tones.c       ****     
 427:Tones.c       ****     if(toneEffectStatus != SYNC_TONES)
 1201              		.loc 1 427 0
 1202 000e 334B     		ldr	r3, .L91
 1203 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1204 0012 012B     		cmp	r3, #1
 1205 0014 5DD0     		beq	.L89
 1206              	.LBB16:
 428:Tones.c       ****     {   //Only update PWM 2 in this routine when not in sync
 429:Tones.c       ****         if(speakerDataList[SPEAKER_2].bHornPWMenable)
 1207              		.loc 1 429 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 30


 1208 0016 324B     		ldr	r3, .L91+4
 1209 0018 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1210 001c 002B     		cmp	r3, #0
 1211 001e 4BD0     		beq	.L78
 430:Tones.c       ****         {
 431:Tones.c       ****             switch(hornFrequencyCount)
 1212              		.loc 1 431 0
 1213 0020 304B     		ldr	r3, .L91+8
 1214 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1215 0024 002B     		cmp	r3, #0
 1216 0026 02D0     		beq	.L80
 1217 0028 012B     		cmp	r3, #1
 1218 002a 2FD0     		beq	.L81
 1219 002c 33E0     		b	.L79
 1220              	.L80:
 432:Tones.c       ****             {   //Used to switch between 2 PWM patterns to create the horn effect
 433:Tones.c       ****                 case 0:
 434:Tones.c       ****                     captureValue = getCaptureValue(HORN_FIRST_FREQUENCY) + hornWiggleCount;
 1221              		.loc 1 434 0
 1222 002e 40F2FA43 		movw	r3, #1274
 1223 0032 1846     		mov	r0, r3
 1224 0034 FFF7FEFF 		bl	getCaptureValue
 1225 0038 0346     		mov	r3, r0
 1226 003a 1A46     		mov	r2, r3
 1227 003c 2A4B     		ldr	r3, .L91+12
 1228 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1229 0040 9BB2     		uxth	r3, r3
 1230 0042 1344     		add	r3, r3, r2
 1231 0044 FB80     		strh	r3, [r7, #6]	@ movhi
 435:Tones.c       ****                     
 436:Tones.c       ****                     if(bFrequencyChange == INCREASING)
 1232              		.loc 1 436 0
 1233 0046 294B     		ldr	r3, .L91+16
 1234 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1235 004a 012B     		cmp	r3, #1
 1236 004c 06D1     		bne	.L82
 437:Tones.c       ****                         hornWiggleCount += 2; //Creates vibrato effect at this frequency
 1237              		.loc 1 437 0
 1238 004e 264B     		ldr	r3, .L91+12
 1239 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1240 0052 0233     		adds	r3, r3, #2
 1241 0054 DAB2     		uxtb	r2, r3
 1242 0056 244B     		ldr	r3, .L91+12
 1243 0058 1A70     		strb	r2, [r3]
 1244 005a 05E0     		b	.L83
 1245              	.L82:
 438:Tones.c       ****                     else
 439:Tones.c       ****                         hornWiggleCount -= 2;
 1246              		.loc 1 439 0
 1247 005c 224B     		ldr	r3, .L91+12
 1248 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1249 0060 023B     		subs	r3, r3, #2
 1250 0062 DAB2     		uxtb	r2, r3
 1251 0064 204B     		ldr	r3, .L91+12
 1252 0066 1A70     		strb	r2, [r3]
 1253              	.L83:
 440:Tones.c       ****                     
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 31


 441:Tones.c       ****                     if(hornWiggleCount <= 0)
 1254              		.loc 1 441 0
 1255 0068 1F4B     		ldr	r3, .L91+12
 1256 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1257 006c 002B     		cmp	r3, #0
 1258 006e 03D1     		bne	.L84
 442:Tones.c       ****                         bFrequencyChange = INCREASING;
 1259              		.loc 1 442 0
 1260 0070 1E4B     		ldr	r3, .L91+16
 1261 0072 0122     		movs	r2, #1
 1262 0074 1A70     		strb	r2, [r3]
 443:Tones.c       ****                     else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 444:Tones.c       ****                         bFrequencyChange = DECREASING;
 445:Tones.c       ****                     
 446:Tones.c       ****                     break;
 1263              		.loc 1 446 0
 1264 0076 0DE0     		b	.L90
 1265              	.L84:
 443:Tones.c       ****                     else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 1266              		.loc 1 443 0
 1267 0078 1B4B     		ldr	r3, .L91+12
 1268 007a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1269 007c 1C4B     		ldr	r3, .L91+20
 1270 007e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1271 0080 9A42     		cmp	r2, r3
 1272 0082 07D3     		bcc	.L90
 444:Tones.c       ****                     
 1273              		.loc 1 444 0
 1274 0084 194B     		ldr	r3, .L91+16
 1275 0086 0022     		movs	r2, #0
 1276 0088 1A70     		strb	r2, [r3]
 1277              		.loc 1 446 0
 1278 008a 03E0     		b	.L90
 1279              	.L81:
 447:Tones.c       ****                 case 1:
 448:Tones.c       ****                     captureValue = speakerDataList[SPEAKER_2].PWMperiodCount;
 1280              		.loc 1 448 0
 1281 008c 144B     		ldr	r3, .L91+4
 1282 008e 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 1283 0090 FB80     		strh	r3, [r7, #6]	@ movhi
 449:Tones.c       ****                     break;
 1284              		.loc 1 449 0
 1285 0092 00E0     		b	.L79
 1286              	.L90:
 446:Tones.c       ****                 case 1:
 1287              		.loc 1 446 0
 1288 0094 00BF     		nop
 1289              	.L79:
 450:Tones.c       ****             }
 451:Tones.c       ****             
 452:Tones.c       ****             if(hornFrequencyCount < HORN_FREQUENCY_COUNT_LIMIT)
 1290              		.loc 1 452 0
 1291 0096 134B     		ldr	r3, .L91+8
 1292 0098 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1293 009a 164B     		ldr	r3, .L91+24
 1294 009c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1295 009e 9A42     		cmp	r2, r3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 32


 1296 00a0 06D2     		bcs	.L86
 453:Tones.c       ****                 hornFrequencyCount++;
 1297              		.loc 1 453 0
 1298 00a2 104B     		ldr	r3, .L91+8
 1299 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1300 00a6 0133     		adds	r3, r3, #1
 1301 00a8 DAB2     		uxtb	r2, r3
 1302 00aa 0E4B     		ldr	r3, .L91+8
 1303 00ac 1A70     		strb	r2, [r3]
 1304 00ae 06E0     		b	.L88
 1305              	.L86:
 454:Tones.c       ****             else
 455:Tones.c       ****                 hornFrequencyCount = 0;
 1306              		.loc 1 455 0
 1307 00b0 0C4B     		ldr	r3, .L91+8
 1308 00b2 0022     		movs	r2, #0
 1309 00b4 1A70     		strb	r2, [r3]
 1310 00b6 02E0     		b	.L88
 1311              	.L78:
 456:Tones.c       ****         }
 457:Tones.c       ****         else //When there is no horn effect
 458:Tones.c       ****             captureValue = speakerDataList[SPEAKER_2].PWMperiodCount;
 1312              		.loc 1 458 0
 1313 00b8 094B     		ldr	r3, .L91+4
 1314 00ba 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 1315 00bc FB80     		strh	r3, [r7, #6]	@ movhi
 1316              	.L88:
 459:Tones.c       ****             
 460:Tones.c       ****         PWM_2_WritePeriod(captureValue);
 1317              		.loc 1 460 0
 1318 00be FB88     		ldrh	r3, [r7, #6]
 1319 00c0 1846     		mov	r0, r3
 1320 00c2 FFF7FEFF 		bl	PWM_2_WritePeriod
 461:Tones.c       ****         PWM_2_WriteCompare(captureValue/2);
 1321              		.loc 1 461 0
 1322 00c6 FB88     		ldrh	r3, [r7, #6]
 1323 00c8 5B08     		lsrs	r3, r3, #1
 1324 00ca 9BB2     		uxth	r3, r3
 1325 00cc 1846     		mov	r0, r3
 1326 00ce FFF7FEFF 		bl	PWM_2_WriteCompare
 1327              	.L89:
 1328              	.LBE16:
 462:Tones.c       ****     }
 463:Tones.c       **** }
 1329              		.loc 1 463 0
 1330 00d2 00BF     		nop
 1331 00d4 0837     		adds	r7, r7, #8
 1332              		.cfi_def_cfa_offset 8
 1333 00d6 BD46     		mov	sp, r7
 1334              		.cfi_def_cfa_register 13
 1335              		@ sp needed
 1336 00d8 80BD     		pop	{r7, pc}
 1337              	.L92:
 1338 00da 00BF     		.align	2
 1339              	.L91:
 1340 00dc 00000000 		.word	toneEffectStatus
 1341 00e0 60000000 		.word	speakerDataList
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 33


 1342 00e4 04000000 		.word	hornFrequencyCount.6361
 1343 00e8 05000000 		.word	hornWiggleCount.6365
 1344 00ec 91000000 		.word	bFrequencyChange.6364
 1345 00f0 38000000 		.word	HORN_WIGGLE_WIDTH.6363
 1346 00f4 39000000 		.word	HORN_FREQUENCY_COUNT_LIMIT.6360
 1347              		.cfi_endproc
 1348              	.LFE67:
 1349              		.size	processPWM2updateRoutine, .-processPWM2updateRoutine
 1350              		.section	.text.isManualWailActive,"ax",%progbits
 1351              		.align	2
 1352              		.global	isManualWailActive
 1353              		.thumb
 1354              		.thumb_func
 1355              		.type	isManualWailActive, %function
 1356              	isManualWailActive:
 1357              	.LFB68:
 464:Tones.c       **** 
 465:Tones.c       **** /*******************************************************************************
 466:Tones.c       **** * Function Name: isManualWailActive
 467:Tones.c       **** ********************************************************************************
 468:Tones.c       **** *
 469:Tones.c       **** * Summary:
 470:Tones.c       **** *  Returns the boolean that determines if manual wail is active
 471:Tones.c       **** *
 472:Tones.c       **** * Parameters:  
 473:Tones.c       **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 474:Tones.c       **** *
 475:Tones.c       **** * Return:
 476:Tones.c       **** *   The boolean that determines if manual wail is active
 477:Tones.c       **** *
 478:Tones.c       **** *******************************************************************************/
 479:Tones.c       **** uint8 isManualWailActive(uint8 bSpeaker)
 480:Tones.c       **** {
 1358              		.loc 1 480 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 8
 1361              		@ frame_needed = 1, uses_anonymous_args = 0
 1362              		@ link register save eliminated.
 1363 0000 80B4     		push	{r7}
 1364              		.cfi_def_cfa_offset 4
 1365              		.cfi_offset 7, -4
 1366 0002 83B0     		sub	sp, sp, #12
 1367              		.cfi_def_cfa_offset 16
 1368 0004 00AF     		add	r7, sp, #0
 1369              		.cfi_def_cfa_register 7
 1370 0006 0346     		mov	r3, r0
 1371 0008 FB71     		strb	r3, [r7, #7]
 481:Tones.c       ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 1372              		.loc 1 481 0
 1373 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1374 000c 002B     		cmp	r3, #0
 1375 000e 04D0     		beq	.L94
 1376              		.loc 1 481 0 is_stmt 0 discriminator 1
 1377 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1378 0012 012B     		cmp	r3, #1
 1379 0014 01D0     		beq	.L94
 482:Tones.c       ****         return false;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 34


 1380              		.loc 1 482 0 is_stmt 1
 1381 0016 0023     		movs	r3, #0
 1382 0018 08E0     		b	.L95
 1383              	.L94:
 483:Tones.c       ****     
 484:Tones.c       ****     return speakerDataList[bSpeaker].bManualWailActiveFlag;
 1384              		.loc 1 484 0
 1385 001a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1386 001c 0649     		ldr	r1, .L96
 1387 001e 1346     		mov	r3, r2
 1388 0020 5B00     		lsls	r3, r3, #1
 1389 0022 1344     		add	r3, r3, r2
 1390 0024 DB00     		lsls	r3, r3, #3
 1391 0026 0B44     		add	r3, r3, r1
 1392 0028 1333     		adds	r3, r3, #19
 1393 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1394              	.L95:
 485:Tones.c       **** }
 1395              		.loc 1 485 0
 1396 002c 1846     		mov	r0, r3
 1397 002e 0C37     		adds	r7, r7, #12
 1398              		.cfi_def_cfa_offset 4
 1399 0030 BD46     		mov	sp, r7
 1400              		.cfi_def_cfa_register 13
 1401              		@ sp needed
 1402 0032 80BC     		pop	{r7}
 1403              		.cfi_restore 7
 1404              		.cfi_def_cfa_offset 0
 1405 0034 7047     		bx	lr
 1406              	.L97:
 1407 0036 00BF     		.align	2
 1408              	.L96:
 1409 0038 60000000 		.word	speakerDataList
 1410              		.cfi_endproc
 1411              	.LFE68:
 1412              		.size	isManualWailActive, .-isManualWailActive
 1413              		.section	.text.deactivateManualWail,"ax",%progbits
 1414              		.align	2
 1415              		.global	deactivateManualWail
 1416              		.thumb
 1417              		.thumb_func
 1418              		.type	deactivateManualWail, %function
 1419              	deactivateManualWail:
 1420              	.LFB69:
 486:Tones.c       **** 
 487:Tones.c       **** /*******************************************************************************
 488:Tones.c       **** * Function Name: deactivateManualWail
 489:Tones.c       **** ********************************************************************************
 490:Tones.c       **** *
 491:Tones.c       **** * Summary:
 492:Tones.c       **** *  Clears the manual wail active flag so it won't continue playing after the tone changes
 493:Tones.c       **** *
 494:Tones.c       **** * Parameters:  
 495:Tones.c       **** *   None
 496:Tones.c       **** *
 497:Tones.c       **** * Return:
 498:Tones.c       **** *   None
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 35


 499:Tones.c       **** *
 500:Tones.c       **** *******************************************************************************/
 501:Tones.c       **** void deactivateManualWail(void)
 502:Tones.c       **** {
 1421              		.loc 1 502 0
 1422              		.cfi_startproc
 1423              		@ args = 0, pretend = 0, frame = 0
 1424              		@ frame_needed = 1, uses_anonymous_args = 0
 1425              		@ link register save eliminated.
 1426 0000 80B4     		push	{r7}
 1427              		.cfi_def_cfa_offset 4
 1428              		.cfi_offset 7, -4
 1429 0002 00AF     		add	r7, sp, #0
 1430              		.cfi_def_cfa_register 7
 503:Tones.c       ****     speakerDataList[SPEAKER_1].bManualWailActiveFlag = false;
 1431              		.loc 1 503 0
 1432 0004 054B     		ldr	r3, .L99
 1433 0006 0022     		movs	r2, #0
 1434 0008 DA74     		strb	r2, [r3, #19]
 504:Tones.c       ****     speakerDataList[SPEAKER_2].bManualWailActiveFlag = false;
 1435              		.loc 1 504 0
 1436 000a 044B     		ldr	r3, .L99
 1437 000c 0022     		movs	r2, #0
 1438 000e 83F82B20 		strb	r2, [r3, #43]
 505:Tones.c       **** }
 1439              		.loc 1 505 0
 1440 0012 00BF     		nop
 1441 0014 BD46     		mov	sp, r7
 1442              		.cfi_def_cfa_register 13
 1443              		@ sp needed
 1444 0016 80BC     		pop	{r7}
 1445              		.cfi_restore 7
 1446              		.cfi_def_cfa_offset 0
 1447 0018 7047     		bx	lr
 1448              	.L100:
 1449 001a 00BF     		.align	2
 1450              	.L99:
 1451 001c 60000000 		.word	speakerDataList
 1452              		.cfi_endproc
 1453              	.LFE69:
 1454              		.size	deactivateManualWail, .-deactivateManualWail
 1455              		.section	.text.setToneEffectStatus,"ax",%progbits
 1456              		.align	2
 1457              		.thumb
 1458              		.thumb_func
 1459              		.type	setToneEffectStatus, %function
 1460              	setToneEffectStatus:
 1461              	.LFB70:
 506:Tones.c       **** 
 507:Tones.c       **** /*******************************************************************************
 508:Tones.c       **** * Function Name: setToneEffectStatus
 509:Tones.c       **** ********************************************************************************
 510:Tones.c       **** *
 511:Tones.c       **** * Summary:
 512:Tones.c       **** *  Determines if the qualifying tones need to be in sync or have delay
 513:Tones.c       **** *
 514:Tones.c       **** * Parameters:  
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 36


 515:Tones.c       **** *   firstTone: The tone for Speaker 1
 516:Tones.c       **** *   secondTone: The tone for Speaker 2
 517:Tones.c       **** *   bDualDelayInput: The boolean that indicates if dual delay is enabled
 518:Tones.c       **** *
 519:Tones.c       **** * Return:
 520:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 521:Tones.c       **** *
 522:Tones.c       **** *******************************************************************************/
 523:Tones.c       **** static uint8 setToneEffectStatus(enum ToneType firstTone, enum ToneType secondTone, uint8 bDualDela
 524:Tones.c       **** {
 1462              		.loc 1 524 0
 1463              		.cfi_startproc
 1464              		@ args = 0, pretend = 0, frame = 8
 1465              		@ frame_needed = 1, uses_anonymous_args = 0
 1466              		@ link register save eliminated.
 1467 0000 80B4     		push	{r7}
 1468              		.cfi_def_cfa_offset 4
 1469              		.cfi_offset 7, -4
 1470 0002 83B0     		sub	sp, sp, #12
 1471              		.cfi_def_cfa_offset 16
 1472 0004 00AF     		add	r7, sp, #0
 1473              		.cfi_def_cfa_register 7
 1474 0006 0346     		mov	r3, r0
 1475 0008 FB71     		strb	r3, [r7, #7]
 1476 000a 0B46     		mov	r3, r1
 1477 000c BB71     		strb	r3, [r7, #6]
 1478 000e 1346     		mov	r3, r2
 1479 0010 7B71     		strb	r3, [r7, #5]
 525:Tones.c       ****     if((firstTone < NO_TONE) || (firstTone > PHASER_YELP))
 1480              		.loc 1 525 0
 1481 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1482 0014 0D2B     		cmp	r3, #13
 1483 0016 01D9     		bls	.L102
 526:Tones.c       ****         return false;
 1484              		.loc 1 526 0
 1485 0018 0023     		movs	r3, #0
 1486 001a 35E0     		b	.L103
 1487              	.L102:
 527:Tones.c       ****     
 528:Tones.c       ****     if((secondTone < NO_TONE) || (secondTone > PHASER_YELP))
 1488              		.loc 1 528 0
 1489 001c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1490 001e 0D2B     		cmp	r3, #13
 1491 0020 01D9     		bls	.L104
 529:Tones.c       ****         return false;
 1492              		.loc 1 529 0
 1493 0022 0023     		movs	r3, #0
 1494 0024 30E0     		b	.L103
 1495              	.L104:
 530:Tones.c       ****     
 531:Tones.c       ****     if((bDualDelayInput != true) && (bDualDelayInput != false))
 1496              		.loc 1 531 0
 1497 0026 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1498 0028 012B     		cmp	r3, #1
 1499 002a 04D0     		beq	.L105
 1500              		.loc 1 531 0 is_stmt 0 discriminator 1
 1501 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 37


 1502 002e 002B     		cmp	r3, #0
 1503 0030 01D0     		beq	.L105
 532:Tones.c       ****         return false;
 1504              		.loc 1 532 0 is_stmt 1
 1505 0032 0023     		movs	r3, #0
 1506 0034 28E0     		b	.L103
 1507              	.L105:
 533:Tones.c       ****     
 534:Tones.c       ****     if((firstTone == NO_TONE) || (secondTone == NO_TONE) || (firstTone != secondTone))
 1508              		.loc 1 534 0
 1509 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1510 0038 002B     		cmp	r3, #0
 1511 003a 06D0     		beq	.L106
 1512              		.loc 1 534 0 is_stmt 0 discriminator 1
 1513 003c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1514 003e 002B     		cmp	r3, #0
 1515 0040 03D0     		beq	.L106
 1516              		.loc 1 534 0 discriminator 2
 1517 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1518 0044 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1519 0046 9A42     		cmp	r2, r3
 1520 0048 03D0     		beq	.L107
 1521              	.L106:
 535:Tones.c       ****         toneEffectStatus = NO_EFFECT;
 1522              		.loc 1 535 0 is_stmt 1
 1523 004a 124B     		ldr	r3, .L113
 1524 004c 0022     		movs	r2, #0
 1525 004e 1A70     		strb	r2, [r3]
 1526 0050 19E0     		b	.L108
 1527              	.L107:
 536:Tones.c       ****     else
 537:Tones.c       ****     {   //Tones are the same
 538:Tones.c       ****         if(bDualDelayInput == true)
 1528              		.loc 1 538 0
 1529 0052 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1530 0054 012B     		cmp	r3, #1
 1531 0056 13D1     		bne	.L109
 539:Tones.c       ****         {
 540:Tones.c       ****             if((firstTone == HORN) || (firstTone == MANUAL_WAIL) || (firstTone == TEST_TONE) || (fi
 1532              		.loc 1 540 0
 1533 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1534 005a 052B     		cmp	r3, #5
 1535 005c 08D0     		beq	.L110
 1536              		.loc 1 540 0 is_stmt 0 discriminator 1
 1537 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1538 0060 072B     		cmp	r3, #7
 1539 0062 05D0     		beq	.L110
 1540              		.loc 1 540 0 discriminator 2
 1541 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1542 0066 162B     		cmp	r3, #22
 1543 0068 02D0     		beq	.L110
 1544              		.loc 1 540 0 discriminator 3
 1545 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1546 006c 0A2B     		cmp	r3, #10
 1547 006e 03D9     		bls	.L111
 1548              	.L110:
 541:Tones.c       ****                 toneEffectStatus = SYNC_TONES;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 38


 1549              		.loc 1 541 0 is_stmt 1
 1550 0070 084B     		ldr	r3, .L113
 1551 0072 0122     		movs	r2, #1
 1552 0074 1A70     		strb	r2, [r3]
 1553 0076 06E0     		b	.L108
 1554              	.L111:
 542:Tones.c       ****             else
 543:Tones.c       ****                 toneEffectStatus = DELAY_TONES;
 1555              		.loc 1 543 0
 1556 0078 064B     		ldr	r3, .L113
 1557 007a 0222     		movs	r2, #2
 1558 007c 1A70     		strb	r2, [r3]
 1559 007e 02E0     		b	.L108
 1560              	.L109:
 544:Tones.c       ****         }
 545:Tones.c       ****         else
 546:Tones.c       ****             toneEffectStatus = SYNC_TONES;
 1561              		.loc 1 546 0
 1562 0080 044B     		ldr	r3, .L113
 1563 0082 0122     		movs	r2, #1
 1564 0084 1A70     		strb	r2, [r3]
 1565              	.L108:
 547:Tones.c       ****     }
 548:Tones.c       ****     
 549:Tones.c       ****     return true;
 1566              		.loc 1 549 0
 1567 0086 0123     		movs	r3, #1
 1568              	.L103:
 550:Tones.c       **** }
 1569              		.loc 1 550 0
 1570 0088 1846     		mov	r0, r3
 1571 008a 0C37     		adds	r7, r7, #12
 1572              		.cfi_def_cfa_offset 4
 1573 008c BD46     		mov	sp, r7
 1574              		.cfi_def_cfa_register 13
 1575              		@ sp needed
 1576 008e 80BC     		pop	{r7}
 1577              		.cfi_restore 7
 1578              		.cfi_def_cfa_offset 0
 1579 0090 7047     		bx	lr
 1580              	.L114:
 1581 0092 00BF     		.align	2
 1582              	.L113:
 1583 0094 00000000 		.word	toneEffectStatus
 1584              		.cfi_endproc
 1585              	.LFE70:
 1586              		.size	setToneEffectStatus, .-setToneEffectStatus
 1587              		.section	.text.playHornTone,"ax",%progbits
 1588              		.align	2
 1589              		.thumb
 1590              		.thumb_func
 1591              		.type	playHornTone, %function
 1592              	playHornTone:
 1593              	.LFB71:
 551:Tones.c       **** 
 552:Tones.c       **** /*******************************************************************************
 553:Tones.c       **** * Function Name: playHornTone
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 39


 554:Tones.c       **** ********************************************************************************
 555:Tones.c       **** *
 556:Tones.c       **** * Summary:
 557:Tones.c       **** *  Updates the PWM frequency value for the horn tone
 558:Tones.c       **** *
 559:Tones.c       **** * Parameters:  
 560:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 561:Tones.c       **** *
 562:Tones.c       **** * Return:
 563:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 564:Tones.c       **** *
 565:Tones.c       **** *******************************************************************************/
 566:Tones.c       **** static uint8 playHornTone(CurrentToneData* currentSpeaker)
 567:Tones.c       **** {
 1594              		.loc 1 567 0
 1595              		.cfi_startproc
 1596              		@ args = 0, pretend = 0, frame = 8
 1597              		@ frame_needed = 1, uses_anonymous_args = 0
 1598 0000 80B5     		push	{r7, lr}
 1599              		.cfi_def_cfa_offset 8
 1600              		.cfi_offset 7, -8
 1601              		.cfi_offset 14, -4
 1602 0002 82B0     		sub	sp, sp, #8
 1603              		.cfi_def_cfa_offset 16
 1604 0004 00AF     		add	r7, sp, #0
 1605              		.cfi_def_cfa_register 7
 1606 0006 7860     		str	r0, [r7, #4]
 568:Tones.c       **** 	if(currentSpeaker == NULL)
 1607              		.loc 1 568 0
 1608 0008 7B68     		ldr	r3, [r7, #4]
 1609 000a 002B     		cmp	r3, #0
 1610 000c 01D1     		bne	.L116
 569:Tones.c       ****         return false;
 1611              		.loc 1 569 0
 1612 000e 0023     		movs	r3, #0
 1613 0010 21E0     		b	.L117
 1614              	.L116:
 570:Tones.c       **** 	
 571:Tones.c       **** 	if(currentSpeaker-> bFrequencyChange == HIGH_PITCH)
 1615              		.loc 1 571 0
 1616 0012 7B68     		ldr	r3, [r7, #4]
 1617 0014 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1618 0016 012B     		cmp	r3, #1
 1619 0018 09D1     		bne	.L118
 572:Tones.c       **** 		currentSpeaker->PWMperiodCount = getCaptureValue(toneList[HORN].highestFrequency);
 1620              		.loc 1 572 0
 1621 001a 114B     		ldr	r3, .L120
 1622 001c 5B8D     		ldrh	r3, [r3, #42]
 1623 001e 1846     		mov	r0, r3
 1624 0020 FFF7FEFF 		bl	getCaptureValue
 1625 0024 0346     		mov	r3, r0
 1626 0026 1A46     		mov	r2, r3
 1627 0028 7B68     		ldr	r3, [r7, #4]
 1628 002a 5A80     		strh	r2, [r3, #2]	@ movhi
 1629 002c 08E0     		b	.L119
 1630              	.L118:
 573:Tones.c       **** 	else
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 40


 574:Tones.c       **** 		currentSpeaker->PWMperiodCount = getCaptureValue(toneList[HORN].lowestFrequency);
 1631              		.loc 1 574 0
 1632 002e 0C4B     		ldr	r3, .L120
 1633 0030 1B8D     		ldrh	r3, [r3, #40]
 1634 0032 1846     		mov	r0, r3
 1635 0034 FFF7FEFF 		bl	getCaptureValue
 1636 0038 0346     		mov	r3, r0
 1637 003a 1A46     		mov	r2, r3
 1638 003c 7B68     		ldr	r3, [r7, #4]
 1639 003e 5A80     		strh	r2, [r3, #2]	@ movhi
 1640              	.L119:
 575:Tones.c       **** 	
 576:Tones.c       **** 	currentSpeaker-> bFrequencyChange = !currentSpeaker-> bFrequencyChange;
 1641              		.loc 1 576 0
 1642 0040 7B68     		ldr	r3, [r7, #4]
 1643 0042 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1644 0044 002B     		cmp	r3, #0
 1645 0046 0CBF     		ite	eq
 1646 0048 0123     		moveq	r3, #1
 1647 004a 0023     		movne	r3, #0
 1648 004c DBB2     		uxtb	r3, r3
 1649 004e 1A46     		mov	r2, r3
 1650 0050 7B68     		ldr	r3, [r7, #4]
 1651 0052 1A74     		strb	r2, [r3, #16]
 577:Tones.c       ****         
 578:Tones.c       ****     return true;
 1652              		.loc 1 578 0
 1653 0054 0123     		movs	r3, #1
 1654              	.L117:
 579:Tones.c       **** }
 1655              		.loc 1 579 0
 1656 0056 1846     		mov	r0, r3
 1657 0058 0837     		adds	r7, r7, #8
 1658              		.cfi_def_cfa_offset 8
 1659 005a BD46     		mov	sp, r7
 1660              		.cfi_def_cfa_register 13
 1661              		@ sp needed
 1662 005c 80BD     		pop	{r7, pc}
 1663              	.L121:
 1664 005e 00BF     		.align	2
 1665              	.L120:
 1666 0060 00000000 		.word	toneList
 1667              		.cfi_endproc
 1668              	.LFE71:
 1669              		.size	playHornTone, .-playHornTone
 1670              		.section	.text.playGradualChangeTone,"ax",%progbits
 1671              		.align	2
 1672              		.thumb
 1673              		.thumb_func
 1674              		.type	playGradualChangeTone, %function
 1675              	playGradualChangeTone:
 1676              	.LFB72:
 580:Tones.c       **** 
 581:Tones.c       **** /*******************************************************************************
 582:Tones.c       **** * Function Name: playGradualChangeTone
 583:Tones.c       **** ********************************************************************************
 584:Tones.c       **** *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 41


 585:Tones.c       **** * Summary:
 586:Tones.c       **** *  Updates the PWM frequency value for the wail, yelp, and phaser tones
 587:Tones.c       **** *
 588:Tones.c       **** * Parameters:  
 589:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 590:Tones.c       **** *   currentTone: The pointer to the struct for the specified tone
 591:Tones.c       **** *
 592:Tones.c       **** * Return:
 593:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 594:Tones.c       **** *
 595:Tones.c       **** *******************************************************************************/
 596:Tones.c       **** static uint8 playGradualChangeTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 597:Tones.c       **** {
 1677              		.loc 1 597 0
 1678              		.cfi_startproc
 1679              		@ args = 0, pretend = 0, frame = 16
 1680              		@ frame_needed = 1, uses_anonymous_args = 0
 1681 0000 80B5     		push	{r7, lr}
 1682              		.cfi_def_cfa_offset 8
 1683              		.cfi_offset 7, -8
 1684              		.cfi_offset 14, -4
 1685 0002 84B0     		sub	sp, sp, #16
 1686              		.cfi_def_cfa_offset 24
 1687 0004 00AF     		add	r7, sp, #0
 1688              		.cfi_def_cfa_register 7
 1689 0006 7860     		str	r0, [r7, #4]
 1690 0008 3960     		str	r1, [r7]
 598:Tones.c       **** 	if((currentSpeaker == NULL) || (currentTone == NULL))
 1691              		.loc 1 598 0
 1692 000a 7B68     		ldr	r3, [r7, #4]
 1693 000c 002B     		cmp	r3, #0
 1694 000e 02D0     		beq	.L123
 1695              		.loc 1 598 0 is_stmt 0 discriminator 1
 1696 0010 3B68     		ldr	r3, [r7]
 1697 0012 002B     		cmp	r3, #0
 1698 0014 01D1     		bne	.L124
 1699              	.L123:
 599:Tones.c       ****         return false;
 1700              		.loc 1 599 0 is_stmt 1
 1701 0016 0023     		movs	r3, #0
 1702 0018 7FE0     		b	.L125
 1703              	.L124:
 600:Tones.c       ****     
 601:Tones.c       ****     uint16 highestPWMcount = getCaptureValue(currentTone->lowestFrequency);
 1704              		.loc 1 601 0
 1705 001a 3B68     		ldr	r3, [r7]
 1706 001c 1B88     		ldrh	r3, [r3]
 1707 001e 1846     		mov	r0, r3
 1708 0020 FFF7FEFF 		bl	getCaptureValue
 1709 0024 0346     		mov	r3, r0
 1710 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 602:Tones.c       ****     uint16 lowestPWMcount = getCaptureValue(currentTone->highestFrequency);
 1711              		.loc 1 602 0
 1712 0028 3B68     		ldr	r3, [r7]
 1713 002a 5B88     		ldrh	r3, [r3, #2]
 1714 002c 1846     		mov	r0, r3
 1715 002e FFF7FEFF 		bl	getCaptureValue
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 42


 1716 0032 0346     		mov	r3, r0
 1717 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 603:Tones.c       ****     
 604:Tones.c       ****     if(!currentSpeaker->bTonePlaying)
 1718              		.loc 1 604 0
 1719 0036 7B68     		ldr	r3, [r7, #4]
 1720 0038 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1721 003a 002B     		cmp	r3, #0
 1722 003c 08D1     		bne	.L126
 605:Tones.c       ****     {
 606:Tones.c       ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 1723              		.loc 1 606 0
 1724 003e FA89     		ldrh	r2, [r7, #14]	@ movhi
 1725 0040 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1726 0042 D31A     		subs	r3, r2, r3
 1727 0044 9AB2     		uxth	r2, r3
 1728 0046 7B68     		ldr	r3, [r7, #4]
 1729 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 607:Tones.c       ****         currentSpeaker->bTonePlaying = true;
 1730              		.loc 1 607 0
 1731 004a 7B68     		ldr	r3, [r7, #4]
 1732 004c 0122     		movs	r2, #1
 1733 004e 9A74     		strb	r2, [r3, #18]
 1734              	.L126:
 608:Tones.c       ****     }
 609:Tones.c       **** 
 610:Tones.c       **** 	if((currentTone->bWailEnable == true) && (currentSpeaker->bFrequencyChange == INCREASING))
 1735              		.loc 1 610 0
 1736 0050 3B68     		ldr	r3, [r7]
 1737 0052 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1738 0054 012B     		cmp	r3, #1
 1739 0056 16D1     		bne	.L127
 1740              		.loc 1 610 0 is_stmt 0 discriminator 1
 1741 0058 7B68     		ldr	r3, [r7, #4]
 1742 005a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1743 005c 012B     		cmp	r3, #1
 1744 005e 12D1     		bne	.L127
 611:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1745              		.loc 1 611 0 is_stmt 1
 1746 0060 7B68     		ldr	r3, [r7, #4]
 1747 0062 9B88     		ldrh	r3, [r3, #4]
 1748 0064 1A46     		mov	r2, r3
 612:Tones.c       ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 1749              		.loc 1 612 0
 1750 0066 7B68     		ldr	r3, [r7, #4]
 1751 0068 9B88     		ldrh	r3, [r3, #4]
 611:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1752              		.loc 1 611 0
 1753 006a 03FB02F3 		mul	r3, r3, r2
 1754              		.loc 1 612 0
 1755 006e F989     		ldrh	r1, [r7, #14]
 1756 0070 BA89     		ldrh	r2, [r7, #12]
 1757 0072 8A1A     		subs	r2, r1, r2
 1758 0074 B3FBF2F3 		udiv	r3, r3, r2
 611:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1759              		.loc 1 611 0
 1760 0078 9AB2     		uxth	r2, r3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 43


 1761 007a BB89     		ldrh	r3, [r7, #12]	@ movhi
 1762 007c 1344     		add	r3, r3, r2
 1763 007e 9AB2     		uxth	r2, r3
 1764 0080 7B68     		ldr	r3, [r7, #4]
 1765 0082 5A80     		strh	r2, [r3, #2]	@ movhi
 1766 0084 06E0     		b	.L128
 1767              	.L127:
 613:Tones.c       **** 	else
 614:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;
 1768              		.loc 1 614 0
 1769 0086 7B68     		ldr	r3, [r7, #4]
 1770 0088 9A88     		ldrh	r2, [r3, #4]
 1771 008a BB89     		ldrh	r3, [r7, #12]	@ movhi
 1772 008c 1344     		add	r3, r3, r2
 1773 008e 9AB2     		uxth	r2, r3
 1774 0090 7B68     		ldr	r3, [r7, #4]
 1775 0092 5A80     		strh	r2, [r3, #2]	@ movhi
 1776              	.L128:
 615:Tones.c       **** 	
 616:Tones.c       **** 	if(currentSpeaker->bFrequencyChange == INCREASING)
 1777              		.loc 1 616 0
 1778 0094 7B68     		ldr	r3, [r7, #4]
 1779 0096 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1780 0098 012B     		cmp	r3, #1
 1781 009a 25D1     		bne	.L129
 617:Tones.c       **** 	{
 618:Tones.c       **** 		currentSpeaker->PWMcountDifference--;			
 1782              		.loc 1 618 0
 1783 009c 7B68     		ldr	r3, [r7, #4]
 1784 009e 9B88     		ldrh	r3, [r3, #4]
 1785 00a0 013B     		subs	r3, r3, #1
 1786 00a2 9AB2     		uxth	r2, r3
 1787 00a4 7B68     		ldr	r3, [r7, #4]
 1788 00a6 9A80     		strh	r2, [r3, #4]	@ movhi
 619:Tones.c       **** 		if(currentSpeaker->PWMcountDifference <= 0)
 1789              		.loc 1 619 0
 1790 00a8 7B68     		ldr	r3, [r7, #4]
 1791 00aa 9B88     		ldrh	r3, [r3, #4]
 1792 00ac 002B     		cmp	r3, #0
 1793 00ae 33D1     		bne	.L131
 620:Tones.c       **** 		{
 621:Tones.c       **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency			
 1794              		.loc 1 621 0
 1795 00b0 7B68     		ldr	r3, [r7, #4]
 1796 00b2 0022     		movs	r2, #0
 1797 00b4 9A80     		strh	r2, [r3, #4]	@ movhi
 622:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 1798              		.loc 1 622 0
 1799 00b6 7B68     		ldr	r3, [r7, #4]
 1800 00b8 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1801 00ba 002B     		cmp	r3, #0
 1802 00bc 0CBF     		ite	eq
 1803 00be 0123     		moveq	r3, #1
 1804 00c0 0023     		movne	r3, #0
 1805 00c2 DBB2     		uxtb	r3, r3
 1806 00c4 1A46     		mov	r2, r3
 1807 00c6 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 44


 1808 00c8 1A74     		strb	r2, [r3, #16]
 623:Tones.c       ****             
 624:Tones.c       ****             if(bEchoEnable)
 1809              		.loc 1 624 0
 1810 00ca 164B     		ldr	r3, .L132
 1811 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1812 00ce 002B     		cmp	r3, #0
 1813 00d0 22D0     		beq	.L131
 625:Tones.c       ****             {
 626:Tones.c       ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 1814              		.loc 1 626 0
 1815 00d2 7B68     		ldr	r3, [r7, #4]
 1816 00d4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1817 00d6 0123     		movs	r3, #1
 1818 00d8 0022     		movs	r2, #0
 1819 00da 0120     		movs	r0, #1
 1820 00dc FFF7FEFF 		bl	playPWMTone
 627:Tones.c       ****                 bEchoEnable = false;
 1821              		.loc 1 627 0
 1822 00e0 104B     		ldr	r3, .L132
 1823 00e2 0022     		movs	r2, #0
 1824 00e4 1A70     		strb	r2, [r3]
 1825 00e6 17E0     		b	.L131
 1826              	.L129:
 628:Tones.c       ****             }
 629:Tones.c       **** 		}
 630:Tones.c       **** 	}
 631:Tones.c       **** 	else
 632:Tones.c       **** 	{
 633:Tones.c       **** 		currentSpeaker->PWMcountDifference++;
 1827              		.loc 1 633 0
 1828 00e8 7B68     		ldr	r3, [r7, #4]
 1829 00ea 9B88     		ldrh	r3, [r3, #4]
 1830 00ec 0133     		adds	r3, r3, #1
 1831 00ee 9AB2     		uxth	r2, r3
 1832 00f0 7B68     		ldr	r3, [r7, #4]
 1833 00f2 9A80     		strh	r2, [r3, #4]	@ movhi
 634:Tones.c       **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 1834              		.loc 1 634 0
 1835 00f4 7B68     		ldr	r3, [r7, #4]
 1836 00f6 9B88     		ldrh	r3, [r3, #4]
 1837 00f8 1946     		mov	r1, r3
 1838 00fa FA89     		ldrh	r2, [r7, #14]
 1839 00fc BB89     		ldrh	r3, [r7, #12]
 1840 00fe D31A     		subs	r3, r2, r3
 1841 0100 9942     		cmp	r1, r3
 1842 0102 09DB     		blt	.L131
 635:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 1843              		.loc 1 635 0
 1844 0104 7B68     		ldr	r3, [r7, #4]
 1845 0106 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1846 0108 002B     		cmp	r3, #0
 1847 010a 0CBF     		ite	eq
 1848 010c 0123     		moveq	r3, #1
 1849 010e 0023     		movne	r3, #0
 1850 0110 DBB2     		uxtb	r3, r3
 1851 0112 1A46     		mov	r2, r3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 45


 1852 0114 7B68     		ldr	r3, [r7, #4]
 1853 0116 1A74     		strb	r2, [r3, #16]
 1854              	.L131:
 636:Tones.c       **** 	}
 637:Tones.c       **** 	
 638:Tones.c       **** 	return true;
 1855              		.loc 1 638 0
 1856 0118 0123     		movs	r3, #1
 1857              	.L125:
 639:Tones.c       **** }
 1858              		.loc 1 639 0
 1859 011a 1846     		mov	r0, r3
 1860 011c 1037     		adds	r7, r7, #16
 1861              		.cfi_def_cfa_offset 8
 1862 011e BD46     		mov	sp, r7
 1863              		.cfi_def_cfa_register 13
 1864              		@ sp needed
 1865 0120 80BD     		pop	{r7, pc}
 1866              	.L133:
 1867 0122 00BF     		.align	2
 1868              	.L132:
 1869 0124 01000000 		.word	bEchoEnable
 1870              		.cfi_endproc
 1871              	.LFE72:
 1872              		.size	playGradualChangeTone, .-playGradualChangeTone
 1873              		.section	.text.playManualWailTone,"ax",%progbits
 1874              		.align	2
 1875              		.thumb
 1876              		.thumb_func
 1877              		.type	playManualWailTone, %function
 1878              	playManualWailTone:
 1879              	.LFB73:
 640:Tones.c       **** 
 641:Tones.c       **** /*******************************************************************************
 642:Tones.c       **** * Function Name: playManualWailTone
 643:Tones.c       **** ********************************************************************************
 644:Tones.c       **** *
 645:Tones.c       **** * Summary:
 646:Tones.c       **** *  Updates the PWM frequency value for the manual wail tone
 647:Tones.c       **** *
 648:Tones.c       **** * Parameters:  
 649:Tones.c       **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 650:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 651:Tones.c       **** *
 652:Tones.c       **** * Return:
 653:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 654:Tones.c       **** *
 655:Tones.c       **** *******************************************************************************/
 656:Tones.c       **** static uint8 playManualWailTone(uint8 bSpeaker, CurrentToneData* currentSpeaker)
 657:Tones.c       **** {
 1880              		.loc 1 657 0
 1881              		.cfi_startproc
 1882              		@ args = 0, pretend = 0, frame = 16
 1883              		@ frame_needed = 1, uses_anonymous_args = 0
 1884 0000 80B5     		push	{r7, lr}
 1885              		.cfi_def_cfa_offset 8
 1886              		.cfi_offset 7, -8
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 46


 1887              		.cfi_offset 14, -4
 1888 0002 84B0     		sub	sp, sp, #16
 1889              		.cfi_def_cfa_offset 24
 1890 0004 00AF     		add	r7, sp, #0
 1891              		.cfi_def_cfa_register 7
 1892 0006 0346     		mov	r3, r0
 1893 0008 3960     		str	r1, [r7]
 1894 000a FB71     		strb	r3, [r7, #7]
 658:Tones.c       **** 	if((bSpeaker != false) && (bSpeaker != true))
 1895              		.loc 1 658 0
 1896 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1897 000e 002B     		cmp	r3, #0
 1898 0010 04D0     		beq	.L135
 1899              		.loc 1 658 0 is_stmt 0 discriminator 1
 1900 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1901 0014 012B     		cmp	r3, #1
 1902 0016 01D0     		beq	.L135
 659:Tones.c       ****         return false;
 1903              		.loc 1 659 0 is_stmt 1
 1904 0018 0023     		movs	r3, #0
 1905 001a 67E0     		b	.L136
 1906              	.L135:
 660:Tones.c       ****     
 661:Tones.c       ****     if(currentSpeaker == NULL)
 1907              		.loc 1 661 0
 1908 001c 3B68     		ldr	r3, [r7]
 1909 001e 002B     		cmp	r3, #0
 1910 0020 01D1     		bne	.L137
 662:Tones.c       ****         return false;
 1911              		.loc 1 662 0
 1912 0022 0023     		movs	r3, #0
 1913 0024 62E0     		b	.L136
 1914              	.L137:
 663:Tones.c       ****     
 664:Tones.c       ****     uint16 highestPWMcount = getCaptureValue(toneList[MANUAL_WAIL].lowestFrequency);
 1915              		.loc 1 664 0
 1916 0026 334B     		ldr	r3, .L143
 1917 0028 1B8F     		ldrh	r3, [r3, #56]
 1918 002a 1846     		mov	r0, r3
 1919 002c FFF7FEFF 		bl	getCaptureValue
 1920 0030 0346     		mov	r3, r0
 1921 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 665:Tones.c       ****     uint16 lowestPWMcount = getCaptureValue(toneList[MANUAL_WAIL].highestFrequency);
 1922              		.loc 1 665 0
 1923 0034 2F4B     		ldr	r3, .L143
 1924 0036 5B8F     		ldrh	r3, [r3, #58]
 1925 0038 1846     		mov	r0, r3
 1926 003a FFF7FEFF 		bl	getCaptureValue
 1927 003e 0346     		mov	r3, r0
 1928 0040 BB81     		strh	r3, [r7, #12]	@ movhi
 666:Tones.c       **** 	
 667:Tones.c       **** 	if(!currentSpeaker->bManualWailActiveFlag)
 1929              		.loc 1 667 0
 1930 0042 3B68     		ldr	r3, [r7]
 1931 0044 DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1932 0046 002B     		cmp	r3, #0
 1933 0048 08D1     		bne	.L138
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 47


 668:Tones.c       **** 	{
 669:Tones.c       ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 1934              		.loc 1 669 0
 1935 004a FA89     		ldrh	r2, [r7, #14]	@ movhi
 1936 004c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1937 004e D31A     		subs	r3, r2, r3
 1938 0050 9AB2     		uxth	r2, r3
 1939 0052 3B68     		ldr	r3, [r7]
 1940 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 670:Tones.c       ****     	currentSpeaker->bManualWailActiveFlag = true;
 1941              		.loc 1 670 0
 1942 0056 3B68     		ldr	r3, [r7]
 1943 0058 0122     		movs	r2, #1
 1944 005a DA74     		strb	r2, [r3, #19]
 1945              	.L138:
 671:Tones.c       **** 	}	
 672:Tones.c       **** 		
 673:Tones.c       **** 	if(currentSpeaker->bManualWailActiveFlag)
 1946              		.loc 1 673 0
 1947 005c 3B68     		ldr	r3, [r7]
 1948 005e DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1949 0060 002B     		cmp	r3, #0
 1950 0062 38D0     		beq	.L139
 674:Tones.c       **** 	{
 675:Tones.c       **** 		if(currentSpeaker->bManualWailInputFlag)
 1951              		.loc 1 675 0
 1952 0064 3B68     		ldr	r3, [r7]
 1953 0066 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1954 0068 002B     		cmp	r3, #0
 1955 006a 1CD0     		beq	.L140
 676:Tones.c       **** 		{
 677:Tones.c       **** 			currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiff
 1956              		.loc 1 677 0
 1957 006c 3B68     		ldr	r3, [r7]
 1958 006e 9B88     		ldrh	r3, [r3, #4]
 1959 0070 1A46     		mov	r2, r3
 678:Tones.c       ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
 1960              		.loc 1 678 0
 1961 0072 3B68     		ldr	r3, [r7]
 1962 0074 9B88     		ldrh	r3, [r3, #4]
 677:Tones.c       ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
 1963              		.loc 1 677 0
 1964 0076 03FB02F3 		mul	r3, r3, r2
 1965              		.loc 1 678 0
 1966 007a F989     		ldrh	r1, [r7, #14]
 1967 007c BA89     		ldrh	r2, [r7, #12]
 1968 007e 8A1A     		subs	r2, r1, r2
 1969 0080 B3FBF2F3 		udiv	r3, r3, r2
 677:Tones.c       ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
 1970              		.loc 1 677 0
 1971 0084 9AB2     		uxth	r2, r3
 1972 0086 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1973 0088 1344     		add	r3, r3, r2
 1974 008a 9AB2     		uxth	r2, r3
 1975 008c 3B68     		ldr	r3, [r7]
 1976 008e 5A80     		strh	r2, [r3, #2]	@ movhi
 679:Tones.c       ****             
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 48


 680:Tones.c       ****             if(currentSpeaker->PWMcountDifference > 0)//Reached highest frequency and stays there
 1977              		.loc 1 680 0
 1978 0090 3B68     		ldr	r3, [r7]
 1979 0092 9B88     		ldrh	r3, [r3, #4]
 1980 0094 002B     		cmp	r3, #0
 1981 0096 1ED0     		beq	.L139
 681:Tones.c       **** 			    currentSpeaker->PWMcountDifference--;
 1982              		.loc 1 681 0
 1983 0098 3B68     		ldr	r3, [r7]
 1984 009a 9B88     		ldrh	r3, [r3, #4]
 1985 009c 013B     		subs	r3, r3, #1
 1986 009e 9AB2     		uxth	r2, r3
 1987 00a0 3B68     		ldr	r3, [r7]
 1988 00a2 9A80     		strh	r2, [r3, #4]	@ movhi
 1989 00a4 17E0     		b	.L139
 1990              	.L140:
 682:Tones.c       **** 		}
 683:Tones.c       **** 		else
 684:Tones.c       **** 		{
 685:Tones.c       **** 			currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;
 1991              		.loc 1 685 0
 1992 00a6 3B68     		ldr	r3, [r7]
 1993 00a8 9A88     		ldrh	r2, [r3, #4]
 1994 00aa BB89     		ldrh	r3, [r7, #12]	@ movhi
 1995 00ac 1344     		add	r3, r3, r2
 1996 00ae 9AB2     		uxth	r2, r3
 1997 00b0 3B68     		ldr	r3, [r7]
 1998 00b2 5A80     		strh	r2, [r3, #2]	@ movhi
 686:Tones.c       **** 			currentSpeaker->PWMcountDifference++;
 1999              		.loc 1 686 0
 2000 00b4 3B68     		ldr	r3, [r7]
 2001 00b6 9B88     		ldrh	r3, [r3, #4]
 2002 00b8 0133     		adds	r3, r3, #1
 2003 00ba 9AB2     		uxth	r2, r3
 2004 00bc 3B68     		ldr	r3, [r7]
 2005 00be 9A80     		strh	r2, [r3, #4]	@ movhi
 687:Tones.c       **** 			
 688:Tones.c       **** 			if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 2006              		.loc 1 688 0
 2007 00c0 3B68     		ldr	r3, [r7]
 2008 00c2 9B88     		ldrh	r3, [r3, #4]
 2009 00c4 1946     		mov	r1, r3
 2010 00c6 FA89     		ldrh	r2, [r7, #14]
 2011 00c8 BB89     		ldrh	r3, [r7, #12]
 2012 00ca D31A     		subs	r3, r2, r3
 2013 00cc 9942     		cmp	r1, r3
 2014 00ce 02DB     		blt	.L139
 689:Tones.c       **** 				currentSpeaker->bManualWailActiveFlag = false; //Reached lowest frequency and finishes tone
 2015              		.loc 1 689 0
 2016 00d0 3B68     		ldr	r3, [r7]
 2017 00d2 0022     		movs	r2, #0
 2018 00d4 DA74     		strb	r2, [r3, #19]
 2019              	.L139:
 690:Tones.c       **** 		}
 691:Tones.c       **** 	}
 692:Tones.c       ****     
 693:Tones.c       ****     if(!currentSpeaker->bManualWailActiveFlag)
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 49


 2020              		.loc 1 693 0
 2021 00d6 3B68     		ldr	r3, [r7]
 2022 00d8 DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 2023 00da 002B     		cmp	r3, #0
 2024 00dc 05D1     		bne	.L142
 694:Tones.c       ****     {
 695:Tones.c       ****         deactivateManualWail(); //Disable manual wail for both speakers after first ramp down
 2025              		.loc 1 695 0
 2026 00de FFF7FEFF 		bl	deactivateManualWail
 696:Tones.c       ****         //ModeStatusISR_SetPending();
 697:Tones.c       ****         disableAudioAndPWM();
 2027              		.loc 1 697 0
 2028 00e2 FFF7FEFF 		bl	disableAudioAndPWM
 698:Tones.c       ****         disableBothSpeakers();
 2029              		.loc 1 698 0
 2030 00e6 FFF7FEFF 		bl	disableBothSpeakers
 2031              	.L142:
 699:Tones.c       ****     }
 700:Tones.c       ****     
 701:Tones.c       ****     return true;
 2032              		.loc 1 701 0
 2033 00ea 0123     		movs	r3, #1
 2034              	.L136:
 702:Tones.c       **** }
 2035              		.loc 1 702 0
 2036 00ec 1846     		mov	r0, r3
 2037 00ee 1037     		adds	r7, r7, #16
 2038              		.cfi_def_cfa_offset 8
 2039 00f0 BD46     		mov	sp, r7
 2040              		.cfi_def_cfa_register 13
 2041              		@ sp needed
 2042 00f2 80BD     		pop	{r7, pc}
 2043              	.L144:
 2044              		.align	2
 2045              	.L143:
 2046 00f4 00000000 		.word	toneList
 2047              		.cfi_endproc
 2048              	.LFE73:
 2049              		.size	playManualWailTone, .-playManualWailTone
 2050              		.section	.text.playHighLowTone,"ax",%progbits
 2051              		.align	2
 2052              		.thumb
 2053              		.thumb_func
 2054              		.type	playHighLowTone, %function
 2055              	playHighLowTone:
 2056              	.LFB74:
 703:Tones.c       **** 
 704:Tones.c       **** /*******************************************************************************
 705:Tones.c       **** * Function Name: playHighLowTone
 706:Tones.c       **** ********************************************************************************
 707:Tones.c       **** *
 708:Tones.c       **** * Summary:
 709:Tones.c       **** *  Updates the PWM frequency value for the high low tone
 710:Tones.c       **** *
 711:Tones.c       **** * Parameters:  
 712:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 713:Tones.c       **** *   currentTone: The pointer to the struct for the specified tone
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 50


 714:Tones.c       **** *
 715:Tones.c       **** * Return:
 716:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 717:Tones.c       **** *
 718:Tones.c       **** *******************************************************************************/
 719:Tones.c       **** static uint8 playHighLowTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 720:Tones.c       **** {
 2057              		.loc 1 720 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 8
 2060              		@ frame_needed = 1, uses_anonymous_args = 0
 2061 0000 80B5     		push	{r7, lr}
 2062              		.cfi_def_cfa_offset 8
 2063              		.cfi_offset 7, -8
 2064              		.cfi_offset 14, -4
 2065 0002 82B0     		sub	sp, sp, #8
 2066              		.cfi_def_cfa_offset 16
 2067 0004 00AF     		add	r7, sp, #0
 2068              		.cfi_def_cfa_register 7
 2069 0006 7860     		str	r0, [r7, #4]
 2070 0008 3960     		str	r1, [r7]
 721:Tones.c       ****     static const uint16 HIGH_LOW_COUNT_LIMIT = 250;
 722:Tones.c       ****     
 723:Tones.c       ****     if((currentSpeaker == NULL) || (currentTone == NULL))
 2071              		.loc 1 723 0
 2072 000a 7B68     		ldr	r3, [r7, #4]
 2073 000c 002B     		cmp	r3, #0
 2074 000e 02D0     		beq	.L146
 2075              		.loc 1 723 0 is_stmt 0 discriminator 1
 2076 0010 3B68     		ldr	r3, [r7]
 2077 0012 002B     		cmp	r3, #0
 2078 0014 01D1     		bne	.L147
 2079              	.L146:
 724:Tones.c       ****         return false;
 2080              		.loc 1 724 0 is_stmt 1
 2081 0016 0023     		movs	r3, #0
 2082 0018 54E0     		b	.L148
 2083              	.L147:
 725:Tones.c       ****     
 726:Tones.c       ****     if(!currentSpeaker->bTonePlaying)
 2084              		.loc 1 726 0
 2085 001a 7B68     		ldr	r3, [r7, #4]
 2086 001c 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2087 001e 002B     		cmp	r3, #0
 2088 0020 05D1     		bne	.L149
 727:Tones.c       ****     {
 728:Tones.c       ****         currentSpeaker->PWMcountDifference = 0;
 2089              		.loc 1 728 0
 2090 0022 7B68     		ldr	r3, [r7, #4]
 2091 0024 0022     		movs	r2, #0
 2092 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 729:Tones.c       ****         currentSpeaker->bTonePlaying = true;
 2093              		.loc 1 729 0
 2094 0028 7B68     		ldr	r3, [r7, #4]
 2095 002a 0122     		movs	r2, #1
 2096 002c 9A74     		strb	r2, [r3, #18]
 2097              	.L149:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 51


 730:Tones.c       ****     }
 731:Tones.c       ****     
 732:Tones.c       ****     if(!currentSpeaker->bHornPWMenable && currentTone->bHornEnable)
 2098              		.loc 1 732 0
 2099 002e 7B68     		ldr	r3, [r7, #4]
 2100 0030 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2101 0032 002B     		cmp	r3, #0
 2102 0034 06D1     		bne	.L150
 2103              		.loc 1 732 0 is_stmt 0 discriminator 1
 2104 0036 3B68     		ldr	r3, [r7]
 2105 0038 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2106 003a 002B     		cmp	r3, #0
 2107 003c 02D0     		beq	.L150
 733:Tones.c       ****         currentSpeaker->bHornPWMenable = true;
 2108              		.loc 1 733 0 is_stmt 1
 2109 003e 7B68     		ldr	r3, [r7, #4]
 2110 0040 0122     		movs	r2, #1
 2111 0042 5A75     		strb	r2, [r3, #21]
 2112              	.L150:
 734:Tones.c       **** 		
 735:Tones.c       **** 	if(currentSpeaker->PWMcountDifference < HIGH_LOW_COUNT_LIMIT)
 2113              		.loc 1 735 0
 2114 0044 7B68     		ldr	r3, [r7, #4]
 2115 0046 9A88     		ldrh	r2, [r3, #4]
 2116 0048 204B     		ldr	r3, .L156
 2117 004a 1B88     		ldrh	r3, [r3]
 2118 004c 9A42     		cmp	r2, r3
 2119 004e 1DD2     		bcs	.L151
 736:Tones.c       **** 	{
 737:Tones.c       **** 		if(currentSpeaker->bFrequencyChange == HIGH_PITCH)
 2120              		.loc 1 737 0
 2121 0050 7B68     		ldr	r3, [r7, #4]
 2122 0052 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2123 0054 012B     		cmp	r3, #1
 2124 0056 09D1     		bne	.L152
 738:Tones.c       **** 			currentSpeaker->PWMperiodCount = getCaptureValue(currentTone->highestFrequency);
 2125              		.loc 1 738 0
 2126 0058 3B68     		ldr	r3, [r7]
 2127 005a 5B88     		ldrh	r3, [r3, #2]
 2128 005c 1846     		mov	r0, r3
 2129 005e FFF7FEFF 		bl	getCaptureValue
 2130 0062 0346     		mov	r3, r0
 2131 0064 1A46     		mov	r2, r3
 2132 0066 7B68     		ldr	r3, [r7, #4]
 2133 0068 5A80     		strh	r2, [r3, #2]	@ movhi
 2134 006a 08E0     		b	.L153
 2135              	.L152:
 739:Tones.c       **** 		else
 740:Tones.c       **** 			currentSpeaker->PWMperiodCount = getCaptureValue(currentTone->lowestFrequency);
 2136              		.loc 1 740 0
 2137 006c 3B68     		ldr	r3, [r7]
 2138 006e 1B88     		ldrh	r3, [r3]
 2139 0070 1846     		mov	r0, r3
 2140 0072 FFF7FEFF 		bl	getCaptureValue
 2141 0076 0346     		mov	r3, r0
 2142 0078 1A46     		mov	r2, r3
 2143 007a 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 52


 2144 007c 5A80     		strh	r2, [r3, #2]	@ movhi
 2145              	.L153:
 741:Tones.c       ****             
 742:Tones.c       ****         currentSpeaker->PWMcountDifference++;
 2146              		.loc 1 742 0
 2147 007e 7B68     		ldr	r3, [r7, #4]
 2148 0080 9B88     		ldrh	r3, [r3, #4]
 2149 0082 0133     		adds	r3, r3, #1
 2150 0084 9AB2     		uxth	r2, r3
 2151 0086 7B68     		ldr	r3, [r7, #4]
 2152 0088 9A80     		strh	r2, [r3, #4]	@ movhi
 2153 008a 1AE0     		b	.L154
 2154              	.L151:
 743:Tones.c       **** 	}
 744:Tones.c       ****     else
 745:Tones.c       ****     {
 746:Tones.c       ****         if(bEchoEnable)
 2155              		.loc 1 746 0
 2156 008c 104B     		ldr	r3, .L156+4
 2157 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2158 0090 002B     		cmp	r3, #0
 2159 0092 09D0     		beq	.L155
 747:Tones.c       ****         {
 748:Tones.c       ****             playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2160              		.loc 1 748 0
 2161 0094 7B68     		ldr	r3, [r7, #4]
 2162 0096 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2163 0098 0123     		movs	r3, #1
 2164 009a 0022     		movs	r2, #0
 2165 009c 0120     		movs	r0, #1
 2166 009e FFF7FEFF 		bl	playPWMTone
 749:Tones.c       ****             bEchoEnable = false;
 2167              		.loc 1 749 0
 2168 00a2 0B4B     		ldr	r3, .L156+4
 2169 00a4 0022     		movs	r2, #0
 2170 00a6 1A70     		strb	r2, [r3]
 2171              	.L155:
 750:Tones.c       ****         }
 751:Tones.c       ****         
 752:Tones.c       ****         currentSpeaker->PWMcountDifference = 0;
 2172              		.loc 1 752 0
 2173 00a8 7B68     		ldr	r3, [r7, #4]
 2174 00aa 0022     		movs	r2, #0
 2175 00ac 9A80     		strh	r2, [r3, #4]	@ movhi
 753:Tones.c       ****         currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2176              		.loc 1 753 0
 2177 00ae 7B68     		ldr	r3, [r7, #4]
 2178 00b0 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2179 00b2 002B     		cmp	r3, #0
 2180 00b4 0CBF     		ite	eq
 2181 00b6 0123     		moveq	r3, #1
 2182 00b8 0023     		movne	r3, #0
 2183 00ba DBB2     		uxtb	r3, r3
 2184 00bc 1A46     		mov	r2, r3
 2185 00be 7B68     		ldr	r3, [r7, #4]
 2186 00c0 1A74     		strb	r2, [r3, #16]
 2187              	.L154:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 53


 754:Tones.c       ****     }
 755:Tones.c       ****     
 756:Tones.c       ****     return true;
 2188              		.loc 1 756 0
 2189 00c2 0123     		movs	r3, #1
 2190              	.L148:
 757:Tones.c       **** }
 2191              		.loc 1 757 0
 2192 00c4 1846     		mov	r0, r3
 2193 00c6 0837     		adds	r7, r7, #8
 2194              		.cfi_def_cfa_offset 8
 2195 00c8 BD46     		mov	sp, r7
 2196              		.cfi_def_cfa_register 13
 2197              		@ sp needed
 2198 00ca 80BD     		pop	{r7, pc}
 2199              	.L157:
 2200              		.align	2
 2201              	.L156:
 2202 00cc 3A000000 		.word	HIGH_LOW_COUNT_LIMIT.6403
 2203 00d0 01000000 		.word	bEchoEnable
 2204              		.cfi_endproc
 2205              	.LFE74:
 2206              		.size	playHighLowTone, .-playHighLowTone
 2207              		.section	.text.playMechanicalTone,"ax",%progbits
 2208              		.align	2
 2209              		.thumb
 2210              		.thumb_func
 2211              		.type	playMechanicalTone, %function
 2212              	playMechanicalTone:
 2213              	.LFB75:
 758:Tones.c       **** 
 759:Tones.c       **** /*******************************************************************************
 760:Tones.c       **** * Function Name: playMechanicalTone
 761:Tones.c       **** ********************************************************************************
 762:Tones.c       **** *
 763:Tones.c       **** * Summary:
 764:Tones.c       **** *  Updates the PWM frequency value for the mechanical tone
 765:Tones.c       **** *
 766:Tones.c       **** * Parameters:  
 767:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 768:Tones.c       **** *
 769:Tones.c       **** * Return:
 770:Tones.c       **** *   TRUE for valid inputs, FALSE otherwise
 771:Tones.c       **** *
 772:Tones.c       **** *******************************************************************************/
 773:Tones.c       **** static uint8 playMechanicalTone(CurrentToneData* currentSpeaker)
 774:Tones.c       **** {
 2214              		.loc 1 774 0
 2215              		.cfi_startproc
 2216              		@ args = 0, pretend = 0, frame = 16
 2217              		@ frame_needed = 1, uses_anonymous_args = 0
 2218 0000 80B5     		push	{r7, lr}
 2219              		.cfi_def_cfa_offset 8
 2220              		.cfi_offset 7, -8
 2221              		.cfi_offset 14, -4
 2222 0002 84B0     		sub	sp, sp, #16
 2223              		.cfi_def_cfa_offset 24
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 54


 2224 0004 00AF     		add	r7, sp, #0
 2225              		.cfi_def_cfa_register 7
 2226 0006 7860     		str	r0, [r7, #4]
 775:Tones.c       ****     static const uint16 RAMP_UP_INITIAL_DIFFERENCE = 15;
 776:Tones.c       ****     static const uint16 RAMP_UP_COUNT_LIMIT = 25;
 777:Tones.c       ****     uint16 currentDifference = 1;   
 2227              		.loc 1 777 0
 2228 0008 0123     		movs	r3, #1
 2229 000a FB81     		strh	r3, [r7, #14]	@ movhi
 778:Tones.c       ****     
 779:Tones.c       ****     if(currentSpeaker == NULL)
 2230              		.loc 1 779 0
 2231 000c 7B68     		ldr	r3, [r7, #4]
 2232 000e 002B     		cmp	r3, #0
 2233 0010 01D1     		bne	.L159
 780:Tones.c       ****         return false;
 2234              		.loc 1 780 0
 2235 0012 0023     		movs	r3, #0
 2236 0014 9FE0     		b	.L160
 2237              	.L159:
 781:Tones.c       ****     
 782:Tones.c       ****     uint16 highestPWMcount = getCaptureValue(toneList[MECHANICAL].lowestFrequency);
 2238              		.loc 1 782 0
 2239 0016 524B     		ldr	r3, .L169
 2240 0018 1B8E     		ldrh	r3, [r3, #48]
 2241 001a 1846     		mov	r0, r3
 2242 001c FFF7FEFF 		bl	getCaptureValue
 2243 0020 0346     		mov	r3, r0
 2244 0022 BB81     		strh	r3, [r7, #12]	@ movhi
 783:Tones.c       ****     uint16 lowestPWMcount = getCaptureValue(toneList[MECHANICAL].highestFrequency);
 2245              		.loc 1 783 0
 2246 0024 4E4B     		ldr	r3, .L169
 2247 0026 5B8E     		ldrh	r3, [r3, #50]
 2248 0028 1846     		mov	r0, r3
 2249 002a FFF7FEFF 		bl	getCaptureValue
 2250 002e 0346     		mov	r3, r0
 2251 0030 7B81     		strh	r3, [r7, #10]	@ movhi
 784:Tones.c       ****     
 785:Tones.c       ****     if(!currentSpeaker->bTonePlaying)
 2252              		.loc 1 785 0
 2253 0032 7B68     		ldr	r3, [r7, #4]
 2254 0034 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2255 0036 002B     		cmp	r3, #0
 2256 0038 0ED1     		bne	.L161
 786:Tones.c       ****     {
 787:Tones.c       ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 2257              		.loc 1 787 0
 2258 003a BA89     		ldrh	r2, [r7, #12]	@ movhi
 2259 003c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2260 003e D31A     		subs	r3, r2, r3
 2261 0040 9AB2     		uxth	r2, r3
 2262 0042 7B68     		ldr	r3, [r7, #4]
 2263 0044 9A80     		strh	r2, [r3, #4]	@ movhi
 788:Tones.c       ****         currentSpeaker->bTonePlaying = true;
 2264              		.loc 1 788 0
 2265 0046 7B68     		ldr	r3, [r7, #4]
 2266 0048 0122     		movs	r2, #1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 55


 2267 004a 9A74     		strb	r2, [r3, #18]
 789:Tones.c       ****         currentSpeaker->bHornPWMenable = true;
 2268              		.loc 1 789 0
 2269 004c 7B68     		ldr	r3, [r7, #4]
 2270 004e 0122     		movs	r2, #1
 2271 0050 5A75     		strb	r2, [r3, #21]
 790:Tones.c       ****         currentSpeaker->mechanicalRampUpCount = 0;
 2272              		.loc 1 790 0
 2273 0052 7B68     		ldr	r3, [r7, #4]
 2274 0054 0022     		movs	r2, #0
 2275 0056 DA80     		strh	r2, [r3, #6]	@ movhi
 2276              	.L161:
 791:Tones.c       ****     }
 792:Tones.c       **** 
 793:Tones.c       **** 	if(currentSpeaker->bFrequencyChange == INCREASING)
 2277              		.loc 1 793 0
 2278 0058 7B68     		ldr	r3, [r7, #4]
 2279 005a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2280 005c 012B     		cmp	r3, #1
 2281 005e 57D1     		bne	.L162
 794:Tones.c       ****     {
 795:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 2282              		.loc 1 795 0
 2283 0060 7B68     		ldr	r3, [r7, #4]
 2284 0062 9B88     		ldrh	r3, [r3, #4]
 2285 0064 1A46     		mov	r2, r3
 796:Tones.c       ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2286              		.loc 1 796 0
 2287 0066 7B68     		ldr	r3, [r7, #4]
 2288 0068 9B88     		ldrh	r3, [r3, #4]
 795:Tones.c       ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2289              		.loc 1 795 0
 2290 006a 03FB02F3 		mul	r3, r3, r2
 2291              		.loc 1 796 0
 2292 006e B989     		ldrh	r1, [r7, #12]
 2293 0070 7A89     		ldrh	r2, [r7, #10]
 2294 0072 8A1A     		subs	r2, r1, r2
 2295 0074 B3FBF2F3 		udiv	r3, r3, r2
 795:Tones.c       ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2296              		.loc 1 795 0
 2297 0078 9AB2     		uxth	r2, r3
 2298 007a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2299 007c 1344     		add	r3, r3, r2
 2300 007e 9AB2     		uxth	r2, r3
 2301 0080 7B68     		ldr	r3, [r7, #4]
 2302 0082 5A80     		strh	r2, [r3, #2]	@ movhi
 797:Tones.c       ****         
 798:Tones.c       ****         if(currentSpeaker->mechanicalRampUpCount < RAMP_UP_COUNT_LIMIT)
 2303              		.loc 1 798 0
 2304 0084 7B68     		ldr	r3, [r7, #4]
 2305 0086 DA88     		ldrh	r2, [r3, #6]
 2306 0088 364B     		ldr	r3, .L169+4
 2307 008a 1B88     		ldrh	r3, [r3]
 2308 008c 9A42     		cmp	r2, r3
 2309 008e 03D2     		bcs	.L163
 799:Tones.c       ****             currentDifference = RAMP_UP_INITIAL_DIFFERENCE;
 2310              		.loc 1 799 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 56


 2311 0090 354B     		ldr	r3, .L169+8
 2312 0092 1B88     		ldrh	r3, [r3]	@ movhi
 2313 0094 FB81     		strh	r3, [r7, #14]	@ movhi
 2314 0096 01E0     		b	.L164
 2315              	.L163:
 800:Tones.c       ****         else
 801:Tones.c       ****             currentDifference = 1;
 2316              		.loc 1 801 0
 2317 0098 0123     		movs	r3, #1
 2318 009a FB81     		strh	r3, [r7, #14]	@ movhi
 2319              	.L164:
 802:Tones.c       ****         
 803:Tones.c       ****         currentSpeaker->mechanicalRampUpCount++;
 2320              		.loc 1 803 0
 2321 009c 7B68     		ldr	r3, [r7, #4]
 2322 009e DB88     		ldrh	r3, [r3, #6]
 2323 00a0 0133     		adds	r3, r3, #1
 2324 00a2 9AB2     		uxth	r2, r3
 2325 00a4 7B68     		ldr	r3, [r7, #4]
 2326 00a6 DA80     		strh	r2, [r3, #6]	@ movhi
 804:Tones.c       ****         
 805:Tones.c       ****         if(currentSpeaker->PWMcountDifference > 0 && currentSpeaker->PWMcountDifference < currentDi
 2327              		.loc 1 805 0
 2328 00a8 7B68     		ldr	r3, [r7, #4]
 2329 00aa 9B88     		ldrh	r3, [r3, #4]
 2330 00ac 002B     		cmp	r3, #0
 2331 00ae 08D0     		beq	.L165
 2332              		.loc 1 805 0 is_stmt 0 discriminator 1
 2333 00b0 7B68     		ldr	r3, [r7, #4]
 2334 00b2 9B88     		ldrh	r3, [r3, #4]
 2335 00b4 FA89     		ldrh	r2, [r7, #14]
 2336 00b6 9A42     		cmp	r2, r3
 2337 00b8 03D9     		bls	.L165
 806:Tones.c       **** 			currentSpeaker->PWMcountDifference = currentDifference;
 2338              		.loc 1 806 0 is_stmt 1
 2339 00ba 7B68     		ldr	r3, [r7, #4]
 2340 00bc FA89     		ldrh	r2, [r7, #14]	@ movhi
 2341 00be 9A80     		strh	r2, [r3, #4]	@ movhi
 2342 00c0 06E0     		b	.L166
 2343              	.L165:
 807:Tones.c       **** 		else
 808:Tones.c       **** 			currentSpeaker->PWMcountDifference -= currentDifference;
 2344              		.loc 1 808 0
 2345 00c2 7B68     		ldr	r3, [r7, #4]
 2346 00c4 9A88     		ldrh	r2, [r3, #4]
 2347 00c6 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2348 00c8 D31A     		subs	r3, r2, r3
 2349 00ca 9AB2     		uxth	r2, r3
 2350 00cc 7B68     		ldr	r3, [r7, #4]
 2351 00ce 9A80     		strh	r2, [r3, #4]	@ movhi
 2352              	.L166:
 809:Tones.c       ****         
 810:Tones.c       **** 		if(currentSpeaker->PWMcountDifference <= 0)
 2353              		.loc 1 810 0
 2354 00d0 7B68     		ldr	r3, [r7, #4]
 2355 00d2 9B88     		ldrh	r3, [r3, #4]
 2356 00d4 002B     		cmp	r3, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 57


 2357 00d6 3DD1     		bne	.L168
 811:Tones.c       **** 		{
 812:Tones.c       **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency			
 2358              		.loc 1 812 0
 2359 00d8 7B68     		ldr	r3, [r7, #4]
 2360 00da 0022     		movs	r2, #0
 2361 00dc 9A80     		strh	r2, [r3, #4]	@ movhi
 813:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2362              		.loc 1 813 0
 2363 00de 7B68     		ldr	r3, [r7, #4]
 2364 00e0 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2365 00e2 002B     		cmp	r3, #0
 2366 00e4 0CBF     		ite	eq
 2367 00e6 0123     		moveq	r3, #1
 2368 00e8 0023     		movne	r3, #0
 2369 00ea DBB2     		uxtb	r3, r3
 2370 00ec 1A46     		mov	r2, r3
 2371 00ee 7B68     		ldr	r3, [r7, #4]
 2372 00f0 1A74     		strb	r2, [r3, #16]
 814:Tones.c       ****             
 815:Tones.c       ****             if(bEchoEnable)
 2373              		.loc 1 815 0
 2374 00f2 1E4B     		ldr	r3, .L169+12
 2375 00f4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2376 00f6 002B     		cmp	r3, #0
 2377 00f8 2CD0     		beq	.L168
 816:Tones.c       ****             {
 817:Tones.c       ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2378              		.loc 1 817 0
 2379 00fa 7B68     		ldr	r3, [r7, #4]
 2380 00fc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2381 00fe 0123     		movs	r3, #1
 2382 0100 0022     		movs	r2, #0
 2383 0102 0120     		movs	r0, #1
 2384 0104 FFF7FEFF 		bl	playPWMTone
 818:Tones.c       ****                 bEchoEnable = false;
 2385              		.loc 1 818 0
 2386 0108 184B     		ldr	r3, .L169+12
 2387 010a 0022     		movs	r2, #0
 2388 010c 1A70     		strb	r2, [r3]
 2389 010e 21E0     		b	.L168
 2390              	.L162:
 819:Tones.c       ****             }
 820:Tones.c       **** 		}
 821:Tones.c       ****     }
 822:Tones.c       **** 	else
 823:Tones.c       ****     {
 824:Tones.c       **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;        
 2391              		.loc 1 824 0
 2392 0110 7B68     		ldr	r3, [r7, #4]
 2393 0112 9A88     		ldrh	r2, [r3, #4]
 2394 0114 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2395 0116 1344     		add	r3, r3, r2
 2396 0118 9AB2     		uxth	r2, r3
 2397 011a 7B68     		ldr	r3, [r7, #4]
 2398 011c 5A80     		strh	r2, [r3, #2]	@ movhi
 825:Tones.c       ****         currentSpeaker->PWMcountDifference++;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 58


 2399              		.loc 1 825 0
 2400 011e 7B68     		ldr	r3, [r7, #4]
 2401 0120 9B88     		ldrh	r3, [r3, #4]
 2402 0122 0133     		adds	r3, r3, #1
 2403 0124 9AB2     		uxth	r2, r3
 2404 0126 7B68     		ldr	r3, [r7, #4]
 2405 0128 9A80     		strh	r2, [r3, #4]	@ movhi
 826:Tones.c       ****         currentSpeaker->mechanicalRampUpCount = 0;
 2406              		.loc 1 826 0
 2407 012a 7B68     		ldr	r3, [r7, #4]
 2408 012c 0022     		movs	r2, #0
 2409 012e DA80     		strh	r2, [r3, #6]	@ movhi
 827:Tones.c       ****         
 828:Tones.c       **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 2410              		.loc 1 828 0
 2411 0130 7B68     		ldr	r3, [r7, #4]
 2412 0132 9B88     		ldrh	r3, [r3, #4]
 2413 0134 1946     		mov	r1, r3
 2414 0136 BA89     		ldrh	r2, [r7, #12]
 2415 0138 7B89     		ldrh	r3, [r7, #10]
 2416 013a D31A     		subs	r3, r2, r3
 2417 013c 9942     		cmp	r1, r3
 2418 013e 09DB     		blt	.L168
 829:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 2419              		.loc 1 829 0
 2420 0140 7B68     		ldr	r3, [r7, #4]
 2421 0142 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2422 0144 002B     		cmp	r3, #0
 2423 0146 0CBF     		ite	eq
 2424 0148 0123     		moveq	r3, #1
 2425 014a 0023     		movne	r3, #0
 2426 014c DBB2     		uxtb	r3, r3
 2427 014e 1A46     		mov	r2, r3
 2428 0150 7B68     		ldr	r3, [r7, #4]
 2429 0152 1A74     		strb	r2, [r3, #16]
 2430              	.L168:
 830:Tones.c       ****     }
 831:Tones.c       ****     
 832:Tones.c       ****     return true;
 2431              		.loc 1 832 0
 2432 0154 0123     		movs	r3, #1
 2433              	.L160:
 833:Tones.c       **** }
 2434              		.loc 1 833 0
 2435 0156 1846     		mov	r0, r3
 2436 0158 1037     		adds	r7, r7, #16
 2437              		.cfi_def_cfa_offset 8
 2438 015a BD46     		mov	sp, r7
 2439              		.cfi_def_cfa_register 13
 2440              		@ sp needed
 2441 015c 80BD     		pop	{r7, pc}
 2442              	.L170:
 2443 015e 00BF     		.align	2
 2444              	.L169:
 2445 0160 00000000 		.word	toneList
 2446 0164 3C000000 		.word	RAMP_UP_COUNT_LIMIT.6408
 2447 0168 3E000000 		.word	RAMP_UP_INITIAL_DIFFERENCE.6407
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 59


 2448 016c 01000000 		.word	bEchoEnable
 2449              		.cfi_endproc
 2450              	.LFE75:
 2451              		.size	playMechanicalTone, .-playMechanicalTone
 2452              		.section	.text.playPCallTone,"ax",%progbits
 2453              		.align	2
 2454              		.thumb
 2455              		.thumb_func
 2456              		.type	playPCallTone, %function
 2457              	playPCallTone:
 2458              	.LFB76:
 834:Tones.c       **** 
 835:Tones.c       **** /*******************************************************************************
 836:Tones.c       **** * Function Name: playPCallTone
 837:Tones.c       **** ********************************************************************************
 838:Tones.c       **** *
 839:Tones.c       **** * Summary:
 840:Tones.c       **** *  Updates the PWM frequency value for the PCall Fast and Slow tones
 841:Tones.c       **** *
 842:Tones.c       **** * Parameters:  
 843:Tones.c       **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 844:Tones.c       **** *   currentTone: The pointer to the PCall struct
 845:Tones.c       **** *
 846:Tones.c       **** * Return:
 847:Tones.c       **** *   TRUE for valid input, FALSE otherwise
 848:Tones.c       **** *
 849:Tones.c       **** *******************************************************************************/
 850:Tones.c       **** static uint8 playPCallTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 851:Tones.c       **** {
 2459              		.loc 1 851 0
 2460              		.cfi_startproc
 2461              		@ args = 0, pretend = 0, frame = 16
 2462              		@ frame_needed = 1, uses_anonymous_args = 0
 2463 0000 80B5     		push	{r7, lr}
 2464              		.cfi_def_cfa_offset 8
 2465              		.cfi_offset 7, -8
 2466              		.cfi_offset 14, -4
 2467 0002 84B0     		sub	sp, sp, #16
 2468              		.cfi_def_cfa_offset 24
 2469 0004 00AF     		add	r7, sp, #0
 2470              		.cfi_def_cfa_register 7
 2471 0006 7860     		str	r0, [r7, #4]
 2472 0008 3960     		str	r1, [r7]
 852:Tones.c       ****     static const uint16 HOLD_NOTE_FACTOR = 35;
 853:Tones.c       **** 	
 854:Tones.c       **** 	if((currentSpeaker == NULL) || (currentTone == NULL))
 2473              		.loc 1 854 0
 2474 000a 7B68     		ldr	r3, [r7, #4]
 2475 000c 002B     		cmp	r3, #0
 2476 000e 02D0     		beq	.L172
 2477              		.loc 1 854 0 is_stmt 0 discriminator 1
 2478 0010 3B68     		ldr	r3, [r7]
 2479 0012 002B     		cmp	r3, #0
 2480 0014 01D1     		bne	.L173
 2481              	.L172:
 855:Tones.c       **** 		return false;
 2482              		.loc 1 855 0 is_stmt 1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 60


 2483 0016 0023     		movs	r3, #0
 2484 0018 98E0     		b	.L174
 2485              	.L173:
 856:Tones.c       ****     
 857:Tones.c       ****     uint16 highestPWMcount = getCaptureValue(currentTone->lowestFrequency);
 2486              		.loc 1 857 0
 2487 001a 3B68     		ldr	r3, [r7]
 2488 001c 1B88     		ldrh	r3, [r3]
 2489 001e 1846     		mov	r0, r3
 2490 0020 FFF7FEFF 		bl	getCaptureValue
 2491 0024 0346     		mov	r3, r0
 2492 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 858:Tones.c       ****     uint16 lowestPWMcount = getCaptureValue(currentTone->highestFrequency);
 2493              		.loc 1 858 0
 2494 0028 3B68     		ldr	r3, [r7]
 2495 002a 5B88     		ldrh	r3, [r3, #2]
 2496 002c 1846     		mov	r0, r3
 2497 002e FFF7FEFF 		bl	getCaptureValue
 2498 0032 0346     		mov	r3, r0
 2499 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 859:Tones.c       ****     
 860:Tones.c       ****     if(!currentSpeaker->bTonePlaying)
 2500              		.loc 1 860 0
 2501 0036 7B68     		ldr	r3, [r7, #4]
 2502 0038 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2503 003a 002B     		cmp	r3, #0
 2504 003c 08D1     		bne	.L175
 861:Tones.c       ****     {
 862:Tones.c       ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 2505              		.loc 1 862 0
 2506 003e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2507 0040 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2508 0042 D31A     		subs	r3, r2, r3
 2509 0044 9AB2     		uxth	r2, r3
 2510 0046 7B68     		ldr	r3, [r7, #4]
 2511 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 863:Tones.c       ****         currentSpeaker->bTonePlaying = true;
 2512              		.loc 1 863 0
 2513 004a 7B68     		ldr	r3, [r7, #4]
 2514 004c 0122     		movs	r2, #1
 2515 004e 9A74     		strb	r2, [r3, #18]
 2516              	.L175:
 864:Tones.c       ****     }
 865:Tones.c       ****     
 866:Tones.c       ****     currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDif
 2517              		.loc 1 866 0
 2518 0050 7B68     		ldr	r3, [r7, #4]
 2519 0052 9B88     		ldrh	r3, [r3, #4]
 2520 0054 1A46     		mov	r2, r3
 867:Tones.c       ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2521              		.loc 1 867 0
 2522 0056 7B68     		ldr	r3, [r7, #4]
 2523 0058 9B88     		ldrh	r3, [r3, #4]
 866:Tones.c       ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2524              		.loc 1 866 0
 2525 005a 03FB02F3 		mul	r3, r3, r2
 2526              		.loc 1 867 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 61


 2527 005e F989     		ldrh	r1, [r7, #14]
 2528 0060 BA89     		ldrh	r2, [r7, #12]
 2529 0062 8A1A     		subs	r2, r1, r2
 2530 0064 B3FBF2F3 		udiv	r3, r3, r2
 866:Tones.c       ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2531              		.loc 1 866 0
 2532 0068 9AB2     		uxth	r2, r3
 2533 006a BB89     		ldrh	r3, [r7, #12]	@ movhi
 2534 006c 1344     		add	r3, r3, r2
 2535 006e 9AB2     		uxth	r2, r3
 2536 0070 7B68     		ldr	r3, [r7, #4]
 2537 0072 5A80     		strh	r2, [r3, #2]	@ movhi
 868:Tones.c       ****     
 869:Tones.c       ****     if(currentSpeaker->bFrequencyChange == INCREASING)
 2538              		.loc 1 869 0
 2539 0074 7B68     		ldr	r3, [r7, #4]
 2540 0076 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2541 0078 012B     		cmp	r3, #1
 2542 007a 17D1     		bne	.L176
 870:Tones.c       ****     {
 871:Tones.c       ****         currentSpeaker->PWMcountDifference--;
 2543              		.loc 1 871 0
 2544 007c 7B68     		ldr	r3, [r7, #4]
 2545 007e 9B88     		ldrh	r3, [r3, #4]
 2546 0080 013B     		subs	r3, r3, #1
 2547 0082 9AB2     		uxth	r2, r3
 2548 0084 7B68     		ldr	r3, [r7, #4]
 2549 0086 9A80     		strh	r2, [r3, #4]	@ movhi
 872:Tones.c       **** 			
 873:Tones.c       **** 		if(currentSpeaker->PWMcountDifference <= 0)
 2550              		.loc 1 873 0
 2551 0088 7B68     		ldr	r3, [r7, #4]
 2552 008a 9B88     		ldrh	r3, [r3, #4]
 2553 008c 002B     		cmp	r3, #0
 2554 008e 5CD1     		bne	.L178
 874:Tones.c       **** 		{	
 875:Tones.c       **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency
 2555              		.loc 1 875 0
 2556 0090 7B68     		ldr	r3, [r7, #4]
 2557 0092 0022     		movs	r2, #0
 2558 0094 9A80     		strh	r2, [r3, #4]	@ movhi
 876:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2559              		.loc 1 876 0
 2560 0096 7B68     		ldr	r3, [r7, #4]
 2561 0098 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2562 009a 002B     		cmp	r3, #0
 2563 009c 0CBF     		ite	eq
 2564 009e 0123     		moveq	r3, #1
 2565 00a0 0023     		movne	r3, #0
 2566 00a2 DBB2     		uxtb	r3, r3
 2567 00a4 1A46     		mov	r2, r3
 2568 00a6 7B68     		ldr	r3, [r7, #4]
 2569 00a8 1A74     		strb	r2, [r3, #16]
 2570 00aa 4EE0     		b	.L178
 2571              	.L176:
 877:Tones.c       **** 		}
 878:Tones.c       ****     }
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 62


 879:Tones.c       ****     else
 880:Tones.c       ****     {
 881:Tones.c       ****         if((currentSpeaker->PCallHoldNoteCount < (currentTone->delayUs * HOLD_NOTE_FACTOR)) && 
 2572              		.loc 1 881 0
 2573 00ac 7B68     		ldr	r3, [r7, #4]
 2574 00ae 1B89     		ldrh	r3, [r3, #8]
 2575 00b0 1A46     		mov	r2, r3
 2576 00b2 3B68     		ldr	r3, [r7]
 2577 00b4 9B88     		ldrh	r3, [r3, #4]
 2578 00b6 1946     		mov	r1, r3
 2579 00b8 264B     		ldr	r3, .L182
 2580 00ba 1B88     		ldrh	r3, [r3]
 2581 00bc 03FB01F3 		mul	r3, r3, r1
 2582 00c0 9A42     		cmp	r2, r3
 2583 00c2 27DA     		bge	.L179
 882:Tones.c       ****             (currentSpeaker->PWMcountDifference == 0))
 2584              		.loc 1 882 0 discriminator 1
 2585 00c4 7B68     		ldr	r3, [r7, #4]
 2586 00c6 9B88     		ldrh	r3, [r3, #4]
 881:Tones.c       ****             (currentSpeaker->PWMcountDifference == 0))
 2587              		.loc 1 881 0 discriminator 1
 2588 00c8 002B     		cmp	r3, #0
 2589 00ca 23D1     		bne	.L179
 883:Tones.c       ****         {
 884:Tones.c       ****             if((currentSpeaker->PCallHoldNoteCount == ((currentTone->delayUs * HOLD_NOTE_FACTOR) / 
 2590              		.loc 1 884 0
 2591 00cc 7B68     		ldr	r3, [r7, #4]
 2592 00ce 1B89     		ldrh	r3, [r3, #8]
 2593 00d0 1946     		mov	r1, r3
 2594 00d2 3B68     		ldr	r3, [r7]
 2595 00d4 9B88     		ldrh	r3, [r3, #4]
 2596 00d6 1A46     		mov	r2, r3
 2597 00d8 1E4B     		ldr	r3, .L182
 2598 00da 1B88     		ldrh	r3, [r3]
 2599 00dc 03FB02F3 		mul	r3, r3, r2
 2600 00e0 DA0F     		lsrs	r2, r3, #31
 2601 00e2 1344     		add	r3, r3, r2
 2602 00e4 5B10     		asrs	r3, r3, #1
 2603 00e6 9942     		cmp	r1, r3
 2604 00e8 0DD1     		bne	.L180
 2605              		.loc 1 884 0 is_stmt 0 discriminator 1
 2606 00ea 1B4B     		ldr	r3, .L182+4
 2607 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2608 00ee 002B     		cmp	r3, #0
 2609 00f0 09D0     		beq	.L180
 885:Tones.c       ****                 (bEchoEnable))
 886:Tones.c       ****             {
 887:Tones.c       ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2610              		.loc 1 887 0 is_stmt 1
 2611 00f2 7B68     		ldr	r3, [r7, #4]
 2612 00f4 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 2613 00f6 0123     		movs	r3, #1
 2614 00f8 0022     		movs	r2, #0
 2615 00fa 0120     		movs	r0, #1
 2616 00fc FFF7FEFF 		bl	playPWMTone
 888:Tones.c       ****                 bEchoEnable = false;
 2617              		.loc 1 888 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 63


 2618 0100 154B     		ldr	r3, .L182+4
 2619 0102 0022     		movs	r2, #0
 2620 0104 1A70     		strb	r2, [r3]
 2621              	.L180:
 889:Tones.c       ****             }
 890:Tones.c       ****             
 891:Tones.c       ****             currentSpeaker->PCallHoldNoteCount++;
 2622              		.loc 1 891 0
 2623 0106 7B68     		ldr	r3, [r7, #4]
 2624 0108 1B89     		ldrh	r3, [r3, #8]
 2625 010a 0133     		adds	r3, r3, #1
 2626 010c 9AB2     		uxth	r2, r3
 2627 010e 7B68     		ldr	r3, [r7, #4]
 2628 0110 1A81     		strh	r2, [r3, #8]	@ movhi
 2629 0112 05E0     		b	.L181
 2630              	.L179:
 892:Tones.c       ****         }
 893:Tones.c       ****         else
 894:Tones.c       ****             currentSpeaker->PWMcountDifference++;
 2631              		.loc 1 894 0
 2632 0114 7B68     		ldr	r3, [r7, #4]
 2633 0116 9B88     		ldrh	r3, [r3, #4]
 2634 0118 0133     		adds	r3, r3, #1
 2635 011a 9AB2     		uxth	r2, r3
 2636 011c 7B68     		ldr	r3, [r7, #4]
 2637 011e 9A80     		strh	r2, [r3, #4]	@ movhi
 2638              	.L181:
 895:Tones.c       **** 		
 896:Tones.c       **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))	
 2639              		.loc 1 896 0
 2640 0120 7B68     		ldr	r3, [r7, #4]
 2641 0122 9B88     		ldrh	r3, [r3, #4]
 2642 0124 1946     		mov	r1, r3
 2643 0126 FA89     		ldrh	r2, [r7, #14]
 2644 0128 BB89     		ldrh	r3, [r7, #12]
 2645 012a D31A     		subs	r3, r2, r3
 2646 012c 9942     		cmp	r1, r3
 2647 012e 0CDB     		blt	.L178
 897:Tones.c       ****         {
 898:Tones.c       ****             currentSpeaker->PCallHoldNoteCount = 0;
 2648              		.loc 1 898 0
 2649 0130 7B68     		ldr	r3, [r7, #4]
 2650 0132 0022     		movs	r2, #0
 2651 0134 1A81     		strh	r2, [r3, #8]	@ movhi
 899:Tones.c       **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 2652              		.loc 1 899 0
 2653 0136 7B68     		ldr	r3, [r7, #4]
 2654 0138 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2655 013a 002B     		cmp	r3, #0
 2656 013c 0CBF     		ite	eq
 2657 013e 0123     		moveq	r3, #1
 2658 0140 0023     		movne	r3, #0
 2659 0142 DBB2     		uxtb	r3, r3
 2660 0144 1A46     		mov	r2, r3
 2661 0146 7B68     		ldr	r3, [r7, #4]
 2662 0148 1A74     		strb	r2, [r3, #16]
 2663              	.L178:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 64


 900:Tones.c       ****         }
 901:Tones.c       ****     }
 902:Tones.c       ****     
 903:Tones.c       ****     return true;
 2664              		.loc 1 903 0
 2665 014a 0123     		movs	r3, #1
 2666              	.L174:
 904:Tones.c       **** }
 2667              		.loc 1 904 0
 2668 014c 1846     		mov	r0, r3
 2669 014e 1037     		adds	r7, r7, #16
 2670              		.cfi_def_cfa_offset 8
 2671 0150 BD46     		mov	sp, r7
 2672              		.cfi_def_cfa_register 13
 2673              		@ sp needed
 2674 0152 80BD     		pop	{r7, pc}
 2675              	.L183:
 2676              		.align	2
 2677              	.L182:
 2678 0154 40000000 		.word	HOLD_NOTE_FACTOR.6416
 2679 0158 01000000 		.word	bEchoEnable
 2680              		.cfi_endproc
 2681              	.LFE76:
 2682              		.size	playPCallTone, .-playPCallTone
 2683              		.section	.text.playComboTone,"ax",%progbits
 2684              		.align	2
 2685              		.thumb
 2686              		.thumb_func
 2687              		.type	playComboTone, %function
 2688              	playComboTone:
 2689              	.LFB77:
 905:Tones.c       **** 
 906:Tones.c       **** /*******************************************************************************
 907:Tones.c       **** * Function Name: playComboTone
 908:Tones.c       **** ********************************************************************************
 909:Tones.c       **** *
 910:Tones.c       **** * Summary:
 911:Tones.c       **** *  Updates the PWM frequency value for the Combo Tones
 912:Tones.c       **** *
 913:Tones.c       **** * Parameters:  
 914:Tones.c       **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 915:Tones.c       **** *   firstToneChoice - The pointer to the struct of the first tone
 916:Tones.c       **** *   secondToneChoice - The pointer to the struct of the second tone
 917:Tones.c       **** *
 918:Tones.c       **** * Return:
 919:Tones.c       **** *   TRUE for valid input, FALSE otherwise
 920:Tones.c       **** *
 921:Tones.c       **** *******************************************************************************/
 922:Tones.c       **** static uint8 playComboTone(uint8 bSpeaker, ToneStruct* firstToneChoice, ToneStruct* secondToneChoic
 923:Tones.c       **** {
 2690              		.loc 1 923 0
 2691              		.cfi_startproc
 2692              		@ args = 0, pretend = 0, frame = 24
 2693              		@ frame_needed = 1, uses_anonymous_args = 0
 2694 0000 80B5     		push	{r7, lr}
 2695              		.cfi_def_cfa_offset 8
 2696              		.cfi_offset 7, -8
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 65


 2697              		.cfi_offset 14, -4
 2698 0002 86B0     		sub	sp, sp, #24
 2699              		.cfi_def_cfa_offset 32
 2700 0004 00AF     		add	r7, sp, #0
 2701              		.cfi_def_cfa_register 7
 2702 0006 0346     		mov	r3, r0
 2703 0008 B960     		str	r1, [r7, #8]
 2704 000a 7A60     		str	r2, [r7, #4]
 2705 000c FB73     		strb	r3, [r7, #15]
 924:Tones.c       ****     static const uint32 COMBO_COUNT_LIMIT = 0x3FFFF;
 925:Tones.c       ****     uint32 delayFactor1 = 0;
 2706              		.loc 1 925 0
 2707 000e 0023     		movs	r3, #0
 2708 0010 7B61     		str	r3, [r7, #20]
 926:Tones.c       ****     uint32 delayFactor2 = 0;
 2709              		.loc 1 926 0
 2710 0012 0023     		movs	r3, #0
 2711 0014 3B61     		str	r3, [r7, #16]
 927:Tones.c       ****     
 928:Tones.c       ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 2712              		.loc 1 928 0
 2713 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2714 0018 002B     		cmp	r3, #0
 2715 001a 04D0     		beq	.L185
 2716              		.loc 1 928 0 is_stmt 0 discriminator 1
 2717 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2718 001e 012B     		cmp	r3, #1
 2719 0020 01D0     		beq	.L185
 929:Tones.c       ****         return false;
 2720              		.loc 1 929 0 is_stmt 1
 2721 0022 0023     		movs	r3, #0
 2722 0024 F6E0     		b	.L186
 2723              	.L185:
 930:Tones.c       ****     
 931:Tones.c       ****     if((firstToneChoice == NULL) || (secondToneChoice == NULL))
 2724              		.loc 1 931 0
 2725 0026 BB68     		ldr	r3, [r7, #8]
 2726 0028 002B     		cmp	r3, #0
 2727 002a 02D0     		beq	.L187
 2728              		.loc 1 931 0 is_stmt 0 discriminator 1
 2729 002c 7B68     		ldr	r3, [r7, #4]
 2730 002e 002B     		cmp	r3, #0
 2731 0030 01D1     		bne	.L188
 2732              	.L187:
 932:Tones.c       **** 		return false;
 2733              		.loc 1 932 0 is_stmt 1
 2734 0032 0023     		movs	r3, #0
 2735 0034 EEE0     		b	.L186
 2736              	.L188:
 933:Tones.c       ****     
 934:Tones.c       ****     delayFactor1 = COMBO_COUNT_LIMIT / (uint32)(firstToneChoice->delayUs);
 2737              		.loc 1 934 0
 2738 0036 794B     		ldr	r3, .L202
 2739 0038 1B68     		ldr	r3, [r3]
 2740 003a BA68     		ldr	r2, [r7, #8]
 2741 003c 9288     		ldrh	r2, [r2, #4]
 2742 003e B3FBF2F3 		udiv	r3, r3, r2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 66


 2743 0042 7B61     		str	r3, [r7, #20]
 935:Tones.c       ****     delayFactor2 = COMBO_COUNT_LIMIT / (uint32)(secondToneChoice->delayUs);
 2744              		.loc 1 935 0
 2745 0044 754B     		ldr	r3, .L202
 2746 0046 1B68     		ldr	r3, [r3]
 2747 0048 7A68     		ldr	r2, [r7, #4]
 2748 004a 9288     		ldrh	r2, [r2, #4]
 2749 004c B3FBF2F3 		udiv	r3, r3, r2
 2750 0050 3B61     		str	r3, [r7, #16]
 936:Tones.c       ****     
 937:Tones.c       ****     if(speakerDataList[bSpeaker].bComboSwitch)
 2751              		.loc 1 937 0
 2752 0052 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2753 0054 7249     		ldr	r1, .L202+4
 2754 0056 1346     		mov	r3, r2
 2755 0058 5B00     		lsls	r3, r3, #1
 2756 005a 1344     		add	r3, r3, r2
 2757 005c DB00     		lsls	r3, r3, #3
 2758 005e 0B44     		add	r3, r3, r1
 2759 0060 1133     		adds	r3, r3, #17
 2760 0062 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2761 0064 002B     		cmp	r3, #0
 2762 0066 6AD0     		beq	.L189
 938:Tones.c       ****     {
 939:Tones.c       ****         if(speakerDataList[bSpeaker].comboCount < delayFactor2)
 2763              		.loc 1 939 0
 2764 0068 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2765 006a 6D49     		ldr	r1, .L202+4
 2766 006c 1346     		mov	r3, r2
 2767 006e 5B00     		lsls	r3, r3, #1
 2768 0070 1344     		add	r3, r3, r2
 2769 0072 DB00     		lsls	r3, r3, #3
 2770 0074 0B44     		add	r3, r3, r1
 2771 0076 0C33     		adds	r3, r3, #12
 2772 0078 1A68     		ldr	r2, [r3]
 2773 007a 3B69     		ldr	r3, [r7, #16]
 2774 007c 9A42     		cmp	r2, r3
 2775 007e 2CD2     		bcs	.L190
 940:Tones.c       ****         {
 941:Tones.c       ****             if(secondToneChoice == &toneList[HORN])
 2776              		.loc 1 941 0
 2777 0080 7B68     		ldr	r3, [r7, #4]
 2778 0082 684A     		ldr	r2, .L202+8
 2779 0084 9342     		cmp	r3, r2
 2780 0086 0AD1     		bne	.L191
 942:Tones.c       ****                 playHornTone(&speakerDataList[bSpeaker]);
 2781              		.loc 1 942 0
 2782 0088 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2783 008a 1346     		mov	r3, r2
 2784 008c 5B00     		lsls	r3, r3, #1
 2785 008e 1344     		add	r3, r3, r2
 2786 0090 DB00     		lsls	r3, r3, #3
 2787 0092 634A     		ldr	r2, .L202+4
 2788 0094 1344     		add	r3, r3, r2
 2789 0096 1846     		mov	r0, r3
 2790 0098 FFF7FEFF 		bl	playHornTone
 2791 009c 0AE0     		b	.L192
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 67


 2792              	.L191:
 943:Tones.c       ****             else
 944:Tones.c       ****                 playGradualChangeTone(&speakerDataList[bSpeaker], secondToneChoice);
 2793              		.loc 1 944 0
 2794 009e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2795 00a0 1346     		mov	r3, r2
 2796 00a2 5B00     		lsls	r3, r3, #1
 2797 00a4 1344     		add	r3, r3, r2
 2798 00a6 DB00     		lsls	r3, r3, #3
 2799 00a8 5D4A     		ldr	r2, .L202+4
 2800 00aa 1344     		add	r3, r3, r2
 2801 00ac 7968     		ldr	r1, [r7, #4]
 2802 00ae 1846     		mov	r0, r3
 2803 00b0 FFF7FEFF 		bl	playGradualChangeTone
 2804              	.L192:
 945:Tones.c       ****                 
 946:Tones.c       ****             speakerDataList[bSpeaker].comboCount++;
 2805              		.loc 1 946 0
 2806 00b4 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2807 00b6 5A49     		ldr	r1, .L202+4
 2808 00b8 1346     		mov	r3, r2
 2809 00ba 5B00     		lsls	r3, r3, #1
 2810 00bc 1344     		add	r3, r3, r2
 2811 00be DB00     		lsls	r3, r3, #3
 2812 00c0 0B44     		add	r3, r3, r1
 2813 00c2 0C33     		adds	r3, r3, #12
 2814 00c4 1B68     		ldr	r3, [r3]
 2815 00c6 591C     		adds	r1, r3, #1
 2816 00c8 5548     		ldr	r0, .L202+4
 2817 00ca 1346     		mov	r3, r2
 2818 00cc 5B00     		lsls	r3, r3, #1
 2819 00ce 1344     		add	r3, r3, r2
 2820 00d0 DB00     		lsls	r3, r3, #3
 2821 00d2 0344     		add	r3, r3, r0
 2822 00d4 0C33     		adds	r3, r3, #12
 2823 00d6 1960     		str	r1, [r3]
 2824 00d8 9BE0     		b	.L196
 2825              	.L190:
 947:Tones.c       ****         }
 948:Tones.c       ****         else
 949:Tones.c       ****         {
 950:Tones.c       ****             if(bSpeaker)
 2826              		.loc 1 950 0
 2827 00da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2828 00dc 002B     		cmp	r3, #0
 2829 00de 05D0     		beq	.L194
 2830              	.LBB17:
 951:Tones.c       ****                 PWMtimer2_WritePeriod(firstToneChoice->delayUs);
 2831              		.loc 1 951 0
 2832 00e0 BB68     		ldr	r3, [r7, #8]
 2833 00e2 9B88     		ldrh	r3, [r3, #4]
 2834 00e4 1846     		mov	r0, r3
 2835 00e6 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 2836              	.LBE17:
 2837 00ea 04E0     		b	.L195
 2838              	.L194:
 2839              	.LBB18:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 68


 952:Tones.c       ****             else
 953:Tones.c       ****                 PWMtimer1_WritePeriod(firstToneChoice->delayUs);
 2840              		.loc 1 953 0
 2841 00ec BB68     		ldr	r3, [r7, #8]
 2842 00ee 9B88     		ldrh	r3, [r3, #4]
 2843 00f0 1846     		mov	r0, r3
 2844 00f2 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 2845              	.L195:
 2846              	.LBE18:
 954:Tones.c       ****             
 955:Tones.c       ****             speakerDataList[bSpeaker].comboCount = 0;
 2847              		.loc 1 955 0
 2848 00f6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2849 00f8 4949     		ldr	r1, .L202+4
 2850 00fa 1346     		mov	r3, r2
 2851 00fc 5B00     		lsls	r3, r3, #1
 2852 00fe 1344     		add	r3, r3, r2
 2853 0100 DB00     		lsls	r3, r3, #3
 2854 0102 0B44     		add	r3, r3, r1
 2855 0104 0C33     		adds	r3, r3, #12
 2856 0106 0022     		movs	r2, #0
 2857 0108 1A60     		str	r2, [r3]
 956:Tones.c       ****             speakerDataList[bSpeaker].bComboSwitch = !speakerDataList[bSpeaker].bComboSwitch;
 2858              		.loc 1 956 0
 2859 010a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2860 010c F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2861 010e 4448     		ldr	r0, .L202+4
 2862 0110 0B46     		mov	r3, r1
 2863 0112 5B00     		lsls	r3, r3, #1
 2864 0114 0B44     		add	r3, r3, r1
 2865 0116 DB00     		lsls	r3, r3, #3
 2866 0118 0344     		add	r3, r3, r0
 2867 011a 1133     		adds	r3, r3, #17
 2868 011c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2869 011e 002B     		cmp	r3, #0
 2870 0120 0CBF     		ite	eq
 2871 0122 0123     		moveq	r3, #1
 2872 0124 0023     		movne	r3, #0
 2873 0126 DBB2     		uxtb	r3, r3
 2874 0128 1846     		mov	r0, r3
 2875 012a 3D49     		ldr	r1, .L202+4
 2876 012c 1346     		mov	r3, r2
 2877 012e 5B00     		lsls	r3, r3, #1
 2878 0130 1344     		add	r3, r3, r2
 2879 0132 DB00     		lsls	r3, r3, #3
 2880 0134 0B44     		add	r3, r3, r1
 2881 0136 1133     		adds	r3, r3, #17
 2882 0138 0246     		mov	r2, r0
 2883 013a 1A70     		strb	r2, [r3]
 2884 013c 69E0     		b	.L196
 2885              	.L189:
 957:Tones.c       ****         }
 958:Tones.c       ****     }
 959:Tones.c       ****     else
 960:Tones.c       ****     {
 961:Tones.c       ****         if(speakerDataList[bSpeaker].comboCount < delayFactor1)
 2886              		.loc 1 961 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 69


 2887 013e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2888 0140 3749     		ldr	r1, .L202+4
 2889 0142 1346     		mov	r3, r2
 2890 0144 5B00     		lsls	r3, r3, #1
 2891 0146 1344     		add	r3, r3, r2
 2892 0148 DB00     		lsls	r3, r3, #3
 2893 014a 0B44     		add	r3, r3, r1
 2894 014c 0C33     		adds	r3, r3, #12
 2895 014e 1A68     		ldr	r2, [r3]
 2896 0150 7B69     		ldr	r3, [r7, #20]
 2897 0152 9A42     		cmp	r2, r3
 2898 0154 2CD2     		bcs	.L197
 962:Tones.c       ****         {
 963:Tones.c       ****             if(firstToneChoice == &toneList[HORN])
 2899              		.loc 1 963 0
 2900 0156 BB68     		ldr	r3, [r7, #8]
 2901 0158 324A     		ldr	r2, .L202+8
 2902 015a 9342     		cmp	r3, r2
 2903 015c 0AD1     		bne	.L198
 964:Tones.c       ****                 playHornTone(&speakerDataList[bSpeaker]);
 2904              		.loc 1 964 0
 2905 015e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2906 0160 1346     		mov	r3, r2
 2907 0162 5B00     		lsls	r3, r3, #1
 2908 0164 1344     		add	r3, r3, r2
 2909 0166 DB00     		lsls	r3, r3, #3
 2910 0168 2D4A     		ldr	r2, .L202+4
 2911 016a 1344     		add	r3, r3, r2
 2912 016c 1846     		mov	r0, r3
 2913 016e FFF7FEFF 		bl	playHornTone
 2914 0172 0AE0     		b	.L199
 2915              	.L198:
 965:Tones.c       ****             else
 966:Tones.c       ****                 playGradualChangeTone(&speakerDataList[bSpeaker], firstToneChoice);
 2916              		.loc 1 966 0
 2917 0174 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2918 0176 1346     		mov	r3, r2
 2919 0178 5B00     		lsls	r3, r3, #1
 2920 017a 1344     		add	r3, r3, r2
 2921 017c DB00     		lsls	r3, r3, #3
 2922 017e 284A     		ldr	r2, .L202+4
 2923 0180 1344     		add	r3, r3, r2
 2924 0182 B968     		ldr	r1, [r7, #8]
 2925 0184 1846     		mov	r0, r3
 2926 0186 FFF7FEFF 		bl	playGradualChangeTone
 2927              	.L199:
 967:Tones.c       ****                 
 968:Tones.c       ****             speakerDataList[bSpeaker].comboCount++;
 2928              		.loc 1 968 0
 2929 018a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2930 018c 2449     		ldr	r1, .L202+4
 2931 018e 1346     		mov	r3, r2
 2932 0190 5B00     		lsls	r3, r3, #1
 2933 0192 1344     		add	r3, r3, r2
 2934 0194 DB00     		lsls	r3, r3, #3
 2935 0196 0B44     		add	r3, r3, r1
 2936 0198 0C33     		adds	r3, r3, #12
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 70


 2937 019a 1B68     		ldr	r3, [r3]
 2938 019c 591C     		adds	r1, r3, #1
 2939 019e 2048     		ldr	r0, .L202+4
 2940 01a0 1346     		mov	r3, r2
 2941 01a2 5B00     		lsls	r3, r3, #1
 2942 01a4 1344     		add	r3, r3, r2
 2943 01a6 DB00     		lsls	r3, r3, #3
 2944 01a8 0344     		add	r3, r3, r0
 2945 01aa 0C33     		adds	r3, r3, #12
 2946 01ac 1960     		str	r1, [r3]
 2947 01ae 30E0     		b	.L196
 2948              	.L197:
 969:Tones.c       ****         }
 970:Tones.c       ****         else
 971:Tones.c       ****         {
 972:Tones.c       ****             if(bSpeaker)
 2949              		.loc 1 972 0
 2950 01b0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2951 01b2 002B     		cmp	r3, #0
 2952 01b4 05D0     		beq	.L200
 2953              	.LBB19:
 973:Tones.c       ****                 PWMtimer2_WritePeriod(secondToneChoice->delayUs);
 2954              		.loc 1 973 0
 2955 01b6 7B68     		ldr	r3, [r7, #4]
 2956 01b8 9B88     		ldrh	r3, [r3, #4]
 2957 01ba 1846     		mov	r0, r3
 2958 01bc FFF7FEFF 		bl	PWMtimer2_WritePeriod
 2959              	.LBE19:
 2960 01c0 04E0     		b	.L201
 2961              	.L200:
 2962              	.LBB20:
 974:Tones.c       ****             else
 975:Tones.c       ****                 PWMtimer1_WritePeriod(secondToneChoice->delayUs);
 2963              		.loc 1 975 0
 2964 01c2 7B68     		ldr	r3, [r7, #4]
 2965 01c4 9B88     		ldrh	r3, [r3, #4]
 2966 01c6 1846     		mov	r0, r3
 2967 01c8 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 2968              	.L201:
 2969              	.LBE20:
 976:Tones.c       ****             
 977:Tones.c       ****             speakerDataList[bSpeaker].comboCount = 0;
 2970              		.loc 1 977 0
 2971 01cc FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2972 01ce 1449     		ldr	r1, .L202+4
 2973 01d0 1346     		mov	r3, r2
 2974 01d2 5B00     		lsls	r3, r3, #1
 2975 01d4 1344     		add	r3, r3, r2
 2976 01d6 DB00     		lsls	r3, r3, #3
 2977 01d8 0B44     		add	r3, r3, r1
 2978 01da 0C33     		adds	r3, r3, #12
 2979 01dc 0022     		movs	r2, #0
 2980 01de 1A60     		str	r2, [r3]
 978:Tones.c       ****             speakerDataList[bSpeaker].bComboSwitch = !speakerDataList[bSpeaker].bComboSwitch;
 2981              		.loc 1 978 0
 2982 01e0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2983 01e2 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 71


 2984 01e4 0E48     		ldr	r0, .L202+4
 2985 01e6 0B46     		mov	r3, r1
 2986 01e8 5B00     		lsls	r3, r3, #1
 2987 01ea 0B44     		add	r3, r3, r1
 2988 01ec DB00     		lsls	r3, r3, #3
 2989 01ee 0344     		add	r3, r3, r0
 2990 01f0 1133     		adds	r3, r3, #17
 2991 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2992 01f4 002B     		cmp	r3, #0
 2993 01f6 0CBF     		ite	eq
 2994 01f8 0123     		moveq	r3, #1
 2995 01fa 0023     		movne	r3, #0
 2996 01fc DBB2     		uxtb	r3, r3
 2997 01fe 1846     		mov	r0, r3
 2998 0200 0749     		ldr	r1, .L202+4
 2999 0202 1346     		mov	r3, r2
 3000 0204 5B00     		lsls	r3, r3, #1
 3001 0206 1344     		add	r3, r3, r2
 3002 0208 DB00     		lsls	r3, r3, #3
 3003 020a 0B44     		add	r3, r3, r1
 3004 020c 1133     		adds	r3, r3, #17
 3005 020e 0246     		mov	r2, r0
 3006 0210 1A70     		strb	r2, [r3]
 3007              	.L196:
 979:Tones.c       ****         }
 980:Tones.c       ****     }
 981:Tones.c       ****     
 982:Tones.c       ****     return true;
 3008              		.loc 1 982 0
 3009 0212 0123     		movs	r3, #1
 3010              	.L186:
 983:Tones.c       **** }
 3011              		.loc 1 983 0
 3012 0214 1846     		mov	r0, r3
 3013 0216 1837     		adds	r7, r7, #24
 3014              		.cfi_def_cfa_offset 8
 3015 0218 BD46     		mov	sp, r7
 3016              		.cfi_def_cfa_register 13
 3017              		@ sp needed
 3018 021a 80BD     		pop	{r7, pc}
 3019              	.L203:
 3020              		.align	2
 3021              	.L202:
 3022 021c 44000000 		.word	COMBO_COUNT_LIMIT.6424
 3023 0220 60000000 		.word	speakerDataList
 3024 0224 28000000 		.word	toneList+40
 3025              		.cfi_endproc
 3026              	.LFE77:
 3027              		.size	playComboTone, .-playComboTone
 3028              		.section	.text.playTestTone,"ax",%progbits
 3029              		.align	2
 3030              		.thumb
 3031              		.thumb_func
 3032              		.type	playTestTone, %function
 3033              	playTestTone:
 3034              	.LFB78:
 984:Tones.c       **** 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 72


 985:Tones.c       **** /*******************************************************************************
 986:Tones.c       **** * Function Name: playTestTone
 987:Tones.c       **** ********************************************************************************
 988:Tones.c       **** *
 989:Tones.c       **** * Summary:
 990:Tones.c       **** *  Updates the PWM frequency value for the Test Tone
 991:Tones.c       **** *
 992:Tones.c       **** * Parameters:  
 993:Tones.c       **** *   currentSpeaker: The pointer to the tone data struct for the current speaker
 994:Tones.c       **** *
 995:Tones.c       **** * Return:
 996:Tones.c       **** *   TRUE for valid input, FALSE otherwise
 997:Tones.c       **** *
 998:Tones.c       **** *******************************************************************************/
 999:Tones.c       **** static uint8 playTestTone(CurrentToneData* currentSpeaker)
1000:Tones.c       **** {
 3035              		.loc 1 1000 0
 3036              		.cfi_startproc
 3037              		@ args = 0, pretend = 0, frame = 8
 3038              		@ frame_needed = 1, uses_anonymous_args = 0
 3039 0000 80B5     		push	{r7, lr}
 3040              		.cfi_def_cfa_offset 8
 3041              		.cfi_offset 7, -8
 3042              		.cfi_offset 14, -4
 3043 0002 82B0     		sub	sp, sp, #8
 3044              		.cfi_def_cfa_offset 16
 3045 0004 00AF     		add	r7, sp, #0
 3046              		.cfi_def_cfa_register 7
 3047 0006 7860     		str	r0, [r7, #4]
1001:Tones.c       ****     static const uint16 HIGH_LOW_COUNT_LIMIT = 250;
1002:Tones.c       ****     
1003:Tones.c       ****     if(currentSpeaker == NULL)
 3048              		.loc 1 1003 0
 3049 0008 7B68     		ldr	r3, [r7, #4]
 3050 000a 002B     		cmp	r3, #0
 3051 000c 01D1     		bne	.L205
1004:Tones.c       ****         return false;
 3052              		.loc 1 1004 0
 3053 000e 0023     		movs	r3, #0
 3054 0010 47E0     		b	.L206
 3055              	.L205:
1005:Tones.c       ****     
1006:Tones.c       ****     if(!currentSpeaker->bTonePlaying)
 3056              		.loc 1 1006 0
 3057 0012 7B68     		ldr	r3, [r7, #4]
 3058 0014 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 3059 0016 002B     		cmp	r3, #0
 3060 0018 05D1     		bne	.L207
1007:Tones.c       ****     {
1008:Tones.c       ****         currentSpeaker->PWMcountDifference = 0;
 3061              		.loc 1 1008 0
 3062 001a 7B68     		ldr	r3, [r7, #4]
 3063 001c 0022     		movs	r2, #0
 3064 001e 9A80     		strh	r2, [r3, #4]	@ movhi
1009:Tones.c       ****         currentSpeaker->bTonePlaying = true;
 3065              		.loc 1 1009 0
 3066 0020 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 73


 3067 0022 0122     		movs	r2, #1
 3068 0024 9A74     		strb	r2, [r3, #18]
 3069              	.L207:
1010:Tones.c       ****     }
1011:Tones.c       ****     
1012:Tones.c       ****     if(currentSpeaker->PWMcountDifference < HIGH_LOW_COUNT_LIMIT)
 3070              		.loc 1 1012 0
 3071 0026 7B68     		ldr	r3, [r7, #4]
 3072 0028 9A88     		ldrh	r2, [r3, #4]
 3073 002a 204B     		ldr	r3, .L213
 3074 002c 1B88     		ldrh	r3, [r3]
 3075 002e 9A42     		cmp	r2, r3
 3076 0030 13D2     		bcs	.L208
1013:Tones.c       **** 	{
1014:Tones.c       ****         currentSpeaker->PWMperiodCount = getCaptureValue(NOTES_FREQUENCY_LIST[currentSpeaker->noteL
 3077              		.loc 1 1014 0
 3078 0032 7B68     		ldr	r3, [r7, #4]
 3079 0034 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3080 0036 1A46     		mov	r2, r3
 3081 0038 1D4B     		ldr	r3, .L213+4
 3082 003a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3083 003e 1846     		mov	r0, r3
 3084 0040 FFF7FEFF 		bl	getCaptureValue
 3085 0044 0346     		mov	r3, r0
 3086 0046 1A46     		mov	r2, r3
 3087 0048 7B68     		ldr	r3, [r7, #4]
 3088 004a 5A80     		strh	r2, [r3, #2]	@ movhi
1015:Tones.c       ****         currentSpeaker->PWMcountDifference++;
 3089              		.loc 1 1015 0
 3090 004c 7B68     		ldr	r3, [r7, #4]
 3091 004e 9B88     		ldrh	r3, [r3, #4]
 3092 0050 0133     		adds	r3, r3, #1
 3093 0052 9AB2     		uxth	r2, r3
 3094 0054 7B68     		ldr	r3, [r7, #4]
 3095 0056 9A80     		strh	r2, [r3, #4]	@ movhi
 3096 0058 22E0     		b	.L209
 3097              	.L208:
1016:Tones.c       **** 	}
1017:Tones.c       ****     else
1018:Tones.c       ****     {
1019:Tones.c       ****         currentSpeaker->PWMcountDifference = 0;
 3098              		.loc 1 1019 0
 3099 005a 7B68     		ldr	r3, [r7, #4]
 3100 005c 0022     		movs	r2, #0
 3101 005e 9A80     		strh	r2, [r3, #4]	@ movhi
1020:Tones.c       ****         
1021:Tones.c       ****         if(currentSpeaker->bFrequencyChange == INCREASING)
 3102              		.loc 1 1021 0
 3103 0060 7B68     		ldr	r3, [r7, #4]
 3104 0062 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3105 0064 012B     		cmp	r3, #1
 3106 0066 06D1     		bne	.L210
1022:Tones.c       **** 			currentSpeaker->noteListIndex++;
 3107              		.loc 1 1022 0
 3108 0068 7B68     		ldr	r3, [r7, #4]
 3109 006a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3110 006c 0133     		adds	r3, r3, #1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 74


 3111 006e DAB2     		uxtb	r2, r3
 3112 0070 7B68     		ldr	r3, [r7, #4]
 3113 0072 9A75     		strb	r2, [r3, #22]
 3114 0074 05E0     		b	.L211
 3115              	.L210:
1023:Tones.c       **** 		else
1024:Tones.c       **** 			currentSpeaker->noteListIndex--;
 3116              		.loc 1 1024 0
 3117 0076 7B68     		ldr	r3, [r7, #4]
 3118 0078 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3119 007a 013B     		subs	r3, r3, #1
 3120 007c DAB2     		uxtb	r2, r3
 3121 007e 7B68     		ldr	r3, [r7, #4]
 3122 0080 9A75     		strb	r2, [r3, #22]
 3123              	.L211:
1025:Tones.c       ****         
1026:Tones.c       ****         if(currentSpeaker->noteListIndex >= (NOTES_TABLE_SIZE - 1))
 3124              		.loc 1 1026 0
 3125 0082 7B68     		ldr	r3, [r7, #4]
 3126 0084 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3127 0086 172B     		cmp	r3, #23
 3128 0088 03D9     		bls	.L212
1027:Tones.c       ****             currentSpeaker->bFrequencyChange = DECREASING;
 3129              		.loc 1 1027 0
 3130 008a 7B68     		ldr	r3, [r7, #4]
 3131 008c 0022     		movs	r2, #0
 3132 008e 1A74     		strb	r2, [r3, #16]
 3133 0090 06E0     		b	.L209
 3134              	.L212:
1028:Tones.c       ****         else if(currentSpeaker->noteListIndex <= 0)
 3135              		.loc 1 1028 0
 3136 0092 7B68     		ldr	r3, [r7, #4]
 3137 0094 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3138 0096 002B     		cmp	r3, #0
 3139 0098 02D1     		bne	.L209
1029:Tones.c       ****             currentSpeaker->bFrequencyChange = INCREASING;
 3140              		.loc 1 1029 0
 3141 009a 7B68     		ldr	r3, [r7, #4]
 3142 009c 0122     		movs	r2, #1
 3143 009e 1A74     		strb	r2, [r3, #16]
 3144              	.L209:
1030:Tones.c       ****     }
1031:Tones.c       ****     
1032:Tones.c       ****     return true;
 3145              		.loc 1 1032 0
 3146 00a0 0123     		movs	r3, #1
 3147              	.L206:
1033:Tones.c       **** }
 3148              		.loc 1 1033 0
 3149 00a2 1846     		mov	r0, r3
 3150 00a4 0837     		adds	r7, r7, #8
 3151              		.cfi_def_cfa_offset 8
 3152 00a6 BD46     		mov	sp, r7
 3153              		.cfi_def_cfa_register 13
 3154              		@ sp needed
 3155 00a8 80BD     		pop	{r7, pc}
 3156              	.L214:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 75


 3157 00aa 00BF     		.align	2
 3158              	.L213:
 3159 00ac 48000000 		.word	HIGH_LOW_COUNT_LIMIT.6434
 3160 00b0 04000000 		.word	NOTES_FREQUENCY_LIST
 3161              		.cfi_endproc
 3162              	.LFE78:
 3163              		.size	playTestTone, .-playTestTone
 3164              		.section	.text.getCaptureValue,"ax",%progbits
 3165              		.align	2
 3166              		.thumb
 3167              		.thumb_func
 3168              		.type	getCaptureValue, %function
 3169              	getCaptureValue:
 3170              	.LFB79:
1034:Tones.c       **** 
1035:Tones.c       **** /*******************************************************************************
1036:Tones.c       **** * Function Name: getCaptureValue
1037:Tones.c       **** ********************************************************************************
1038:Tones.c       **** *
1039:Tones.c       **** * Summary:
1040:Tones.c       **** *  Converts a frequency value to the corresponding capture value for the
1041:Tones.c       **** *  PWM timer that ticks at a rate of 1 MHz
1042:Tones.c       **** *
1043:Tones.c       **** * Parameters:  
1044:Tones.c       **** *   frequency: In hertz
1045:Tones.c       **** *
1046:Tones.c       **** * Return:
1047:Tones.c       **** *   The capture value
1048:Tones.c       **** *
1049:Tones.c       **** *******************************************************************************/
1050:Tones.c       **** static uint16 getCaptureValue(uint16 frequency)
1051:Tones.c       **** {
 3171              		.loc 1 1051 0
 3172              		.cfi_startproc
 3173              		@ args = 0, pretend = 0, frame = 8
 3174              		@ frame_needed = 1, uses_anonymous_args = 0
 3175              		@ link register save eliminated.
 3176 0000 80B4     		push	{r7}
 3177              		.cfi_def_cfa_offset 4
 3178              		.cfi_offset 7, -4
 3179 0002 83B0     		sub	sp, sp, #12
 3180              		.cfi_def_cfa_offset 16
 3181 0004 00AF     		add	r7, sp, #0
 3182              		.cfi_def_cfa_register 7
 3183 0006 0346     		mov	r3, r0
 3184 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1052:Tones.c       ****     static const uint32 PWM_CLOCK_FREQUENCY = 1000000;    
1053:Tones.c       ****     return (uint16)(PWM_CLOCK_FREQUENCY / (uint32)(frequency));
 3185              		.loc 1 1053 0
 3186 000a 054B     		ldr	r3, .L217
 3187 000c 1A68     		ldr	r2, [r3]
 3188 000e FB88     		ldrh	r3, [r7, #6]
 3189 0010 B2FBF3F3 		udiv	r3, r2, r3
 3190 0014 9BB2     		uxth	r3, r3
1054:Tones.c       **** }
 3191              		.loc 1 1054 0
 3192 0016 1846     		mov	r0, r3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 76


 3193 0018 0C37     		adds	r7, r7, #12
 3194              		.cfi_def_cfa_offset 4
 3195 001a BD46     		mov	sp, r7
 3196              		.cfi_def_cfa_register 13
 3197              		@ sp needed
 3198 001c 80BC     		pop	{r7}
 3199              		.cfi_restore 7
 3200              		.cfi_def_cfa_offset 0
 3201 001e 7047     		bx	lr
 3202              	.L218:
 3203              		.align	2
 3204              	.L217:
 3205 0020 4C000000 		.word	PWM_CLOCK_FREQUENCY.6438
 3206              		.cfi_endproc
 3207              	.LFE79:
 3208              		.size	getCaptureValue, .-getCaptureValue
 3209              		.bss
 3210              	hornFrequencyCount.6341:
 3211 0002 00       		.space	1
 3212              	hornWiggleCount.6345:
 3213 0003 00       		.space	1
 3214              		.data
 3215              		.type	bFrequencyChange.6344, %object
 3216              		.size	bFrequencyChange.6344, 1
 3217              	bFrequencyChange.6344:
 3218 0090 01       		.byte	1
 3219              		.section	.rodata
 3220              		.type	HORN_WIGGLE_WIDTH.6343, %object
 3221              		.size	HORN_WIGGLE_WIDTH.6343, 1
 3222              	HORN_WIGGLE_WIDTH.6343:
 3223 0036 14       		.byte	20
 3224              		.type	HORN_FREQUENCY_COUNT_LIMIT.6340, %object
 3225              		.size	HORN_FREQUENCY_COUNT_LIMIT.6340, 1
 3226              	HORN_FREQUENCY_COUNT_LIMIT.6340:
 3227 0037 01       		.byte	1
 3228              		.bss
 3229              	hornFrequencyCount.6361:
 3230 0004 00       		.space	1
 3231              	hornWiggleCount.6365:
 3232 0005 00       		.space	1
 3233              		.data
 3234              		.type	bFrequencyChange.6364, %object
 3235              		.size	bFrequencyChange.6364, 1
 3236              	bFrequencyChange.6364:
 3237 0091 01       		.byte	1
 3238              		.section	.rodata
 3239              		.type	HORN_WIGGLE_WIDTH.6363, %object
 3240              		.size	HORN_WIGGLE_WIDTH.6363, 1
 3241              	HORN_WIGGLE_WIDTH.6363:
 3242 0038 14       		.byte	20
 3243              		.type	HORN_FREQUENCY_COUNT_LIMIT.6360, %object
 3244              		.size	HORN_FREQUENCY_COUNT_LIMIT.6360, 1
 3245              	HORN_FREQUENCY_COUNT_LIMIT.6360:
 3246 0039 01       		.byte	1
 3247              		.align	1
 3248              		.type	HIGH_LOW_COUNT_LIMIT.6403, %object
 3249              		.size	HIGH_LOW_COUNT_LIMIT.6403, 2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 77


 3250              	HIGH_LOW_COUNT_LIMIT.6403:
 3251 003a FA00     		.short	250
 3252              		.align	1
 3253              		.type	RAMP_UP_COUNT_LIMIT.6408, %object
 3254              		.size	RAMP_UP_COUNT_LIMIT.6408, 2
 3255              	RAMP_UP_COUNT_LIMIT.6408:
 3256 003c 1900     		.short	25
 3257              		.align	1
 3258              		.type	RAMP_UP_INITIAL_DIFFERENCE.6407, %object
 3259              		.size	RAMP_UP_INITIAL_DIFFERENCE.6407, 2
 3260              	RAMP_UP_INITIAL_DIFFERENCE.6407:
 3261 003e 0F00     		.short	15
 3262              		.align	1
 3263              		.type	HOLD_NOTE_FACTOR.6416, %object
 3264              		.size	HOLD_NOTE_FACTOR.6416, 2
 3265              	HOLD_NOTE_FACTOR.6416:
 3266 0040 2300     		.short	35
 3267 0042 0000     		.align	2
 3268              		.type	COMBO_COUNT_LIMIT.6424, %object
 3269              		.size	COMBO_COUNT_LIMIT.6424, 4
 3270              	COMBO_COUNT_LIMIT.6424:
 3271 0044 FFFF0300 		.word	262143
 3272              		.align	1
 3273              		.type	HIGH_LOW_COUNT_LIMIT.6434, %object
 3274              		.size	HIGH_LOW_COUNT_LIMIT.6434, 2
 3275              	HIGH_LOW_COUNT_LIMIT.6434:
 3276 0048 FA00     		.short	250
 3277 004a 0000     		.align	2
 3278              		.type	PWM_CLOCK_FREQUENCY.6438, %object
 3279              		.size	PWM_CLOCK_FREQUENCY.6438, 4
 3280              	PWM_CLOCK_FREQUENCY.6438:
 3281 004c 40420F00 		.word	1000000
 3282              		.text
 3283              	.Letext0:
 3284              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 3285              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 3286              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3287              		.file 5 "CommonVariables.h"
 3288              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3289              		.section	.debug_info,"",%progbits
 3290              	.Ldebug_info0:
 3291 0000 360B0000 		.4byte	0xb36
 3292 0004 0400     		.2byte	0x4
 3293 0006 00000000 		.4byte	.Ldebug_abbrev0
 3294 000a 04       		.byte	0x4
 3295 000b 01       		.uleb128 0x1
 3296 000c FD000000 		.4byte	.LASF136
 3297 0010 0C       		.byte	0xc
 3298 0011 0E020000 		.4byte	.LASF137
 3299 0015 6C040000 		.4byte	.LASF138
 3300 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3301 001d 00000000 		.4byte	0
 3302 0021 00000000 		.4byte	.Ldebug_line0
 3303 0025 02       		.uleb128 0x2
 3304 0026 01       		.byte	0x1
 3305 0027 06       		.byte	0x6
 3306 0028 EC070000 		.4byte	.LASF0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 78


 3307 002c 02       		.uleb128 0x2
 3308 002d 01       		.byte	0x1
 3309 002e 08       		.byte	0x8
 3310 002f 58070000 		.4byte	.LASF1
 3311 0033 02       		.uleb128 0x2
 3312 0034 02       		.byte	0x2
 3313 0035 05       		.byte	0x5
 3314 0036 51060000 		.4byte	.LASF2
 3315 003a 02       		.uleb128 0x2
 3316 003b 02       		.byte	0x2
 3317 003c 07       		.byte	0x7
 3318 003d F8070000 		.4byte	.LASF3
 3319 0041 03       		.uleb128 0x3
 3320 0042 E9000000 		.4byte	.LASF9
 3321 0046 02       		.byte	0x2
 3322 0047 3F       		.byte	0x3f
 3323 0048 4C000000 		.4byte	0x4c
 3324 004c 02       		.uleb128 0x2
 3325 004d 04       		.byte	0x4
 3326 004e 05       		.byte	0x5
 3327 004f 5B060000 		.4byte	.LASF4
 3328 0053 02       		.uleb128 0x2
 3329 0054 04       		.byte	0x4
 3330 0055 07       		.byte	0x7
 3331 0056 E0060000 		.4byte	.LASF5
 3332 005a 02       		.uleb128 0x2
 3333 005b 08       		.byte	0x8
 3334 005c 05       		.byte	0x5
 3335 005d CB040000 		.4byte	.LASF6
 3336 0061 02       		.uleb128 0x2
 3337 0062 08       		.byte	0x8
 3338 0063 07       		.byte	0x7
 3339 0064 71020000 		.4byte	.LASF7
 3340 0068 04       		.uleb128 0x4
 3341 0069 04       		.byte	0x4
 3342 006a 05       		.byte	0x5
 3343 006b 696E7400 		.ascii	"int\000"
 3344 006f 02       		.uleb128 0x2
 3345 0070 04       		.byte	0x4
 3346 0071 07       		.byte	0x7
 3347 0072 9B000000 		.4byte	.LASF8
 3348 0076 03       		.uleb128 0x3
 3349 0077 01070000 		.4byte	.LASF10
 3350 007b 03       		.byte	0x3
 3351 007c 2C       		.byte	0x2c
 3352 007d 41000000 		.4byte	0x41
 3353 0081 05       		.uleb128 0x5
 3354 0082 63080000 		.4byte	.LASF11
 3355 0086 04       		.byte	0x4
 3356 0087 E401     		.2byte	0x1e4
 3357 0089 2C000000 		.4byte	0x2c
 3358 008d 05       		.uleb128 0x5
 3359 008e 20040000 		.4byte	.LASF12
 3360 0092 04       		.byte	0x4
 3361 0093 E501     		.2byte	0x1e5
 3362 0095 3A000000 		.4byte	0x3a
 3363 0099 05       		.uleb128 0x5
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 79


 3364 009a 71050000 		.4byte	.LASF13
 3365 009e 04       		.byte	0x4
 3366 009f E601     		.2byte	0x1e6
 3367 00a1 53000000 		.4byte	0x53
 3368 00a5 02       		.uleb128 0x2
 3369 00a6 04       		.byte	0x4
 3370 00a7 04       		.byte	0x4
 3371 00a8 42020000 		.4byte	.LASF14
 3372 00ac 02       		.uleb128 0x2
 3373 00ad 08       		.byte	0x8
 3374 00ae 04       		.byte	0x4
 3375 00af 69080000 		.4byte	.LASF15
 3376 00b3 02       		.uleb128 0x2
 3377 00b4 01       		.byte	0x1
 3378 00b5 08       		.byte	0x8
 3379 00b6 EA030000 		.4byte	.LASF16
 3380 00ba 02       		.uleb128 0x2
 3381 00bb 08       		.byte	0x8
 3382 00bc 04       		.byte	0x4
 3383 00bd BA050000 		.4byte	.LASF17
 3384 00c1 02       		.uleb128 0x2
 3385 00c2 04       		.byte	0x4
 3386 00c3 07       		.byte	0x7
 3387 00c4 D7060000 		.4byte	.LASF18
 3388 00c8 06       		.uleb128 0x6
 3389 00c9 FC010000 		.4byte	.LASF42
 3390 00cd 01       		.byte	0x1
 3391 00ce 2C000000 		.4byte	0x2c
 3392 00d2 05       		.byte	0x5
 3393 00d3 1D       		.byte	0x1d
 3394 00d4 63010000 		.4byte	0x163
 3395 00d8 07       		.uleb128 0x7
 3396 00d9 D1050000 		.4byte	.LASF19
 3397 00dd 00       		.byte	0
 3398 00de 07       		.uleb128 0x7
 3399 00df E5030000 		.4byte	.LASF20
 3400 00e3 01       		.byte	0x1
 3401 00e4 07       		.uleb128 0x7
 3402 00e5 96070000 		.4byte	.LASF21
 3403 00e9 02       		.byte	0x2
 3404 00ea 07       		.uleb128 0x7
 3405 00eb 42050000 		.4byte	.LASF22
 3406 00ef 03       		.byte	0x3
 3407 00f0 07       		.uleb128 0x7
 3408 00f1 A0070000 		.4byte	.LASF23
 3409 00f5 04       		.byte	0x4
 3410 00f6 07       		.uleb128 0x7
 3411 00f7 D1070000 		.4byte	.LASF24
 3412 00fb 05       		.byte	0x5
 3413 00fc 07       		.uleb128 0x7
 3414 00fd 84000000 		.4byte	.LASF25
 3415 0101 06       		.byte	0x6
 3416 0102 07       		.uleb128 0x7
 3417 0103 65020000 		.4byte	.LASF26
 3418 0107 07       		.byte	0x7
 3419 0108 07       		.uleb128 0x7
 3420 0109 17040000 		.4byte	.LASF27
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 80


 3421 010d 08       		.byte	0x8
 3422 010e 07       		.uleb128 0x7
 3423 010f C6050000 		.4byte	.LASF28
 3424 0113 09       		.byte	0x9
 3425 0114 07       		.uleb128 0x7
 3426 0115 3B000000 		.4byte	.LASF29
 3427 0119 0A       		.byte	0xa
 3428 011a 07       		.uleb128 0x7
 3429 011b 62030000 		.4byte	.LASF30
 3430 011f 0B       		.byte	0xb
 3431 0120 07       		.uleb128 0x7
 3432 0121 7A000000 		.4byte	.LASF31
 3433 0125 0C       		.byte	0xc
 3434 0126 07       		.uleb128 0x7
 3435 0127 D9050000 		.4byte	.LASF32
 3436 012b 0D       		.byte	0xd
 3437 012c 07       		.uleb128 0x7
 3438 012d 48020000 		.4byte	.LASF33
 3439 0131 0E       		.byte	0xe
 3440 0132 07       		.uleb128 0x7
 3441 0133 F3000000 		.4byte	.LASF34
 3442 0137 0F       		.byte	0xf
 3443 0138 07       		.uleb128 0x7
 3444 0139 AF030000 		.4byte	.LASF35
 3445 013d 10       		.byte	0x10
 3446 013e 07       		.uleb128 0x7
 3447 013f 62040000 		.4byte	.LASF36
 3448 0143 11       		.byte	0x11
 3449 0144 07       		.uleb128 0x7
 3450 0145 05020000 		.4byte	.LASF37
 3451 0149 12       		.byte	0x12
 3452 014a 07       		.uleb128 0x7
 3453 014b BA000000 		.4byte	.LASF38
 3454 014f 13       		.byte	0x13
 3455 0150 07       		.uleb128 0x7
 3456 0151 9D030000 		.4byte	.LASF39
 3457 0155 14       		.byte	0x14
 3458 0156 07       		.uleb128 0x7
 3459 0157 92020000 		.4byte	.LASF40
 3460 015b 15       		.byte	0x15
 3461 015c 07       		.uleb128 0x7
 3462 015d 88020000 		.4byte	.LASF41
 3463 0161 16       		.byte	0x16
 3464 0162 00       		.byte	0
 3465 0163 06       		.uleb128 0x6
 3466 0164 52000000 		.4byte	.LASF43
 3467 0168 01       		.byte	0x1
 3468 0169 2C000000 		.4byte	0x2c
 3469 016d 01       		.byte	0x1
 3470 016e 1F       		.byte	0x1f
 3471 016f 86010000 		.4byte	0x186
 3472 0173 07       		.uleb128 0x7
 3473 0174 B0060000 		.4byte	.LASF44
 3474 0178 00       		.byte	0
 3475 0179 07       		.uleb128 0x7
 3476 017a 89050000 		.4byte	.LASF45
 3477 017e 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 81


 3478 017f 07       		.uleb128 0x7
 3479 0180 38080000 		.4byte	.LASF46
 3480 0184 02       		.byte	0x2
 3481 0185 00       		.byte	0
 3482 0186 08       		.uleb128 0x8
 3483 0187 08       		.byte	0x8
 3484 0188 01       		.byte	0x1
 3485 0189 27       		.byte	0x27
 3486 018a CB010000 		.4byte	0x1cb
 3487 018e 09       		.uleb128 0x9
 3488 018f D5030000 		.4byte	.LASF47
 3489 0193 01       		.byte	0x1
 3490 0194 29       		.byte	0x29
 3491 0195 8D000000 		.4byte	0x8d
 3492 0199 00       		.byte	0
 3493 019a 09       		.uleb128 0x9
 3494 019b 9C010000 		.4byte	.LASF48
 3495 019f 01       		.byte	0x1
 3496 01a0 2A       		.byte	0x2a
 3497 01a1 8D000000 		.4byte	0x8d
 3498 01a5 02       		.byte	0x2
 3499 01a6 09       		.uleb128 0x9
 3500 01a7 B8030000 		.4byte	.LASF49
 3501 01ab 01       		.byte	0x1
 3502 01ac 2B       		.byte	0x2b
 3503 01ad 8D000000 		.4byte	0x8d
 3504 01b1 04       		.byte	0x4
 3505 01b2 09       		.uleb128 0x9
 3506 01b3 AD010000 		.4byte	.LASF50
 3507 01b7 01       		.byte	0x1
 3508 01b8 2C       		.byte	0x2c
 3509 01b9 81000000 		.4byte	0x81
 3510 01bd 06       		.byte	0x6
 3511 01be 09       		.uleb128 0x9
 3512 01bf 46000000 		.4byte	.LASF51
 3513 01c3 01       		.byte	0x1
 3514 01c4 2D       		.byte	0x2d
 3515 01c5 81000000 		.4byte	0x81
 3516 01c9 07       		.byte	0x7
 3517 01ca 00       		.byte	0
 3518 01cb 03       		.uleb128 0x3
 3519 01cc 58080000 		.4byte	.LASF52
 3520 01d0 01       		.byte	0x1
 3521 01d1 2E       		.byte	0x2e
 3522 01d2 86010000 		.4byte	0x186
 3523 01d6 08       		.uleb128 0x8
 3524 01d7 18       		.byte	0x18
 3525 01d8 01       		.byte	0x1
 3526 01d9 40       		.byte	0x40
 3527 01da 7B020000 		.4byte	0x27b
 3528 01de 09       		.uleb128 0x9
 3529 01df A8000000 		.4byte	.LASF53
 3530 01e3 01       		.byte	0x1
 3531 01e4 42       		.byte	0x42
 3532 01e5 C8000000 		.4byte	0xc8
 3533 01e9 00       		.byte	0
 3534 01ea 09       		.uleb128 0x9
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 82


 3535 01eb ED010000 		.4byte	.LASF54
 3536 01ef 01       		.byte	0x1
 3537 01f0 43       		.byte	0x43
 3538 01f1 8D000000 		.4byte	0x8d
 3539 01f5 02       		.byte	0x2
 3540 01f6 09       		.uleb128 0x9
 3541 01f7 45070000 		.4byte	.LASF55
 3542 01fb 01       		.byte	0x1
 3543 01fc 44       		.byte	0x44
 3544 01fd 8D000000 		.4byte	0x8d
 3545 0201 04       		.byte	0x4
 3546 0202 09       		.uleb128 0x9
 3547 0203 B5040000 		.4byte	.LASF56
 3548 0207 01       		.byte	0x1
 3549 0208 45       		.byte	0x45
 3550 0209 8D000000 		.4byte	0x8d
 3551 020d 06       		.byte	0x6
 3552 020e 09       		.uleb128 0x9
 3553 020f 29030000 		.4byte	.LASF57
 3554 0213 01       		.byte	0x1
 3555 0214 46       		.byte	0x46
 3556 0215 8D000000 		.4byte	0x8d
 3557 0219 08       		.byte	0x8
 3558 021a 09       		.uleb128 0x9
 3559 021b D9040000 		.4byte	.LASF58
 3560 021f 01       		.byte	0x1
 3561 0220 47       		.byte	0x47
 3562 0221 99000000 		.4byte	0x99
 3563 0225 0C       		.byte	0xc
 3564 0226 09       		.uleb128 0x9
 3565 0227 8B010000 		.4byte	.LASF59
 3566 022b 01       		.byte	0x1
 3567 022c 48       		.byte	0x48
 3568 022d 81000000 		.4byte	0x81
 3569 0231 10       		.byte	0x10
 3570 0232 09       		.uleb128 0x9
 3571 0233 97060000 		.4byte	.LASF60
 3572 0237 01       		.byte	0x1
 3573 0238 49       		.byte	0x49
 3574 0239 81000000 		.4byte	0x81
 3575 023d 11       		.byte	0x11
 3576 023e 09       		.uleb128 0x9
 3577 023f F5040000 		.4byte	.LASF61
 3578 0243 01       		.byte	0x1
 3579 0244 4A       		.byte	0x4a
 3580 0245 81000000 		.4byte	0x81
 3581 0249 12       		.byte	0x12
 3582 024a 09       		.uleb128 0x9
 3583 024b B9010000 		.4byte	.LASF62
 3584 024f 01       		.byte	0x1
 3585 0250 4B       		.byte	0x4b
 3586 0251 81000000 		.4byte	0x81
 3587 0255 13       		.byte	0x13
 3588 0256 09       		.uleb128 0x9
 3589 0257 1C050000 		.4byte	.LASF63
 3590 025b 01       		.byte	0x1
 3591 025c 4C       		.byte	0x4c
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 83


 3592 025d 81000000 		.4byte	0x81
 3593 0261 14       		.byte	0x14
 3594 0262 09       		.uleb128 0x9
 3595 0263 F2060000 		.4byte	.LASF64
 3596 0267 01       		.byte	0x1
 3597 0268 4D       		.byte	0x4d
 3598 0269 81000000 		.4byte	0x81
 3599 026d 15       		.byte	0x15
 3600 026e 09       		.uleb128 0x9
 3601 026f 28020000 		.4byte	.LASF65
 3602 0273 01       		.byte	0x1
 3603 0274 4E       		.byte	0x4e
 3604 0275 81000000 		.4byte	0x81
 3605 0279 16       		.byte	0x16
 3606 027a 00       		.byte	0
 3607 027b 03       		.uleb128 0x3
 3608 027c BB020000 		.4byte	.LASF66
 3609 0280 01       		.byte	0x1
 3610 0281 4F       		.byte	0x4f
 3611 0282 D6010000 		.4byte	0x1d6
 3612 0286 0A       		.uleb128 0xa
 3613 0287 8F000000 		.4byte	.LASF79
 3614 028b 01       		.byte	0x1
 3615 028c 7C       		.byte	0x7c
 3616 028d 81000000 		.4byte	0x81
 3617 0291 00000000 		.4byte	.LFB63
 3618 0295 94020000 		.4byte	.LFE63-.LFB63
 3619 0299 01       		.uleb128 0x1
 3620 029a 9C       		.byte	0x9c
 3621 029b FA030000 		.4byte	0x3fa
 3622 029f 0B       		.uleb128 0xb
 3623 02a0 02050000 		.4byte	.LASF67
 3624 02a4 01       		.byte	0x1
 3625 02a5 7C       		.byte	0x7c
 3626 02a6 81000000 		.4byte	0x81
 3627 02aa 02       		.uleb128 0x2
 3628 02ab 91       		.byte	0x91
 3629 02ac 6F       		.sleb128 -17
 3630 02ad 0B       		.uleb128 0xb
 3631 02ae AD080000 		.4byte	.LASF68
 3632 02b2 01       		.byte	0x1
 3633 02b3 7C       		.byte	0x7c
 3634 02b4 C8000000 		.4byte	0xc8
 3635 02b8 02       		.uleb128 0x2
 3636 02b9 91       		.byte	0x91
 3637 02ba 6E       		.sleb128 -18
 3638 02bb 0B       		.uleb128 0xb
 3639 02bc 31050000 		.4byte	.LASF69
 3640 02c0 01       		.byte	0x1
 3641 02c1 7C       		.byte	0x7c
 3642 02c2 81000000 		.4byte	0x81
 3643 02c6 02       		.uleb128 0x2
 3644 02c7 91       		.byte	0x91
 3645 02c8 6D       		.sleb128 -19
 3646 02c9 0B       		.uleb128 0xb
 3647 02ca 9D080000 		.4byte	.LASF70
 3648 02ce 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 84


 3649 02cf 7C       		.byte	0x7c
 3650 02d0 81000000 		.4byte	0x81
 3651 02d4 02       		.uleb128 0x2
 3652 02d5 91       		.byte	0x91
 3653 02d6 6C       		.sleb128 -20
 3654 02d7 0C       		.uleb128 0xc
 3655 02d8 A4000000 		.4byte	.LBB2
 3656 02dc CE000000 		.4byte	.LBE2-.LBB2
 3657 02e0 65030000 		.4byte	0x365
 3658 02e4 0D       		.uleb128 0xd
 3659 02e5 7E030000 		.4byte	.LASF71
 3660 02e9 01       		.byte	0x1
 3661 02ea 8E       		.byte	0x8e
 3662 02eb 68000000 		.4byte	0x68
 3663 02ef F5020000 		.4byte	0x2f5
 3664 02f3 0E       		.uleb128 0xe
 3665 02f4 00       		.byte	0
 3666 02f5 0D       		.uleb128 0xd
 3667 02f6 78050000 		.4byte	.LASF72
 3668 02fa 01       		.byte	0x1
 3669 02fb A9       		.byte	0xa9
 3670 02fc 68000000 		.4byte	0x68
 3671 0300 06030000 		.4byte	0x306
 3672 0304 0E       		.uleb128 0xe
 3673 0305 00       		.byte	0
 3674 0306 0D       		.uleb128 0xd
 3675 0307 DD000000 		.4byte	.LASF73
 3676 030b 01       		.byte	0x1
 3677 030c AA       		.byte	0xaa
 3678 030d 68000000 		.4byte	0x68
 3679 0311 17030000 		.4byte	0x317
 3680 0315 0E       		.uleb128 0xe
 3681 0316 00       		.byte	0
 3682 0317 0C       		.uleb128 0xc
 3683 0318 EC000000 		.4byte	.LBB3
 3684 031c 26000000 		.4byte	.LBE3-.LBB3
 3685 0320 32030000 		.4byte	0x332
 3686 0324 0F       		.uleb128 0xf
 3687 0325 A5020000 		.4byte	.LASF74
 3688 0329 01       		.byte	0x1
 3689 032a 96       		.byte	0x96
 3690 032b 68000000 		.4byte	0x68
 3691 032f 0E       		.uleb128 0xe
 3692 0330 00       		.byte	0
 3693 0331 00       		.byte	0
 3694 0332 0C       		.uleb128 0xc
 3695 0333 3C010000 		.4byte	.LBB4
 3696 0337 0C000000 		.4byte	.LBE4-.LBB4
 3697 033b 4D030000 		.4byte	0x34d
 3698 033f 0F       		.uleb128 0xf
 3699 0340 A5020000 		.4byte	.LASF74
 3700 0344 01       		.byte	0x1
 3701 0345 96       		.byte	0x96
 3702 0346 68000000 		.4byte	0x68
 3703 034a 0E       		.uleb128 0xe
 3704 034b 00       		.byte	0
 3705 034c 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 85


 3706 034d 10       		.uleb128 0x10
 3707 034e 4A010000 		.4byte	.LBB5
 3708 0352 1E000000 		.4byte	.LBE5-.LBB5
 3709 0356 0F       		.uleb128 0xf
 3710 0357 A5020000 		.4byte	.LASF74
 3711 035b 01       		.byte	0x1
 3712 035c 96       		.byte	0x96
 3713 035d 68000000 		.4byte	0x68
 3714 0361 0E       		.uleb128 0xe
 3715 0362 00       		.byte	0
 3716 0363 00       		.byte	0
 3717 0364 00       		.byte	0
 3718 0365 0C       		.uleb128 0xc
 3719 0366 8C010000 		.4byte	.LBB6
 3720 036a C4000000 		.4byte	.LBE6-.LBB6
 3721 036e D1030000 		.4byte	0x3d1
 3722 0372 0D       		.uleb128 0xd
 3723 0373 28080000 		.4byte	.LASF75
 3724 0377 01       		.byte	0x1
 3725 0378 B2       		.byte	0xb2
 3726 0379 68000000 		.4byte	0x68
 3727 037d 83030000 		.4byte	0x383
 3728 0381 0E       		.uleb128 0xe
 3729 0382 00       		.byte	0
 3730 0383 0C       		.uleb128 0xc
 3731 0384 D4010000 		.4byte	.LBB7
 3732 0388 26000000 		.4byte	.LBE7-.LBB7
 3733 038c 9E030000 		.4byte	0x39e
 3734 0390 0F       		.uleb128 0xf
 3735 0391 64060000 		.4byte	.LASF76
 3736 0395 01       		.byte	0x1
 3737 0396 BA       		.byte	0xba
 3738 0397 68000000 		.4byte	0x68
 3739 039b 0E       		.uleb128 0xe
 3740 039c 00       		.byte	0
 3741 039d 00       		.byte	0
 3742 039e 0C       		.uleb128 0xc
 3743 039f 24020000 		.4byte	.LBB8
 3744 03a3 0C000000 		.4byte	.LBE8-.LBB8
 3745 03a7 B9030000 		.4byte	0x3b9
 3746 03ab 0F       		.uleb128 0xf
 3747 03ac 64060000 		.4byte	.LASF76
 3748 03b0 01       		.byte	0x1
 3749 03b1 BA       		.byte	0xba
 3750 03b2 68000000 		.4byte	0x68
 3751 03b6 0E       		.uleb128 0xe
 3752 03b7 00       		.byte	0
 3753 03b8 00       		.byte	0
 3754 03b9 10       		.uleb128 0x10
 3755 03ba 32020000 		.4byte	.LBB9
 3756 03be 1E000000 		.4byte	.LBE9-.LBB9
 3757 03c2 0F       		.uleb128 0xf
 3758 03c3 64060000 		.4byte	.LASF76
 3759 03c7 01       		.byte	0x1
 3760 03c8 BA       		.byte	0xba
 3761 03c9 68000000 		.4byte	0x68
 3762 03cd 0E       		.uleb128 0xe
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 86


 3763 03ce 00       		.byte	0
 3764 03cf 00       		.byte	0
 3765 03d0 00       		.byte	0
 3766 03d1 10       		.uleb128 0x10
 3767 03d2 60020000 		.4byte	.LBB10
 3768 03d6 0A000000 		.4byte	.LBE10-.LBB10
 3769 03da 0D       		.uleb128 0xd
 3770 03db 00000000 		.4byte	.LASF77
 3771 03df 01       		.byte	0x1
 3772 03e0 D1       		.byte	0xd1
 3773 03e1 68000000 		.4byte	0x68
 3774 03e5 EB030000 		.4byte	0x3eb
 3775 03e9 0E       		.uleb128 0xe
 3776 03ea 00       		.byte	0
 3777 03eb 0F       		.uleb128 0xf
 3778 03ec 00060000 		.4byte	.LASF78
 3779 03f0 01       		.byte	0x1
 3780 03f1 D2       		.byte	0xd2
 3781 03f2 68000000 		.4byte	0x68
 3782 03f6 0E       		.uleb128 0xe
 3783 03f7 00       		.byte	0
 3784 03f8 00       		.byte	0
 3785 03f9 00       		.byte	0
 3786 03fa 0A       		.uleb128 0xa
 3787 03fb 36020000 		.4byte	.LASF80
 3788 03ff 01       		.byte	0x1
 3789 0400 EC       		.byte	0xec
 3790 0401 81000000 		.4byte	0x81
 3791 0405 00000000 		.4byte	.LFB64
 3792 0409 A8000000 		.4byte	.LFE64-.LFB64
 3793 040d 01       		.uleb128 0x1
 3794 040e 9C       		.byte	0x9c
 3795 040f 98040000 		.4byte	0x498
 3796 0413 0B       		.uleb128 0xb
 3797 0414 02050000 		.4byte	.LASF67
 3798 0418 01       		.byte	0x1
 3799 0419 EC       		.byte	0xec
 3800 041a 81000000 		.4byte	0x81
 3801 041e 02       		.uleb128 0x2
 3802 041f 91       		.byte	0x91
 3803 0420 77       		.sleb128 -9
 3804 0421 0C       		.uleb128 0xc
 3805 0422 20000000 		.4byte	.LBB11
 3806 0426 0E000000 		.4byte	.LBE11-.LBB11
 3807 042a 5E040000 		.4byte	0x45e
 3808 042e 0D       		.uleb128 0xd
 3809 042f 04040000 		.4byte	.LASF81
 3810 0433 01       		.byte	0x1
 3811 0434 F3       		.byte	0xf3
 3812 0435 68000000 		.4byte	0x68
 3813 0439 3F040000 		.4byte	0x43f
 3814 043d 0E       		.uleb128 0xe
 3815 043e 00       		.byte	0
 3816 043f 0D       		.uleb128 0xd
 3817 0440 94050000 		.4byte	.LASF82
 3818 0444 01       		.byte	0x1
 3819 0445 F4       		.byte	0xf4
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 87


 3820 0446 68000000 		.4byte	0x68
 3821 044a 50040000 		.4byte	0x450
 3822 044e 0E       		.uleb128 0xe
 3823 044f 00       		.byte	0
 3824 0450 0F       		.uleb128 0xf
 3825 0451 0C060000 		.4byte	.LASF83
 3826 0455 01       		.byte	0x1
 3827 0456 F5       		.byte	0xf5
 3828 0457 68000000 		.4byte	0x68
 3829 045b 0E       		.uleb128 0xe
 3830 045c 00       		.byte	0
 3831 045d 00       		.byte	0
 3832 045e 10       		.uleb128 0x10
 3833 045f 30000000 		.4byte	.LBB12
 3834 0463 0E000000 		.4byte	.LBE12-.LBB12
 3835 0467 0D       		.uleb128 0xd
 3836 0468 4F040000 		.4byte	.LASF84
 3837 046c 01       		.byte	0x1
 3838 046d F9       		.byte	0xf9
 3839 046e 68000000 		.4byte	0x68
 3840 0472 78040000 		.4byte	0x478
 3841 0476 0E       		.uleb128 0xe
 3842 0477 00       		.byte	0
 3843 0478 0D       		.uleb128 0xd
 3844 0479 89080000 		.4byte	.LASF85
 3845 047d 01       		.byte	0x1
 3846 047e FA       		.byte	0xfa
 3847 047f 68000000 		.4byte	0x68
 3848 0483 89040000 		.4byte	0x489
 3849 0487 0E       		.uleb128 0xe
 3850 0488 00       		.byte	0
 3851 0489 0F       		.uleb128 0xf
 3852 048a 6B000000 		.4byte	.LASF86
 3853 048e 01       		.byte	0x1
 3854 048f FB       		.byte	0xfb
 3855 0490 68000000 		.4byte	0x68
 3856 0494 0E       		.uleb128 0xe
 3857 0495 00       		.byte	0
 3858 0496 00       		.byte	0
 3859 0497 00       		.byte	0
 3860 0498 11       		.uleb128 0x11
 3861 0499 FE020000 		.4byte	.LASF87
 3862 049d 01       		.byte	0x1
 3863 049e 1601     		.2byte	0x116
 3864 04a0 81000000 		.4byte	0x81
 3865 04a4 00000000 		.4byte	.LFB65
 3866 04a8 D0010000 		.4byte	.LFE65-.LFB65
 3867 04ac 01       		.uleb128 0x1
 3868 04ad 9C       		.byte	0x9c
 3869 04ae F6040000 		.4byte	0x4f6
 3870 04b2 12       		.uleb128 0x12
 3871 04b3 02050000 		.4byte	.LASF67
 3872 04b7 01       		.byte	0x1
 3873 04b8 1601     		.2byte	0x116
 3874 04ba 81000000 		.4byte	0x81
 3875 04be 02       		.uleb128 0x2
 3876 04bf 91       		.byte	0x91
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 88


 3877 04c0 77       		.sleb128 -9
 3878 04c1 0C       		.uleb128 0xc
 3879 04c2 10000000 		.4byte	.LBB13
 3880 04c6 04000000 		.4byte	.LBE13-.LBB13
 3881 04ca DD040000 		.4byte	0x4dd
 3882 04ce 13       		.uleb128 0x13
 3883 04cf 0B080000 		.4byte	.LASF88
 3884 04d3 01       		.byte	0x1
 3885 04d4 1901     		.2byte	0x119
 3886 04d6 68000000 		.4byte	0x68
 3887 04da 0E       		.uleb128 0xe
 3888 04db 00       		.byte	0
 3889 04dc 00       		.byte	0
 3890 04dd 10       		.uleb128 0x10
 3891 04de 16000000 		.4byte	.LBB14
 3892 04e2 04000000 		.4byte	.LBE14-.LBB14
 3893 04e6 13       		.uleb128 0x13
 3894 04e7 34060000 		.4byte	.LASF89
 3895 04eb 01       		.byte	0x1
 3896 04ec 1B01     		.2byte	0x11b
 3897 04ee 68000000 		.4byte	0x68
 3898 04f2 0E       		.uleb128 0xe
 3899 04f3 00       		.byte	0
 3900 04f4 00       		.byte	0
 3901 04f5 00       		.byte	0
 3902 04f6 14       		.uleb128 0x14
 3903 04f7 B5080000 		.4byte	.LASF98
 3904 04fb 01       		.byte	0x1
 3905 04fc 5C01     		.2byte	0x15c
 3906 04fe 00000000 		.4byte	.LFB66
 3907 0502 08010000 		.4byte	.LFE66-.LFB66
 3908 0506 01       		.uleb128 0x1
 3909 0507 9C       		.byte	0x9c
 3910 0508 D4050000 		.4byte	0x5d4
 3911 050c 15       		.uleb128 0x15
 3912 050d E5050000 		.4byte	.LASF90
 3913 0511 01       		.byte	0x1
 3914 0512 5E01     		.2byte	0x15e
 3915 0514 D4050000 		.4byte	0x5d4
 3916 0518 05       		.uleb128 0x5
 3917 0519 03       		.byte	0x3
 3918 051a 37000000 		.4byte	HORN_FREQUENCY_COUNT_LIMIT.6340
 3919 051e 15       		.uleb128 0x15
 3920 051f 27040000 		.4byte	.LASF91
 3921 0523 01       		.byte	0x1
 3922 0524 5F01     		.2byte	0x15f
 3923 0526 81000000 		.4byte	0x81
 3924 052a 05       		.uleb128 0x5
 3925 052b 03       		.byte	0x3
 3926 052c 02000000 		.4byte	hornFrequencyCount.6341
 3927 0530 15       		.uleb128 0x15
 3928 0531 CA060000 		.4byte	.LASF92
 3929 0535 01       		.byte	0x1
 3930 0536 6001     		.2byte	0x160
 3931 0538 8D000000 		.4byte	0x8d
 3932 053c 02       		.uleb128 0x2
 3933 053d 91       		.byte	0x91
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 89


 3934 053e 76       		.sleb128 -10
 3935 053f 15       		.uleb128 0x15
 3936 0540 16020000 		.4byte	.LASF93
 3937 0544 01       		.byte	0x1
 3938 0545 6201     		.2byte	0x162
 3939 0547 D4050000 		.4byte	0x5d4
 3940 054b 05       		.uleb128 0x5
 3941 054c 03       		.byte	0x3
 3942 054d 36000000 		.4byte	HORN_WIGGLE_WIDTH.6343
 3943 0551 15       		.uleb128 0x15
 3944 0552 8B010000 		.4byte	.LASF59
 3945 0556 01       		.byte	0x1
 3946 0557 6301     		.2byte	0x163
 3947 0559 81000000 		.4byte	0x81
 3948 055d 05       		.uleb128 0x5
 3949 055e 03       		.byte	0x3
 3950 055f 90000000 		.4byte	bFrequencyChange.6344
 3951 0563 15       		.uleb128 0x15
 3952 0564 87060000 		.4byte	.LASF94
 3953 0568 01       		.byte	0x1
 3954 0569 6401     		.2byte	0x164
 3955 056b 81000000 		.4byte	0x81
 3956 056f 05       		.uleb128 0x5
 3957 0570 03       		.byte	0x3
 3958 0571 03000000 		.4byte	hornWiggleCount.6345
 3959 0575 16       		.uleb128 0x16
 3960 0576 49030000 		.4byte	.LASF95
 3961 057a 01       		.byte	0x1
 3962 057b 6601     		.2byte	0x166
 3963 057d 68000000 		.4byte	0x68
 3964 0581 87050000 		.4byte	0x587
 3965 0585 0E       		.uleb128 0xe
 3966 0586 00       		.byte	0
 3967 0587 16       		.uleb128 0x16
 3968 0588 EC020000 		.4byte	.LASF96
 3969 058c 01       		.byte	0x1
 3970 058d 8601     		.2byte	0x186
 3971 058f 68000000 		.4byte	0x68
 3972 0593 99050000 		.4byte	0x599
 3973 0597 0E       		.uleb128 0xe
 3974 0598 00       		.byte	0
 3975 0599 0D       		.uleb128 0xd
 3976 059a 4F040000 		.4byte	.LASF84
 3977 059e 01       		.byte	0x1
 3978 059f F9       		.byte	0xf9
 3979 05a0 68000000 		.4byte	0x68
 3980 05a4 AA050000 		.4byte	0x5aa
 3981 05a8 0E       		.uleb128 0xe
 3982 05a9 00       		.byte	0
 3983 05aa 10       		.uleb128 0x10
 3984 05ab D0000000 		.4byte	.LBB15
 3985 05af 14000000 		.4byte	.LBE15-.LBB15
 3986 05b3 16       		.uleb128 0x16
 3987 05b4 19070000 		.4byte	.LASF97
 3988 05b8 01       		.byte	0x1
 3989 05b9 8B01     		.2byte	0x18b
 3990 05bb 68000000 		.4byte	0x68
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 90


 3991 05bf C5050000 		.4byte	0x5c5
 3992 05c3 0E       		.uleb128 0xe
 3993 05c4 00       		.byte	0
 3994 05c5 0F       		.uleb128 0xf
 3995 05c6 04040000 		.4byte	.LASF81
 3996 05ca 01       		.byte	0x1
 3997 05cb F3       		.byte	0xf3
 3998 05cc 68000000 		.4byte	0x68
 3999 05d0 0E       		.uleb128 0xe
 4000 05d1 00       		.byte	0
 4001 05d2 00       		.byte	0
 4002 05d3 00       		.byte	0
 4003 05d4 17       		.uleb128 0x17
 4004 05d5 81000000 		.4byte	0x81
 4005 05d9 14       		.uleb128 0x14
 4006 05da 70080000 		.4byte	.LASF99
 4007 05de 01       		.byte	0x1
 4008 05df 9F01     		.2byte	0x19f
 4009 05e1 00000000 		.4byte	.LFB67
 4010 05e5 F8000000 		.4byte	.LFE67-.LFB67
 4011 05e9 01       		.uleb128 0x1
 4012 05ea 9C       		.byte	0x9c
 4013 05eb 94060000 		.4byte	0x694
 4014 05ef 15       		.uleb128 0x15
 4015 05f0 E5050000 		.4byte	.LASF90
 4016 05f4 01       		.byte	0x1
 4017 05f5 A101     		.2byte	0x1a1
 4018 05f7 D4050000 		.4byte	0x5d4
 4019 05fb 05       		.uleb128 0x5
 4020 05fc 03       		.byte	0x3
 4021 05fd 39000000 		.4byte	HORN_FREQUENCY_COUNT_LIMIT.6360
 4022 0601 15       		.uleb128 0x15
 4023 0602 27040000 		.4byte	.LASF91
 4024 0606 01       		.byte	0x1
 4025 0607 A201     		.2byte	0x1a2
 4026 0609 81000000 		.4byte	0x81
 4027 060d 05       		.uleb128 0x5
 4028 060e 03       		.byte	0x3
 4029 060f 04000000 		.4byte	hornFrequencyCount.6361
 4030 0613 15       		.uleb128 0x15
 4031 0614 CA060000 		.4byte	.LASF92
 4032 0618 01       		.byte	0x1
 4033 0619 A301     		.2byte	0x1a3
 4034 061b 8D000000 		.4byte	0x8d
 4035 061f 02       		.uleb128 0x2
 4036 0620 91       		.byte	0x91
 4037 0621 76       		.sleb128 -10
 4038 0622 15       		.uleb128 0x15
 4039 0623 16020000 		.4byte	.LASF93
 4040 0627 01       		.byte	0x1
 4041 0628 A501     		.2byte	0x1a5
 4042 062a D4050000 		.4byte	0x5d4
 4043 062e 05       		.uleb128 0x5
 4044 062f 03       		.byte	0x3
 4045 0630 38000000 		.4byte	HORN_WIGGLE_WIDTH.6363
 4046 0634 15       		.uleb128 0x15
 4047 0635 8B010000 		.4byte	.LASF59
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 91


 4048 0639 01       		.byte	0x1
 4049 063a A601     		.2byte	0x1a6
 4050 063c 81000000 		.4byte	0x81
 4051 0640 05       		.uleb128 0x5
 4052 0641 03       		.byte	0x3
 4053 0642 91000000 		.4byte	bFrequencyChange.6364
 4054 0646 15       		.uleb128 0x15
 4055 0647 87060000 		.4byte	.LASF94
 4056 064b 01       		.byte	0x1
 4057 064c A701     		.2byte	0x1a7
 4058 064e 81000000 		.4byte	0x81
 4059 0652 05       		.uleb128 0x5
 4060 0653 03       		.byte	0x3
 4061 0654 05000000 		.4byte	hornWiggleCount.6365
 4062 0658 16       		.uleb128 0x16
 4063 0659 1B060000 		.4byte	.LASF100
 4064 065d 01       		.byte	0x1
 4065 065e A901     		.2byte	0x1a9
 4066 0660 68000000 		.4byte	0x68
 4067 0664 6A060000 		.4byte	0x66a
 4068 0668 0E       		.uleb128 0xe
 4069 0669 00       		.byte	0
 4070 066a 10       		.uleb128 0x10
 4071 066b 16000000 		.4byte	.LBB16
 4072 066f BC000000 		.4byte	.LBE16-.LBB16
 4073 0673 16       		.uleb128 0x16
 4074 0674 19070000 		.4byte	.LASF97
 4075 0678 01       		.byte	0x1
 4076 0679 8B01     		.2byte	0x18b
 4077 067b 68000000 		.4byte	0x68
 4078 067f 85060000 		.4byte	0x685
 4079 0683 0E       		.uleb128 0xe
 4080 0684 00       		.byte	0
 4081 0685 0F       		.uleb128 0xf
 4082 0686 04040000 		.4byte	.LASF81
 4083 068a 01       		.byte	0x1
 4084 068b F3       		.byte	0xf3
 4085 068c 68000000 		.4byte	0x68
 4086 0690 0E       		.uleb128 0xe
 4087 0691 00       		.byte	0
 4088 0692 00       		.byte	0
 4089 0693 00       		.byte	0
 4090 0694 18       		.uleb128 0x18
 4091 0695 83070000 		.4byte	.LASF101
 4092 0699 01       		.byte	0x1
 4093 069a DF01     		.2byte	0x1df
 4094 069c 81000000 		.4byte	0x81
 4095 06a0 00000000 		.4byte	.LFB68
 4096 06a4 3C000000 		.4byte	.LFE68-.LFB68
 4097 06a8 01       		.uleb128 0x1
 4098 06a9 9C       		.byte	0x9c
 4099 06aa BE060000 		.4byte	0x6be
 4100 06ae 12       		.uleb128 0x12
 4101 06af 02050000 		.4byte	.LASF67
 4102 06b3 01       		.byte	0x1
 4103 06b4 DF01     		.2byte	0x1df
 4104 06b6 81000000 		.4byte	0x81
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 92


 4105 06ba 02       		.uleb128 0x2
 4106 06bb 91       		.byte	0x91
 4107 06bc 77       		.sleb128 -9
 4108 06bd 00       		.byte	0
 4109 06be 19       		.uleb128 0x19
 4110 06bf C0030000 		.4byte	.LASF139
 4111 06c3 01       		.byte	0x1
 4112 06c4 F501     		.2byte	0x1f5
 4113 06c6 00000000 		.4byte	.LFB69
 4114 06ca 20000000 		.4byte	.LFE69-.LFB69
 4115 06ce 01       		.uleb128 0x1
 4116 06cf 9C       		.byte	0x9c
 4117 06d0 1A       		.uleb128 0x1a
 4118 06d1 15030000 		.4byte	.LASF104
 4119 06d5 01       		.byte	0x1
 4120 06d6 0B02     		.2byte	0x20b
 4121 06d8 81000000 		.4byte	0x81
 4122 06dc 00000000 		.4byte	.LFB70
 4123 06e0 98000000 		.4byte	.LFE70-.LFB70
 4124 06e4 01       		.uleb128 0x1
 4125 06e5 9C       		.byte	0x9c
 4126 06e6 18070000 		.4byte	0x718
 4127 06ea 12       		.uleb128 0x12
 4128 06eb 31000000 		.4byte	.LASF102
 4129 06ef 01       		.byte	0x1
 4130 06f0 0B02     		.2byte	0x20b
 4131 06f2 C8000000 		.4byte	0xc8
 4132 06f6 02       		.uleb128 0x2
 4133 06f7 91       		.byte	0x91
 4134 06f8 77       		.sleb128 -9
 4135 06f9 12       		.uleb128 0x12
 4136 06fa 66070000 		.4byte	.LASF103
 4137 06fe 01       		.byte	0x1
 4138 06ff 0B02     		.2byte	0x20b
 4139 0701 C8000000 		.4byte	0xc8
 4140 0705 02       		.uleb128 0x2
 4141 0706 91       		.byte	0x91
 4142 0707 76       		.sleb128 -10
 4143 0708 12       		.uleb128 0x12
 4144 0709 9D080000 		.4byte	.LASF70
 4145 070d 01       		.byte	0x1
 4146 070e 0B02     		.2byte	0x20b
 4147 0710 81000000 		.4byte	0x81
 4148 0714 02       		.uleb128 0x2
 4149 0715 91       		.byte	0x91
 4150 0716 75       		.sleb128 -11
 4151 0717 00       		.byte	0
 4152 0718 1B       		.uleb128 0x1b
 4153 0719 24000000 		.4byte	.LASF105
 4154 071d 01       		.byte	0x1
 4155 071e 3602     		.2byte	0x236
 4156 0720 81000000 		.4byte	0x81
 4157 0724 00000000 		.4byte	.LFB71
 4158 0728 64000000 		.4byte	.LFE71-.LFB71
 4159 072c 01       		.uleb128 0x1
 4160 072d 9C       		.byte	0x9c
 4161 072e 42070000 		.4byte	0x742
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 93


 4162 0732 12       		.uleb128 0x12
 4163 0733 CB020000 		.4byte	.LASF106
 4164 0737 01       		.byte	0x1
 4165 0738 3602     		.2byte	0x236
 4166 073a 42070000 		.4byte	0x742
 4167 073e 02       		.uleb128 0x2
 4168 073f 91       		.byte	0x91
 4169 0740 74       		.sleb128 -12
 4170 0741 00       		.byte	0
 4171 0742 1C       		.uleb128 0x1c
 4172 0743 04       		.byte	0x4
 4173 0744 7B020000 		.4byte	0x27b
 4174 0748 1B       		.uleb128 0x1b
 4175 0749 D6070000 		.4byte	.LASF107
 4176 074d 01       		.byte	0x1
 4177 074e 5402     		.2byte	0x254
 4178 0750 81000000 		.4byte	0x81
 4179 0754 00000000 		.4byte	.LFB72
 4180 0758 28010000 		.4byte	.LFE72-.LFB72
 4181 075c 01       		.uleb128 0x1
 4182 075d 9C       		.byte	0x9c
 4183 075e 9F070000 		.4byte	0x79f
 4184 0762 12       		.uleb128 0x12
 4185 0763 CB020000 		.4byte	.LASF106
 4186 0767 01       		.byte	0x1
 4187 0768 5402     		.2byte	0x254
 4188 076a 42070000 		.4byte	0x742
 4189 076e 02       		.uleb128 0x2
 4190 076f 91       		.byte	0x91
 4191 0770 6C       		.sleb128 -20
 4192 0771 12       		.uleb128 0x12
 4193 0772 2B070000 		.4byte	.LASF108
 4194 0776 01       		.byte	0x1
 4195 0777 5402     		.2byte	0x254
 4196 0779 9F070000 		.4byte	0x79f
 4197 077d 02       		.uleb128 0x2
 4198 077e 91       		.byte	0x91
 4199 077f 68       		.sleb128 -24
 4200 0780 15       		.uleb128 0x15
 4201 0781 C1070000 		.4byte	.LASF109
 4202 0785 01       		.byte	0x1
 4203 0786 5902     		.2byte	0x259
 4204 0788 8D000000 		.4byte	0x8d
 4205 078c 02       		.uleb128 0x2
 4206 078d 91       		.byte	0x91
 4207 078e 76       		.sleb128 -10
 4208 078f 15       		.uleb128 0x15
 4209 0790 8E030000 		.4byte	.LASF110
 4210 0794 01       		.byte	0x1
 4211 0795 5A02     		.2byte	0x25a
 4212 0797 8D000000 		.4byte	0x8d
 4213 079b 02       		.uleb128 0x2
 4214 079c 91       		.byte	0x91
 4215 079d 74       		.sleb128 -12
 4216 079e 00       		.byte	0
 4217 079f 1C       		.uleb128 0x1c
 4218 07a0 04       		.byte	0x4
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 94


 4219 07a1 CB010000 		.4byte	0x1cb
 4220 07a5 1B       		.uleb128 0x1b
 4221 07a6 52020000 		.4byte	.LASF111
 4222 07aa 01       		.byte	0x1
 4223 07ab 9002     		.2byte	0x290
 4224 07ad 81000000 		.4byte	0x81
 4225 07b1 00000000 		.4byte	.LFB73
 4226 07b5 F8000000 		.4byte	.LFE73-.LFB73
 4227 07b9 01       		.uleb128 0x1
 4228 07ba 9C       		.byte	0x9c
 4229 07bb FC070000 		.4byte	0x7fc
 4230 07bf 12       		.uleb128 0x12
 4231 07c0 02050000 		.4byte	.LASF67
 4232 07c4 01       		.byte	0x1
 4233 07c5 9002     		.2byte	0x290
 4234 07c7 81000000 		.4byte	0x81
 4235 07cb 02       		.uleb128 0x2
 4236 07cc 91       		.byte	0x91
 4237 07cd 6F       		.sleb128 -17
 4238 07ce 12       		.uleb128 0x12
 4239 07cf CB020000 		.4byte	.LASF106
 4240 07d3 01       		.byte	0x1
 4241 07d4 9002     		.2byte	0x290
 4242 07d6 42070000 		.4byte	0x742
 4243 07da 02       		.uleb128 0x2
 4244 07db 91       		.byte	0x91
 4245 07dc 68       		.sleb128 -24
 4246 07dd 15       		.uleb128 0x15
 4247 07de C1070000 		.4byte	.LASF109
 4248 07e2 01       		.byte	0x1
 4249 07e3 9802     		.2byte	0x298
 4250 07e5 8D000000 		.4byte	0x8d
 4251 07e9 02       		.uleb128 0x2
 4252 07ea 91       		.byte	0x91
 4253 07eb 76       		.sleb128 -10
 4254 07ec 15       		.uleb128 0x15
 4255 07ed 8E030000 		.4byte	.LASF110
 4256 07f1 01       		.byte	0x1
 4257 07f2 9902     		.2byte	0x299
 4258 07f4 8D000000 		.4byte	0x8d
 4259 07f8 02       		.uleb128 0x2
 4260 07f9 91       		.byte	0x91
 4261 07fa 74       		.sleb128 -12
 4262 07fb 00       		.byte	0
 4263 07fc 1B       		.uleb128 0x1b
 4264 07fd 4C050000 		.4byte	.LASF112
 4265 0801 01       		.byte	0x1
 4266 0802 CF02     		.2byte	0x2cf
 4267 0804 81000000 		.4byte	0x81
 4268 0808 00000000 		.4byte	.LFB74
 4269 080c D4000000 		.4byte	.LFE74-.LFB74
 4270 0810 01       		.uleb128 0x1
 4271 0811 9C       		.byte	0x9c
 4272 0812 47080000 		.4byte	0x847
 4273 0816 12       		.uleb128 0x12
 4274 0817 CB020000 		.4byte	.LASF106
 4275 081b 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 95


 4276 081c CF02     		.2byte	0x2cf
 4277 081e 42070000 		.4byte	0x742
 4278 0822 02       		.uleb128 0x2
 4279 0823 91       		.byte	0x91
 4280 0824 74       		.sleb128 -12
 4281 0825 12       		.uleb128 0x12
 4282 0826 2B070000 		.4byte	.LASF108
 4283 082a 01       		.byte	0x1
 4284 082b CF02     		.2byte	0x2cf
 4285 082d 9F070000 		.4byte	0x79f
 4286 0831 02       		.uleb128 0x2
 4287 0832 91       		.byte	0x91
 4288 0833 70       		.sleb128 -16
 4289 0834 15       		.uleb128 0x15
 4290 0835 5C050000 		.4byte	.LASF113
 4291 0839 01       		.byte	0x1
 4292 083a D102     		.2byte	0x2d1
 4293 083c 47080000 		.4byte	0x847
 4294 0840 05       		.uleb128 0x5
 4295 0841 03       		.byte	0x3
 4296 0842 3A000000 		.4byte	HIGH_LOW_COUNT_LIMIT.6403
 4297 0846 00       		.byte	0
 4298 0847 17       		.uleb128 0x17
 4299 0848 8D000000 		.4byte	0x8d
 4300 084c 1B       		.uleb128 0x1b
 4301 084d 11000000 		.4byte	.LASF114
 4302 0851 01       		.byte	0x1
 4303 0852 0503     		.2byte	0x305
 4304 0854 81000000 		.4byte	0x81
 4305 0858 00000000 		.4byte	.LFB75
 4306 085c 70010000 		.4byte	.LFE75-.LFB75
 4307 0860 01       		.uleb128 0x1
 4308 0861 9C       		.byte	0x9c
 4309 0862 C7080000 		.4byte	0x8c7
 4310 0866 12       		.uleb128 0x12
 4311 0867 CB020000 		.4byte	.LASF106
 4312 086b 01       		.byte	0x1
 4313 086c 0503     		.2byte	0x305
 4314 086e 42070000 		.4byte	0x742
 4315 0872 02       		.uleb128 0x2
 4316 0873 91       		.byte	0x91
 4317 0874 6C       		.sleb128 -20
 4318 0875 15       		.uleb128 0x15
 4319 0876 9F050000 		.4byte	.LASF115
 4320 087a 01       		.byte	0x1
 4321 087b 0703     		.2byte	0x307
 4322 087d 47080000 		.4byte	0x847
 4323 0881 05       		.uleb128 0x5
 4324 0882 03       		.byte	0x3
 4325 0883 3E000000 		.4byte	RAMP_UP_INITIAL_DIFFERENCE.6407
 4326 0887 15       		.uleb128 0x15
 4327 0888 44080000 		.4byte	.LASF116
 4328 088c 01       		.byte	0x1
 4329 088d 0803     		.2byte	0x308
 4330 088f 47080000 		.4byte	0x847
 4331 0893 05       		.uleb128 0x5
 4332 0894 03       		.byte	0x3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 96


 4333 0895 3C000000 		.4byte	RAMP_UP_COUNT_LIMIT.6408
 4334 0899 15       		.uleb128 0x15
 4335 089a DA020000 		.4byte	.LASF117
 4336 089e 01       		.byte	0x1
 4337 089f 0903     		.2byte	0x309
 4338 08a1 8D000000 		.4byte	0x8d
 4339 08a5 02       		.uleb128 0x2
 4340 08a6 91       		.byte	0x91
 4341 08a7 76       		.sleb128 -10
 4342 08a8 15       		.uleb128 0x15
 4343 08a9 C1070000 		.4byte	.LASF109
 4344 08ad 01       		.byte	0x1
 4345 08ae 0E03     		.2byte	0x30e
 4346 08b0 8D000000 		.4byte	0x8d
 4347 08b4 02       		.uleb128 0x2
 4348 08b5 91       		.byte	0x91
 4349 08b6 74       		.sleb128 -12
 4350 08b7 15       		.uleb128 0x15
 4351 08b8 8E030000 		.4byte	.LASF110
 4352 08bc 01       		.byte	0x1
 4353 08bd 0F03     		.2byte	0x30f
 4354 08bf 8D000000 		.4byte	0x8d
 4355 08c3 02       		.uleb128 0x2
 4356 08c4 91       		.byte	0x91
 4357 08c5 72       		.sleb128 -14
 4358 08c6 00       		.byte	0
 4359 08c7 1B       		.uleb128 0x1b
 4360 08c8 37070000 		.4byte	.LASF118
 4361 08cc 01       		.byte	0x1
 4362 08cd 5203     		.2byte	0x352
 4363 08cf 81000000 		.4byte	0x81
 4364 08d3 00000000 		.4byte	.LFB76
 4365 08d7 5C010000 		.4byte	.LFE76-.LFB76
 4366 08db 01       		.uleb128 0x1
 4367 08dc 9C       		.byte	0x9c
 4368 08dd 30090000 		.4byte	0x930
 4369 08e1 12       		.uleb128 0x12
 4370 08e2 CB020000 		.4byte	.LASF106
 4371 08e6 01       		.byte	0x1
 4372 08e7 5203     		.2byte	0x352
 4373 08e9 42070000 		.4byte	0x742
 4374 08ed 02       		.uleb128 0x2
 4375 08ee 91       		.byte	0x91
 4376 08ef 6C       		.sleb128 -20
 4377 08f0 12       		.uleb128 0x12
 4378 08f1 2B070000 		.4byte	.LASF108
 4379 08f5 01       		.byte	0x1
 4380 08f6 5203     		.2byte	0x352
 4381 08f8 9F070000 		.4byte	0x79f
 4382 08fc 02       		.uleb128 0x2
 4383 08fd 91       		.byte	0x91
 4384 08fe 68       		.sleb128 -24
 4385 08ff 15       		.uleb128 0x15
 4386 0900 0B050000 		.4byte	.LASF119
 4387 0904 01       		.byte	0x1
 4388 0905 5403     		.2byte	0x354
 4389 0907 47080000 		.4byte	0x847
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 97


 4390 090b 05       		.uleb128 0x5
 4391 090c 03       		.byte	0x3
 4392 090d 40000000 		.4byte	HOLD_NOTE_FACTOR.6416
 4393 0911 15       		.uleb128 0x15
 4394 0912 C1070000 		.4byte	.LASF109
 4395 0916 01       		.byte	0x1
 4396 0917 5903     		.2byte	0x359
 4397 0919 8D000000 		.4byte	0x8d
 4398 091d 02       		.uleb128 0x2
 4399 091e 91       		.byte	0x91
 4400 091f 76       		.sleb128 -10
 4401 0920 15       		.uleb128 0x15
 4402 0921 8E030000 		.4byte	.LASF110
 4403 0925 01       		.byte	0x1
 4404 0926 5A03     		.2byte	0x35a
 4405 0928 8D000000 		.4byte	0x8d
 4406 092c 02       		.uleb128 0x2
 4407 092d 91       		.byte	0x91
 4408 092e 74       		.sleb128 -12
 4409 092f 00       		.byte	0
 4410 0930 1B       		.uleb128 0x1b
 4411 0931 5D000000 		.4byte	.LASF120
 4412 0935 01       		.byte	0x1
 4413 0936 9A03     		.2byte	0x39a
 4414 0938 81000000 		.4byte	0x81
 4415 093c 00000000 		.4byte	.LFB77
 4416 0940 28020000 		.4byte	.LFE77-.LFB77
 4417 0944 01       		.uleb128 0x1
 4418 0945 9C       		.byte	0x9c
 4419 0946 100A0000 		.4byte	0xa10
 4420 094a 12       		.uleb128 0x12
 4421 094b 02050000 		.4byte	.LASF67
 4422 094f 01       		.byte	0x1
 4423 0950 9A03     		.2byte	0x39a
 4424 0952 81000000 		.4byte	0x81
 4425 0956 02       		.uleb128 0x2
 4426 0957 91       		.byte	0x91
 4427 0958 6F       		.sleb128 -17
 4428 0959 12       		.uleb128 0x12
 4429 095a 6E030000 		.4byte	.LASF121
 4430 095e 01       		.byte	0x1
 4431 095f 9A03     		.2byte	0x39a
 4432 0961 9F070000 		.4byte	0x79f
 4433 0965 02       		.uleb128 0x2
 4434 0966 91       		.byte	0x91
 4435 0967 68       		.sleb128 -24
 4436 0968 12       		.uleb128 0x12
 4437 0969 E4040000 		.4byte	.LASF122
 4438 096d 01       		.byte	0x1
 4439 096e 9A03     		.2byte	0x39a
 4440 0970 9F070000 		.4byte	0x79f
 4441 0974 02       		.uleb128 0x2
 4442 0975 91       		.byte	0x91
 4443 0976 64       		.sleb128 -28
 4444 0977 15       		.uleb128 0x15
 4445 0978 71070000 		.4byte	.LASF123
 4446 097c 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 98


 4447 097d 9C03     		.2byte	0x39c
 4448 097f 100A0000 		.4byte	0xa10
 4449 0983 05       		.uleb128 0x5
 4450 0984 03       		.byte	0x3
 4451 0985 44000000 		.4byte	COMBO_COUNT_LIMIT.6424
 4452 0989 15       		.uleb128 0x15
 4453 098a A7070000 		.4byte	.LASF124
 4454 098e 01       		.byte	0x1
 4455 098f 9D03     		.2byte	0x39d
 4456 0991 99000000 		.4byte	0x99
 4457 0995 02       		.uleb128 0x2
 4458 0996 91       		.byte	0x91
 4459 0997 74       		.sleb128 -12
 4460 0998 15       		.uleb128 0x15
 4461 0999 B4070000 		.4byte	.LASF125
 4462 099d 01       		.byte	0x1
 4463 099e 9E03     		.2byte	0x39e
 4464 09a0 99000000 		.4byte	0x99
 4465 09a4 02       		.uleb128 0x2
 4466 09a5 91       		.byte	0x91
 4467 09a6 70       		.sleb128 -16
 4468 09a7 0C       		.uleb128 0xc
 4469 09a8 E0000000 		.4byte	.LBB17
 4470 09ac 0A000000 		.4byte	.LBE17-.LBB17
 4471 09b0 C2090000 		.4byte	0x9c2
 4472 09b4 0F       		.uleb128 0xf
 4473 09b5 64060000 		.4byte	.LASF76
 4474 09b9 01       		.byte	0x1
 4475 09ba BA       		.byte	0xba
 4476 09bb 68000000 		.4byte	0x68
 4477 09bf 0E       		.uleb128 0xe
 4478 09c0 00       		.byte	0
 4479 09c1 00       		.byte	0
 4480 09c2 0C       		.uleb128 0xc
 4481 09c3 EC000000 		.4byte	.LBB18
 4482 09c7 0A000000 		.4byte	.LBE18-.LBB18
 4483 09cb DD090000 		.4byte	0x9dd
 4484 09cf 0F       		.uleb128 0xf
 4485 09d0 A5020000 		.4byte	.LASF74
 4486 09d4 01       		.byte	0x1
 4487 09d5 96       		.byte	0x96
 4488 09d6 68000000 		.4byte	0x68
 4489 09da 0E       		.uleb128 0xe
 4490 09db 00       		.byte	0
 4491 09dc 00       		.byte	0
 4492 09dd 0C       		.uleb128 0xc
 4493 09de B6010000 		.4byte	.LBB19
 4494 09e2 0A000000 		.4byte	.LBE19-.LBB19
 4495 09e6 F8090000 		.4byte	0x9f8
 4496 09ea 0F       		.uleb128 0xf
 4497 09eb 64060000 		.4byte	.LASF76
 4498 09ef 01       		.byte	0x1
 4499 09f0 BA       		.byte	0xba
 4500 09f1 68000000 		.4byte	0x68
 4501 09f5 0E       		.uleb128 0xe
 4502 09f6 00       		.byte	0
 4503 09f7 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 99


 4504 09f8 10       		.uleb128 0x10
 4505 09f9 C2010000 		.4byte	.LBB20
 4506 09fd 0A000000 		.4byte	.LBE20-.LBB20
 4507 0a01 0F       		.uleb128 0xf
 4508 0a02 A5020000 		.4byte	.LASF74
 4509 0a06 01       		.byte	0x1
 4510 0a07 96       		.byte	0x96
 4511 0a08 68000000 		.4byte	0x68
 4512 0a0c 0E       		.uleb128 0xe
 4513 0a0d 00       		.byte	0
 4514 0a0e 00       		.byte	0
 4515 0a0f 00       		.byte	0
 4516 0a10 17       		.uleb128 0x17
 4517 0a11 99000000 		.4byte	0x99
 4518 0a15 1B       		.uleb128 0x1b
 4519 0a16 3C030000 		.4byte	.LASF126
 4520 0a1a 01       		.byte	0x1
 4521 0a1b E703     		.2byte	0x3e7
 4522 0a1d 81000000 		.4byte	0x81
 4523 0a21 00000000 		.4byte	.LFB78
 4524 0a25 B4000000 		.4byte	.LFE78-.LFB78
 4525 0a29 01       		.uleb128 0x1
 4526 0a2a 9C       		.byte	0x9c
 4527 0a2b 510A0000 		.4byte	0xa51
 4528 0a2f 12       		.uleb128 0x12
 4529 0a30 CB020000 		.4byte	.LASF106
 4530 0a34 01       		.byte	0x1
 4531 0a35 E703     		.2byte	0x3e7
 4532 0a37 42070000 		.4byte	0x742
 4533 0a3b 02       		.uleb128 0x2
 4534 0a3c 91       		.byte	0x91
 4535 0a3d 74       		.sleb128 -12
 4536 0a3e 15       		.uleb128 0x15
 4537 0a3f 5C050000 		.4byte	.LASF113
 4538 0a43 01       		.byte	0x1
 4539 0a44 E903     		.2byte	0x3e9
 4540 0a46 47080000 		.4byte	0x847
 4541 0a4a 05       		.uleb128 0x5
 4542 0a4b 03       		.byte	0x3
 4543 0a4c 48000000 		.4byte	HIGH_LOW_COUNT_LIMIT.6434
 4544 0a50 00       		.byte	0
 4545 0a51 1A       		.uleb128 0x1a
 4546 0a52 BA060000 		.4byte	.LASF127
 4547 0a56 01       		.byte	0x1
 4548 0a57 1A04     		.2byte	0x41a
 4549 0a59 8D000000 		.4byte	0x8d
 4550 0a5d 00000000 		.4byte	.LFB79
 4551 0a61 24000000 		.4byte	.LFE79-.LFB79
 4552 0a65 01       		.uleb128 0x1
 4553 0a66 9C       		.byte	0x9c
 4554 0a67 8D0A0000 		.4byte	0xa8d
 4555 0a6b 12       		.uleb128 0x12
 4556 0a6c CF010000 		.4byte	.LASF128
 4557 0a70 01       		.byte	0x1
 4558 0a71 1A04     		.2byte	0x41a
 4559 0a73 8D000000 		.4byte	0x8d
 4560 0a77 02       		.uleb128 0x2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 100


 4561 0a78 91       		.byte	0x91
 4562 0a79 76       		.sleb128 -10
 4563 0a7a 15       		.uleb128 0x15
 4564 0a7b D9010000 		.4byte	.LASF129
 4565 0a7f 01       		.byte	0x1
 4566 0a80 1C04     		.2byte	0x41c
 4567 0a82 100A0000 		.4byte	0xa10
 4568 0a86 05       		.uleb128 0x5
 4569 0a87 03       		.byte	0x3
 4570 0a88 4C000000 		.4byte	PWM_CLOCK_FREQUENCY.6438
 4571 0a8c 00       		.byte	0
 4572 0a8d 1D       		.uleb128 0x1d
 4573 0a8e EF030000 		.4byte	.LASF130
 4574 0a92 01       		.byte	0x1
 4575 0a93 1D       		.byte	0x1d
 4576 0a94 47080000 		.4byte	0x847
 4577 0a98 05       		.uleb128 0x5
 4578 0a99 03       		.byte	0x3
 4579 0a9a 00000000 		.4byte	HORN_FIRST_FREQUENCY
 4580 0a9e 1E       		.uleb128 0x1e
 4581 0a9f CB010000 		.4byte	0x1cb
 4582 0aa3 AE0A0000 		.4byte	0xaae
 4583 0aa7 1F       		.uleb128 0x1f
 4584 0aa8 C1000000 		.4byte	0xc1
 4585 0aac 0B       		.byte	0xb
 4586 0aad 00       		.byte	0
 4587 0aae 1D       		.uleb128 0x1d
 4588 0aaf 94080000 		.4byte	.LASF131
 4589 0ab3 01       		.byte	0x1
 4590 0ab4 30       		.byte	0x30
 4591 0ab5 9E0A0000 		.4byte	0xa9e
 4592 0ab9 05       		.uleb128 0x5
 4593 0aba 03       		.byte	0x3
 4594 0abb 00000000 		.4byte	toneList
 4595 0abf 1E       		.uleb128 0x1e
 4596 0ac0 47080000 		.4byte	0x847
 4597 0ac4 CF0A0000 		.4byte	0xacf
 4598 0ac8 1F       		.uleb128 0x1f
 4599 0ac9 C1000000 		.4byte	0xc1
 4600 0acd 18       		.byte	0x18
 4601 0ace 00       		.byte	0
 4602 0acf 1D       		.uleb128 0x1d
 4603 0ad0 3A040000 		.4byte	.LASF132
 4604 0ad4 01       		.byte	0x1
 4605 0ad5 51       		.byte	0x51
 4606 0ad6 E00A0000 		.4byte	0xae0
 4607 0ada 05       		.uleb128 0x5
 4608 0adb 03       		.byte	0x3
 4609 0adc 04000000 		.4byte	NOTES_FREQUENCY_LIST
 4610 0ae0 17       		.uleb128 0x17
 4611 0ae1 BF0A0000 		.4byte	0xabf
 4612 0ae5 1E       		.uleb128 0x1e
 4613 0ae6 7B020000 		.4byte	0x27b
 4614 0aea F50A0000 		.4byte	0xaf5
 4615 0aee 1F       		.uleb128 0x1f
 4616 0aef C1000000 		.4byte	0xc1
 4617 0af3 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 101


 4618 0af4 00       		.byte	0
 4619 0af5 1D       		.uleb128 0x1d
 4620 0af6 09070000 		.4byte	.LASF133
 4621 0afa 01       		.byte	0x1
 4622 0afb 55       		.byte	0x55
 4623 0afc E50A0000 		.4byte	0xae5
 4624 0b00 05       		.uleb128 0x5
 4625 0b01 03       		.byte	0x3
 4626 0b02 60000000 		.4byte	speakerDataList
 4627 0b06 1D       		.uleb128 0x1d
 4628 0b07 CC000000 		.4byte	.LASF134
 4629 0b0b 01       		.byte	0x1
 4630 0b0c 59       		.byte	0x59
 4631 0b0d 63010000 		.4byte	0x163
 4632 0b11 05       		.uleb128 0x5
 4633 0b12 03       		.byte	0x3
 4634 0b13 00000000 		.4byte	toneEffectStatus
 4635 0b17 1D       		.uleb128 0x1d
 4636 0b18 A4060000 		.4byte	.LASF135
 4637 0b1c 01       		.byte	0x1
 4638 0b1d 5A       		.byte	0x5a
 4639 0b1e 81000000 		.4byte	0x81
 4640 0b22 05       		.uleb128 0x5
 4641 0b23 03       		.byte	0x3
 4642 0b24 01000000 		.4byte	bEchoEnable
 4643 0b28 20       		.uleb128 0x20
 4644 0b29 7A060000 		.4byte	.LASF140
 4645 0b2d 06       		.byte	0x6
 4646 0b2e 1207     		.2byte	0x712
 4647 0b30 340B0000 		.4byte	0xb34
 4648 0b34 21       		.uleb128 0x21
 4649 0b35 76000000 		.4byte	0x76
 4650 0b39 00       		.byte	0
 4651              		.section	.debug_abbrev,"",%progbits
 4652              	.Ldebug_abbrev0:
 4653 0000 01       		.uleb128 0x1
 4654 0001 11       		.uleb128 0x11
 4655 0002 01       		.byte	0x1
 4656 0003 25       		.uleb128 0x25
 4657 0004 0E       		.uleb128 0xe
 4658 0005 13       		.uleb128 0x13
 4659 0006 0B       		.uleb128 0xb
 4660 0007 03       		.uleb128 0x3
 4661 0008 0E       		.uleb128 0xe
 4662 0009 1B       		.uleb128 0x1b
 4663 000a 0E       		.uleb128 0xe
 4664 000b 55       		.uleb128 0x55
 4665 000c 17       		.uleb128 0x17
 4666 000d 11       		.uleb128 0x11
 4667 000e 01       		.uleb128 0x1
 4668 000f 10       		.uleb128 0x10
 4669 0010 17       		.uleb128 0x17
 4670 0011 00       		.byte	0
 4671 0012 00       		.byte	0
 4672 0013 02       		.uleb128 0x2
 4673 0014 24       		.uleb128 0x24
 4674 0015 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 102


 4675 0016 0B       		.uleb128 0xb
 4676 0017 0B       		.uleb128 0xb
 4677 0018 3E       		.uleb128 0x3e
 4678 0019 0B       		.uleb128 0xb
 4679 001a 03       		.uleb128 0x3
 4680 001b 0E       		.uleb128 0xe
 4681 001c 00       		.byte	0
 4682 001d 00       		.byte	0
 4683 001e 03       		.uleb128 0x3
 4684 001f 16       		.uleb128 0x16
 4685 0020 00       		.byte	0
 4686 0021 03       		.uleb128 0x3
 4687 0022 0E       		.uleb128 0xe
 4688 0023 3A       		.uleb128 0x3a
 4689 0024 0B       		.uleb128 0xb
 4690 0025 3B       		.uleb128 0x3b
 4691 0026 0B       		.uleb128 0xb
 4692 0027 49       		.uleb128 0x49
 4693 0028 13       		.uleb128 0x13
 4694 0029 00       		.byte	0
 4695 002a 00       		.byte	0
 4696 002b 04       		.uleb128 0x4
 4697 002c 24       		.uleb128 0x24
 4698 002d 00       		.byte	0
 4699 002e 0B       		.uleb128 0xb
 4700 002f 0B       		.uleb128 0xb
 4701 0030 3E       		.uleb128 0x3e
 4702 0031 0B       		.uleb128 0xb
 4703 0032 03       		.uleb128 0x3
 4704 0033 08       		.uleb128 0x8
 4705 0034 00       		.byte	0
 4706 0035 00       		.byte	0
 4707 0036 05       		.uleb128 0x5
 4708 0037 16       		.uleb128 0x16
 4709 0038 00       		.byte	0
 4710 0039 03       		.uleb128 0x3
 4711 003a 0E       		.uleb128 0xe
 4712 003b 3A       		.uleb128 0x3a
 4713 003c 0B       		.uleb128 0xb
 4714 003d 3B       		.uleb128 0x3b
 4715 003e 05       		.uleb128 0x5
 4716 003f 49       		.uleb128 0x49
 4717 0040 13       		.uleb128 0x13
 4718 0041 00       		.byte	0
 4719 0042 00       		.byte	0
 4720 0043 06       		.uleb128 0x6
 4721 0044 04       		.uleb128 0x4
 4722 0045 01       		.byte	0x1
 4723 0046 03       		.uleb128 0x3
 4724 0047 0E       		.uleb128 0xe
 4725 0048 0B       		.uleb128 0xb
 4726 0049 0B       		.uleb128 0xb
 4727 004a 49       		.uleb128 0x49
 4728 004b 13       		.uleb128 0x13
 4729 004c 3A       		.uleb128 0x3a
 4730 004d 0B       		.uleb128 0xb
 4731 004e 3B       		.uleb128 0x3b
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 103


 4732 004f 0B       		.uleb128 0xb
 4733 0050 01       		.uleb128 0x1
 4734 0051 13       		.uleb128 0x13
 4735 0052 00       		.byte	0
 4736 0053 00       		.byte	0
 4737 0054 07       		.uleb128 0x7
 4738 0055 28       		.uleb128 0x28
 4739 0056 00       		.byte	0
 4740 0057 03       		.uleb128 0x3
 4741 0058 0E       		.uleb128 0xe
 4742 0059 1C       		.uleb128 0x1c
 4743 005a 0B       		.uleb128 0xb
 4744 005b 00       		.byte	0
 4745 005c 00       		.byte	0
 4746 005d 08       		.uleb128 0x8
 4747 005e 13       		.uleb128 0x13
 4748 005f 01       		.byte	0x1
 4749 0060 0B       		.uleb128 0xb
 4750 0061 0B       		.uleb128 0xb
 4751 0062 3A       		.uleb128 0x3a
 4752 0063 0B       		.uleb128 0xb
 4753 0064 3B       		.uleb128 0x3b
 4754 0065 0B       		.uleb128 0xb
 4755 0066 01       		.uleb128 0x1
 4756 0067 13       		.uleb128 0x13
 4757 0068 00       		.byte	0
 4758 0069 00       		.byte	0
 4759 006a 09       		.uleb128 0x9
 4760 006b 0D       		.uleb128 0xd
 4761 006c 00       		.byte	0
 4762 006d 03       		.uleb128 0x3
 4763 006e 0E       		.uleb128 0xe
 4764 006f 3A       		.uleb128 0x3a
 4765 0070 0B       		.uleb128 0xb
 4766 0071 3B       		.uleb128 0x3b
 4767 0072 0B       		.uleb128 0xb
 4768 0073 49       		.uleb128 0x49
 4769 0074 13       		.uleb128 0x13
 4770 0075 38       		.uleb128 0x38
 4771 0076 0B       		.uleb128 0xb
 4772 0077 00       		.byte	0
 4773 0078 00       		.byte	0
 4774 0079 0A       		.uleb128 0xa
 4775 007a 2E       		.uleb128 0x2e
 4776 007b 01       		.byte	0x1
 4777 007c 3F       		.uleb128 0x3f
 4778 007d 19       		.uleb128 0x19
 4779 007e 03       		.uleb128 0x3
 4780 007f 0E       		.uleb128 0xe
 4781 0080 3A       		.uleb128 0x3a
 4782 0081 0B       		.uleb128 0xb
 4783 0082 3B       		.uleb128 0x3b
 4784 0083 0B       		.uleb128 0xb
 4785 0084 27       		.uleb128 0x27
 4786 0085 19       		.uleb128 0x19
 4787 0086 49       		.uleb128 0x49
 4788 0087 13       		.uleb128 0x13
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 104


 4789 0088 11       		.uleb128 0x11
 4790 0089 01       		.uleb128 0x1
 4791 008a 12       		.uleb128 0x12
 4792 008b 06       		.uleb128 0x6
 4793 008c 40       		.uleb128 0x40
 4794 008d 18       		.uleb128 0x18
 4795 008e 9642     		.uleb128 0x2116
 4796 0090 19       		.uleb128 0x19
 4797 0091 01       		.uleb128 0x1
 4798 0092 13       		.uleb128 0x13
 4799 0093 00       		.byte	0
 4800 0094 00       		.byte	0
 4801 0095 0B       		.uleb128 0xb
 4802 0096 05       		.uleb128 0x5
 4803 0097 00       		.byte	0
 4804 0098 03       		.uleb128 0x3
 4805 0099 0E       		.uleb128 0xe
 4806 009a 3A       		.uleb128 0x3a
 4807 009b 0B       		.uleb128 0xb
 4808 009c 3B       		.uleb128 0x3b
 4809 009d 0B       		.uleb128 0xb
 4810 009e 49       		.uleb128 0x49
 4811 009f 13       		.uleb128 0x13
 4812 00a0 02       		.uleb128 0x2
 4813 00a1 18       		.uleb128 0x18
 4814 00a2 00       		.byte	0
 4815 00a3 00       		.byte	0
 4816 00a4 0C       		.uleb128 0xc
 4817 00a5 0B       		.uleb128 0xb
 4818 00a6 01       		.byte	0x1
 4819 00a7 11       		.uleb128 0x11
 4820 00a8 01       		.uleb128 0x1
 4821 00a9 12       		.uleb128 0x12
 4822 00aa 06       		.uleb128 0x6
 4823 00ab 01       		.uleb128 0x1
 4824 00ac 13       		.uleb128 0x13
 4825 00ad 00       		.byte	0
 4826 00ae 00       		.byte	0
 4827 00af 0D       		.uleb128 0xd
 4828 00b0 2E       		.uleb128 0x2e
 4829 00b1 01       		.byte	0x1
 4830 00b2 3F       		.uleb128 0x3f
 4831 00b3 19       		.uleb128 0x19
 4832 00b4 03       		.uleb128 0x3
 4833 00b5 0E       		.uleb128 0xe
 4834 00b6 3A       		.uleb128 0x3a
 4835 00b7 0B       		.uleb128 0xb
 4836 00b8 3B       		.uleb128 0x3b
 4837 00b9 0B       		.uleb128 0xb
 4838 00ba 49       		.uleb128 0x49
 4839 00bb 13       		.uleb128 0x13
 4840 00bc 3C       		.uleb128 0x3c
 4841 00bd 19       		.uleb128 0x19
 4842 00be 01       		.uleb128 0x1
 4843 00bf 13       		.uleb128 0x13
 4844 00c0 00       		.byte	0
 4845 00c1 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 105


 4846 00c2 0E       		.uleb128 0xe
 4847 00c3 18       		.uleb128 0x18
 4848 00c4 00       		.byte	0
 4849 00c5 00       		.byte	0
 4850 00c6 00       		.byte	0
 4851 00c7 0F       		.uleb128 0xf
 4852 00c8 2E       		.uleb128 0x2e
 4853 00c9 01       		.byte	0x1
 4854 00ca 3F       		.uleb128 0x3f
 4855 00cb 19       		.uleb128 0x19
 4856 00cc 03       		.uleb128 0x3
 4857 00cd 0E       		.uleb128 0xe
 4858 00ce 3A       		.uleb128 0x3a
 4859 00cf 0B       		.uleb128 0xb
 4860 00d0 3B       		.uleb128 0x3b
 4861 00d1 0B       		.uleb128 0xb
 4862 00d2 49       		.uleb128 0x49
 4863 00d3 13       		.uleb128 0x13
 4864 00d4 3C       		.uleb128 0x3c
 4865 00d5 19       		.uleb128 0x19
 4866 00d6 00       		.byte	0
 4867 00d7 00       		.byte	0
 4868 00d8 10       		.uleb128 0x10
 4869 00d9 0B       		.uleb128 0xb
 4870 00da 01       		.byte	0x1
 4871 00db 11       		.uleb128 0x11
 4872 00dc 01       		.uleb128 0x1
 4873 00dd 12       		.uleb128 0x12
 4874 00de 06       		.uleb128 0x6
 4875 00df 00       		.byte	0
 4876 00e0 00       		.byte	0
 4877 00e1 11       		.uleb128 0x11
 4878 00e2 2E       		.uleb128 0x2e
 4879 00e3 01       		.byte	0x1
 4880 00e4 3F       		.uleb128 0x3f
 4881 00e5 19       		.uleb128 0x19
 4882 00e6 03       		.uleb128 0x3
 4883 00e7 0E       		.uleb128 0xe
 4884 00e8 3A       		.uleb128 0x3a
 4885 00e9 0B       		.uleb128 0xb
 4886 00ea 3B       		.uleb128 0x3b
 4887 00eb 05       		.uleb128 0x5
 4888 00ec 27       		.uleb128 0x27
 4889 00ed 19       		.uleb128 0x19
 4890 00ee 49       		.uleb128 0x49
 4891 00ef 13       		.uleb128 0x13
 4892 00f0 11       		.uleb128 0x11
 4893 00f1 01       		.uleb128 0x1
 4894 00f2 12       		.uleb128 0x12
 4895 00f3 06       		.uleb128 0x6
 4896 00f4 40       		.uleb128 0x40
 4897 00f5 18       		.uleb128 0x18
 4898 00f6 9642     		.uleb128 0x2116
 4899 00f8 19       		.uleb128 0x19
 4900 00f9 01       		.uleb128 0x1
 4901 00fa 13       		.uleb128 0x13
 4902 00fb 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 106


 4903 00fc 00       		.byte	0
 4904 00fd 12       		.uleb128 0x12
 4905 00fe 05       		.uleb128 0x5
 4906 00ff 00       		.byte	0
 4907 0100 03       		.uleb128 0x3
 4908 0101 0E       		.uleb128 0xe
 4909 0102 3A       		.uleb128 0x3a
 4910 0103 0B       		.uleb128 0xb
 4911 0104 3B       		.uleb128 0x3b
 4912 0105 05       		.uleb128 0x5
 4913 0106 49       		.uleb128 0x49
 4914 0107 13       		.uleb128 0x13
 4915 0108 02       		.uleb128 0x2
 4916 0109 18       		.uleb128 0x18
 4917 010a 00       		.byte	0
 4918 010b 00       		.byte	0
 4919 010c 13       		.uleb128 0x13
 4920 010d 2E       		.uleb128 0x2e
 4921 010e 01       		.byte	0x1
 4922 010f 3F       		.uleb128 0x3f
 4923 0110 19       		.uleb128 0x19
 4924 0111 03       		.uleb128 0x3
 4925 0112 0E       		.uleb128 0xe
 4926 0113 3A       		.uleb128 0x3a
 4927 0114 0B       		.uleb128 0xb
 4928 0115 3B       		.uleb128 0x3b
 4929 0116 05       		.uleb128 0x5
 4930 0117 49       		.uleb128 0x49
 4931 0118 13       		.uleb128 0x13
 4932 0119 3C       		.uleb128 0x3c
 4933 011a 19       		.uleb128 0x19
 4934 011b 00       		.byte	0
 4935 011c 00       		.byte	0
 4936 011d 14       		.uleb128 0x14
 4937 011e 2E       		.uleb128 0x2e
 4938 011f 01       		.byte	0x1
 4939 0120 3F       		.uleb128 0x3f
 4940 0121 19       		.uleb128 0x19
 4941 0122 03       		.uleb128 0x3
 4942 0123 0E       		.uleb128 0xe
 4943 0124 3A       		.uleb128 0x3a
 4944 0125 0B       		.uleb128 0xb
 4945 0126 3B       		.uleb128 0x3b
 4946 0127 05       		.uleb128 0x5
 4947 0128 27       		.uleb128 0x27
 4948 0129 19       		.uleb128 0x19
 4949 012a 11       		.uleb128 0x11
 4950 012b 01       		.uleb128 0x1
 4951 012c 12       		.uleb128 0x12
 4952 012d 06       		.uleb128 0x6
 4953 012e 40       		.uleb128 0x40
 4954 012f 18       		.uleb128 0x18
 4955 0130 9642     		.uleb128 0x2116
 4956 0132 19       		.uleb128 0x19
 4957 0133 01       		.uleb128 0x1
 4958 0134 13       		.uleb128 0x13
 4959 0135 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 107


 4960 0136 00       		.byte	0
 4961 0137 15       		.uleb128 0x15
 4962 0138 34       		.uleb128 0x34
 4963 0139 00       		.byte	0
 4964 013a 03       		.uleb128 0x3
 4965 013b 0E       		.uleb128 0xe
 4966 013c 3A       		.uleb128 0x3a
 4967 013d 0B       		.uleb128 0xb
 4968 013e 3B       		.uleb128 0x3b
 4969 013f 05       		.uleb128 0x5
 4970 0140 49       		.uleb128 0x49
 4971 0141 13       		.uleb128 0x13
 4972 0142 02       		.uleb128 0x2
 4973 0143 18       		.uleb128 0x18
 4974 0144 00       		.byte	0
 4975 0145 00       		.byte	0
 4976 0146 16       		.uleb128 0x16
 4977 0147 2E       		.uleb128 0x2e
 4978 0148 01       		.byte	0x1
 4979 0149 3F       		.uleb128 0x3f
 4980 014a 19       		.uleb128 0x19
 4981 014b 03       		.uleb128 0x3
 4982 014c 0E       		.uleb128 0xe
 4983 014d 3A       		.uleb128 0x3a
 4984 014e 0B       		.uleb128 0xb
 4985 014f 3B       		.uleb128 0x3b
 4986 0150 05       		.uleb128 0x5
 4987 0151 49       		.uleb128 0x49
 4988 0152 13       		.uleb128 0x13
 4989 0153 3C       		.uleb128 0x3c
 4990 0154 19       		.uleb128 0x19
 4991 0155 01       		.uleb128 0x1
 4992 0156 13       		.uleb128 0x13
 4993 0157 00       		.byte	0
 4994 0158 00       		.byte	0
 4995 0159 17       		.uleb128 0x17
 4996 015a 26       		.uleb128 0x26
 4997 015b 00       		.byte	0
 4998 015c 49       		.uleb128 0x49
 4999 015d 13       		.uleb128 0x13
 5000 015e 00       		.byte	0
 5001 015f 00       		.byte	0
 5002 0160 18       		.uleb128 0x18
 5003 0161 2E       		.uleb128 0x2e
 5004 0162 01       		.byte	0x1
 5005 0163 3F       		.uleb128 0x3f
 5006 0164 19       		.uleb128 0x19
 5007 0165 03       		.uleb128 0x3
 5008 0166 0E       		.uleb128 0xe
 5009 0167 3A       		.uleb128 0x3a
 5010 0168 0B       		.uleb128 0xb
 5011 0169 3B       		.uleb128 0x3b
 5012 016a 05       		.uleb128 0x5
 5013 016b 27       		.uleb128 0x27
 5014 016c 19       		.uleb128 0x19
 5015 016d 49       		.uleb128 0x49
 5016 016e 13       		.uleb128 0x13
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 108


 5017 016f 11       		.uleb128 0x11
 5018 0170 01       		.uleb128 0x1
 5019 0171 12       		.uleb128 0x12
 5020 0172 06       		.uleb128 0x6
 5021 0173 40       		.uleb128 0x40
 5022 0174 18       		.uleb128 0x18
 5023 0175 9742     		.uleb128 0x2117
 5024 0177 19       		.uleb128 0x19
 5025 0178 01       		.uleb128 0x1
 5026 0179 13       		.uleb128 0x13
 5027 017a 00       		.byte	0
 5028 017b 00       		.byte	0
 5029 017c 19       		.uleb128 0x19
 5030 017d 2E       		.uleb128 0x2e
 5031 017e 00       		.byte	0
 5032 017f 3F       		.uleb128 0x3f
 5033 0180 19       		.uleb128 0x19
 5034 0181 03       		.uleb128 0x3
 5035 0182 0E       		.uleb128 0xe
 5036 0183 3A       		.uleb128 0x3a
 5037 0184 0B       		.uleb128 0xb
 5038 0185 3B       		.uleb128 0x3b
 5039 0186 05       		.uleb128 0x5
 5040 0187 27       		.uleb128 0x27
 5041 0188 19       		.uleb128 0x19
 5042 0189 11       		.uleb128 0x11
 5043 018a 01       		.uleb128 0x1
 5044 018b 12       		.uleb128 0x12
 5045 018c 06       		.uleb128 0x6
 5046 018d 40       		.uleb128 0x40
 5047 018e 18       		.uleb128 0x18
 5048 018f 9742     		.uleb128 0x2117
 5049 0191 19       		.uleb128 0x19
 5050 0192 00       		.byte	0
 5051 0193 00       		.byte	0
 5052 0194 1A       		.uleb128 0x1a
 5053 0195 2E       		.uleb128 0x2e
 5054 0196 01       		.byte	0x1
 5055 0197 03       		.uleb128 0x3
 5056 0198 0E       		.uleb128 0xe
 5057 0199 3A       		.uleb128 0x3a
 5058 019a 0B       		.uleb128 0xb
 5059 019b 3B       		.uleb128 0x3b
 5060 019c 05       		.uleb128 0x5
 5061 019d 27       		.uleb128 0x27
 5062 019e 19       		.uleb128 0x19
 5063 019f 49       		.uleb128 0x49
 5064 01a0 13       		.uleb128 0x13
 5065 01a1 11       		.uleb128 0x11
 5066 01a2 01       		.uleb128 0x1
 5067 01a3 12       		.uleb128 0x12
 5068 01a4 06       		.uleb128 0x6
 5069 01a5 40       		.uleb128 0x40
 5070 01a6 18       		.uleb128 0x18
 5071 01a7 9742     		.uleb128 0x2117
 5072 01a9 19       		.uleb128 0x19
 5073 01aa 01       		.uleb128 0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 109


 5074 01ab 13       		.uleb128 0x13
 5075 01ac 00       		.byte	0
 5076 01ad 00       		.byte	0
 5077 01ae 1B       		.uleb128 0x1b
 5078 01af 2E       		.uleb128 0x2e
 5079 01b0 01       		.byte	0x1
 5080 01b1 03       		.uleb128 0x3
 5081 01b2 0E       		.uleb128 0xe
 5082 01b3 3A       		.uleb128 0x3a
 5083 01b4 0B       		.uleb128 0xb
 5084 01b5 3B       		.uleb128 0x3b
 5085 01b6 05       		.uleb128 0x5
 5086 01b7 27       		.uleb128 0x27
 5087 01b8 19       		.uleb128 0x19
 5088 01b9 49       		.uleb128 0x49
 5089 01ba 13       		.uleb128 0x13
 5090 01bb 11       		.uleb128 0x11
 5091 01bc 01       		.uleb128 0x1
 5092 01bd 12       		.uleb128 0x12
 5093 01be 06       		.uleb128 0x6
 5094 01bf 40       		.uleb128 0x40
 5095 01c0 18       		.uleb128 0x18
 5096 01c1 9642     		.uleb128 0x2116
 5097 01c3 19       		.uleb128 0x19
 5098 01c4 01       		.uleb128 0x1
 5099 01c5 13       		.uleb128 0x13
 5100 01c6 00       		.byte	0
 5101 01c7 00       		.byte	0
 5102 01c8 1C       		.uleb128 0x1c
 5103 01c9 0F       		.uleb128 0xf
 5104 01ca 00       		.byte	0
 5105 01cb 0B       		.uleb128 0xb
 5106 01cc 0B       		.uleb128 0xb
 5107 01cd 49       		.uleb128 0x49
 5108 01ce 13       		.uleb128 0x13
 5109 01cf 00       		.byte	0
 5110 01d0 00       		.byte	0
 5111 01d1 1D       		.uleb128 0x1d
 5112 01d2 34       		.uleb128 0x34
 5113 01d3 00       		.byte	0
 5114 01d4 03       		.uleb128 0x3
 5115 01d5 0E       		.uleb128 0xe
 5116 01d6 3A       		.uleb128 0x3a
 5117 01d7 0B       		.uleb128 0xb
 5118 01d8 3B       		.uleb128 0x3b
 5119 01d9 0B       		.uleb128 0xb
 5120 01da 49       		.uleb128 0x49
 5121 01db 13       		.uleb128 0x13
 5122 01dc 02       		.uleb128 0x2
 5123 01dd 18       		.uleb128 0x18
 5124 01de 00       		.byte	0
 5125 01df 00       		.byte	0
 5126 01e0 1E       		.uleb128 0x1e
 5127 01e1 01       		.uleb128 0x1
 5128 01e2 01       		.byte	0x1
 5129 01e3 49       		.uleb128 0x49
 5130 01e4 13       		.uleb128 0x13
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 110


 5131 01e5 01       		.uleb128 0x1
 5132 01e6 13       		.uleb128 0x13
 5133 01e7 00       		.byte	0
 5134 01e8 00       		.byte	0
 5135 01e9 1F       		.uleb128 0x1f
 5136 01ea 21       		.uleb128 0x21
 5137 01eb 00       		.byte	0
 5138 01ec 49       		.uleb128 0x49
 5139 01ed 13       		.uleb128 0x13
 5140 01ee 2F       		.uleb128 0x2f
 5141 01ef 0B       		.uleb128 0xb
 5142 01f0 00       		.byte	0
 5143 01f1 00       		.byte	0
 5144 01f2 20       		.uleb128 0x20
 5145 01f3 34       		.uleb128 0x34
 5146 01f4 00       		.byte	0
 5147 01f5 03       		.uleb128 0x3
 5148 01f6 0E       		.uleb128 0xe
 5149 01f7 3A       		.uleb128 0x3a
 5150 01f8 0B       		.uleb128 0xb
 5151 01f9 3B       		.uleb128 0x3b
 5152 01fa 05       		.uleb128 0x5
 5153 01fb 49       		.uleb128 0x49
 5154 01fc 13       		.uleb128 0x13
 5155 01fd 3F       		.uleb128 0x3f
 5156 01fe 19       		.uleb128 0x19
 5157 01ff 3C       		.uleb128 0x3c
 5158 0200 19       		.uleb128 0x19
 5159 0201 00       		.byte	0
 5160 0202 00       		.byte	0
 5161 0203 21       		.uleb128 0x21
 5162 0204 35       		.uleb128 0x35
 5163 0205 00       		.byte	0
 5164 0206 49       		.uleb128 0x49
 5165 0207 13       		.uleb128 0x13
 5166 0208 00       		.byte	0
 5167 0209 00       		.byte	0
 5168 020a 00       		.byte	0
 5169              		.section	.debug_aranges,"",%progbits
 5170 0000 9C000000 		.4byte	0x9c
 5171 0004 0200     		.2byte	0x2
 5172 0006 00000000 		.4byte	.Ldebug_info0
 5173 000a 04       		.byte	0x4
 5174 000b 00       		.byte	0
 5175 000c 0000     		.2byte	0
 5176 000e 0000     		.2byte	0
 5177 0010 00000000 		.4byte	.LFB63
 5178 0014 94020000 		.4byte	.LFE63-.LFB63
 5179 0018 00000000 		.4byte	.LFB64
 5180 001c A8000000 		.4byte	.LFE64-.LFB64
 5181 0020 00000000 		.4byte	.LFB65
 5182 0024 D0010000 		.4byte	.LFE65-.LFB65
 5183 0028 00000000 		.4byte	.LFB66
 5184 002c 08010000 		.4byte	.LFE66-.LFB66
 5185 0030 00000000 		.4byte	.LFB67
 5186 0034 F8000000 		.4byte	.LFE67-.LFB67
 5187 0038 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 111


 5188 003c 3C000000 		.4byte	.LFE68-.LFB68
 5189 0040 00000000 		.4byte	.LFB69
 5190 0044 20000000 		.4byte	.LFE69-.LFB69
 5191 0048 00000000 		.4byte	.LFB70
 5192 004c 98000000 		.4byte	.LFE70-.LFB70
 5193 0050 00000000 		.4byte	.LFB71
 5194 0054 64000000 		.4byte	.LFE71-.LFB71
 5195 0058 00000000 		.4byte	.LFB72
 5196 005c 28010000 		.4byte	.LFE72-.LFB72
 5197 0060 00000000 		.4byte	.LFB73
 5198 0064 F8000000 		.4byte	.LFE73-.LFB73
 5199 0068 00000000 		.4byte	.LFB74
 5200 006c D4000000 		.4byte	.LFE74-.LFB74
 5201 0070 00000000 		.4byte	.LFB75
 5202 0074 70010000 		.4byte	.LFE75-.LFB75
 5203 0078 00000000 		.4byte	.LFB76
 5204 007c 5C010000 		.4byte	.LFE76-.LFB76
 5205 0080 00000000 		.4byte	.LFB77
 5206 0084 28020000 		.4byte	.LFE77-.LFB77
 5207 0088 00000000 		.4byte	.LFB78
 5208 008c B4000000 		.4byte	.LFE78-.LFB78
 5209 0090 00000000 		.4byte	.LFB79
 5210 0094 24000000 		.4byte	.LFE79-.LFB79
 5211 0098 00000000 		.4byte	0
 5212 009c 00000000 		.4byte	0
 5213              		.section	.debug_ranges,"",%progbits
 5214              	.Ldebug_ranges0:
 5215 0000 00000000 		.4byte	.LFB63
 5216 0004 94020000 		.4byte	.LFE63
 5217 0008 00000000 		.4byte	.LFB64
 5218 000c A8000000 		.4byte	.LFE64
 5219 0010 00000000 		.4byte	.LFB65
 5220 0014 D0010000 		.4byte	.LFE65
 5221 0018 00000000 		.4byte	.LFB66
 5222 001c 08010000 		.4byte	.LFE66
 5223 0020 00000000 		.4byte	.LFB67
 5224 0024 F8000000 		.4byte	.LFE67
 5225 0028 00000000 		.4byte	.LFB68
 5226 002c 3C000000 		.4byte	.LFE68
 5227 0030 00000000 		.4byte	.LFB69
 5228 0034 20000000 		.4byte	.LFE69
 5229 0038 00000000 		.4byte	.LFB70
 5230 003c 98000000 		.4byte	.LFE70
 5231 0040 00000000 		.4byte	.LFB71
 5232 0044 64000000 		.4byte	.LFE71
 5233 0048 00000000 		.4byte	.LFB72
 5234 004c 28010000 		.4byte	.LFE72
 5235 0050 00000000 		.4byte	.LFB73
 5236 0054 F8000000 		.4byte	.LFE73
 5237 0058 00000000 		.4byte	.LFB74
 5238 005c D4000000 		.4byte	.LFE74
 5239 0060 00000000 		.4byte	.LFB75
 5240 0064 70010000 		.4byte	.LFE75
 5241 0068 00000000 		.4byte	.LFB76
 5242 006c 5C010000 		.4byte	.LFE76
 5243 0070 00000000 		.4byte	.LFB77
 5244 0074 28020000 		.4byte	.LFE77
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 112


 5245 0078 00000000 		.4byte	.LFB78
 5246 007c B4000000 		.4byte	.LFE78
 5247 0080 00000000 		.4byte	.LFB79
 5248 0084 24000000 		.4byte	.LFE79
 5249 0088 00000000 		.4byte	0
 5250 008c 00000000 		.4byte	0
 5251              		.section	.debug_line,"",%progbits
 5252              	.Ldebug_line0:
 5253 0000 BC040000 		.section	.debug_str,"MS",%progbits,1
 5253      02006201 
 5253      00000201 
 5253      FB0E0D00 
 5253      01010101 
 5254              	.LASF77:
 5255 0000 414D7578 		.ascii	"AMux2_FastSelect\000"
 5255      325F4661 
 5255      73745365 
 5255      6C656374 
 5255      00
 5256              	.LASF114:
 5257 0011 706C6179 		.ascii	"playMechanicalTone\000"
 5257      4D656368 
 5257      616E6963 
 5257      616C546F 
 5257      6E6500
 5258              	.LASF105:
 5259 0024 706C6179 		.ascii	"playHornTone\000"
 5259      486F726E 
 5259      546F6E65 
 5259      00
 5260              	.LASF102:
 5261 0031 66697273 		.ascii	"firstTone\000"
 5261      74546F6E 
 5261      6500
 5262              	.LASF29:
 5263 003b 5043414C 		.ascii	"PCALL_FAST\000"
 5263      4C5F4641 
 5263      535400
 5264              	.LASF51:
 5265 0046 62486F72 		.ascii	"bHornEnable\000"
 5265      6E456E61 
 5265      626C6500 
 5266              	.LASF43:
 5267 0052 546F6E65 		.ascii	"ToneEffect\000"
 5267      45666665 
 5267      637400
 5268              	.LASF120:
 5269 005d 706C6179 		.ascii	"playComboTone\000"
 5269      436F6D62 
 5269      6F546F6E 
 5269      6500
 5270              	.LASF86:
 5271 006b 50574D74 		.ascii	"PWMtimer1_Stop\000"
 5271      696D6572 
 5271      315F5374 
 5271      6F7000
 5272              	.LASF31:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 113


 5273 007a 484F524E 		.ascii	"HORN_YELP\000"
 5273      5F59454C 
 5273      5000
 5274              	.LASF25:
 5275 0084 4D454348 		.ascii	"MECHANICAL\000"
 5275      414E4943 
 5275      414C00
 5276              	.LASF79:
 5277 008f 706C6179 		.ascii	"playPWMTone\000"
 5277      50574D54 
 5277      6F6E6500 
 5278              	.LASF8:
 5279 009b 756E7369 		.ascii	"unsigned int\000"
 5279      676E6564 
 5279      20696E74 
 5279      00
 5280              	.LASF53:
 5281 00a8 63757272 		.ascii	"currentToneNumber\000"
 5281      656E7454 
 5281      6F6E654E 
 5281      756D6265 
 5281      7200
 5282              	.LASF38:
 5283 00ba 53544550 		.ascii	"STEP_OUT_HANDS_UP\000"
 5283      5F4F5554 
 5283      5F48414E 
 5283      44535F55 
 5283      5000
 5284              	.LASF134:
 5285 00cc 746F6E65 		.ascii	"toneEffectStatus\000"
 5285      45666665 
 5285      63745374 
 5285      61747573 
 5285      00
 5286              	.LASF73:
 5287 00dd 50574D5F 		.ascii	"PWM_1_Start\000"
 5287      315F5374 
 5287      61727400 
 5288              	.LASF9:
 5289 00e9 5F5F696E 		.ascii	"__int32_t\000"
 5289      7433325F 
 5289      7400
 5290              	.LASF34:
 5291 00f3 434F5053 		.ascii	"COPS_SONG\000"
 5291      5F534F4E 
 5291      4700
 5292              	.LASF136:
 5293 00fd 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 5293      43313120 
 5293      352E342E 
 5293      31203230 
 5293      31363036 
 5294 0130 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 5294      20726576 
 5294      6973696F 
 5294      6E203233 
 5294      37373135 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 114


 5295 0163 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 5295      66756E63 
 5295      74696F6E 
 5295      2D736563 
 5295      74696F6E 
 5296              	.LASF59:
 5297 018b 62467265 		.ascii	"bFrequencyChange\000"
 5297      7175656E 
 5297      63794368 
 5297      616E6765 
 5297      00
 5298              	.LASF48:
 5299 019c 68696768 		.ascii	"highestFrequency\000"
 5299      65737446 
 5299      72657175 
 5299      656E6379 
 5299      00
 5300              	.LASF50:
 5301 01ad 62576169 		.ascii	"bWailEnable\000"
 5301      6C456E61 
 5301      626C6500 
 5302              	.LASF62:
 5303 01b9 624D616E 		.ascii	"bManualWailActiveFlag\000"
 5303      75616C57 
 5303      61696C41 
 5303      63746976 
 5303      65466C61 
 5304              	.LASF128:
 5305 01cf 66726571 		.ascii	"frequency\000"
 5305      75656E63 
 5305      7900
 5306              	.LASF129:
 5307 01d9 50574D5F 		.ascii	"PWM_CLOCK_FREQUENCY\000"
 5307      434C4F43 
 5307      4B5F4652 
 5307      45515545 
 5307      4E435900 
 5308              	.LASF54:
 5309 01ed 50574D70 		.ascii	"PWMperiodCount\000"
 5309      6572696F 
 5309      64436F75 
 5309      6E7400
 5310              	.LASF42:
 5311 01fc 546F6E65 		.ascii	"ToneType\000"
 5311      54797065 
 5311      00
 5312              	.LASF37:
 5313 0205 53544550 		.ascii	"STEP_OUT\000"
 5313      5F4F5554 
 5313      00
 5314              	.LASF137:
 5315 020e 546F6E65 		.ascii	"Tones.c\000"
 5315      732E6300 
 5316              	.LASF93:
 5317 0216 484F524E 		.ascii	"HORN_WIGGLE_WIDTH\000"
 5317      5F574947 
 5317      474C455F 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 115


 5317      57494454 
 5317      4800
 5318              	.LASF65:
 5319 0228 6E6F7465 		.ascii	"noteListIndex\000"
 5319      4C697374 
 5319      496E6465 
 5319      7800
 5320              	.LASF80:
 5321 0236 73746F70 		.ascii	"stopPWMTone\000"
 5321      50574D54 
 5321      6F6E6500 
 5322              	.LASF14:
 5323 0242 666C6F61 		.ascii	"float\000"
 5323      7400
 5324              	.LASF33:
 5325 0248 4543544F 		.ascii	"ECTOSIREN\000"
 5325      53495245 
 5325      4E00
 5326              	.LASF111:
 5327 0252 706C6179 		.ascii	"playManualWailTone\000"
 5327      4D616E75 
 5327      616C5761 
 5327      696C546F 
 5327      6E6500
 5328              	.LASF26:
 5329 0265 4D414E55 		.ascii	"MANUAL_WAIL\000"
 5329      414C5F57 
 5329      41494C00 
 5330              	.LASF7:
 5331 0271 6C6F6E67 		.ascii	"long long unsigned int\000"
 5331      206C6F6E 
 5331      6720756E 
 5331      7369676E 
 5331      65642069 
 5332              	.LASF41:
 5333 0288 54455354 		.ascii	"TEST_TONE\000"
 5333      5F544F4E 
 5333      4500
 5334              	.LASF40:
 5335 0292 52454D41 		.ascii	"REMAIN_WINDOW_DOWN\000"
 5335      494E5F57 
 5335      494E444F 
 5335      575F444F 
 5335      574E00
 5336              	.LASF74:
 5337 02a5 50574D74 		.ascii	"PWMtimer1_WritePeriod\000"
 5337      696D6572 
 5337      315F5772 
 5337      69746550 
 5337      6572696F 
 5338              	.LASF66:
 5339 02bb 43757272 		.ascii	"CurrentToneData\000"
 5339      656E7454 
 5339      6F6E6544 
 5339      61746100 
 5340              	.LASF106:
 5341 02cb 63757272 		.ascii	"currentSpeaker\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 116


 5341      656E7453 
 5341      7065616B 
 5341      657200
 5342              	.LASF117:
 5343 02da 63757272 		.ascii	"currentDifference\000"
 5343      656E7444 
 5343      69666665 
 5343      72656E63 
 5343      6500
 5344              	.LASF96:
 5345 02ec 50574D5F 		.ascii	"PWM_1_WritePeriod\000"
 5345      315F5772 
 5345      69746550 
 5345      6572696F 
 5345      6400
 5346              	.LASF87:
 5347 02fe 70726F63 		.ascii	"processPWMtimerRoutine\000"
 5347      65737350 
 5347      574D7469 
 5347      6D657252 
 5347      6F757469 
 5348              	.LASF104:
 5349 0315 73657454 		.ascii	"setToneEffectStatus\000"
 5349      6F6E6545 
 5349      66666563 
 5349      74537461 
 5349      74757300 
 5350              	.LASF57:
 5351 0329 5043616C 		.ascii	"PCallHoldNoteCount\000"
 5351      6C486F6C 
 5351      644E6F74 
 5351      65436F75 
 5351      6E7400
 5352              	.LASF126:
 5353 033c 706C6179 		.ascii	"playTestTone\000"
 5353      54657374 
 5353      546F6E65 
 5353      00
 5354              	.LASF95:
 5355 0349 50574D5F 		.ascii	"PWM_1_ReadStatusRegister\000"
 5355      315F5265 
 5355      61645374 
 5355      61747573 
 5355      52656769 
 5356              	.LASF30:
 5357 0362 484F524E 		.ascii	"HORN_PHASER\000"
 5357      5F504841 
 5357      53455200 
 5358              	.LASF121:
 5359 036e 66697273 		.ascii	"firstToneChoice\000"
 5359      74546F6E 
 5359      6543686F 
 5359      69636500 
 5360              	.LASF71:
 5361 037e 50574D74 		.ascii	"PWMtimer1_Start\000"
 5361      696D6572 
 5361      315F5374 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 117


 5361      61727400 
 5362              	.LASF110:
 5363 038e 6C6F7765 		.ascii	"lowestPWMcount\000"
 5363      73745057 
 5363      4D636F75 
 5363      6E7400
 5364              	.LASF39:
 5365 039d 52454D41 		.ascii	"REMAIN_IN_VEHICLE\000"
 5365      494E5F49 
 5365      4E5F5645 
 5365      4849434C 
 5365      4500
 5366              	.LASF35:
 5367 03af 4D4F5645 		.ascii	"MOVE_OUT\000"
 5367      5F4F5554 
 5367      00
 5368              	.LASF49:
 5369 03b8 64656C61 		.ascii	"delayUs\000"
 5369      79557300 
 5370              	.LASF139:
 5371 03c0 64656163 		.ascii	"deactivateManualWail\000"
 5371      74697661 
 5371      74654D61 
 5371      6E75616C 
 5371      5761696C 
 5372              	.LASF47:
 5373 03d5 6C6F7765 		.ascii	"lowestFrequency\000"
 5373      73744672 
 5373      65717565 
 5373      6E637900 
 5374              	.LASF20:
 5375 03e5 5741494C 		.ascii	"WAIL\000"
 5375      00
 5376              	.LASF16:
 5377 03ea 63686172 		.ascii	"char\000"
 5377      00
 5378              	.LASF130:
 5379 03ef 484F524E 		.ascii	"HORN_FIRST_FREQUENCY\000"
 5379      5F464952 
 5379      53545F46 
 5379      52455155 
 5379      454E4359 
 5380              	.LASF81:
 5381 0404 50574D5F 		.ascii	"PWM_2_WriteCompare\000"
 5381      325F5772 
 5381      69746543 
 5381      6F6D7061 
 5381      726500
 5382              	.LASF27:
 5383 0417 48494748 		.ascii	"HIGH_LOW\000"
 5383      5F4C4F57 
 5383      00
 5384              	.LASF12:
 5385 0420 75696E74 		.ascii	"uint16\000"
 5385      313600
 5386              	.LASF91:
 5387 0427 686F726E 		.ascii	"hornFrequencyCount\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 118


 5387      46726571 
 5387      75656E63 
 5387      79436F75 
 5387      6E7400
 5388              	.LASF132:
 5389 043a 4E4F5445 		.ascii	"NOTES_FREQUENCY_LIST\000"
 5389      535F4652 
 5389      45515545 
 5389      4E43595F 
 5389      4C495354 
 5390              	.LASF84:
 5391 044f 50574D5F 		.ascii	"PWM_1_WriteCompare\000"
 5391      315F5772 
 5391      69746543 
 5391      6F6D7061 
 5391      726500
 5392              	.LASF36:
 5393 0462 50554C4C 		.ascii	"PULL_OVER\000"
 5393      5F4F5645 
 5393      5200
 5394              	.LASF138:
 5395 046c 433A5C55 		.ascii	"C:\\Users\\marthnick\\Desktop\\F1-Test Fixture Firm"
 5395      73657273 
 5395      5C6D6172 
 5395      74686E69 
 5395      636B5C44 
 5396 049b 77617265 		.ascii	"ware\\ReleaseVersion.cydsn\000"
 5396      5C52656C 
 5396      65617365 
 5396      56657273 
 5396      696F6E2E 
 5397              	.LASF56:
 5398 04b5 6D656368 		.ascii	"mechanicalRampUpCount\000"
 5398      616E6963 
 5398      616C5261 
 5398      6D705570 
 5398      436F756E 
 5399              	.LASF6:
 5400 04cb 6C6F6E67 		.ascii	"long long int\000"
 5400      206C6F6E 
 5400      6720696E 
 5400      7400
 5401              	.LASF58:
 5402 04d9 636F6D62 		.ascii	"comboCount\000"
 5402      6F436F75 
 5402      6E7400
 5403              	.LASF122:
 5404 04e4 7365636F 		.ascii	"secondToneChoice\000"
 5404      6E64546F 
 5404      6E654368 
 5404      6F696365 
 5404      00
 5405              	.LASF61:
 5406 04f5 62546F6E 		.ascii	"bTonePlaying\000"
 5406      65506C61 
 5406      79696E67 
 5406      00
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 119


 5407              	.LASF67:
 5408 0502 62537065 		.ascii	"bSpeaker\000"
 5408      616B6572 
 5408      00
 5409              	.LASF119:
 5410 050b 484F4C44 		.ascii	"HOLD_NOTE_FACTOR\000"
 5410      5F4E4F54 
 5410      455F4641 
 5410      43544F52 
 5410      00
 5411              	.LASF63:
 5412 051c 624D616E 		.ascii	"bManualWailInputFlag\000"
 5412      75616C57 
 5412      61696C49 
 5412      6E707574 
 5412      466C6167 
 5413              	.LASF69:
 5414 0531 624D616E 		.ascii	"bManualWailInput\000"
 5414      75616C57 
 5414      61696C49 
 5414      6E707574 
 5414      00
 5415              	.LASF22:
 5416 0542 46415354 		.ascii	"FAST_YELP\000"
 5416      5F59454C 
 5416      5000
 5417              	.LASF112:
 5418 054c 706C6179 		.ascii	"playHighLowTone\000"
 5418      48696768 
 5418      4C6F7754 
 5418      6F6E6500 
 5419              	.LASF113:
 5420 055c 48494748 		.ascii	"HIGH_LOW_COUNT_LIMIT\000"
 5420      5F4C4F57 
 5420      5F434F55 
 5420      4E545F4C 
 5420      494D4954 
 5421              	.LASF13:
 5422 0571 75696E74 		.ascii	"uint32\000"
 5422      333200
 5423              	.LASF72:
 5424 0578 414D7578 		.ascii	"AMux1_FastSelect\000"
 5424      315F4661 
 5424      73745365 
 5424      6C656374 
 5424      00
 5425              	.LASF45:
 5426 0589 53594E43 		.ascii	"SYNC_TONES\000"
 5426      5F544F4E 
 5426      455300
 5427              	.LASF82:
 5428 0594 50574D5F 		.ascii	"PWM_2_Stop\000"
 5428      325F5374 
 5428      6F7000
 5429              	.LASF115:
 5430 059f 52414D50 		.ascii	"RAMP_UP_INITIAL_DIFFERENCE\000"
 5430      5F55505F 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 120


 5430      494E4954 
 5430      49414C5F 
 5430      44494646 
 5431              	.LASF17:
 5432 05ba 6C6F6E67 		.ascii	"long double\000"
 5432      20646F75 
 5432      626C6500 
 5433              	.LASF28:
 5434 05c6 5043414C 		.ascii	"PCALL_SLOW\000"
 5434      4C5F534C 
 5434      4F5700
 5435              	.LASF19:
 5436 05d1 4E4F5F54 		.ascii	"NO_TONE\000"
 5436      4F4E4500 
 5437              	.LASF32:
 5438 05d9 50484153 		.ascii	"PHASER_YELP\000"
 5438      45525F59 
 5438      454C5000 
 5439              	.LASF90:
 5440 05e5 484F524E 		.ascii	"HORN_FREQUENCY_COUNT_LIMIT\000"
 5440      5F465245 
 5440      5155454E 
 5440      43595F43 
 5440      4F554E54 
 5441              	.LASF78:
 5442 0600 50574D5F 		.ascii	"PWM_2_Start\000"
 5442      325F5374 
 5442      61727400 
 5443              	.LASF83:
 5444 060c 50574D74 		.ascii	"PWMtimer2_Stop\000"
 5444      696D6572 
 5444      325F5374 
 5444      6F7000
 5445              	.LASF100:
 5446 061b 50574D5F 		.ascii	"PWM_2_ReadStatusRegister\000"
 5446      325F5265 
 5446      61645374 
 5446      61747573 
 5446      52656769 
 5447              	.LASF89:
 5448 0634 50574D74 		.ascii	"PWMtimer1_ReadStatusRegister\000"
 5448      696D6572 
 5448      315F5265 
 5448      61645374 
 5448      61747573 
 5449              	.LASF2:
 5450 0651 73686F72 		.ascii	"short int\000"
 5450      7420696E 
 5450      7400
 5451              	.LASF4:
 5452 065b 6C6F6E67 		.ascii	"long int\000"
 5452      20696E74 
 5452      00
 5453              	.LASF76:
 5454 0664 50574D74 		.ascii	"PWMtimer2_WritePeriod\000"
 5454      696D6572 
 5454      325F5772 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 121


 5454      69746550 
 5454      6572696F 
 5455              	.LASF140:
 5456 067a 49544D5F 		.ascii	"ITM_RxBuffer\000"
 5456      52784275 
 5456      66666572 
 5456      00
 5457              	.LASF94:
 5458 0687 686F726E 		.ascii	"hornWiggleCount\000"
 5458      57696767 
 5458      6C65436F 
 5458      756E7400 
 5459              	.LASF60:
 5460 0697 62436F6D 		.ascii	"bComboSwitch\000"
 5460      626F5377 
 5460      69746368 
 5460      00
 5461              	.LASF135:
 5462 06a4 62456368 		.ascii	"bEchoEnable\000"
 5462      6F456E61 
 5462      626C6500 
 5463              	.LASF44:
 5464 06b0 4E4F5F45 		.ascii	"NO_EFFECT\000"
 5464      46464543 
 5464      5400
 5465              	.LASF127:
 5466 06ba 67657443 		.ascii	"getCaptureValue\000"
 5466      61707475 
 5466      72655661 
 5466      6C756500 
 5467              	.LASF92:
 5468 06ca 63617074 		.ascii	"captureValue\000"
 5468      75726556 
 5468      616C7565 
 5468      00
 5469              	.LASF18:
 5470 06d7 73697A65 		.ascii	"sizetype\000"
 5470      74797065 
 5470      00
 5471              	.LASF5:
 5472 06e0 6C6F6E67 		.ascii	"long unsigned int\000"
 5472      20756E73 
 5472      69676E65 
 5472      6420696E 
 5472      7400
 5473              	.LASF64:
 5474 06f2 62486F72 		.ascii	"bHornPWMenable\000"
 5474      6E50574D 
 5474      656E6162 
 5474      6C6500
 5475              	.LASF10:
 5476 0701 696E7433 		.ascii	"int32_t\000"
 5476      325F7400 
 5477              	.LASF133:
 5478 0709 73706561 		.ascii	"speakerDataList\000"
 5478      6B657244 
 5478      6174614C 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 122


 5478      69737400 
 5479              	.LASF97:
 5480 0719 50574D5F 		.ascii	"PWM_2_WritePeriod\000"
 5480      325F5772 
 5480      69746550 
 5480      6572696F 
 5480      6400
 5481              	.LASF108:
 5482 072b 63757272 		.ascii	"currentTone\000"
 5482      656E7454 
 5482      6F6E6500 
 5483              	.LASF118:
 5484 0737 706C6179 		.ascii	"playPCallTone\000"
 5484      5043616C 
 5484      6C546F6E 
 5484      6500
 5485              	.LASF55:
 5486 0745 50574D63 		.ascii	"PWMcountDifference\000"
 5486      6F756E74 
 5486      44696666 
 5486      6572656E 
 5486      636500
 5487              	.LASF1:
 5488 0758 756E7369 		.ascii	"unsigned char\000"
 5488      676E6564 
 5488      20636861 
 5488      7200
 5489              	.LASF103:
 5490 0766 7365636F 		.ascii	"secondTone\000"
 5490      6E64546F 
 5490      6E6500
 5491              	.LASF123:
 5492 0771 434F4D42 		.ascii	"COMBO_COUNT_LIMIT\000"
 5492      4F5F434F 
 5492      554E545F 
 5492      4C494D49 
 5492      5400
 5493              	.LASF101:
 5494 0783 69734D61 		.ascii	"isManualWailActive\000"
 5494      6E75616C 
 5494      5761696C 
 5494      41637469 
 5494      766500
 5495              	.LASF21:
 5496 0796 534C4F57 		.ascii	"SLOW_YELP\000"
 5496      5F59454C 
 5496      5000
 5497              	.LASF23:
 5498 07a0 50484153 		.ascii	"PHASER\000"
 5498      455200
 5499              	.LASF124:
 5500 07a7 64656C61 		.ascii	"delayFactor1\000"
 5500      79466163 
 5500      746F7231 
 5500      00
 5501              	.LASF125:
 5502 07b4 64656C61 		.ascii	"delayFactor2\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 123


 5502      79466163 
 5502      746F7232 
 5502      00
 5503              	.LASF109:
 5504 07c1 68696768 		.ascii	"highestPWMcount\000"
 5504      65737450 
 5504      574D636F 
 5504      756E7400 
 5505              	.LASF24:
 5506 07d1 484F524E 		.ascii	"HORN\000"
 5506      00
 5507              	.LASF107:
 5508 07d6 706C6179 		.ascii	"playGradualChangeTone\000"
 5508      47726164 
 5508      75616C43 
 5508      68616E67 
 5508      65546F6E 
 5509              	.LASF0:
 5510 07ec 7369676E 		.ascii	"signed char\000"
 5510      65642063 
 5510      68617200 
 5511              	.LASF3:
 5512 07f8 73686F72 		.ascii	"short unsigned int\000"
 5512      7420756E 
 5512      7369676E 
 5512      65642069 
 5512      6E7400
 5513              	.LASF88:
 5514 080b 50574D74 		.ascii	"PWMtimer2_ReadStatusRegister\000"
 5514      696D6572 
 5514      325F5265 
 5514      61645374 
 5514      61747573 
 5515              	.LASF75:
 5516 0828 50574D74 		.ascii	"PWMtimer2_Start\000"
 5516      696D6572 
 5516      325F5374 
 5516      61727400 
 5517              	.LASF46:
 5518 0838 44454C41 		.ascii	"DELAY_TONES\000"
 5518      595F544F 
 5518      4E455300 
 5519              	.LASF116:
 5520 0844 52414D50 		.ascii	"RAMP_UP_COUNT_LIMIT\000"
 5520      5F55505F 
 5520      434F554E 
 5520      545F4C49 
 5520      4D495400 
 5521              	.LASF52:
 5522 0858 546F6E65 		.ascii	"ToneStruct\000"
 5522      53747275 
 5522      637400
 5523              	.LASF11:
 5524 0863 75696E74 		.ascii	"uint8\000"
 5524      3800
 5525              	.LASF15:
 5526 0869 646F7562 		.ascii	"double\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccOjy7GP.s 			page 124


 5526      6C6500
 5527              	.LASF99:
 5528 0870 70726F63 		.ascii	"processPWM2updateRoutine\000"
 5528      65737350 
 5528      574D3275 
 5528      70646174 
 5528      65526F75 
 5529              	.LASF85:
 5530 0889 50574D5F 		.ascii	"PWM_1_Stop\000"
 5530      315F5374 
 5530      6F7000
 5531              	.LASF131:
 5532 0894 746F6E65 		.ascii	"toneList\000"
 5532      4C697374 
 5532      00
 5533              	.LASF70:
 5534 089d 62447561 		.ascii	"bDualDelayInput\000"
 5534      6C44656C 
 5534      6179496E 
 5534      70757400 
 5535              	.LASF68:
 5536 08ad 6E657754 		.ascii	"newTone\000"
 5536      6F6E6500 
 5537              	.LASF98:
 5538 08b5 70726F63 		.ascii	"processPWM1updateRoutine\000"
 5538      65737350 
 5538      574D3175 
 5538      70646174 
 5538      65526F75 
 5539              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
