ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"UART_230400_INT.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.UART_230400_TXISR,"ax",%progbits
  20              		.align	2
  21              		.global	UART_230400_TXISR
  22              		.thumb
  23              		.thumb_func
  24              		.type	UART_230400_TXISR, %function
  25              	UART_230400_TXISR:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\UART_230400_INT.c"
   1:Generated_Source\PSoC5/UART_230400_INT.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/UART_230400_INT.c **** * File Name: UART_230400INT.c
   3:Generated_Source\PSoC5/UART_230400_INT.c **** * Version 2.50
   4:Generated_Source\PSoC5/UART_230400_INT.c **** *
   5:Generated_Source\PSoC5/UART_230400_INT.c **** * Description:
   6:Generated_Source\PSoC5/UART_230400_INT.c **** *  This file provides all Interrupt Service functionality of the UART component
   7:Generated_Source\PSoC5/UART_230400_INT.c **** *
   8:Generated_Source\PSoC5/UART_230400_INT.c **** ********************************************************************************
   9:Generated_Source\PSoC5/UART_230400_INT.c **** * Copyright 2008-2015, Cypress Semiconductor Corporation.  All rights reserved.
  10:Generated_Source\PSoC5/UART_230400_INT.c **** * You may use this file only in accordance with the license, terms, conditions,
  11:Generated_Source\PSoC5/UART_230400_INT.c **** * disclaimers, and limitations in the end user license agreement accompanying
  12:Generated_Source\PSoC5/UART_230400_INT.c **** * the software package with which this file was provided.
  13:Generated_Source\PSoC5/UART_230400_INT.c **** *******************************************************************************/
  14:Generated_Source\PSoC5/UART_230400_INT.c **** 
  15:Generated_Source\PSoC5/UART_230400_INT.c **** #include "UART_230400.h"
  16:Generated_Source\PSoC5/UART_230400_INT.c **** #include "cyapicallbacks.h"
  17:Generated_Source\PSoC5/UART_230400_INT.c **** 
  18:Generated_Source\PSoC5/UART_230400_INT.c **** 
  19:Generated_Source\PSoC5/UART_230400_INT.c **** /***************************************
  20:Generated_Source\PSoC5/UART_230400_INT.c **** * Custom Declarations
  21:Generated_Source\PSoC5/UART_230400_INT.c **** ***************************************/
  22:Generated_Source\PSoC5/UART_230400_INT.c **** /* `#START CUSTOM_DECLARATIONS` Place your declaration here */
  23:Generated_Source\PSoC5/UART_230400_INT.c **** 
  24:Generated_Source\PSoC5/UART_230400_INT.c **** /* `#END` */
  25:Generated_Source\PSoC5/UART_230400_INT.c **** 
  26:Generated_Source\PSoC5/UART_230400_INT.c **** #if (UART_230400_RX_INTERRUPT_ENABLED && (UART_230400_RX_ENABLED || UART_230400_HD_ENABLED))
  27:Generated_Source\PSoC5/UART_230400_INT.c ****     /*******************************************************************************
  28:Generated_Source\PSoC5/UART_230400_INT.c ****     * Function Name: UART_230400_RXISR
  29:Generated_Source\PSoC5/UART_230400_INT.c ****     ********************************************************************************
  30:Generated_Source\PSoC5/UART_230400_INT.c ****     *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 2


  31:Generated_Source\PSoC5/UART_230400_INT.c ****     * Summary:
  32:Generated_Source\PSoC5/UART_230400_INT.c ****     *  Interrupt Service Routine for RX portion of the UART
  33:Generated_Source\PSoC5/UART_230400_INT.c ****     *
  34:Generated_Source\PSoC5/UART_230400_INT.c ****     * Parameters:
  35:Generated_Source\PSoC5/UART_230400_INT.c ****     *  None.
  36:Generated_Source\PSoC5/UART_230400_INT.c ****     *
  37:Generated_Source\PSoC5/UART_230400_INT.c ****     * Return:
  38:Generated_Source\PSoC5/UART_230400_INT.c ****     *  None.
  39:Generated_Source\PSoC5/UART_230400_INT.c ****     *
  40:Generated_Source\PSoC5/UART_230400_INT.c ****     * Global Variables:
  41:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBuffer - RAM buffer pointer for save received data.
  42:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBufferWrite - cyclic index for write to rxBuffer,
  43:Generated_Source\PSoC5/UART_230400_INT.c ****     *     increments after each byte saved to buffer.
  44:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBufferRead - cyclic index for read from rxBuffer,
  45:Generated_Source\PSoC5/UART_230400_INT.c ****     *     checked to detect overflow condition.
  46:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBufferOverflow - software overflow flag. Set to one
  47:Generated_Source\PSoC5/UART_230400_INT.c ****     *     when UART_230400_rxBufferWrite index overtakes
  48:Generated_Source\PSoC5/UART_230400_INT.c ****     *     UART_230400_rxBufferRead index.
  49:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBufferLoopDetect - additional variable to detect overflow.
  50:Generated_Source\PSoC5/UART_230400_INT.c ****     *     Set to one when UART_230400_rxBufferWrite is equal to
  51:Generated_Source\PSoC5/UART_230400_INT.c ****     *    UART_230400_rxBufferRead
  52:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxAddressMode - this variable contains the Address mode,
  53:Generated_Source\PSoC5/UART_230400_INT.c ****     *     selected in customizer or set by UART_SetRxAddressMode() API.
  54:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxAddressDetected - set to 1 when correct address received,
  55:Generated_Source\PSoC5/UART_230400_INT.c ****     *     and analysed to store following addressed data bytes to the buffer.
  56:Generated_Source\PSoC5/UART_230400_INT.c ****     *     When not correct address received, set to 0 to skip following data bytes.
  57:Generated_Source\PSoC5/UART_230400_INT.c ****     *
  58:Generated_Source\PSoC5/UART_230400_INT.c ****     *******************************************************************************/
  59:Generated_Source\PSoC5/UART_230400_INT.c ****     CY_ISR(UART_230400_RXISR)
  60:Generated_Source\PSoC5/UART_230400_INT.c ****     {
  61:Generated_Source\PSoC5/UART_230400_INT.c ****         uint8 readData;
  62:Generated_Source\PSoC5/UART_230400_INT.c ****         uint8 readStatus;
  63:Generated_Source\PSoC5/UART_230400_INT.c ****         uint8 increment_pointer = 0u;
  64:Generated_Source\PSoC5/UART_230400_INT.c **** 
  65:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)
  66:Generated_Source\PSoC5/UART_230400_INT.c ****         uint8 int_en;
  67:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
  68:Generated_Source\PSoC5/UART_230400_INT.c **** 
  69:Generated_Source\PSoC5/UART_230400_INT.c ****     #ifdef UART_230400_RXISR_ENTRY_CALLBACK
  70:Generated_Source\PSoC5/UART_230400_INT.c ****         UART_230400_RXISR_EntryCallback();
  71:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* UART_230400_RXISR_ENTRY_CALLBACK */
  72:Generated_Source\PSoC5/UART_230400_INT.c **** 
  73:Generated_Source\PSoC5/UART_230400_INT.c ****         /* User code required at start of ISR */
  74:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#START UART_230400_RXISR_START` */
  75:Generated_Source\PSoC5/UART_230400_INT.c **** 
  76:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#END` */
  77:Generated_Source\PSoC5/UART_230400_INT.c **** 
  78:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
  79:Generated_Source\PSoC5/UART_230400_INT.c ****         int_en = EA;
  80:Generated_Source\PSoC5/UART_230400_INT.c ****         CyGlobalIntEnable;
  81:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
  82:Generated_Source\PSoC5/UART_230400_INT.c **** 
  83:Generated_Source\PSoC5/UART_230400_INT.c ****         do
  84:Generated_Source\PSoC5/UART_230400_INT.c ****         {
  85:Generated_Source\PSoC5/UART_230400_INT.c ****             /* Read receiver status register */
  86:Generated_Source\PSoC5/UART_230400_INT.c ****             readStatus = UART_230400_RXSTATUS_REG;
  87:Generated_Source\PSoC5/UART_230400_INT.c ****             /* Copy the same status to readData variable for backward compatibility support 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 3


  88:Generated_Source\PSoC5/UART_230400_INT.c ****             *  of the user code in UART_230400_RXISR_ERROR` section. 
  89:Generated_Source\PSoC5/UART_230400_INT.c ****             */
  90:Generated_Source\PSoC5/UART_230400_INT.c ****             readData = readStatus;
  91:Generated_Source\PSoC5/UART_230400_INT.c **** 
  92:Generated_Source\PSoC5/UART_230400_INT.c ****             if((readStatus & (UART_230400_RX_STS_BREAK | 
  93:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_RX_STS_PAR_ERROR |
  94:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_RX_STS_STOP_ERROR | 
  95:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_RX_STS_OVERRUN)) != 0u)
  96:Generated_Source\PSoC5/UART_230400_INT.c ****             {
  97:Generated_Source\PSoC5/UART_230400_INT.c ****                 /* ERROR handling. */
  98:Generated_Source\PSoC5/UART_230400_INT.c ****                 UART_230400_errorStatus |= readStatus & ( UART_230400_RX_STS_BREAK | 
  99:Generated_Source\PSoC5/UART_230400_INT.c ****                                                             UART_230400_RX_STS_PAR_ERROR | 
 100:Generated_Source\PSoC5/UART_230400_INT.c ****                                                             UART_230400_RX_STS_STOP_ERROR | 
 101:Generated_Source\PSoC5/UART_230400_INT.c ****                                                             UART_230400_RX_STS_OVERRUN);
 102:Generated_Source\PSoC5/UART_230400_INT.c ****                 /* `#START UART_230400_RXISR_ERROR` */
 103:Generated_Source\PSoC5/UART_230400_INT.c **** 
 104:Generated_Source\PSoC5/UART_230400_INT.c ****                 /* `#END` */
 105:Generated_Source\PSoC5/UART_230400_INT.c ****                 
 106:Generated_Source\PSoC5/UART_230400_INT.c ****             #ifdef UART_230400_RXISR_ERROR_CALLBACK
 107:Generated_Source\PSoC5/UART_230400_INT.c ****                 UART_230400_RXISR_ERROR_Callback();
 108:Generated_Source\PSoC5/UART_230400_INT.c ****             #endif /* UART_230400_RXISR_ERROR_CALLBACK */
 109:Generated_Source\PSoC5/UART_230400_INT.c ****             }
 110:Generated_Source\PSoC5/UART_230400_INT.c ****             
 111:Generated_Source\PSoC5/UART_230400_INT.c ****             if((readStatus & UART_230400_RX_STS_FIFO_NOTEMPTY) != 0u)
 112:Generated_Source\PSoC5/UART_230400_INT.c ****             {
 113:Generated_Source\PSoC5/UART_230400_INT.c ****                 /* Read data from the RX data register */
 114:Generated_Source\PSoC5/UART_230400_INT.c ****                 readData = UART_230400_RXDATA_REG;
 115:Generated_Source\PSoC5/UART_230400_INT.c ****             #if (UART_230400_RXHW_ADDRESS_ENABLED)
 116:Generated_Source\PSoC5/UART_230400_INT.c ****                 if(UART_230400_rxAddressMode == (uint8)UART_230400__B_UART__AM_SW_DETECT_TO_BUFFER)
 117:Generated_Source\PSoC5/UART_230400_INT.c ****                 {
 118:Generated_Source\PSoC5/UART_230400_INT.c ****                     if((readStatus & UART_230400_RX_STS_MRKSPC) != 0u)
 119:Generated_Source\PSoC5/UART_230400_INT.c ****                     {
 120:Generated_Source\PSoC5/UART_230400_INT.c ****                         if ((readStatus & UART_230400_RX_STS_ADDR_MATCH) != 0u)
 121:Generated_Source\PSoC5/UART_230400_INT.c ****                         {
 122:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_rxAddressDetected = 1u;
 123:Generated_Source\PSoC5/UART_230400_INT.c ****                         }
 124:Generated_Source\PSoC5/UART_230400_INT.c ****                         else
 125:Generated_Source\PSoC5/UART_230400_INT.c ****                         {
 126:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_rxAddressDetected = 0u;
 127:Generated_Source\PSoC5/UART_230400_INT.c ****                         }
 128:Generated_Source\PSoC5/UART_230400_INT.c ****                     }
 129:Generated_Source\PSoC5/UART_230400_INT.c ****                     if(UART_230400_rxAddressDetected != 0u)
 130:Generated_Source\PSoC5/UART_230400_INT.c ****                     {   /* Store only addressed data */
 131:Generated_Source\PSoC5/UART_230400_INT.c ****                         UART_230400_rxBuffer[UART_230400_rxBufferWrite] = readData;
 132:Generated_Source\PSoC5/UART_230400_INT.c ****                         increment_pointer = 1u;
 133:Generated_Source\PSoC5/UART_230400_INT.c ****                     }
 134:Generated_Source\PSoC5/UART_230400_INT.c ****                 }
 135:Generated_Source\PSoC5/UART_230400_INT.c ****                 else /* Without software addressing */
 136:Generated_Source\PSoC5/UART_230400_INT.c ****                 {
 137:Generated_Source\PSoC5/UART_230400_INT.c ****                     UART_230400_rxBuffer[UART_230400_rxBufferWrite] = readData;
 138:Generated_Source\PSoC5/UART_230400_INT.c ****                     increment_pointer = 1u;
 139:Generated_Source\PSoC5/UART_230400_INT.c ****                 }
 140:Generated_Source\PSoC5/UART_230400_INT.c ****             #else  /* Without addressing */
 141:Generated_Source\PSoC5/UART_230400_INT.c ****                 UART_230400_rxBuffer[UART_230400_rxBufferWrite] = readData;
 142:Generated_Source\PSoC5/UART_230400_INT.c ****                 increment_pointer = 1u;
 143:Generated_Source\PSoC5/UART_230400_INT.c ****             #endif /* (UART_230400_RXHW_ADDRESS_ENABLED) */
 144:Generated_Source\PSoC5/UART_230400_INT.c **** 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 4


 145:Generated_Source\PSoC5/UART_230400_INT.c ****                 /* Do not increment buffer pointer when skip not addressed data */
 146:Generated_Source\PSoC5/UART_230400_INT.c ****                 if(increment_pointer != 0u)
 147:Generated_Source\PSoC5/UART_230400_INT.c ****                 {
 148:Generated_Source\PSoC5/UART_230400_INT.c ****                     if(UART_230400_rxBufferLoopDetect != 0u)
 149:Generated_Source\PSoC5/UART_230400_INT.c ****                     {   /* Set Software Buffer status Overflow */
 150:Generated_Source\PSoC5/UART_230400_INT.c ****                         UART_230400_rxBufferOverflow = 1u;
 151:Generated_Source\PSoC5/UART_230400_INT.c ****                     }
 152:Generated_Source\PSoC5/UART_230400_INT.c ****                     /* Set next pointer. */
 153:Generated_Source\PSoC5/UART_230400_INT.c ****                     UART_230400_rxBufferWrite++;
 154:Generated_Source\PSoC5/UART_230400_INT.c **** 
 155:Generated_Source\PSoC5/UART_230400_INT.c ****                     /* Check pointer for a loop condition */
 156:Generated_Source\PSoC5/UART_230400_INT.c ****                     if(UART_230400_rxBufferWrite >= UART_230400_RX_BUFFER_SIZE)
 157:Generated_Source\PSoC5/UART_230400_INT.c ****                     {
 158:Generated_Source\PSoC5/UART_230400_INT.c ****                         UART_230400_rxBufferWrite = 0u;
 159:Generated_Source\PSoC5/UART_230400_INT.c ****                     }
 160:Generated_Source\PSoC5/UART_230400_INT.c **** 
 161:Generated_Source\PSoC5/UART_230400_INT.c ****                     /* Detect pre-overload condition and set flag */
 162:Generated_Source\PSoC5/UART_230400_INT.c ****                     if(UART_230400_rxBufferWrite == UART_230400_rxBufferRead)
 163:Generated_Source\PSoC5/UART_230400_INT.c ****                     {
 164:Generated_Source\PSoC5/UART_230400_INT.c ****                         UART_230400_rxBufferLoopDetect = 1u;
 165:Generated_Source\PSoC5/UART_230400_INT.c ****                         /* When Hardware Flow Control selected */
 166:Generated_Source\PSoC5/UART_230400_INT.c ****                         #if (UART_230400_FLOW_CONTROL != 0u)
 167:Generated_Source\PSoC5/UART_230400_INT.c ****                             /* Disable RX interrupt mask, it is enabled when user read data from th
 168:Generated_Source\PSoC5/UART_230400_INT.c ****                             UART_230400_RXSTATUS_MASK_REG  &= (uint8)~UART_230400_RX_STS_FIFO_NOTEM
 169:Generated_Source\PSoC5/UART_230400_INT.c ****                             CyIntClearPending(UART_230400_RX_VECT_NUM);
 170:Generated_Source\PSoC5/UART_230400_INT.c ****                             break; /* Break the reading of the FIFO loop, leave the data there for 
 171:Generated_Source\PSoC5/UART_230400_INT.c ****                         #endif /* (UART_230400_FLOW_CONTROL != 0u) */
 172:Generated_Source\PSoC5/UART_230400_INT.c ****                     }
 173:Generated_Source\PSoC5/UART_230400_INT.c ****                 }
 174:Generated_Source\PSoC5/UART_230400_INT.c ****             }
 175:Generated_Source\PSoC5/UART_230400_INT.c ****         }while((readStatus & UART_230400_RX_STS_FIFO_NOTEMPTY) != 0u);
 176:Generated_Source\PSoC5/UART_230400_INT.c **** 
 177:Generated_Source\PSoC5/UART_230400_INT.c ****         /* User code required at end of ISR (Optional) */
 178:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#START UART_230400_RXISR_END` */
 179:Generated_Source\PSoC5/UART_230400_INT.c **** 
 180:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#END` */
 181:Generated_Source\PSoC5/UART_230400_INT.c **** 
 182:Generated_Source\PSoC5/UART_230400_INT.c ****     #ifdef UART_230400_RXISR_EXIT_CALLBACK
 183:Generated_Source\PSoC5/UART_230400_INT.c ****         UART_230400_RXISR_ExitCallback();
 184:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* UART_230400_RXISR_EXIT_CALLBACK */
 185:Generated_Source\PSoC5/UART_230400_INT.c **** 
 186:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)
 187:Generated_Source\PSoC5/UART_230400_INT.c ****         EA = int_en;
 188:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
 189:Generated_Source\PSoC5/UART_230400_INT.c ****     }
 190:Generated_Source\PSoC5/UART_230400_INT.c ****     
 191:Generated_Source\PSoC5/UART_230400_INT.c **** #endif /* (UART_230400_RX_INTERRUPT_ENABLED && (UART_230400_RX_ENABLED || UART_230400_HD_ENABLED)) 
 192:Generated_Source\PSoC5/UART_230400_INT.c **** 
 193:Generated_Source\PSoC5/UART_230400_INT.c **** 
 194:Generated_Source\PSoC5/UART_230400_INT.c **** #if (UART_230400_TX_INTERRUPT_ENABLED && UART_230400_TX_ENABLED)
 195:Generated_Source\PSoC5/UART_230400_INT.c ****     /*******************************************************************************
 196:Generated_Source\PSoC5/UART_230400_INT.c ****     * Function Name: UART_230400_TXISR
 197:Generated_Source\PSoC5/UART_230400_INT.c ****     ********************************************************************************
 198:Generated_Source\PSoC5/UART_230400_INT.c ****     *
 199:Generated_Source\PSoC5/UART_230400_INT.c ****     * Summary:
 200:Generated_Source\PSoC5/UART_230400_INT.c ****     * Interrupt Service Routine for the TX portion of the UART
 201:Generated_Source\PSoC5/UART_230400_INT.c ****     *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 5


 202:Generated_Source\PSoC5/UART_230400_INT.c ****     * Parameters:
 203:Generated_Source\PSoC5/UART_230400_INT.c ****     *  None.
 204:Generated_Source\PSoC5/UART_230400_INT.c ****     *
 205:Generated_Source\PSoC5/UART_230400_INT.c ****     * Return:
 206:Generated_Source\PSoC5/UART_230400_INT.c ****     *  None.
 207:Generated_Source\PSoC5/UART_230400_INT.c ****     *
 208:Generated_Source\PSoC5/UART_230400_INT.c ****     * Global Variables:
 209:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_txBuffer - RAM buffer pointer for transmit data from.
 210:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_txBufferRead - cyclic index for read and transmit data
 211:Generated_Source\PSoC5/UART_230400_INT.c ****     *     from txBuffer, increments after each transmitted byte.
 212:Generated_Source\PSoC5/UART_230400_INT.c ****     *  UART_230400_rxBufferWrite - cyclic index for write to txBuffer,
 213:Generated_Source\PSoC5/UART_230400_INT.c ****     *     checked to detect available for transmission bytes.
 214:Generated_Source\PSoC5/UART_230400_INT.c ****     *
 215:Generated_Source\PSoC5/UART_230400_INT.c ****     *******************************************************************************/
 216:Generated_Source\PSoC5/UART_230400_INT.c ****     CY_ISR(UART_230400_TXISR)
 217:Generated_Source\PSoC5/UART_230400_INT.c ****     {
  28              		.loc 1 217 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 1, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 80B4     		push	{r7}
  34              		.cfi_def_cfa_offset 4
  35              		.cfi_offset 7, -4
  36 0002 00AF     		add	r7, sp, #0
  37              		.cfi_def_cfa_register 7
 218:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)
 219:Generated_Source\PSoC5/UART_230400_INT.c ****         uint8 int_en;
 220:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
 221:Generated_Source\PSoC5/UART_230400_INT.c **** 
 222:Generated_Source\PSoC5/UART_230400_INT.c ****     #ifdef UART_230400_TXISR_ENTRY_CALLBACK
 223:Generated_Source\PSoC5/UART_230400_INT.c ****         UART_230400_TXISR_EntryCallback();
 224:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* UART_230400_TXISR_ENTRY_CALLBACK */
 225:Generated_Source\PSoC5/UART_230400_INT.c **** 
 226:Generated_Source\PSoC5/UART_230400_INT.c ****         /* User code required at start of ISR */
 227:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#START UART_230400_TXISR_START` */
 228:Generated_Source\PSoC5/UART_230400_INT.c **** 
 229:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#END` */
 230:Generated_Source\PSoC5/UART_230400_INT.c **** 
 231:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)   /* Make sure nested interrupt is enabled */
 232:Generated_Source\PSoC5/UART_230400_INT.c ****         int_en = EA;
 233:Generated_Source\PSoC5/UART_230400_INT.c ****         CyGlobalIntEnable;
 234:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
 235:Generated_Source\PSoC5/UART_230400_INT.c **** 
 236:Generated_Source\PSoC5/UART_230400_INT.c ****         while((UART_230400_txBufferRead != UART_230400_txBufferWrite) &&
  38              		.loc 1 236 0
  39 0004 18E0     		b	.L2
  40              	.L5:
 237:Generated_Source\PSoC5/UART_230400_INT.c ****              ((UART_230400_TXSTATUS_REG & UART_230400_TX_STS_FIFO_FULL) == 0u))
 238:Generated_Source\PSoC5/UART_230400_INT.c ****         {
 239:Generated_Source\PSoC5/UART_230400_INT.c ****             /* Check pointer wrap around */
 240:Generated_Source\PSoC5/UART_230400_INT.c ****             if(UART_230400_txBufferRead >= UART_230400_TX_BUFFER_SIZE)
  41              		.loc 1 240 0
  42 0006 154B     		ldr	r3, .L7
  43 0008 1B88     		ldrh	r3, [r3]	@ movhi
  44 000a 9BB2     		uxth	r3, r3
  45 000c B3F5806F 		cmp	r3, #1024
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 6


  46 0010 02D3     		bcc	.L3
 241:Generated_Source\PSoC5/UART_230400_INT.c ****             {
 242:Generated_Source\PSoC5/UART_230400_INT.c ****                 UART_230400_txBufferRead = 0u;
  47              		.loc 1 242 0
  48 0012 124B     		ldr	r3, .L7
  49 0014 0022     		movs	r2, #0
  50 0016 1A80     		strh	r2, [r3]	@ movhi
  51              	.L3:
 243:Generated_Source\PSoC5/UART_230400_INT.c ****             }
 244:Generated_Source\PSoC5/UART_230400_INT.c **** 
 245:Generated_Source\PSoC5/UART_230400_INT.c ****             UART_230400_TXDATA_REG = UART_230400_txBuffer[UART_230400_txBufferRead];
  52              		.loc 1 245 0
  53 0018 114B     		ldr	r3, .L7+4
  54 001a 104A     		ldr	r2, .L7
  55 001c 1288     		ldrh	r2, [r2]	@ movhi
  56 001e 92B2     		uxth	r2, r2
  57 0020 1146     		mov	r1, r2
  58 0022 104A     		ldr	r2, .L7+8
  59 0024 525C     		ldrb	r2, [r2, r1]
  60 0026 D2B2     		uxtb	r2, r2
  61 0028 1A70     		strb	r2, [r3]
 246:Generated_Source\PSoC5/UART_230400_INT.c **** 
 247:Generated_Source\PSoC5/UART_230400_INT.c ****             /* Set next pointer */
 248:Generated_Source\PSoC5/UART_230400_INT.c ****             UART_230400_txBufferRead++;
  62              		.loc 1 248 0
  63 002a 0C4B     		ldr	r3, .L7
  64 002c 1B88     		ldrh	r3, [r3]	@ movhi
  65 002e 9BB2     		uxth	r3, r3
  66 0030 0133     		adds	r3, r3, #1
  67 0032 9AB2     		uxth	r2, r3
  68 0034 094B     		ldr	r3, .L7
  69 0036 1A80     		strh	r2, [r3]	@ movhi
  70              	.L2:
 236:Generated_Source\PSoC5/UART_230400_INT.c ****              ((UART_230400_TXSTATUS_REG & UART_230400_TX_STS_FIFO_FULL) == 0u))
  71              		.loc 1 236 0
  72 0038 084B     		ldr	r3, .L7
  73 003a 1B88     		ldrh	r3, [r3]	@ movhi
  74 003c 9AB2     		uxth	r2, r3
  75 003e 0A4B     		ldr	r3, .L7+12
  76 0040 1B88     		ldrh	r3, [r3]
  77 0042 9A42     		cmp	r2, r3
  78 0044 06D0     		beq	.L6
 237:Generated_Source\PSoC5/UART_230400_INT.c ****         {
  79              		.loc 1 237 0 discriminator 1
  80 0046 094B     		ldr	r3, .L7+16
  81 0048 1B78     		ldrb	r3, [r3]
  82 004a DBB2     		uxtb	r3, r3
  83 004c 03F00403 		and	r3, r3, #4
 236:Generated_Source\PSoC5/UART_230400_INT.c ****              ((UART_230400_TXSTATUS_REG & UART_230400_TX_STS_FIFO_FULL) == 0u))
  84              		.loc 1 236 0 discriminator 1
  85 0050 002B     		cmp	r3, #0
  86 0052 D8D0     		beq	.L5
  87              	.L6:
 249:Generated_Source\PSoC5/UART_230400_INT.c ****         }
 250:Generated_Source\PSoC5/UART_230400_INT.c **** 
 251:Generated_Source\PSoC5/UART_230400_INT.c ****         /* User code required at end of ISR (Optional) */
 252:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#START UART_230400_TXISR_END` */
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 7


 253:Generated_Source\PSoC5/UART_230400_INT.c **** 
 254:Generated_Source\PSoC5/UART_230400_INT.c ****         /* `#END` */
 255:Generated_Source\PSoC5/UART_230400_INT.c **** 
 256:Generated_Source\PSoC5/UART_230400_INT.c ****     #ifdef UART_230400_TXISR_EXIT_CALLBACK
 257:Generated_Source\PSoC5/UART_230400_INT.c ****         UART_230400_TXISR_ExitCallback();
 258:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* UART_230400_TXISR_EXIT_CALLBACK */
 259:Generated_Source\PSoC5/UART_230400_INT.c **** 
 260:Generated_Source\PSoC5/UART_230400_INT.c ****     #if(CY_PSOC3)
 261:Generated_Source\PSoC5/UART_230400_INT.c ****         EA = int_en;
 262:Generated_Source\PSoC5/UART_230400_INT.c ****     #endif /* (CY_PSOC3) */
 263:Generated_Source\PSoC5/UART_230400_INT.c ****    }
  88              		.loc 1 263 0
  89 0054 00BF     		nop
  90 0056 BD46     		mov	sp, r7
  91              		.cfi_def_cfa_register 13
  92              		@ sp needed
  93 0058 80BC     		pop	{r7}
  94              		.cfi_restore 7
  95              		.cfi_def_cfa_offset 0
  96 005a 7047     		bx	lr
  97              	.L8:
  98              		.align	2
  99              	.L7:
 100 005c 00000000 		.word	UART_230400_txBufferRead
 101 0060 45640040 		.word	1073767493
 102 0064 00000000 		.word	UART_230400_txBuffer
 103 0068 00000000 		.word	UART_230400_txBufferWrite
 104 006c 65640040 		.word	1073767525
 105              		.cfi_endproc
 106              	.LFE0:
 107              		.size	UART_230400_TXISR, .-UART_230400_TXISR
 108              		.text
 109              	.Letext0:
 110              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 111              		.file 3 "Generated_Source\\PSoC5\\UART_230400.h"
 112              		.section	.debug_info,"",%progbits
 113              	.Ldebug_info0:
 114 0000 04010000 		.4byte	0x104
 115 0004 0400     		.2byte	0x4
 116 0006 00000000 		.4byte	.Ldebug_abbrev0
 117 000a 04       		.byte	0x4
 118 000b 01       		.uleb128 0x1
 119 000c 6F000000 		.4byte	.LASF20
 120 0010 0C       		.byte	0xc
 121 0011 CF010000 		.4byte	.LASF21
 122 0015 6A010000 		.4byte	.LASF22
 123 0019 00000000 		.4byte	.Ldebug_ranges0+0
 124 001d 00000000 		.4byte	0
 125 0021 00000000 		.4byte	.Ldebug_line0
 126 0025 02       		.uleb128 0x2
 127 0026 01       		.byte	0x1
 128 0027 06       		.byte	0x6
 129 0028 5E010000 		.4byte	.LASF0
 130 002c 02       		.uleb128 0x2
 131 002d 01       		.byte	0x1
 132 002e 08       		.byte	0x8
 133 002f FD000000 		.4byte	.LASF1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 8


 134 0033 02       		.uleb128 0x2
 135 0034 02       		.byte	0x2
 136 0035 05       		.byte	0x5
 137 0036 BE010000 		.4byte	.LASF2
 138 003a 02       		.uleb128 0x2
 139 003b 02       		.byte	0x2
 140 003c 07       		.byte	0x7
 141 003d 4B010000 		.4byte	.LASF3
 142 0041 02       		.uleb128 0x2
 143 0042 04       		.byte	0x4
 144 0043 05       		.byte	0x5
 145 0044 10010000 		.4byte	.LASF4
 146 0048 02       		.uleb128 0x2
 147 0049 04       		.byte	0x4
 148 004a 07       		.byte	0x7
 149 004b 26000000 		.4byte	.LASF5
 150 004f 02       		.uleb128 0x2
 151 0050 08       		.byte	0x8
 152 0051 05       		.byte	0x5
 153 0052 00000000 		.4byte	.LASF6
 154 0056 02       		.uleb128 0x2
 155 0057 08       		.byte	0x8
 156 0058 07       		.byte	0x7
 157 0059 38000000 		.4byte	.LASF7
 158 005d 03       		.uleb128 0x3
 159 005e 04       		.byte	0x4
 160 005f 05       		.byte	0x5
 161 0060 696E7400 		.ascii	"int\000"
 162 0064 02       		.uleb128 0x2
 163 0065 04       		.byte	0x4
 164 0066 07       		.byte	0x7
 165 0067 0E000000 		.4byte	.LASF8
 166 006b 04       		.uleb128 0x4
 167 006c 20000000 		.4byte	.LASF9
 168 0070 02       		.byte	0x2
 169 0071 E401     		.2byte	0x1e4
 170 0073 2C000000 		.4byte	0x2c
 171 0077 04       		.uleb128 0x4
 172 0078 C8010000 		.4byte	.LASF10
 173 007c 02       		.byte	0x2
 174 007d E501     		.2byte	0x1e5
 175 007f 3A000000 		.4byte	0x3a
 176 0083 02       		.uleb128 0x2
 177 0084 04       		.byte	0x4
 178 0085 04       		.byte	0x4
 179 0086 4F000000 		.4byte	.LASF11
 180 008a 02       		.uleb128 0x2
 181 008b 08       		.byte	0x8
 182 008c 04       		.byte	0x4
 183 008d 2B010000 		.4byte	.LASF12
 184 0091 02       		.uleb128 0x2
 185 0092 01       		.byte	0x1
 186 0093 08       		.byte	0x8
 187 0094 0B010000 		.4byte	.LASF13
 188 0098 04       		.uleb128 0x4
 189 0099 1B000000 		.4byte	.LASF14
 190 009d 02       		.byte	0x2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 9


 191 009e 8E02     		.2byte	0x28e
 192 00a0 A4000000 		.4byte	0xa4
 193 00a4 05       		.uleb128 0x5
 194 00a5 6B000000 		.4byte	0x6b
 195 00a9 05       		.uleb128 0x5
 196 00aa 77000000 		.4byte	0x77
 197 00ae 02       		.uleb128 0x2
 198 00af 08       		.byte	0x8
 199 00b0 04       		.byte	0x4
 200 00b1 B2010000 		.4byte	.LASF15
 201 00b5 02       		.uleb128 0x2
 202 00b6 04       		.byte	0x4
 203 00b7 07       		.byte	0x7
 204 00b8 F8010000 		.4byte	.LASF16
 205 00bc 06       		.uleb128 0x6
 206 00bd 19010000 		.4byte	.LASF23
 207 00c1 01       		.byte	0x1
 208 00c2 D8       		.byte	0xd8
 209 00c3 00000000 		.4byte	.LFB0
 210 00c7 70000000 		.4byte	.LFE0-.LFB0
 211 00cb 01       		.uleb128 0x1
 212 00cc 9C       		.byte	0x9c
 213 00cd 07       		.uleb128 0x7
 214 00ce A4000000 		.4byte	0xa4
 215 00d2 DE000000 		.4byte	0xde
 216 00d6 08       		.uleb128 0x8
 217 00d7 B5000000 		.4byte	0xb5
 218 00db FF03     		.2byte	0x3ff
 219 00dd 00       		.byte	0
 220 00de 09       		.uleb128 0x9
 221 00df 01020000 		.4byte	.LASF17
 222 00e3 03       		.byte	0x3
 223 00e4 3801     		.2byte	0x138
 224 00e6 EA000000 		.4byte	0xea
 225 00ea 05       		.uleb128 0x5
 226 00eb CD000000 		.4byte	0xcd
 227 00ef 09       		.uleb128 0x9
 228 00f0 32010000 		.4byte	.LASF18
 229 00f4 03       		.byte	0x3
 230 00f5 3901     		.2byte	0x139
 231 00f7 A9000000 		.4byte	0xa9
 232 00fb 09       		.uleb128 0x9
 233 00fc 55000000 		.4byte	.LASF19
 234 0100 03       		.byte	0x3
 235 0101 3A01     		.2byte	0x13a
 236 0103 77000000 		.4byte	0x77
 237 0107 00       		.byte	0
 238              		.section	.debug_abbrev,"",%progbits
 239              	.Ldebug_abbrev0:
 240 0000 01       		.uleb128 0x1
 241 0001 11       		.uleb128 0x11
 242 0002 01       		.byte	0x1
 243 0003 25       		.uleb128 0x25
 244 0004 0E       		.uleb128 0xe
 245 0005 13       		.uleb128 0x13
 246 0006 0B       		.uleb128 0xb
 247 0007 03       		.uleb128 0x3
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 10


 248 0008 0E       		.uleb128 0xe
 249 0009 1B       		.uleb128 0x1b
 250 000a 0E       		.uleb128 0xe
 251 000b 55       		.uleb128 0x55
 252 000c 17       		.uleb128 0x17
 253 000d 11       		.uleb128 0x11
 254 000e 01       		.uleb128 0x1
 255 000f 10       		.uleb128 0x10
 256 0010 17       		.uleb128 0x17
 257 0011 00       		.byte	0
 258 0012 00       		.byte	0
 259 0013 02       		.uleb128 0x2
 260 0014 24       		.uleb128 0x24
 261 0015 00       		.byte	0
 262 0016 0B       		.uleb128 0xb
 263 0017 0B       		.uleb128 0xb
 264 0018 3E       		.uleb128 0x3e
 265 0019 0B       		.uleb128 0xb
 266 001a 03       		.uleb128 0x3
 267 001b 0E       		.uleb128 0xe
 268 001c 00       		.byte	0
 269 001d 00       		.byte	0
 270 001e 03       		.uleb128 0x3
 271 001f 24       		.uleb128 0x24
 272 0020 00       		.byte	0
 273 0021 0B       		.uleb128 0xb
 274 0022 0B       		.uleb128 0xb
 275 0023 3E       		.uleb128 0x3e
 276 0024 0B       		.uleb128 0xb
 277 0025 03       		.uleb128 0x3
 278 0026 08       		.uleb128 0x8
 279 0027 00       		.byte	0
 280 0028 00       		.byte	0
 281 0029 04       		.uleb128 0x4
 282 002a 16       		.uleb128 0x16
 283 002b 00       		.byte	0
 284 002c 03       		.uleb128 0x3
 285 002d 0E       		.uleb128 0xe
 286 002e 3A       		.uleb128 0x3a
 287 002f 0B       		.uleb128 0xb
 288 0030 3B       		.uleb128 0x3b
 289 0031 05       		.uleb128 0x5
 290 0032 49       		.uleb128 0x49
 291 0033 13       		.uleb128 0x13
 292 0034 00       		.byte	0
 293 0035 00       		.byte	0
 294 0036 05       		.uleb128 0x5
 295 0037 35       		.uleb128 0x35
 296 0038 00       		.byte	0
 297 0039 49       		.uleb128 0x49
 298 003a 13       		.uleb128 0x13
 299 003b 00       		.byte	0
 300 003c 00       		.byte	0
 301 003d 06       		.uleb128 0x6
 302 003e 2E       		.uleb128 0x2e
 303 003f 00       		.byte	0
 304 0040 3F       		.uleb128 0x3f
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 11


 305 0041 19       		.uleb128 0x19
 306 0042 03       		.uleb128 0x3
 307 0043 0E       		.uleb128 0xe
 308 0044 3A       		.uleb128 0x3a
 309 0045 0B       		.uleb128 0xb
 310 0046 3B       		.uleb128 0x3b
 311 0047 0B       		.uleb128 0xb
 312 0048 27       		.uleb128 0x27
 313 0049 19       		.uleb128 0x19
 314 004a 11       		.uleb128 0x11
 315 004b 01       		.uleb128 0x1
 316 004c 12       		.uleb128 0x12
 317 004d 06       		.uleb128 0x6
 318 004e 40       		.uleb128 0x40
 319 004f 18       		.uleb128 0x18
 320 0050 9742     		.uleb128 0x2117
 321 0052 19       		.uleb128 0x19
 322 0053 00       		.byte	0
 323 0054 00       		.byte	0
 324 0055 07       		.uleb128 0x7
 325 0056 01       		.uleb128 0x1
 326 0057 01       		.byte	0x1
 327 0058 49       		.uleb128 0x49
 328 0059 13       		.uleb128 0x13
 329 005a 01       		.uleb128 0x1
 330 005b 13       		.uleb128 0x13
 331 005c 00       		.byte	0
 332 005d 00       		.byte	0
 333 005e 08       		.uleb128 0x8
 334 005f 21       		.uleb128 0x21
 335 0060 00       		.byte	0
 336 0061 49       		.uleb128 0x49
 337 0062 13       		.uleb128 0x13
 338 0063 2F       		.uleb128 0x2f
 339 0064 05       		.uleb128 0x5
 340 0065 00       		.byte	0
 341 0066 00       		.byte	0
 342 0067 09       		.uleb128 0x9
 343 0068 34       		.uleb128 0x34
 344 0069 00       		.byte	0
 345 006a 03       		.uleb128 0x3
 346 006b 0E       		.uleb128 0xe
 347 006c 3A       		.uleb128 0x3a
 348 006d 0B       		.uleb128 0xb
 349 006e 3B       		.uleb128 0x3b
 350 006f 05       		.uleb128 0x5
 351 0070 49       		.uleb128 0x49
 352 0071 13       		.uleb128 0x13
 353 0072 3F       		.uleb128 0x3f
 354 0073 19       		.uleb128 0x19
 355 0074 3C       		.uleb128 0x3c
 356 0075 19       		.uleb128 0x19
 357 0076 00       		.byte	0
 358 0077 00       		.byte	0
 359 0078 00       		.byte	0
 360              		.section	.debug_aranges,"",%progbits
 361 0000 1C000000 		.4byte	0x1c
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 12


 362 0004 0200     		.2byte	0x2
 363 0006 00000000 		.4byte	.Ldebug_info0
 364 000a 04       		.byte	0x4
 365 000b 00       		.byte	0
 366 000c 0000     		.2byte	0
 367 000e 0000     		.2byte	0
 368 0010 00000000 		.4byte	.LFB0
 369 0014 70000000 		.4byte	.LFE0-.LFB0
 370 0018 00000000 		.4byte	0
 371 001c 00000000 		.4byte	0
 372              		.section	.debug_ranges,"",%progbits
 373              	.Ldebug_ranges0:
 374 0000 00000000 		.4byte	.LFB0
 375 0004 70000000 		.4byte	.LFE0
 376 0008 00000000 		.4byte	0
 377 000c 00000000 		.4byte	0
 378              		.section	.debug_line,"",%progbits
 379              	.Ldebug_line0:
 380 0000 8A000000 		.section	.debug_str,"MS",%progbits,1
 380      02005D00 
 380      00000201 
 380      FB0E0D00 
 380      01010101 
 381              	.LASF6:
 382 0000 6C6F6E67 		.ascii	"long long int\000"
 382      206C6F6E 
 382      6720696E 
 382      7400
 383              	.LASF8:
 384 000e 756E7369 		.ascii	"unsigned int\000"
 384      676E6564 
 384      20696E74 
 384      00
 385              	.LASF14:
 386 001b 72656738 		.ascii	"reg8\000"
 386      00
 387              	.LASF9:
 388 0020 75696E74 		.ascii	"uint8\000"
 388      3800
 389              	.LASF5:
 390 0026 6C6F6E67 		.ascii	"long unsigned int\000"
 390      20756E73 
 390      69676E65 
 390      6420696E 
 390      7400
 391              	.LASF7:
 392 0038 6C6F6E67 		.ascii	"long long unsigned int\000"
 392      206C6F6E 
 392      6720756E 
 392      7369676E 
 392      65642069 
 393              	.LASF11:
 394 004f 666C6F61 		.ascii	"float\000"
 394      7400
 395              	.LASF19:
 396 0055 55415254 		.ascii	"UART_230400_txBufferWrite\000"
 396      5F323330 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 13


 396      3430305F 
 396      74784275 
 396      66666572 
 397              	.LASF20:
 398 006f 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 398      43313120 
 398      352E342E 
 398      31203230 
 398      31363036 
 399 00a2 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 399      20726576 
 399      6973696F 
 399      6E203233 
 399      37373135 
 400 00d5 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 400      66756E63 
 400      74696F6E 
 400      2D736563 
 400      74696F6E 
 401              	.LASF1:
 402 00fd 756E7369 		.ascii	"unsigned char\000"
 402      676E6564 
 402      20636861 
 402      7200
 403              	.LASF13:
 404 010b 63686172 		.ascii	"char\000"
 404      00
 405              	.LASF4:
 406 0110 6C6F6E67 		.ascii	"long int\000"
 406      20696E74 
 406      00
 407              	.LASF23:
 408 0119 55415254 		.ascii	"UART_230400_TXISR\000"
 408      5F323330 
 408      3430305F 
 408      54584953 
 408      5200
 409              	.LASF12:
 410 012b 646F7562 		.ascii	"double\000"
 410      6C6500
 411              	.LASF18:
 412 0132 55415254 		.ascii	"UART_230400_txBufferRead\000"
 412      5F323330 
 412      3430305F 
 412      74784275 
 412      66666572 
 413              	.LASF3:
 414 014b 73686F72 		.ascii	"short unsigned int\000"
 414      7420756E 
 414      7369676E 
 414      65642069 
 414      6E7400
 415              	.LASF0:
 416 015e 7369676E 		.ascii	"signed char\000"
 416      65642063 
 416      68617200 
 417              	.LASF22:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccMhA5Of.s 			page 14


 418 016a 433A5C55 		.ascii	"C:\\Users\\marthnick\\Desktop\\F1-TestFixture _Sand"
 418      73657273 
 418      5C6D6172 
 418      74686E69 
 418      636B5C44 
 419 0199 626F785C 		.ascii	"box\\F1-TestFixture.cydsn\000"
 419      46312D54 
 419      65737446 
 419      69787475 
 419      72652E63 
 420              	.LASF15:
 421 01b2 6C6F6E67 		.ascii	"long double\000"
 421      20646F75 
 421      626C6500 
 422              	.LASF2:
 423 01be 73686F72 		.ascii	"short int\000"
 423      7420696E 
 423      7400
 424              	.LASF10:
 425 01c8 75696E74 		.ascii	"uint16\000"
 425      313600
 426              	.LASF21:
 427 01cf 47656E65 		.ascii	"Generated_Source\\PSoC5\\UART_230400_INT.c\000"
 427      72617465 
 427      645F536F 
 427      75726365 
 427      5C50536F 
 428              	.LASF16:
 429 01f8 73697A65 		.ascii	"sizetype\000"
 429      74797065 
 429      00
 430              	.LASF17:
 431 0201 55415254 		.ascii	"UART_230400_txBuffer\000"
 431      5F323330 
 431      3430305F 
 431      74784275 
 431      66666572 
 432              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
