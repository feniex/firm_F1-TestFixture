ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SirenState.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.rodata
  20              		.align	2
  21              		.type	DEFAULT_CONFIGURATION_LIST, %object
  22              		.size	DEFAULT_CONFIGURATION_LIST, 12
  23              	DEFAULT_CONFIGURATION_LIST:
  24 0000 0E       		.byte	14
  25 0001 01       		.byte	1
  26 0002 02       		.byte	2
  27 0003 04       		.byte	4
  28 0004 05       		.byte	5
  29 0005 0B       		.byte	11
  30 0006 0F       		.byte	15
  31 0007 01       		.byte	1
  32 0008 02       		.byte	2
  33 0009 04       		.byte	4
  34 000a 05       		.byte	5
  35 000b 0B       		.byte	11
  36              		.align	1
  37              		.type	EEPROM_KEY_INDEX, %object
  38              		.size	EEPROM_KEY_INDEX, 2
  39              	EEPROM_KEY_INDEX:
  40 000c FF00     		.short	255
  41              		.type	EEPROM_KEY_VALUE, %object
  42              		.size	EEPROM_KEY_VALUE, 1
  43              	EEPROM_KEY_VALUE:
  44 000e AA       		.byte	-86
  45              		.bss
  46              		.align	2
  47              	toneConfigurationList:
  48 0000 00000000 		.space	12
  48      00000000 
  48      00000000 
  49              		.align	2
  50              	InputRead:
  51 000c 00000000 		.space	7
  51      000000
  52 0013 00       		.align	2
  53              	ToneStatus:
  54 0014 00000000 		.space	7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 2


  54      000000
  55              		.section	.text.enableToneInputInterrupts,"ax",%progbits
  56              		.align	2
  57              		.global	enableToneInputInterrupts
  58              		.thumb
  59              		.thumb_func
  60              		.type	enableToneInputInterrupts, %function
  61              	enableToneInputInterrupts:
  62              	.LFB63:
  63              		.file 1 "SirenState.c"
   1:SirenState.c  **** /* ========================================
   2:SirenState.c  ****  *
   3:SirenState.c  ****  * Copyright YOUR COMPANY, THE YEAR
   4:SirenState.c  ****  * All Rights Reserved
   5:SirenState.c  ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:SirenState.c  ****  *
   7:SirenState.c  ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:SirenState.c  ****  * WHICH IS THE PROPERTY OF your company.
   9:SirenState.c  ****  *
  10:SirenState.c  ****  * ========================================
  11:SirenState.c  **** */
  12:SirenState.c  **** 
  13:SirenState.c  **** /**********PREPROCESSOR DIRECTIVES**********/
  14:SirenState.c  **** #include "CommonVariables.h"
  15:SirenState.c  **** #include "SirenState.h"
  16:SirenState.c  **** //#include "Tones.h"
  17:SirenState.c  **** //#include "DACaudio.h"
  18:SirenState.c  **** 
  19:SirenState.c  **** /**********DEFINED CONSTANTS**********/
  20:SirenState.c  **** enum ChannelIndex
  21:SirenState.c  **** {
  22:SirenState.c  **** 	CHANNEL_1 = 0,
  23:SirenState.c  **** 	CHANNEL_2 = 1,
  24:SirenState.c  **** 	CHANNEL_3 = 2,
  25:SirenState.c  **** 	CHANNEL_4 = 3,
  26:SirenState.c  **** 	CHANNEL_5 = 4,
  27:SirenState.c  **** 	CHANNEL_6 = 5,
  28:SirenState.c  **** 	NO_CHANNEL = 0xFF
  29:SirenState.c  **** };
  30:SirenState.c  **** 
  31:SirenState.c  **** enum BitMask
  32:SirenState.c  **** {
  33:SirenState.c  **** 	BIT0 = 0x01,
  34:SirenState.c  **** 	BIT1 = 0x02,
  35:SirenState.c  **** 	BIT2 = 0x04,
  36:SirenState.c  **** 	BIT3 = 0x08,
  37:SirenState.c  **** 	BIT4 = 0x10,
  38:SirenState.c  **** 	BIT5 = 0x20,
  39:SirenState.c  **** 	BIT6 = 0x40,
  40:SirenState.c  **** 	BIT7 = 0x80
  41:SirenState.c  **** };
  42:SirenState.c  **** 
  43:SirenState.c  **** static const uint8 DEFAULT_CONFIGURATION_LIST[SPEAKER_COUNT * CHANNEL_COUNT_PER_SPEAKER] = 
  44:SirenState.c  ****     {ECTOSIREN, WAIL, SLOW_YELP, PHASER, HORN, HORN_PHASER,
  45:SirenState.c  ****     COPS_SONG, WAIL, SLOW_YELP, PHASER, HORN, HORN_PHASER};
  46:SirenState.c  **** 
  47:SirenState.c  **** static const uint16 EEPROM_KEY_INDEX = 0xFF;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 3


  48:SirenState.c  **** static const uint8 EEPROM_KEY_VALUE = 0xAA;
  49:SirenState.c  **** 
  50:SirenState.c  **** /**********DATA STRUCTURES**********/
  51:SirenState.c  **** static enum ToneType toneConfigurationList[SPEAKER_COUNT][CHANNEL_COUNT_PER_SPEAKER];
  52:SirenState.c  ****     
  53:SirenState.c  **** static struct
  54:SirenState.c  **** {
  55:SirenState.c  ****     uint8 bRadioAndMicKey;
  56:SirenState.c  ****     uint8 bParkKill;
  57:SirenState.c  ****     uint8 bTackSwitch;
  58:SirenState.c  ****     uint8 bHornRing;
  59:SirenState.c  ****     uint8 bDualDelay;
  60:SirenState.c  ****     enum ChannelIndex highestPriorityChannel[SPEAKER_COUNT];
  61:SirenState.c  **** }InputRead;
  62:SirenState.c  **** 
  63:SirenState.c  **** static struct
  64:SirenState.c  **** {
  65:SirenState.c  ****     enum ToneType previousTone[SPEAKER_COUNT];
  66:SirenState.c  ****     enum ToneType currentTone[SPEAKER_COUNT];
  67:SirenState.c  ****     uint8 bRisingEdge[SPEAKER_COUNT];
  68:SirenState.c  ****     uint8 bDualDelayEnable;
  69:SirenState.c  **** }ToneStatus;
  70:SirenState.c  **** 
  71:SirenState.c  **** /**********GLOBAL VARIABLES**********/
  72:SirenState.c  **** 
  73:SirenState.c  **** 
  74:SirenState.c  **** /**********FUNCTION PROTOTYPES**********/
  75:SirenState.c  **** static void decideTonesToPlay(void);
  76:SirenState.c  **** static uint8 enableSpeakerForSirenTone(uint8 bSpeaker, enum ToneType toneSelection, uint8 bInputEna
  77:SirenState.c  **** static uint8 enableSpeakersForAudioTone(uint8 bSpeaker, enum ToneType toneSelection, uint8 bInputEn
  78:SirenState.c  **** static enum ChannelIndex getHighestPriorityChannel(uint8 bSpeakerNumber);
  79:SirenState.c  **** static enum ToneType getAlternatingTone(enum ToneType toneSelection);
  80:SirenState.c  **** static uint8 isTrailingTone(enum ToneType thisTone);
  81:SirenState.c  **** static uint8 isAudioTone(enum ToneType thisTone);
  82:SirenState.c  **** static uint8 isCommand(enum ToneType thisTone);
  83:SirenState.c  **** static uint8 isSong(enum ToneType thisTone);
  84:SirenState.c  **** static uint8 getBitIndex(enum BitMask maskNumber);
  85:SirenState.c  **** 
  86:SirenState.c  **** /**********DEFINED FUNCTIONS**********/
  87:SirenState.c  **** /*******************************************************************************
  88:SirenState.c  **** * Function Name: initializeToneConfigurationList
  89:SirenState.c  **** ********************************************************************************
  90:SirenState.c  **** *
  91:SirenState.c  **** * Summary:
  92:SirenState.c  **** *  Sets the configuration list to the tones saved in EEPROM
  93:SirenState.c  **** *
  94:SirenState.c  **** * Parameters:  
  95:SirenState.c  **** *   None
  96:SirenState.c  **** *
  97:SirenState.c  **** * Return:
  98:SirenState.c  **** *   None
  99:SirenState.c  **** *
 100:SirenState.c  **** *******************************************************************************/
 101:SirenState.c  **** //void initializeToneConfigurationList(void)
 102:SirenState.c  **** //{
 103:SirenState.c  **** //    uint8 bHasNoTone = false;  
 104:SirenState.c  **** //    uint8 bSpeakerIndex = SPEAKER_1;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 4


 105:SirenState.c  **** //    uint8 channelIndex = NO_CHANNEL;   
 106:SirenState.c  **** //    uint16 addressIndex = 0;
 107:SirenState.c  **** //    
 108:SirenState.c  **** ////    EEPROM_Start();   
 109:SirenState.c  **** //    
 110:SirenState.c  **** //    for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 111:SirenState.c  **** //    {   //Check for indices with no tone written to it
 112:SirenState.c  **** //        for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
 113:SirenState.c  **** //        {
 114:SirenState.c  **** //            addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 115:SirenState.c  **** //            if(EEPROM_ReadByte(addressIndex) >= TONE_TYPE_LIST_SIZE)
 116:SirenState.c  **** //            {   //Terminate loop after finding first invalid tone
 117:SirenState.c  **** //                bHasNoTone = true;
 118:SirenState.c  **** //                break;
 119:SirenState.c  **** //            }
 120:SirenState.c  **** //        }
 121:SirenState.c  **** //    }
 122:SirenState.c  **** //    
 123:SirenState.c  **** //    if((bHasNoTone == true) || (EEPROM_ReadByte(EEPROM_KEY_INDEX) != EEPROM_KEY_VALUE))
 124:SirenState.c  **** //    {   //Write to EEPROM 
 125:SirenState.c  **** //        EEPROM_UpdateTemperature(); //Optimizes write timings based on temperature reading 
 126:SirenState.c  **** //        
 127:SirenState.c  **** //        for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 128:SirenState.c  **** //        {   //Obtain tones from EEPROM to configure channels
 129:SirenState.c  **** //            for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
 130:SirenState.c  **** //            {
 131:SirenState.c  **** //                addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex)
 132:SirenState.c  **** //                EEPROM_WriteByte(DEFAULT_CONFIGURATION_LIST[addressIndex], addressIndex);
 133:SirenState.c  **** //            }
 134:SirenState.c  **** //        }
 135:SirenState.c  **** //        
 136:SirenState.c  **** //        EEPROM_WriteByte(EEPROM_KEY_VALUE, EEPROM_KEY_INDEX);
 137:SirenState.c  **** //    }
 138:SirenState.c  **** //    
 139:SirenState.c  **** //    for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 140:SirenState.c  **** //    {   //Obtain tones from EEPROM to configure channels
 141:SirenState.c  **** //        for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
 142:SirenState.c  **** //        {
 143:SirenState.c  **** //            addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 144:SirenState.c  **** //            toneConfigurationList[bSpeakerIndex][channelIndex] = EEPROM_ReadByte(addressIndex);
 145:SirenState.c  **** //        }
 146:SirenState.c  **** //    }
 147:SirenState.c  **** //}
 148:SirenState.c  **** 
 149:SirenState.c  **** /*******************************************************************************
 150:SirenState.c  **** * Function Name: enableToneInputInterrupts
 151:SirenState.c  **** ********************************************************************************
 152:SirenState.c  **** *
 153:SirenState.c  **** * Summary:
 154:SirenState.c  **** *   Enables the input interrupts that cannot be activated during Data Link
 155:SirenState.c  **** *
 156:SirenState.c  **** * Parameters:  
 157:SirenState.c  **** *   None
 158:SirenState.c  **** *
 159:SirenState.c  **** * Return:
 160:SirenState.c  **** *   None
 161:SirenState.c  **** *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 5


 162:SirenState.c  **** *******************************************************************************/
 163:SirenState.c  **** void enableToneInputInterrupts(void)
 164:SirenState.c  **** {
  64              		.loc 1 164 0
  65              		.cfi_startproc
  66              		@ args = 0, pretend = 0, frame = 0
  67              		@ frame_needed = 1, uses_anonymous_args = 0
  68              		@ link register save eliminated.
  69 0000 80B4     		push	{r7}
  70              		.cfi_def_cfa_offset 4
  71              		.cfi_offset 7, -4
  72 0002 00AF     		add	r7, sp, #0
  73              		.cfi_def_cfa_register 7
 165:SirenState.c  ****     //TackSwitchISR_Start();
 166:SirenState.c  ****     //TackSwitchStatus_InterruptEnable();
 167:SirenState.c  ****     
 168:SirenState.c  ****     //DualDelayISR_Start();
 169:SirenState.c  ****     //DualDelayStatus_InterruptEnable();
 170:SirenState.c  ****     
 171:SirenState.c  ****     //ModeStatusISR_Start();
 172:SirenState.c  **** }
  74              		.loc 1 172 0
  75 0004 00BF     		nop
  76 0006 BD46     		mov	sp, r7
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 0008 80BC     		pop	{r7}
  80              		.cfi_restore 7
  81              		.cfi_def_cfa_offset 0
  82 000a 7047     		bx	lr
  83              		.cfi_endproc
  84              	.LFE63:
  85              		.size	enableToneInputInterrupts, .-enableToneInputInterrupts
  86              		.section	.text.disableToneInputInterrupts,"ax",%progbits
  87              		.align	2
  88              		.global	disableToneInputInterrupts
  89              		.thumb
  90              		.thumb_func
  91              		.type	disableToneInputInterrupts, %function
  92              	disableToneInputInterrupts:
  93              	.LFB64:
 173:SirenState.c  **** 
 174:SirenState.c  **** /*******************************************************************************
 175:SirenState.c  **** * Function Name: disableToneInputInterrupts
 176:SirenState.c  **** ********************************************************************************
 177:SirenState.c  **** *
 178:SirenState.c  **** * Summary:
 179:SirenState.c  **** *   Disables specific input interrupts that cannot be activated during Data Link
 180:SirenState.c  **** *
 181:SirenState.c  **** * Parameters:  
 182:SirenState.c  **** *   None
 183:SirenState.c  **** *
 184:SirenState.c  **** * Return:
 185:SirenState.c  **** *   None
 186:SirenState.c  **** *
 187:SirenState.c  **** *******************************************************************************/
 188:SirenState.c  **** void disableToneInputInterrupts(void)
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 6


 189:SirenState.c  **** {
  94              		.loc 1 189 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 1, uses_anonymous_args = 0
  98              		@ link register save eliminated.
  99 0000 80B4     		push	{r7}
 100              		.cfi_def_cfa_offset 4
 101              		.cfi_offset 7, -4
 102 0002 00AF     		add	r7, sp, #0
 103              		.cfi_def_cfa_register 7
 190:SirenState.c  ****     //TackSwitchStatus_InterruptDisable();
 191:SirenState.c  ****     //TackSwitchISR_Stop();
 192:SirenState.c  ****     
 193:SirenState.c  ****     //DualDelayStatus_InterruptDisable();
 194:SirenState.c  ****     //DualDelayISR_Stop();
 195:SirenState.c  ****     
 196:SirenState.c  ****     //ModeStatusISR_Stop();
 197:SirenState.c  **** }
 104              		.loc 1 197 0
 105 0004 00BF     		nop
 106 0006 BD46     		mov	sp, r7
 107              		.cfi_def_cfa_register 13
 108              		@ sp needed
 109 0008 80BC     		pop	{r7}
 110              		.cfi_restore 7
 111              		.cfi_def_cfa_offset 0
 112 000a 7047     		bx	lr
 113              		.cfi_endproc
 114              	.LFE64:
 115              		.size	disableToneInputInterrupts, .-disableToneInputInterrupts
 116              		.section	.text.initializeInputReadings,"ax",%progbits
 117              		.align	2
 118              		.global	initializeInputReadings
 119              		.thumb
 120              		.thumb_func
 121              		.type	initializeInputReadings, %function
 122              	initializeInputReadings:
 123              	.LFB65:
 198:SirenState.c  **** 
 199:SirenState.c  **** /*******************************************************************************
 200:SirenState.c  **** * Function Name: initializeInputReadings
 201:SirenState.c  **** ********************************************************************************
 202:SirenState.c  **** *
 203:SirenState.c  **** * Summary:
 204:SirenState.c  **** *  Sets InputRead struct to current input readings at the beginning of the program
 205:SirenState.c  **** *
 206:SirenState.c  **** * Parameters:  
 207:SirenState.c  **** *   None
 208:SirenState.c  **** *
 209:SirenState.c  **** * Return:
 210:SirenState.c  **** *   None
 211:SirenState.c  **** *
 212:SirenState.c  **** *******************************************************************************/
 213:SirenState.c  **** void initializeInputReadings(void)
 214:SirenState.c  **** {
 124              		.loc 1 214 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 7


 125              		.cfi_startproc
 126              		@ args = 0, pretend = 0, frame = 8
 127              		@ frame_needed = 1, uses_anonymous_args = 0
 128 0000 80B5     		push	{r7, lr}
 129              		.cfi_def_cfa_offset 8
 130              		.cfi_offset 7, -8
 131              		.cfi_offset 14, -4
 132 0002 82B0     		sub	sp, sp, #8
 133              		.cfi_def_cfa_offset 16
 134 0004 00AF     		add	r7, sp, #0
 135              		.cfi_def_cfa_register 7
 215:SirenState.c  **** 	uint8 speakerIndex = 0;
 136              		.loc 1 215 0
 137 0006 0023     		movs	r3, #0
 138 0008 FB71     		strb	r3, [r7, #7]
 216:SirenState.c  **** 	
 217:SirenState.c  **** //***    InputRead.bRadioAndMicKey = RadioRebroadcastInput_Read();
 218:SirenState.c  ****     InputRead.bRadioAndMicKey |= MicKeyInput_Read();
 139              		.loc 1 218 0
 140 000a FFF7FEFF 		bl	MicKeyInput_Read
 141 000e 0346     		mov	r3, r0
 142 0010 1A46     		mov	r2, r3
 143 0012 064B     		ldr	r3, .L4
 144 0014 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 145 0016 1343     		orrs	r3, r3, r2
 146 0018 DAB2     		uxtb	r2, r3
 147 001a 044B     		ldr	r3, .L4
 148 001c 1A70     		strb	r2, [r3]
 219:SirenState.c  ****     
 220:SirenState.c  ****     
 221:SirenState.c  ****     //InputRead.bParkKill = ParkKillStatus_Read() & 0x01;
 222:SirenState.c  ****     //InputRead.bHornRing = HornRingStatus_Read() & 0x01;
 223:SirenState.c  **** 	
 224:SirenState.c  **** 	//for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 225:SirenState.c  **** 	//	InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 226:SirenState.c  ****     
 227:SirenState.c  ****     decideTonesToPlay();
 149              		.loc 1 227 0
 150 001e FFF7FEFF 		bl	decideTonesToPlay
 228:SirenState.c  **** }
 151              		.loc 1 228 0
 152 0022 00BF     		nop
 153 0024 0837     		adds	r7, r7, #8
 154              		.cfi_def_cfa_offset 8
 155 0026 BD46     		mov	sp, r7
 156              		.cfi_def_cfa_register 13
 157              		@ sp needed
 158 0028 80BD     		pop	{r7, pc}
 159              	.L5:
 160 002a 00BF     		.align	2
 161              	.L4:
 162 002c 0C000000 		.word	InputRead
 163              		.cfi_endproc
 164              	.LFE65:
 165              		.size	initializeInputReadings, .-initializeInputReadings
 166              		.section	.text.processTackSwitchRoutine,"ax",%progbits
 167              		.align	2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 8


 168              		.global	processTackSwitchRoutine
 169              		.thumb
 170              		.thumb_func
 171              		.type	processTackSwitchRoutine, %function
 172              	processTackSwitchRoutine:
 173              	.LFB66:
 229:SirenState.c  **** 
 230:SirenState.c  **** /*******************************************************************************
 231:SirenState.c  **** * Function Name: processTackSwitchRoutine
 232:SirenState.c  **** ********************************************************************************
 233:SirenState.c  **** *
 234:SirenState.c  **** * Summary:
 235:SirenState.c  **** *  Cycles through the tones and configures the tone selection for the specified
 236:SirenState.c  **** *  input, called in TackSwitchISR
 237:SirenState.c  **** *
 238:SirenState.c  **** * Parameters:  
 239:SirenState.c  **** *   None
 240:SirenState.c  **** *
 241:SirenState.c  **** * Return:
 242:SirenState.c  **** *   None
 243:SirenState.c  **** *
 244:SirenState.c  **** *******************************************************************************/
 245:SirenState.c  **** void processTackSwitchRoutine(void)
 246:SirenState.c  **** {
 174              		.loc 1 246 0
 175              		.cfi_startproc
 176              		@ args = 0, pretend = 0, frame = 8
 177              		@ frame_needed = 1, uses_anonymous_args = 0
 178 0000 90B5     		push	{r4, r7, lr}
 179              		.cfi_def_cfa_offset 12
 180              		.cfi_offset 4, -12
 181              		.cfi_offset 7, -8
 182              		.cfi_offset 14, -4
 183 0002 83B0     		sub	sp, sp, #12
 184              		.cfi_def_cfa_offset 24
 185 0004 00AF     		add	r7, sp, #0
 186              		.cfi_def_cfa_register 7
 247:SirenState.c  ****     enum ToneType toneToPlay = NO_TONE;
 187              		.loc 1 247 0
 188 0006 0023     		movs	r3, #0
 189 0008 FB71     		strb	r3, [r7, #7]
 248:SirenState.c  ****     uint16 addressIndex = 0;
 190              		.loc 1 248 0
 191 000a 0023     		movs	r3, #0
 192 000c BB80     		strh	r3, [r7, #4]	@ movhi
 249:SirenState.c  ****     uint8 channelIndex = 0;
 193              		.loc 1 249 0
 194 000e 0023     		movs	r3, #0
 195 0010 FB70     		strb	r3, [r7, #3]
 250:SirenState.c  ****     uint8 bSpeakerIndex = 0;
 196              		.loc 1 250 0
 197 0012 0023     		movs	r3, #0
 198 0014 BB71     		strb	r3, [r7, #6]
 251:SirenState.c  ****     
 252:SirenState.c  ****     //InputRead.bTackSwitch = TackSwitchStatus_Read() & 0x01;
 253:SirenState.c  ****     
 254:SirenState.c  ****     if((!InputRead.bRadioAndMicKey) && (!InputRead.bParkKill))
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 9


 199              		.loc 1 254 0
 200 0016 3C4B     		ldr	r3, .L14
 201 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 202 001a 002B     		cmp	r3, #0
 203 001c 70D1     		bne	.L13
 204              		.loc 1 254 0 is_stmt 0 discriminator 1
 205 001e 3A4B     		ldr	r3, .L14
 206 0020 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 207 0022 002B     		cmp	r3, #0
 208 0024 6CD1     		bne	.L13
 255:SirenState.c  ****     {
 256:SirenState.c  ****         if(InputRead.bTackSwitch)
 209              		.loc 1 256 0 is_stmt 1
 210 0026 384B     		ldr	r3, .L14
 211 0028 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 212 002a 002B     		cmp	r3, #0
 213 002c 06D0     		beq	.L8
 214              	.LBB2:
 257:SirenState.c  ****         {
 258:SirenState.c  ****             deactivateManualWail();
 215              		.loc 1 258 0
 216 002e FFF7FEFF 		bl	deactivateManualWail
 259:SirenState.c  **** 	        deactivateAudio();
 217              		.loc 1 259 0
 218 0032 FFF7FEFF 		bl	deactivateAudio
 260:SirenState.c  **** 			disableAudioAndPWM();
 219              		.loc 1 260 0
 220 0036 FFF7FEFF 		bl	disableAudioAndPWM
 221              	.LBE2:
 261:SirenState.c  ****         }
 262:SirenState.c  ****         else
 263:SirenState.c  ****         {   //Tack switch is disabled
 264:SirenState.c  ****             EEPROM_UpdateTemperature(); //Optimizes write timings based on temperature reading
 265:SirenState.c  ****             
 266:SirenState.c  ****             for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 267:SirenState.c  ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 268:SirenState.c  ****                 channelIndex = InputRead.highestPriorityChannel[bSpeakerIndex];
 269:SirenState.c  ****                 addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 270:SirenState.c  ****                 
 271:SirenState.c  ****                 if(channelIndex != NO_CHANNEL)
 272:SirenState.c  ****                 {
 273:SirenState.c  ****                     if(toneToPlay == NO_TONE)
 274:SirenState.c  ****                     {   //Gets original tone for that channel as starting tone in the list         
 275:SirenState.c  ****                         toneToPlay = EEPROM_ReadByte(addressIndex);    
 276:SirenState.c  ****                         toneToPlay = (toneToPlay + 1) % TONE_TYPE_LIST_SIZE;  //Increments to next 
 277:SirenState.c  ****                         
 278:SirenState.c  ****                         if(toneToPlay == NO_TONE)
 279:SirenState.c  ****                             toneToPlay++;  //Makes sure a tone is always selected
 280:SirenState.c  ****                     }
 281:SirenState.c  ****                     
 282:SirenState.c  ****                     EEPROM_WriteByte(toneToPlay, addressIndex);
 283:SirenState.c  **** 					toneConfigurationList[bSpeakerIndex][channelIndex] = toneToPlay;
 284:SirenState.c  **** 					ToneStatus.previousTone[bSpeakerIndex] = ToneStatus.currentTone[bSpeakerIndex];
 285:SirenState.c  **** 					ToneStatus.currentTone[bSpeakerIndex] = toneToPlay;
 286:SirenState.c  **** 					ToneStatus.bRisingEdge[bSpeakerIndex] = true;
 287:SirenState.c  ****                 }
 288:SirenState.c  ****             }
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 10


 289:SirenState.c  ****             
 290:SirenState.c  ****             decideTonesToPlay();  
 291:SirenState.c  ****         }
 292:SirenState.c  ****     }
 293:SirenState.c  **** }
 222              		.loc 1 293 0
 223 003a 61E0     		b	.L13
 224              	.L8:
 225              	.LBB3:
 264:SirenState.c  ****             
 226              		.loc 1 264 0
 227 003c FFF7FEFF 		bl	EEPROM_UpdateTemperature
 266:SirenState.c  ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 228              		.loc 1 266 0
 229 0040 0023     		movs	r3, #0
 230 0042 BB71     		strb	r3, [r7, #6]
 231 0044 57E0     		b	.L9
 232              	.L12:
 268:SirenState.c  ****                 addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 233              		.loc 1 268 0
 234 0046 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 235 0048 2F4A     		ldr	r2, .L14
 236 004a 1344     		add	r3, r3, r2
 237 004c 5B79     		ldrb	r3, [r3, #5]
 238 004e FB70     		strb	r3, [r7, #3]
 269:SirenState.c  ****                 
 239              		.loc 1 269 0
 240 0050 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 241 0052 9BB2     		uxth	r3, r3
 242 0054 1A46     		mov	r2, r3	@ movhi
 243 0056 5200     		lsls	r2, r2, #1
 244 0058 1344     		add	r3, r3, r2
 245 005a 5B00     		lsls	r3, r3, #1
 246 005c 9AB2     		uxth	r2, r3
 247 005e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 248 0060 9BB2     		uxth	r3, r3
 249 0062 1344     		add	r3, r3, r2
 250 0064 BB80     		strh	r3, [r7, #4]	@ movhi
 271:SirenState.c  ****                 {
 251              		.loc 1 271 0
 252 0066 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 253 0068 FF2B     		cmp	r3, #255
 254 006a 41D0     		beq	.L10
 255              	.LBB4:
 273:SirenState.c  ****                     {   //Gets original tone for that channel as starting tone in the list         
 256              		.loc 1 273 0
 257 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 258 006e 002B     		cmp	r3, #0
 259 0070 1CD1     		bne	.L11
 260              	.LBB5:
 275:SirenState.c  ****                         toneToPlay = (toneToPlay + 1) % TONE_TYPE_LIST_SIZE;  //Increments to next 
 261              		.loc 1 275 0
 262 0072 BB88     		ldrh	r3, [r7, #4]
 263 0074 1846     		mov	r0, r3
 264 0076 FFF7FEFF 		bl	EEPROM_ReadByte
 265 007a 0346     		mov	r3, r0
 266 007c FB71     		strb	r3, [r7, #7]
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 11


 276:SirenState.c  ****                         
 267              		.loc 1 276 0
 268 007e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 269 0080 5A1C     		adds	r2, r3, #1
 270 0082 224B     		ldr	r3, .L14+4
 271 0084 82FB0334 		smull	r3, r4, r2, r3
 272 0088 1319     		adds	r3, r2, r4
 273 008a 1911     		asrs	r1, r3, #4
 274 008c D317     		asrs	r3, r2, #31
 275 008e C91A     		subs	r1, r1, r3
 276 0090 0B46     		mov	r3, r1
 277 0092 5B00     		lsls	r3, r3, #1
 278 0094 0B44     		add	r3, r3, r1
 279 0096 DB00     		lsls	r3, r3, #3
 280 0098 5B1A     		subs	r3, r3, r1
 281 009a D11A     		subs	r1, r2, r3
 282 009c 0B46     		mov	r3, r1
 283 009e FB71     		strb	r3, [r7, #7]
 278:SirenState.c  ****                             toneToPlay++;  //Makes sure a tone is always selected
 284              		.loc 1 278 0
 285 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 286 00a2 002B     		cmp	r3, #0
 287 00a4 02D1     		bne	.L11
 279:SirenState.c  ****                     }
 288              		.loc 1 279 0
 289 00a6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 290 00a8 0133     		adds	r3, r3, #1
 291 00aa FB71     		strb	r3, [r7, #7]
 292              	.L11:
 293              	.LBE5:
 282:SirenState.c  **** 					toneConfigurationList[bSpeakerIndex][channelIndex] = toneToPlay;
 294              		.loc 1 282 0
 295 00ac FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 296 00ae BA88     		ldrh	r2, [r7, #4]
 297 00b0 1146     		mov	r1, r2
 298 00b2 1846     		mov	r0, r3
 299 00b4 FFF7FEFF 		bl	EEPROM_WriteByte
 283:SirenState.c  **** 					ToneStatus.previousTone[bSpeakerIndex] = ToneStatus.currentTone[bSpeakerIndex];
 300              		.loc 1 283 0
 301 00b8 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 302 00ba F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 303 00bc 1448     		ldr	r0, .L14+8
 304 00be 1346     		mov	r3, r2
 305 00c0 5B00     		lsls	r3, r3, #1
 306 00c2 1344     		add	r3, r3, r2
 307 00c4 5B00     		lsls	r3, r3, #1
 308 00c6 0344     		add	r3, r3, r0
 309 00c8 0B44     		add	r3, r3, r1
 310 00ca FA79     		ldrb	r2, [r7, #7]
 311 00cc 1A70     		strb	r2, [r3]
 284:SirenState.c  **** 					ToneStatus.currentTone[bSpeakerIndex] = toneToPlay;
 312              		.loc 1 284 0
 313 00ce BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 314 00d0 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 315 00d2 1049     		ldr	r1, .L14+12
 316 00d4 0A44     		add	r2, r2, r1
 317 00d6 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 12


 318 00d8 0E4A     		ldr	r2, .L14+12
 319 00da D154     		strb	r1, [r2, r3]
 285:SirenState.c  **** 					ToneStatus.bRisingEdge[bSpeakerIndex] = true;
 320              		.loc 1 285 0
 321 00dc BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 322 00de 0D4A     		ldr	r2, .L14+12
 323 00e0 1344     		add	r3, r3, r2
 324 00e2 FA79     		ldrb	r2, [r7, #7]
 325 00e4 9A70     		strb	r2, [r3, #2]
 286:SirenState.c  ****                 }
 326              		.loc 1 286 0
 327 00e6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 328 00e8 0A4A     		ldr	r2, .L14+12
 329 00ea 1344     		add	r3, r3, r2
 330 00ec 0122     		movs	r2, #1
 331 00ee 1A71     		strb	r2, [r3, #4]
 332              	.L10:
 333              	.LBE4:
 266:SirenState.c  ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 334              		.loc 1 266 0 discriminator 2
 335 00f0 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 336 00f2 0133     		adds	r3, r3, #1
 337 00f4 BB71     		strb	r3, [r7, #6]
 338              	.L9:
 266:SirenState.c  ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 339              		.loc 1 266 0 is_stmt 0 discriminator 1
 340 00f6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 341 00f8 012B     		cmp	r3, #1
 342 00fa A4D9     		bls	.L12
 290:SirenState.c  ****         }
 343              		.loc 1 290 0 is_stmt 1
 344 00fc FFF7FEFF 		bl	decideTonesToPlay
 345              	.L13:
 346              	.LBE3:
 347              		.loc 1 293 0
 348 0100 00BF     		nop
 349 0102 0C37     		adds	r7, r7, #12
 350              		.cfi_def_cfa_offset 12
 351 0104 BD46     		mov	sp, r7
 352              		.cfi_def_cfa_register 13
 353              		@ sp needed
 354 0106 90BD     		pop	{r4, r7, pc}
 355              	.L15:
 356              		.align	2
 357              	.L14:
 358 0108 0C000000 		.word	InputRead
 359 010c C94216B2 		.word	-1307163959
 360 0110 00000000 		.word	toneConfigurationList
 361 0114 14000000 		.word	ToneStatus
 362              		.cfi_endproc
 363              	.LFE66:
 364              		.size	processTackSwitchRoutine, .-processTackSwitchRoutine
 365              		.section	.text.processParkKillRoutine,"ax",%progbits
 366              		.align	2
 367              		.global	processParkKillRoutine
 368              		.thumb
 369              		.thumb_func
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 13


 370              		.type	processParkKillRoutine, %function
 371              	processParkKillRoutine:
 372              	.LFB67:
 294:SirenState.c  **** 
 295:SirenState.c  **** /*******************************************************************************
 296:SirenState.c  **** * Function Name: processRadioMicKeyRoutine
 297:SirenState.c  **** ********************************************************************************
 298:SirenState.c  **** *
 299:SirenState.c  **** * Summary:
 300:SirenState.c  **** *  Updates the siren system for the radio rebroadcast or mic key input change,
 301:SirenState.c  **** *  called in RadioMicKeyISR
 302:SirenState.c  **** *
 303:SirenState.c  **** * Parameters:  
 304:SirenState.c  **** *   None
 305:SirenState.c  **** *
 306:SirenState.c  **** * Return:
 307:SirenState.c  **** *   None
 308:SirenState.c  **** *
 309:SirenState.c  **** *******************************************************************************/
 310:SirenState.c  **** //void processRadioMicKeyRoutine(void)
 311:SirenState.c  **** //{
 312:SirenState.c  **** //	uint8 speakerIndex = 0;
 313:SirenState.c  **** //	
 314:SirenState.c  **** ////***    InputRead.bRadioAndMicKey = RadioRebroadcastInput_Read() ||  MicKeyInput_Read();
 315:SirenState.c  **** //    
 316:SirenState.c  **** //    if(InputRead.bRadioAndMicKey)
 317:SirenState.c  **** //    {
 318:SirenState.c  **** //		deactivateManualWail(); //Deactivate tones and leave one power amp on
 319:SirenState.c  **** //        deactivateAudio();
 320:SirenState.c  **** //		PowerAmpOutput1_Write(true);
 321:SirenState.c  **** //        PowerAmpOutput1_Write(false);
 322:SirenState.c  **** //		
 323:SirenState.c  **** //		for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 324:SirenState.c  **** //		{
 325:SirenState.c  **** //			stopPWMTone(speakerIndex);
 326:SirenState.c  **** //			stopAudioTone(speakerIndex);
 327:SirenState.c  **** //            ToneStatus.bRisingEdge[speakerIndex] = false;
 328:SirenState.c  **** //		}
 329:SirenState.c  **** //    }
 330:SirenState.c  **** //	else
 331:SirenState.c  **** //		decideTonesToPlay();
 332:SirenState.c  **** //}
 333:SirenState.c  **** 
 334:SirenState.c  **** /*******************************************************************************
 335:SirenState.c  **** * Function Name: processParkKillRoutine
 336:SirenState.c  **** ********************************************************************************
 337:SirenState.c  **** *
 338:SirenState.c  **** * Summary:
 339:SirenState.c  **** *  Updates the siren system for the park kill input change, called in ParkKillISR
 340:SirenState.c  **** *
 341:SirenState.c  **** * Parameters:  
 342:SirenState.c  **** *   None
 343:SirenState.c  **** *
 344:SirenState.c  **** * Return:
 345:SirenState.c  **** *   None
 346:SirenState.c  **** *
 347:SirenState.c  **** *******************************************************************************/
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 14


 348:SirenState.c  **** void processParkKillRoutine(void)
 349:SirenState.c  **** {
 373              		.loc 1 349 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 80B5     		push	{r7, lr}
 378              		.cfi_def_cfa_offset 8
 379              		.cfi_offset 7, -8
 380              		.cfi_offset 14, -4
 381 0002 00AF     		add	r7, sp, #0
 382              		.cfi_def_cfa_register 7
 350:SirenState.c  ****     //InputRead.bParkKill = ParkKillStatus_Read() & 0x01;    
 351:SirenState.c  ****     decideTonesToPlay();
 383              		.loc 1 351 0
 384 0004 FFF7FEFF 		bl	decideTonesToPlay
 352:SirenState.c  **** }
 385              		.loc 1 352 0
 386 0008 00BF     		nop
 387 000a 80BD     		pop	{r7, pc}
 388              		.cfi_endproc
 389              	.LFE67:
 390              		.size	processParkKillRoutine, .-processParkKillRoutine
 391              		.section	.text.processHornRingRoutine,"ax",%progbits
 392              		.align	2
 393              		.global	processHornRingRoutine
 394              		.thumb
 395              		.thumb_func
 396              		.type	processHornRingRoutine, %function
 397              	processHornRingRoutine:
 398              	.LFB68:
 353:SirenState.c  **** 
 354:SirenState.c  **** /*******************************************************************************
 355:SirenState.c  **** * Function Name: processHornRingRoutine
 356:SirenState.c  **** ********************************************************************************
 357:SirenState.c  **** *
 358:SirenState.c  **** * Summary:
 359:SirenState.c  **** *  Updates the siren system for the horn input change, called in HornRingISR
 360:SirenState.c  **** *
 361:SirenState.c  **** * Parameters:  
 362:SirenState.c  **** *   None
 363:SirenState.c  **** *
 364:SirenState.c  **** * Return:
 365:SirenState.c  **** *   None
 366:SirenState.c  **** *
 367:SirenState.c  **** *******************************************************************************/
 368:SirenState.c  **** void processHornRingRoutine(void)
 369:SirenState.c  **** {
 399              		.loc 1 369 0
 400              		.cfi_startproc
 401              		@ args = 0, pretend = 0, frame = 0
 402              		@ frame_needed = 1, uses_anonymous_args = 0
 403 0000 80B5     		push	{r7, lr}
 404              		.cfi_def_cfa_offset 8
 405              		.cfi_offset 7, -8
 406              		.cfi_offset 14, -4
 407 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 15


 408              		.cfi_def_cfa_register 7
 370:SirenState.c  ****     //InputRead.bHornRing = HornRingStatus_Read() & 0x01;
 371:SirenState.c  ****     decideTonesToPlay();
 409              		.loc 1 371 0
 410 0004 FFF7FEFF 		bl	decideTonesToPlay
 372:SirenState.c  **** }
 411              		.loc 1 372 0
 412 0008 00BF     		nop
 413 000a 80BD     		pop	{r7, pc}
 414              		.cfi_endproc
 415              	.LFE68:
 416              		.size	processHornRingRoutine, .-processHornRingRoutine
 417              		.section	.text.processDualDelayRoutine,"ax",%progbits
 418              		.align	2
 419              		.global	processDualDelayRoutine
 420              		.thumb
 421              		.thumb_func
 422              		.type	processDualDelayRoutine, %function
 423              	processDualDelayRoutine:
 424              	.LFB69:
 373:SirenState.c  **** 
 374:SirenState.c  **** /*******************************************************************************
 375:SirenState.c  **** * Function Name: processDualDelayRoutine
 376:SirenState.c  **** ********************************************************************************
 377:SirenState.c  **** *
 378:SirenState.c  **** * Summary:
 379:SirenState.c  **** *  Activates delay functionality for the two current tones, called in DualDelayISR
 380:SirenState.c  **** *
 381:SirenState.c  **** * Parameters:  
 382:SirenState.c  **** *   None
 383:SirenState.c  **** *
 384:SirenState.c  **** * Return:
 385:SirenState.c  **** *   None
 386:SirenState.c  **** *
 387:SirenState.c  **** *******************************************************************************/
 388:SirenState.c  **** void processDualDelayRoutine(void)
 389:SirenState.c  **** {
 425              		.loc 1 389 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
 428              		@ frame_needed = 1, uses_anonymous_args = 0
 429 0000 80B5     		push	{r7, lr}
 430              		.cfi_def_cfa_offset 8
 431              		.cfi_offset 7, -8
 432              		.cfi_offset 14, -4
 433 0002 00AF     		add	r7, sp, #0
 434              		.cfi_def_cfa_register 7
 390:SirenState.c  ****     //InputRead.bDualDelay = DualDelayStatus_Read() & 0x01;
 391:SirenState.c  ****     ToneStatus.bDualDelayEnable = InputRead.bDualDelay;
 435              		.loc 1 391 0
 436 0004 034B     		ldr	r3, .L19
 437 0006 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 438 0008 034B     		ldr	r3, .L19+4
 439 000a 9A71     		strb	r2, [r3, #6]
 392:SirenState.c  ****     decideTonesToPlay();
 440              		.loc 1 392 0
 441 000c FFF7FEFF 		bl	decideTonesToPlay
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 16


 393:SirenState.c  **** }
 442              		.loc 1 393 0
 443 0010 00BF     		nop
 444 0012 80BD     		pop	{r7, pc}
 445              	.L20:
 446              		.align	2
 447              	.L19:
 448 0014 0C000000 		.word	InputRead
 449 0018 14000000 		.word	ToneStatus
 450              		.cfi_endproc
 451              	.LFE69:
 452              		.size	processDualDelayRoutine, .-processDualDelayRoutine
 453              		.section	.text.processToneChangeRoutine,"ax",%progbits
 454              		.align	2
 455              		.global	processToneChangeRoutine
 456              		.thumb
 457              		.thumb_func
 458              		.type	processToneChangeRoutine, %function
 459              	processToneChangeRoutine:
 460              	.LFB70:
 394:SirenState.c  **** 
 395:SirenState.c  **** /*******************************************************************************
 396:SirenState.c  **** * Function Name: processToneChangeRoutine
 397:SirenState.c  **** ********************************************************************************
 398:SirenState.c  **** *
 399:SirenState.c  **** * Summary:
 400:SirenState.c  **** *  Updates the siren system for the tone input change, called in ModeStatusISR
 401:SirenState.c  **** *
 402:SirenState.c  **** * Parameters:  
 403:SirenState.c  **** *   None
 404:SirenState.c  **** *
 405:SirenState.c  **** * Return:
 406:SirenState.c  **** *   None
 407:SirenState.c  **** *
 408:SirenState.c  **** *******************************************************************************/
 409:SirenState.c  **** void processToneChangeRoutine(void)
 410:SirenState.c  **** {  
 461              		.loc 1 410 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 16
 464              		@ frame_needed = 1, uses_anonymous_args = 0
 465 0000 90B5     		push	{r4, r7, lr}
 466              		.cfi_def_cfa_offset 12
 467              		.cfi_offset 4, -12
 468              		.cfi_offset 7, -8
 469              		.cfi_offset 14, -4
 470 0002 85B0     		sub	sp, sp, #20
 471              		.cfi_def_cfa_offset 32
 472 0004 00AF     		add	r7, sp, #0
 473              		.cfi_def_cfa_register 7
 411:SirenState.c  ****     static uint8 previousChannels[SPEAKER_COUNT];
 412:SirenState.c  ****     uint8 currentChannels[SPEAKER_COUNT];
 413:SirenState.c  ****     uint8 changeStatus[SPEAKER_COUNT];
 414:SirenState.c  ****     uint8 changedChannel[SPEAKER_COUNT];
 415:SirenState.c  ****     uint8 speakerIndex = 0;
 474              		.loc 1 415 0
 475 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 17


 476 0008 FB73     		strb	r3, [r7, #15]
 416:SirenState.c  **** 	uint8 priorityChannel = 0;
 477              		.loc 1 416 0
 478 000a 0023     		movs	r3, #0
 479 000c BB73     		strb	r3, [r7, #14]
 417:SirenState.c  ****     
 418:SirenState.c  ****     //currentChannels[SPEAKER_1] = ModeStatus_Read();
 419:SirenState.c  ****     //currentChannels[SPEAKER_2] = ModeStatus2_Read();
 420:SirenState.c  ****     
 421:SirenState.c  ****     for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 480              		.loc 1 421 0
 481 000e 0023     		movs	r3, #0
 482 0010 FB73     		strb	r3, [r7, #15]
 483 0012 89E0     		b	.L22
 484              	.L28:
 422:SirenState.c  ****     {
 423:SirenState.c  ****         changeStatus[speakerIndex] =
 485              		.loc 1 423 0
 486 0014 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 424:SirenState.c  ****             previousChannels[speakerIndex] ^ currentChannels[speakerIndex];
 487              		.loc 1 424 0
 488 0016 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 489 0018 4849     		ldr	r1, .L29
 490 001a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 491 001c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 492 001e 07F11000 		add	r0, r7, #16
 493 0022 0244     		add	r2, r2, r0
 494 0024 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 423:SirenState.c  ****             previousChannels[speakerIndex] ^ currentChannels[speakerIndex];
 495              		.loc 1 423 0
 496 0028 4A40     		eors	r2, r2, r1
 497 002a D2B2     		uxtb	r2, r2
 498 002c 07F11001 		add	r1, r7, #16
 499 0030 0B44     		add	r3, r3, r1
 500 0032 03F8082C 		strb	r2, [r3, #-8]
 425:SirenState.c  **** 			
 426:SirenState.c  **** 		changedChannel[speakerIndex] = getBitIndex(changeStatus[speakerIndex]);
 501              		.loc 1 426 0
 502 0036 FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 503 0038 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 504 003a 07F11002 		add	r2, r7, #16
 505 003e 1344     		add	r3, r3, r2
 506 0040 13F8083C 		ldrb	r3, [r3, #-8]	@ zero_extendqisi2
 507 0044 1846     		mov	r0, r3
 508 0046 FFF7FEFF 		bl	getBitIndex
 509 004a 0346     		mov	r3, r0
 510 004c 1A46     		mov	r2, r3
 511 004e 07F11003 		add	r3, r7, #16
 512 0052 2344     		add	r3, r3, r4
 513 0054 03F80C2C 		strb	r2, [r3, #-12]
 427:SirenState.c  **** 		InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 514              		.loc 1 427 0
 515 0058 FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 516 005a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 517 005c 1846     		mov	r0, r3
 518 005e FFF7FEFF 		bl	getHighestPriorityChannel
 519 0062 0346     		mov	r3, r0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 18


 520 0064 1A46     		mov	r2, r3
 521 0066 364B     		ldr	r3, .L29+4
 522 0068 2344     		add	r3, r3, r4
 523 006a 5A71     		strb	r2, [r3, #5]
 428:SirenState.c  **** 		priorityChannel = InputRead.highestPriorityChannel[speakerIndex];
 524              		.loc 1 428 0
 525 006c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 526 006e 344A     		ldr	r2, .L29+4
 527 0070 1344     		add	r3, r3, r2
 528 0072 5B79     		ldrb	r3, [r3, #5]
 529 0074 BB73     		strb	r3, [r7, #14]
 429:SirenState.c  **** 			
 430:SirenState.c  **** 		if(changeStatus[speakerIndex] & currentChannels[speakerIndex])
 530              		.loc 1 430 0
 531 0076 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 532 0078 07F11002 		add	r2, r7, #16
 533 007c 1344     		add	r3, r3, r2
 534 007e 13F8082C 		ldrb	r2, [r3, #-8]	@ zero_extendqisi2
 535 0082 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 536 0084 07F11001 		add	r1, r7, #16
 537 0088 0B44     		add	r3, r3, r1
 538 008a 13F8043C 		ldrb	r3, [r3, #-4]	@ zero_extendqisi2
 539 008e 1340     		ands	r3, r3, r2
 540 0090 DBB2     		uxtb	r3, r3
 541 0092 002B     		cmp	r3, #0
 542 0094 05D0     		beq	.L23
 431:SirenState.c  **** 			ToneStatus.bRisingEdge[speakerIndex] = true;
 543              		.loc 1 431 0
 544 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 545 0098 2A4A     		ldr	r2, .L29+8
 546 009a 1344     		add	r3, r3, r2
 547 009c 0122     		movs	r2, #1
 548 009e 1A71     		strb	r2, [r3, #4]
 549 00a0 18E0     		b	.L24
 550              	.L23:
 432:SirenState.c  **** 		else
 433:SirenState.c  ****         {
 434:SirenState.c  ****             if((priorityChannel == NO_CHANNEL) || ((changedChannel[speakerIndex] != NO_CHANNEL) && 
 551              		.loc 1 434 0
 552 00a2 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 553 00a4 FF2B     		cmp	r3, #255
 554 00a6 10D0     		beq	.L25
 555              		.loc 1 434 0 is_stmt 0 discriminator 1
 556 00a8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 557 00aa 07F11002 		add	r2, r7, #16
 558 00ae 1344     		add	r3, r3, r2
 559 00b0 13F80C3C 		ldrb	r3, [r3, #-12]	@ zero_extendqisi2
 560 00b4 FF2B     		cmp	r3, #255
 561 00b6 0DD0     		beq	.L24
 435:SirenState.c  ****                 (priorityChannel < changedChannel[speakerIndex])))
 562              		.loc 1 435 0 is_stmt 1 discriminator 2
 563 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 564 00ba 07F11002 		add	r2, r7, #16
 565 00be 1344     		add	r3, r3, r2
 566 00c0 13F80C3C 		ldrb	r3, [r3, #-12]	@ zero_extendqisi2
 434:SirenState.c  ****                 (priorityChannel < changedChannel[speakerIndex])))
 567              		.loc 1 434 0 discriminator 2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 19


 568 00c4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 569 00c6 9A42     		cmp	r2, r3
 570 00c8 04D2     		bcs	.L24
 571              	.L25:
 436:SirenState.c  **** 			    ToneStatus.bRisingEdge[speakerIndex] = false;
 572              		.loc 1 436 0
 573 00ca FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 574 00cc 1D4A     		ldr	r2, .L29+8
 575 00ce 1344     		add	r3, r3, r2
 576 00d0 0022     		movs	r2, #0
 577 00d2 1A71     		strb	r2, [r3, #4]
 578              	.L24:
 437:SirenState.c  ****         }
 438:SirenState.c  **** 		
 439:SirenState.c  ****         previousChannels[speakerIndex] = currentChannels[speakerIndex];
 579              		.loc 1 439 0
 580 00d4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 581 00d6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 582 00d8 07F11001 		add	r1, r7, #16
 583 00dc 0A44     		add	r2, r2, r1
 584 00de 12F8041C 		ldrb	r1, [r2, #-4]	@ zero_extendqisi2
 585 00e2 164A     		ldr	r2, .L29
 586 00e4 D154     		strb	r1, [r2, r3]
 440:SirenState.c  **** 		ToneStatus.previousTone[speakerIndex] = ToneStatus.currentTone[speakerIndex];	
 587              		.loc 1 440 0
 588 00e6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 589 00e8 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 590 00ea 1649     		ldr	r1, .L29+8
 591 00ec 0A44     		add	r2, r2, r1
 592 00ee 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 593 00f0 144A     		ldr	r2, .L29+8
 594 00f2 D154     		strb	r1, [r2, r3]
 441:SirenState.c  **** 		
 442:SirenState.c  **** 		if(priorityChannel != NO_CHANNEL)
 595              		.loc 1 442 0
 596 00f4 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 597 00f6 FF2B     		cmp	r3, #255
 598 00f8 0ED0     		beq	.L26
 443:SirenState.c  **** 			ToneStatus.currentTone[speakerIndex] = toneConfigurationList[speakerIndex][priorityChannel];
 599              		.loc 1 443 0
 600 00fa F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 601 00fc FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 602 00fe B87B     		ldrb	r0, [r7, #14]	@ zero_extendqisi2
 603 0100 114C     		ldr	r4, .L29+12
 604 0102 1346     		mov	r3, r2
 605 0104 5B00     		lsls	r3, r3, #1
 606 0106 1344     		add	r3, r3, r2
 607 0108 5B00     		lsls	r3, r3, #1
 608 010a 2344     		add	r3, r3, r4
 609 010c 0344     		add	r3, r3, r0
 610 010e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 611 0110 0C4B     		ldr	r3, .L29+8
 612 0112 0B44     		add	r3, r3, r1
 613 0114 9A70     		strb	r2, [r3, #2]
 614 0116 04E0     		b	.L27
 615              	.L26:
 444:SirenState.c  **** 		else
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 20


 445:SirenState.c  **** 			ToneStatus.currentTone[speakerIndex] = NO_TONE;
 616              		.loc 1 445 0
 617 0118 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 618 011a 0A4A     		ldr	r2, .L29+8
 619 011c 1344     		add	r3, r3, r2
 620 011e 0022     		movs	r2, #0
 621 0120 9A70     		strb	r2, [r3, #2]
 622              	.L27:
 421:SirenState.c  ****     {
 623              		.loc 1 421 0 discriminator 2
 624 0122 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 625 0124 0133     		adds	r3, r3, #1
 626 0126 FB73     		strb	r3, [r7, #15]
 627              	.L22:
 421:SirenState.c  ****     {
 628              		.loc 1 421 0 is_stmt 0 discriminator 1
 629 0128 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 630 012a 012B     		cmp	r3, #1
 631 012c 7FF672AF 		bls	.L28
 446:SirenState.c  ****     }
 447:SirenState.c  **** 	
 448:SirenState.c  **** 	decideTonesToPlay();
 632              		.loc 1 448 0 is_stmt 1
 633 0130 FFF7FEFF 		bl	decideTonesToPlay
 449:SirenState.c  **** }
 634              		.loc 1 449 0
 635 0134 00BF     		nop
 636 0136 1437     		adds	r7, r7, #20
 637              		.cfi_def_cfa_offset 12
 638 0138 BD46     		mov	sp, r7
 639              		.cfi_def_cfa_register 13
 640              		@ sp needed
 641 013a 90BD     		pop	{r4, r7, pc}
 642              	.L30:
 643              		.align	2
 644              	.L29:
 645 013c 1C000000 		.word	previousChannels.6288
 646 0140 0C000000 		.word	InputRead
 647 0144 14000000 		.word	ToneStatus
 648 0148 00000000 		.word	toneConfigurationList
 649              		.cfi_endproc
 650              	.LFE70:
 651              		.size	processToneChangeRoutine, .-processToneChangeRoutine
 652              		.section	.text.setTonesWithCommunication,"ax",%progbits
 653              		.align	2
 654              		.global	setTonesWithCommunication
 655              		.thumb
 656              		.thumb_func
 657              		.type	setTonesWithCommunication, %function
 658              	setTonesWithCommunication:
 659              	.LFB71:
 450:SirenState.c  **** 
 451:SirenState.c  **** /*******************************************************************************
 452:SirenState.c  **** * Function Name: setTonesWithCommunication
 453:SirenState.c  **** ********************************************************************************
 454:SirenState.c  **** *
 455:SirenState.c  **** * Summary:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 21


 456:SirenState.c  **** *   Called during Data Link to update the tone using the data from the Controller
 457:SirenState.c  **** *
 458:SirenState.c  **** * Parameters:  
 459:SirenState.c  **** *   firstTone: The tone selection for Speaker 1
 460:SirenState.c  **** *   secondTone: The tone selection for Speaker 2
 461:SirenState.c  **** *   bDualDelay: The Dual Delay status from the Controller
 462:SirenState.c  **** *
 463:SirenState.c  **** * Return:
 464:SirenState.c  **** *   TRUE for valid inputs, FALSE otherwise
 465:SirenState.c  **** *
 466:SirenState.c  **** *******************************************************************************/
 467:SirenState.c  **** uint8 setTonesWithCommunication(enum ToneType firstTone, enum ToneType secondTone,
 468:SirenState.c  ****                                 uint8 bDualDelay)
 469:SirenState.c  **** {
 660              		.loc 1 469 0
 661              		.cfi_startproc
 662              		@ args = 0, pretend = 0, frame = 16
 663              		@ frame_needed = 1, uses_anonymous_args = 0
 664 0000 80B5     		push	{r7, lr}
 665              		.cfi_def_cfa_offset 8
 666              		.cfi_offset 7, -8
 667              		.cfi_offset 14, -4
 668 0002 84B0     		sub	sp, sp, #16
 669              		.cfi_def_cfa_offset 24
 670 0004 00AF     		add	r7, sp, #0
 671              		.cfi_def_cfa_register 7
 672 0006 0346     		mov	r3, r0
 673 0008 FB71     		strb	r3, [r7, #7]
 674 000a 0B46     		mov	r3, r1
 675 000c BB71     		strb	r3, [r7, #6]
 676 000e 1346     		mov	r3, r2
 677 0010 7B71     		strb	r3, [r7, #5]
 470:SirenState.c  ****     uint8 speakerIndex = 0;
 678              		.loc 1 470 0
 679 0012 0023     		movs	r3, #0
 680 0014 FB73     		strb	r3, [r7, #15]
 471:SirenState.c  ****     uint8 bDualDelayChange = false;
 681              		.loc 1 471 0
 682 0016 0023     		movs	r3, #0
 683 0018 BB73     		strb	r3, [r7, #14]
 472:SirenState.c  ****     
 473:SirenState.c  ****     if((firstTone < NO_TONE) || (firstTone > TEST_TONE))
 684              		.loc 1 473 0
 685 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 686 001c 162B     		cmp	r3, #22
 687 001e 01D9     		bls	.L32
 474:SirenState.c  ****         return false;
 688              		.loc 1 474 0
 689 0020 0023     		movs	r3, #0
 690 0022 60E0     		b	.L33
 691              	.L32:
 475:SirenState.c  ****     
 476:SirenState.c  ****     if((secondTone < NO_TONE) || (secondTone > TEST_TONE))
 692              		.loc 1 476 0
 693 0024 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 694 0026 162B     		cmp	r3, #22
 695 0028 01D9     		bls	.L34
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 22


 477:SirenState.c  ****         return false;
 696              		.loc 1 477 0
 697 002a 0023     		movs	r3, #0
 698 002c 5BE0     		b	.L33
 699              	.L34:
 478:SirenState.c  ****     
 479:SirenState.c  ****     if((bDualDelay != true) && (bDualDelay != false))
 700              		.loc 1 479 0
 701 002e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 702 0030 012B     		cmp	r3, #1
 703 0032 04D0     		beq	.L35
 704              		.loc 1 479 0 is_stmt 0 discriminator 1
 705 0034 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 706 0036 002B     		cmp	r3, #0
 707 0038 01D0     		beq	.L35
 480:SirenState.c  ****         return false;
 708              		.loc 1 480 0 is_stmt 1
 709 003a 0023     		movs	r3, #0
 710 003c 53E0     		b	.L33
 711              	.L35:
 481:SirenState.c  ****     
 482:SirenState.c  ****     ToneStatus.previousTone[SPEAKER_1] = ToneStatus.currentTone[SPEAKER_1];
 712              		.loc 1 482 0
 713 003e 2C4B     		ldr	r3, .L43
 714 0040 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 715 0042 2B4B     		ldr	r3, .L43
 716 0044 1A70     		strb	r2, [r3]
 483:SirenState.c  ****     ToneStatus.previousTone[SPEAKER_2] = ToneStatus.currentTone[SPEAKER_2];
 717              		.loc 1 483 0
 718 0046 2A4B     		ldr	r3, .L43
 719 0048 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 720 004a 294B     		ldr	r3, .L43
 721 004c 5A70     		strb	r2, [r3, #1]
 484:SirenState.c  ****     ToneStatus.currentTone[SPEAKER_1] = firstTone;
 722              		.loc 1 484 0
 723 004e 284A     		ldr	r2, .L43
 724 0050 FB79     		ldrb	r3, [r7, #7]
 725 0052 9370     		strb	r3, [r2, #2]
 485:SirenState.c  ****     ToneStatus.currentTone[SPEAKER_2] = secondTone;
 726              		.loc 1 485 0
 727 0054 264A     		ldr	r2, .L43
 728 0056 BB79     		ldrb	r3, [r7, #6]
 729 0058 D370     		strb	r3, [r2, #3]
 486:SirenState.c  ****     
 487:SirenState.c  ****     if(bDualDelay != ToneStatus.bDualDelayEnable)
 730              		.loc 1 487 0
 731 005a 254B     		ldr	r3, .L43
 732 005c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 733 005e 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 734 0060 9A42     		cmp	r2, r3
 735 0062 01D0     		beq	.L36
 488:SirenState.c  ****         bDualDelayChange = true;
 736              		.loc 1 488 0
 737 0064 0123     		movs	r3, #1
 738 0066 BB73     		strb	r3, [r7, #14]
 739              	.L36:
 489:SirenState.c  ****     
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 23


 490:SirenState.c  ****     ToneStatus.bDualDelayEnable = bDualDelay;
 740              		.loc 1 490 0
 741 0068 214A     		ldr	r2, .L43
 742 006a 7B79     		ldrb	r3, [r7, #5]
 743 006c 9371     		strb	r3, [r2, #6]
 491:SirenState.c  ****     
 492:SirenState.c  ****     for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 744              		.loc 1 492 0
 745 006e 0023     		movs	r3, #0
 746 0070 FB73     		strb	r3, [r7, #15]
 747 0072 23E0     		b	.L37
 748              	.L40:
 493:SirenState.c  ****     {
 494:SirenState.c  ****         if((ToneStatus.previousTone[speakerIndex] == NO_TONE) &&
 749              		.loc 1 494 0
 750 0074 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 751 0076 1E4A     		ldr	r2, .L43
 752 0078 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 753 007a 002B     		cmp	r3, #0
 754 007c 0BD1     		bne	.L38
 495:SirenState.c  ****             (ToneStatus.currentTone[speakerIndex] != NO_TONE))
 755              		.loc 1 495 0 discriminator 1
 756 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 757 0080 1B4A     		ldr	r2, .L43
 758 0082 1344     		add	r3, r3, r2
 759 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 494:SirenState.c  ****             (ToneStatus.currentTone[speakerIndex] != NO_TONE))
 760              		.loc 1 494 0 discriminator 1
 761 0086 002B     		cmp	r3, #0
 762 0088 05D0     		beq	.L38
 496:SirenState.c  ****             ToneStatus.bRisingEdge[speakerIndex] = true;
 763              		.loc 1 496 0
 764 008a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 765 008c 184A     		ldr	r2, .L43
 766 008e 1344     		add	r3, r3, r2
 767 0090 0122     		movs	r2, #1
 768 0092 1A71     		strb	r2, [r3, #4]
 769 0094 0FE0     		b	.L39
 770              	.L38:
 497:SirenState.c  ****         else if((ToneStatus.previousTone[speakerIndex] != NO_TONE) &&
 771              		.loc 1 497 0
 772 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 773 0098 154A     		ldr	r2, .L43
 774 009a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 775 009c 002B     		cmp	r3, #0
 776 009e 0AD0     		beq	.L39
 498:SirenState.c  ****             (ToneStatus.currentTone[speakerIndex] == NO_TONE))
 777              		.loc 1 498 0 discriminator 1
 778 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 779 00a2 134A     		ldr	r2, .L43
 780 00a4 1344     		add	r3, r3, r2
 781 00a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 497:SirenState.c  ****         else if((ToneStatus.previousTone[speakerIndex] != NO_TONE) &&
 782              		.loc 1 497 0 discriminator 1
 783 00a8 002B     		cmp	r3, #0
 784 00aa 04D1     		bne	.L39
 499:SirenState.c  ****             ToneStatus.bRisingEdge[speakerIndex] = false;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 24


 785              		.loc 1 499 0
 786 00ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 787 00ae 104A     		ldr	r2, .L43
 788 00b0 1344     		add	r3, r3, r2
 789 00b2 0022     		movs	r2, #0
 790 00b4 1A71     		strb	r2, [r3, #4]
 791              	.L39:
 492:SirenState.c  ****     {
 792              		.loc 1 492 0 discriminator 2
 793 00b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 794 00b8 0133     		adds	r3, r3, #1
 795 00ba FB73     		strb	r3, [r7, #15]
 796              	.L37:
 492:SirenState.c  ****     {
 797              		.loc 1 492 0 is_stmt 0 discriminator 1
 798 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 799 00be 012B     		cmp	r3, #1
 800 00c0 D8D9     		bls	.L40
 500:SirenState.c  ****     }
 501:SirenState.c  ****     
 502:SirenState.c  ****     if((ToneStatus.previousTone[SPEAKER_1] != ToneStatus.currentTone[SPEAKER_1]) ||
 801              		.loc 1 502 0 is_stmt 1
 802 00c2 0B4B     		ldr	r3, .L43
 803 00c4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 804 00c6 0A4B     		ldr	r3, .L43
 805 00c8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 806 00ca 9A42     		cmp	r2, r3
 807 00cc 08D1     		bne	.L41
 503:SirenState.c  ****         (ToneStatus.previousTone[SPEAKER_2] != ToneStatus.currentTone[SPEAKER_2]) ||
 808              		.loc 1 503 0 discriminator 1
 809 00ce 084B     		ldr	r3, .L43
 810 00d0 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 811 00d2 074B     		ldr	r3, .L43
 812 00d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 502:SirenState.c  ****         (ToneStatus.previousTone[SPEAKER_2] != ToneStatus.currentTone[SPEAKER_2]) ||
 813              		.loc 1 502 0 discriminator 1
 814 00d6 9A42     		cmp	r2, r3
 815 00d8 02D1     		bne	.L41
 816              		.loc 1 503 0
 817 00da BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 818 00dc 012B     		cmp	r3, #1
 819 00de 01D1     		bne	.L42
 820              	.L41:
 504:SirenState.c  ****         (bDualDelayChange == true))
 505:SirenState.c  ****         decideTonesToPlay();
 821              		.loc 1 505 0
 822 00e0 FFF7FEFF 		bl	decideTonesToPlay
 823              	.L42:
 506:SirenState.c  ****     
 507:SirenState.c  ****     return true;
 824              		.loc 1 507 0
 825 00e4 0123     		movs	r3, #1
 826              	.L33:
 508:SirenState.c  **** }
 827              		.loc 1 508 0
 828 00e6 1846     		mov	r0, r3
 829 00e8 1037     		adds	r7, r7, #16
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 25


 830              		.cfi_def_cfa_offset 8
 831 00ea BD46     		mov	sp, r7
 832              		.cfi_def_cfa_register 13
 833              		@ sp needed
 834 00ec 80BD     		pop	{r7, pc}
 835              	.L44:
 836 00ee 00BF     		.align	2
 837              	.L43:
 838 00f0 14000000 		.word	ToneStatus
 839              		.cfi_endproc
 840              	.LFE71:
 841              		.size	setTonesWithCommunication, .-setTonesWithCommunication
 842              		.section	.text.decideTonesToPlay,"ax",%progbits
 843              		.align	2
 844              		.thumb
 845              		.thumb_func
 846              		.type	decideTonesToPlay, %function
 847              	decideTonesToPlay:
 848              	.LFB72:
 509:SirenState.c  **** 
 510:SirenState.c  **** /*******************************************************************************
 511:SirenState.c  **** * Function Name: disableAudioAndPWM
 512:SirenState.c  **** ********************************************************************************
 513:SirenState.c  **** *
 514:SirenState.c  **** * Summary:
 515:SirenState.c  **** *   Disables the DAC and PWM for both speakers, typically called before the Power
 516:SirenState.c  **** *   Amps are disabled for a clear shut down
 517:SirenState.c  **** *
 518:SirenState.c  **** * Parameters: 
 519:SirenState.c  **** *   None
 520:SirenState.c  **** *
 521:SirenState.c  **** * Return:
 522:SirenState.c  **** *   None
 523:SirenState.c  **** *
 524:SirenState.c  **** *******************************************************************************/
 525:SirenState.c  **** //void disableAudioAndPWM(void)
 526:SirenState.c  **** //{
 527:SirenState.c  **** //	stopPWMTone(SPEAKER_1);
 528:SirenState.c  **** //    stopPWMTone(SPEAKER_2);
 529:SirenState.c  **** //    stopAudioTone(SPEAKER_1);
 530:SirenState.c  **** //    stopAudioTone(SPEAKER_2);
 531:SirenState.c  **** //}
 532:SirenState.c  **** 
 533:SirenState.c  **** /*******************************************************************************
 534:SirenState.c  **** * Function Name: disableBothSpeakers
 535:SirenState.c  **** ********************************************************************************
 536:SirenState.c  **** *
 537:SirenState.c  **** * Summary:
 538:SirenState.c  **** *   Disables the Power Amps and updates the PWM and DAC status to play no tone
 539:SirenState.c  **** *   for both speakers, typically called after the DAC and PWM are disabled.
 540:SirenState.c  **** *
 541:SirenState.c  **** * Parameters: 
 542:SirenState.c  **** *   None
 543:SirenState.c  **** *
 544:SirenState.c  **** * Return:
 545:SirenState.c  **** *   None
 546:SirenState.c  **** *
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 26


 547:SirenState.c  **** *******************************************************************************/
 548:SirenState.c  **** //void disableBothSpeakers(void)
 549:SirenState.c  **** //{
 550:SirenState.c  **** //	deactivateManualWail();
 551:SirenState.c  **** //	deactivateAudio();
 552:SirenState.c  **** //	PowerAmpOutput1_Write(false);
 553:SirenState.c  **** //    playAudioTone(SPEAKER_1, NO_TONE, false);
 554:SirenState.c  **** //    playAudioTone(SPEAKER_2, NO_TONE, false);
 555:SirenState.c  **** //    playPWMTone(SPEAKER_1, NO_TONE, false, false);
 556:SirenState.c  **** //    playPWMTone(SPEAKER_2, NO_TONE, false, false);
 557:SirenState.c  **** //}
 558:SirenState.c  **** 
 559:SirenState.c  **** /*******************************************************************************
 560:SirenState.c  **** * Function Name: decideTonesToPlay
 561:SirenState.c  **** ********************************************************************************
 562:SirenState.c  **** *
 563:SirenState.c  **** * Summary:
 564:SirenState.c  **** *  The state machine that determines the tone outcome for each speaker.
 565:SirenState.c  **** *
 566:SirenState.c  **** * Parameters:  
 567:SirenState.c  **** *   None
 568:SirenState.c  **** *
 569:SirenState.c  **** * Return:
 570:SirenState.c  **** *   None
 571:SirenState.c  **** *
 572:SirenState.c  **** *******************************************************************************/
 573:SirenState.c  **** static void decideTonesToPlay(void)
 574:SirenState.c  **** {
 849              		.loc 1 574 0
 850              		.cfi_startproc
 851              		@ args = 0, pretend = 0, frame = 0
 852              		@ frame_needed = 1, uses_anonymous_args = 0
 853 0000 80B5     		push	{r7, lr}
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 00AF     		add	r7, sp, #0
 858              		.cfi_def_cfa_register 7
 575:SirenState.c  **** 	static uint8 bToneChangeOnHornRing = false;
 576:SirenState.c  ****     
 577:SirenState.c  ****     disableAudioAndPWM();
 859              		.loc 1 577 0
 860 0004 FFF7FEFF 		bl	disableAudioAndPWM
 578:SirenState.c  ****     
 579:SirenState.c  ****     if(InputRead.bRadioAndMicKey)
 861              		.loc 1 579 0
 862 0008 A64B     		ldr	r3, .L85
 863 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 864 000c 002B     		cmp	r3, #0
 865 000e 40F0A181 		bne	.L84
 580:SirenState.c  ****         return;	
 581:SirenState.c  ****     
 582:SirenState.c  **** 	if(ToneStatus.currentTone[SPEAKER_1] != NO_TONE)
 866              		.loc 1 582 0
 867 0012 A54B     		ldr	r3, .L85+4
 868 0014 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 869 0016 002B     		cmp	r3, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 27


 870 0018 00F0B480 		beq	.L48
 583:SirenState.c  **** 	{
 584:SirenState.c  **** 		if(isAudioTone(ToneStatus.currentTone[SPEAKER_1]))
 871              		.loc 1 584 0
 872 001c A24B     		ldr	r3, .L85+4
 873 001e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 874 0020 1846     		mov	r0, r3
 875 0022 FFF7FEFF 		bl	isAudioTone
 876 0026 0346     		mov	r3, r0
 877 0028 002B     		cmp	r3, #0
 878 002a 1ED0     		beq	.L49
 585:SirenState.c  **** 		{
 586:SirenState.c  **** 			if(isSong(ToneStatus.currentTone[SPEAKER_1]))
 879              		.loc 1 586 0
 880 002c 9E4B     		ldr	r3, .L85+4
 881 002e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 882 0030 1846     		mov	r0, r3
 883 0032 FFF7FEFF 		bl	isSong
 884 0036 0346     		mov	r3, r0
 885 0038 002B     		cmp	r3, #0
 886 003a 0ED0     		beq	.L50
 587:SirenState.c  **** 			{
 588:SirenState.c  **** 				if(ToneStatus.bRisingEdge[SPEAKER_1])	//Plays BAD BOYS	
 887              		.loc 1 588 0
 888 003c 9A4B     		ldr	r3, .L85+4
 889 003e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 890 0040 002B     		cmp	r3, #0
 891 0042 07D0     		beq	.L51
 589:SirenState.c  **** 					enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1], true);
 892              		.loc 1 589 0
 893 0044 984B     		ldr	r3, .L85+4
 894 0046 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 895 0048 0122     		movs	r2, #1
 896 004a 1946     		mov	r1, r3
 897 004c 0020     		movs	r0, #0
 898 004e FFF7FEFF 		bl	enableSpeakersForAudioTone
 899 0052 80E1     		b	.L45
 900              	.L51:
 590:SirenState.c  **** 				else	//Plays NO TONE
 591:SirenState.c  **** 					disableBothSpeakers();
 901              		.loc 1 591 0
 902 0054 FFF7FEFF 		bl	disableBothSpeakers
 903 0058 7DE1     		b	.L45
 904              	.L50:
 592:SirenState.c  **** 				
 593:SirenState.c  **** 			}
 594:SirenState.c  **** 			else	//Plays ECTO OR COMMAND 
 595:SirenState.c  **** 				enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1], true);
 905              		.loc 1 595 0
 906 005a 934B     		ldr	r3, .L85+4
 907 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 908 005e 0122     		movs	r2, #1
 909 0060 1946     		mov	r1, r3
 910 0062 0020     		movs	r0, #0
 911 0064 FFF7FEFF 		bl	enableSpeakersForAudioTone
 912 0068 75E1     		b	.L45
 913              	.L49:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 28


 596:SirenState.c  **** 		}
 597:SirenState.c  **** 		else
 598:SirenState.c  **** 		{	
 599:SirenState.c  ****             if(isAudioTone(ToneStatus.currentTone[SPEAKER_2]))
 914              		.loc 1 599 0
 915 006a 8F4B     		ldr	r3, .L85+4
 916 006c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 917 006e 1846     		mov	r0, r3
 918 0070 FFF7FEFF 		bl	isAudioTone
 919 0074 0346     		mov	r3, r0
 920 0076 002B     		cmp	r3, #0
 921 0078 1ED0     		beq	.L55
 600:SirenState.c  ****     		{
 601:SirenState.c  ****     			if(isSong(ToneStatus.currentTone[SPEAKER_2]))
 922              		.loc 1 601 0
 923 007a 8B4B     		ldr	r3, .L85+4
 924 007c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 925 007e 1846     		mov	r0, r3
 926 0080 FFF7FEFF 		bl	isSong
 927 0084 0346     		mov	r3, r0
 928 0086 002B     		cmp	r3, #0
 929 0088 0ED0     		beq	.L56
 602:SirenState.c  ****     			{
 603:SirenState.c  ****     				if(ToneStatus.bRisingEdge[SPEAKER_2])	//Plays BAD BOYS	
 930              		.loc 1 603 0
 931 008a 874B     		ldr	r3, .L85+4
 932 008c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 933 008e 002B     		cmp	r3, #0
 934 0090 07D0     		beq	.L57
 604:SirenState.c  ****     					enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 935              		.loc 1 604 0
 936 0092 854B     		ldr	r3, .L85+4
 937 0094 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 938 0096 0122     		movs	r2, #1
 939 0098 1946     		mov	r1, r3
 940 009a 0120     		movs	r0, #1
 941 009c FFF7FEFF 		bl	enableSpeakersForAudioTone
 942 00a0 59E1     		b	.L45
 943              	.L57:
 605:SirenState.c  ****     				else	//Plays NO TONE
 606:SirenState.c  ****     					disableBothSpeakers();
 944              		.loc 1 606 0
 945 00a2 FFF7FEFF 		bl	disableBothSpeakers
 946 00a6 56E1     		b	.L45
 947              	.L56:
 607:SirenState.c  ****     				
 608:SirenState.c  ****     			}
 609:SirenState.c  ****     			else	//Plays ECTO OR COMMAND 
 610:SirenState.c  ****     				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 948              		.loc 1 610 0
 949 00a8 7F4B     		ldr	r3, .L85+4
 950 00aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 951 00ac 0122     		movs	r2, #1
 952 00ae 1946     		mov	r1, r3
 953 00b0 0120     		movs	r0, #1
 954 00b2 FFF7FEFF 		bl	enableSpeakersForAudioTone
 955 00b6 4EE1     		b	.L45
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 29


 956              	.L55:
 611:SirenState.c  ****     		}
 612:SirenState.c  **** 			else if(InputRead.bParkKill)	//Plays NO TONE
 957              		.loc 1 612 0
 958 00b8 7A4B     		ldr	r3, .L85
 959 00ba 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 960 00bc 002B     		cmp	r3, #0
 961 00be 02D0     		beq	.L60
 613:SirenState.c  **** 				disableBothSpeakers();
 962              		.loc 1 613 0
 963 00c0 FFF7FEFF 		bl	disableBothSpeakers
 964 00c4 47E1     		b	.L45
 965              	.L60:
 614:SirenState.c  **** 			else if(InputRead.bHornRing)
 966              		.loc 1 614 0
 967 00c6 774B     		ldr	r3, .L85
 968 00c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 969 00ca 002B     		cmp	r3, #0
 970 00cc 0CD0     		beq	.L61
 615:SirenState.c  **** 			{	//Plays NO TONE
 616:SirenState.c  **** 				bToneChangeOnHornRing = !bToneChangeOnHornRing;
 971              		.loc 1 616 0
 972 00ce 774B     		ldr	r3, .L85+8
 973 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 974 00d2 002B     		cmp	r3, #0
 975 00d4 0CBF     		ite	eq
 976 00d6 0123     		moveq	r3, #1
 977 00d8 0023     		movne	r3, #0
 978 00da DBB2     		uxtb	r3, r3
 979 00dc 1A46     		mov	r2, r3
 980 00de 734B     		ldr	r3, .L85+8
 981 00e0 1A70     		strb	r2, [r3]
 617:SirenState.c  **** 				disableBothSpeakers();
 982              		.loc 1 617 0
 983 00e2 FFF7FEFF 		bl	disableBothSpeakers
 984 00e6 36E1     		b	.L45
 985              	.L61:
 618:SirenState.c  **** 			}
 619:SirenState.c  **** 			else if(bToneChangeOnHornRing)
 986              		.loc 1 619 0
 987 00e8 704B     		ldr	r3, .L85+8
 988 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 989 00ec 002B     		cmp	r3, #0
 990 00ee 29D0     		beq	.L62
 620:SirenState.c  **** 			{	//Plays SPEAKER 1 SIREN TONE
 621:SirenState.c  **** 				enableSpeakerForSirenTone(SPEAKER_1, getAlternatingTone(ToneStatus.currentTone[SPEAKER_1]), 
 991              		.loc 1 621 0
 992 00f0 6D4B     		ldr	r3, .L85+4
 993 00f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 994 00f4 1846     		mov	r0, r3
 995 00f6 FFF7FEFF 		bl	getAlternatingTone
 996 00fa 0346     		mov	r3, r0
 997 00fc 1946     		mov	r1, r3
 998 00fe 6A4B     		ldr	r3, .L85+4
 999 0100 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1000 0102 0122     		movs	r2, #1
 1001 0104 0020     		movs	r0, #0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 30


 1002 0106 FFF7FEFF 		bl	enableSpeakerForSirenTone
 622:SirenState.c  ****                     true, ToneStatus.bDualDelayEnable);
 623:SirenState.c  **** 				
 624:SirenState.c  **** 				if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1003              		.loc 1 624 0
 1004 010a 674B     		ldr	r3, .L85+4
 1005 010c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1006 010e 002B     		cmp	r3, #0
 1007 0110 0DD0     		beq	.L63
 625:SirenState.c  **** 					enableSpeakerForSirenTone(SPEAKER_2, getAlternatingTone(ToneStatus.currentTone[SPEAKER_2]), 
 1008              		.loc 1 625 0
 1009 0112 654B     		ldr	r3, .L85+4
 1010 0114 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1011 0116 1846     		mov	r0, r3
 1012 0118 FFF7FEFF 		bl	getAlternatingTone
 1013 011c 0346     		mov	r3, r0
 1014 011e 1946     		mov	r1, r3
 1015 0120 614B     		ldr	r3, .L85+4
 1016 0122 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1017 0124 0122     		movs	r2, #1
 1018 0126 0120     		movs	r0, #1
 1019 0128 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1020 012c 13E1     		b	.L45
 1021              	.L63:
 1022              	.LBB6:
 626:SirenState.c  ****                         true, ToneStatus.bDualDelayEnable);
 627:SirenState.c  **** 				else
 628:SirenState.c  ****                 {
 629:SirenState.c  ****                     PowerAmpOutput1_Write(false);
 1023              		.loc 1 629 0
 1024 012e 0020     		movs	r0, #0
 1025 0130 FFF7FEFF 		bl	PowerAmpOutput1_Write
 630:SirenState.c  ****                     enableSpeakerForSirenTone(SPEAKER_2, NO_TONE, false, ToneStatus.bDualDelayEnabl
 1026              		.loc 1 630 0
 1027 0134 5C4B     		ldr	r3, .L85+4
 1028 0136 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1029 0138 0022     		movs	r2, #0
 1030 013a 0021     		movs	r1, #0
 1031 013c 0120     		movs	r0, #1
 1032 013e FFF7FEFF 		bl	enableSpeakerForSirenTone
 1033 0142 08E1     		b	.L45
 1034              	.L62:
 1035              	.LBE6:
 631:SirenState.c  ****                 }
 632:SirenState.c  **** 			}
 633:SirenState.c  **** 			else
 634:SirenState.c  **** 			{	//Plays SPEAKER 1 SIREN TONE
 635:SirenState.c  **** 				enableSpeakerForSirenTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1],
 1036              		.loc 1 635 0
 1037 0144 584B     		ldr	r3, .L85+4
 1038 0146 9978     		ldrb	r1, [r3, #2]	@ zero_extendqisi2
 1039 0148 574B     		ldr	r3, .L85+4
 1040 014a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1041 014c 0122     		movs	r2, #1
 1042 014e 0020     		movs	r0, #0
 1043 0150 FFF7FEFF 		bl	enableSpeakerForSirenTone
 636:SirenState.c  ****                     true, ToneStatus.bDualDelayEnable);
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 31


 637:SirenState.c  **** 				
 638:SirenState.c  **** 				if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1044              		.loc 1 638 0
 1045 0154 544B     		ldr	r3, .L85+4
 1046 0156 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1047 0158 002B     		cmp	r3, #0
 1048 015a 08D0     		beq	.L65
 639:SirenState.c  **** 					enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2],
 1049              		.loc 1 639 0
 1050 015c 524B     		ldr	r3, .L85+4
 1051 015e D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 1052 0160 514B     		ldr	r3, .L85+4
 1053 0162 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1054 0164 0122     		movs	r2, #1
 1055 0166 0120     		movs	r0, #1
 1056 0168 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1057 016c F3E0     		b	.L45
 1058              	.L65:
 1059              	.LBB7:
 640:SirenState.c  ****                         true, ToneStatus.bDualDelayEnable);
 641:SirenState.c  **** 				else
 642:SirenState.c  ****                 {
 643:SirenState.c  **** 				    PowerAmpOutput1_Write(false);
 1060              		.loc 1 643 0
 1061 016e 0020     		movs	r0, #0
 1062 0170 FFF7FEFF 		bl	PowerAmpOutput1_Write
 644:SirenState.c  ****                     enableSpeakerForSirenTone(SPEAKER_2, NO_TONE, false, ToneStatus.bDualDelayEnabl
 1063              		.loc 1 644 0
 1064 0174 4C4B     		ldr	r3, .L85+4
 1065 0176 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1066 0178 0022     		movs	r2, #0
 1067 017a 0021     		movs	r1, #0
 1068 017c 0120     		movs	r0, #1
 1069 017e FFF7FEFF 		bl	enableSpeakerForSirenTone
 1070 0182 E8E0     		b	.L45
 1071              	.L48:
 1072              	.LBE7:
 645:SirenState.c  ****                 }
 646:SirenState.c  **** 			}
 647:SirenState.c  **** 		}
 648:SirenState.c  **** 	}
 649:SirenState.c  **** 	else if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1073              		.loc 1 649 0
 1074 0184 484B     		ldr	r3, .L85+4
 1075 0186 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1076 0188 002B     		cmp	r3, #0
 1077 018a 6DD0     		beq	.L66
 650:SirenState.c  **** 	{
 651:SirenState.c  **** 		if(isAudioTone(ToneStatus.currentTone[SPEAKER_2]))
 1078              		.loc 1 651 0
 1079 018c 464B     		ldr	r3, .L85+4
 1080 018e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1081 0190 1846     		mov	r0, r3
 1082 0192 FFF7FEFF 		bl	isAudioTone
 1083 0196 0346     		mov	r3, r0
 1084 0198 002B     		cmp	r3, #0
 1085 019a 1ED0     		beq	.L67
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 32


 652:SirenState.c  **** 		{
 653:SirenState.c  **** 			if(isSong(ToneStatus.currentTone[SPEAKER_2]))
 1086              		.loc 1 653 0
 1087 019c 424B     		ldr	r3, .L85+4
 1088 019e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1089 01a0 1846     		mov	r0, r3
 1090 01a2 FFF7FEFF 		bl	isSong
 1091 01a6 0346     		mov	r3, r0
 1092 01a8 002B     		cmp	r3, #0
 1093 01aa 0ED0     		beq	.L68
 654:SirenState.c  **** 			{
 655:SirenState.c  **** 				if(ToneStatus.bRisingEdge[SPEAKER_2])	//Plays BAD BOYS	
 1094              		.loc 1 655 0
 1095 01ac 3E4B     		ldr	r3, .L85+4
 1096 01ae 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1097 01b0 002B     		cmp	r3, #0
 1098 01b2 07D0     		beq	.L69
 656:SirenState.c  **** 					enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1099              		.loc 1 656 0
 1100 01b4 3C4B     		ldr	r3, .L85+4
 1101 01b6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1102 01b8 0122     		movs	r2, #1
 1103 01ba 1946     		mov	r1, r3
 1104 01bc 0120     		movs	r0, #1
 1105 01be FFF7FEFF 		bl	enableSpeakersForAudioTone
 1106 01c2 C8E0     		b	.L45
 1107              	.L69:
 657:SirenState.c  **** 				else	//Plays NO TONE
 658:SirenState.c  **** 					disableBothSpeakers();
 1108              		.loc 1 658 0
 1109 01c4 FFF7FEFF 		bl	disableBothSpeakers
 1110 01c8 C5E0     		b	.L45
 1111              	.L68:
 659:SirenState.c  **** 				
 660:SirenState.c  **** 			}
 661:SirenState.c  **** 			else	//Plays ECTO OR COMMAND 
 662:SirenState.c  **** 				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1112              		.loc 1 662 0
 1113 01ca 374B     		ldr	r3, .L85+4
 1114 01cc DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1115 01ce 0122     		movs	r2, #1
 1116 01d0 1946     		mov	r1, r3
 1117 01d2 0120     		movs	r0, #1
 1118 01d4 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1119 01d8 BDE0     		b	.L45
 1120              	.L67:
 663:SirenState.c  **** 		}
 664:SirenState.c  **** 		else
 665:SirenState.c  **** 		{	
 666:SirenState.c  **** 			if(InputRead.bParkKill)	//Plays NO TONE
 1121              		.loc 1 666 0
 1122 01da 324B     		ldr	r3, .L85
 1123 01dc 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1124 01de 002B     		cmp	r3, #0
 1125 01e0 02D0     		beq	.L73
 667:SirenState.c  **** 				disableBothSpeakers();
 1126              		.loc 1 667 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 33


 1127 01e2 FFF7FEFF 		bl	disableBothSpeakers
 1128 01e6 B6E0     		b	.L45
 1129              	.L73:
 668:SirenState.c  **** 			else if(InputRead.bHornRing)
 1130              		.loc 1 668 0
 1131 01e8 2E4B     		ldr	r3, .L85
 1132 01ea DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1133 01ec 002B     		cmp	r3, #0
 1134 01ee 0CD0     		beq	.L74
 669:SirenState.c  **** 			{	//Plays NO TONE
 670:SirenState.c  **** 				bToneChangeOnHornRing = !bToneChangeOnHornRing;
 1135              		.loc 1 670 0
 1136 01f0 2E4B     		ldr	r3, .L85+8
 1137 01f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1138 01f4 002B     		cmp	r3, #0
 1139 01f6 0CBF     		ite	eq
 1140 01f8 0123     		moveq	r3, #1
 1141 01fa 0023     		movne	r3, #0
 1142 01fc DBB2     		uxtb	r3, r3
 1143 01fe 1A46     		mov	r2, r3
 1144 0200 2A4B     		ldr	r3, .L85+8
 1145 0202 1A70     		strb	r2, [r3]
 671:SirenState.c  **** 				disableBothSpeakers();
 1146              		.loc 1 671 0
 1147 0204 FFF7FEFF 		bl	disableBothSpeakers
 1148 0208 A5E0     		b	.L45
 1149              	.L74:
 672:SirenState.c  **** 			}
 673:SirenState.c  **** 			else if(bToneChangeOnHornRing)
 1150              		.loc 1 673 0
 1151 020a 284B     		ldr	r3, .L85+8
 1152 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1153 020e 002B     		cmp	r3, #0
 1154 0210 17D0     		beq	.L75
 1155              	.LBB8:
 674:SirenState.c  **** 			{	//Plays SPEAKER 2 SIREN TONE
 675:SirenState.c  **** 				PowerAmpOutput1_Write(false);
 1156              		.loc 1 675 0
 1157 0212 0020     		movs	r0, #0
 1158 0214 FFF7FEFF 		bl	PowerAmpOutput1_Write
 676:SirenState.c  ****                 enableSpeakerForSirenTone(SPEAKER_1, NO_TONE, false, ToneStatus.bDualDelayEnable);
 1159              		.loc 1 676 0
 1160 0218 234B     		ldr	r3, .L85+4
 1161 021a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1162 021c 0022     		movs	r2, #0
 1163 021e 0021     		movs	r1, #0
 1164 0220 0020     		movs	r0, #0
 1165 0222 FFF7FEFF 		bl	enableSpeakerForSirenTone
 677:SirenState.c  **** 				enableSpeakerForSirenTone(SPEAKER_2, getAlternatingTone(ToneStatus.currentTone[SPEAKER_2]),
 1166              		.loc 1 677 0
 1167 0226 204B     		ldr	r3, .L85+4
 1168 0228 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1169 022a 1846     		mov	r0, r3
 1170 022c FFF7FEFF 		bl	getAlternatingTone
 1171 0230 0346     		mov	r3, r0
 1172 0232 1946     		mov	r1, r3
 1173 0234 1B4B     		ldr	r3, .L85
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 34


 1174 0236 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1175 0238 0122     		movs	r2, #1
 1176 023a 0120     		movs	r0, #1
 1177 023c FFF7FEFF 		bl	enableSpeakerForSirenTone
 1178              	.LBE8:
 1179 0240 89E0     		b	.L45
 1180              	.L75:
 1181              	.LBB9:
 678:SirenState.c  ****                     true, InputRead.bDualDelay);
 679:SirenState.c  **** 			}
 680:SirenState.c  **** 			else
 681:SirenState.c  **** 			{	//Plays SPEAKER 2 SIREN TONE
 682:SirenState.c  **** 				PowerAmpOutput1_Write(false);
 1182              		.loc 1 682 0
 1183 0242 0020     		movs	r0, #0
 1184 0244 FFF7FEFF 		bl	PowerAmpOutput1_Write
 683:SirenState.c  ****                 enableSpeakerForSirenTone(SPEAKER_1, NO_TONE, false, ToneStatus.bDualDelayEnable);
 1185              		.loc 1 683 0
 1186 0248 174B     		ldr	r3, .L85+4
 1187 024a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1188 024c 0022     		movs	r2, #0
 1189 024e 0021     		movs	r1, #0
 1190 0250 0020     		movs	r0, #0
 1191 0252 FFF7FEFF 		bl	enableSpeakerForSirenTone
 684:SirenState.c  **** 				enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2],
 1192              		.loc 1 684 0
 1193 0256 144B     		ldr	r3, .L85+4
 1194 0258 D978     		ldrb	r1, [r3, #3]	@ zero_extendqisi2
 1195 025a 124B     		ldr	r3, .L85
 1196 025c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1197 025e 0122     		movs	r2, #1
 1198 0260 0120     		movs	r0, #1
 1199 0262 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1200 0266 76E0     		b	.L45
 1201              	.L66:
 1202              	.LBE9:
 685:SirenState.c  ****                     true, InputRead.bDualDelay);
 686:SirenState.c  **** 			}
 687:SirenState.c  **** 		}
 688:SirenState.c  **** 	}
 689:SirenState.c  **** 	else
 690:SirenState.c  **** 	{	
 691:SirenState.c  ****         if(InputRead.bParkKill)
 1203              		.loc 1 691 0
 1204 0268 0E4B     		ldr	r3, .L85
 1205 026a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1206 026c 002B     		cmp	r3, #0
 1207 026e 02D0     		beq	.L76
 692:SirenState.c  ****             disableBothSpeakers();
 1208              		.loc 1 692 0
 1209 0270 FFF7FEFF 		bl	disableBothSpeakers
 1210 0274 6FE0     		b	.L45
 1211              	.L76:
 693:SirenState.c  ****         else
 694:SirenState.c  ****         {
 695:SirenState.c  ****     		if(InputRead.bHornRing)
 1212              		.loc 1 695 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 35


 1213 0276 0B4B     		ldr	r3, .L85
 1214 0278 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1215 027a 002B     		cmp	r3, #0
 1216 027c 18D0     		beq	.L77
 1217              	.LBB10:
 696:SirenState.c  ****     		{	//Plays HORN
 697:SirenState.c  ****     			bToneChangeOnHornRing = false;
 1218              		.loc 1 697 0
 1219 027e 0B4B     		ldr	r3, .L85+8
 1220 0280 0022     		movs	r2, #0
 1221 0282 1A70     		strb	r2, [r3]
 698:SirenState.c  ****     			deactivateManualWail();
 1222              		.loc 1 698 0
 1223 0284 FFF7FEFF 		bl	deactivateManualWail
 699:SirenState.c  ****     			enableSpeakerForSirenTone(SPEAKER_1, HORN, false, false);
 1224              		.loc 1 699 0
 1225 0288 0023     		movs	r3, #0
 1226 028a 0022     		movs	r2, #0
 1227 028c 0521     		movs	r1, #5
 1228 028e 0020     		movs	r0, #0
 1229 0290 FFF7FEFF 		bl	enableSpeakerForSirenTone
 700:SirenState.c  ****     			enableSpeakerForSirenTone(SPEAKER_2, HORN, false, false);
 1230              		.loc 1 700 0
 1231 0294 0023     		movs	r3, #0
 1232 0296 0022     		movs	r2, #0
 1233 0298 0521     		movs	r1, #5
 1234 029a 0120     		movs	r0, #1
 1235 029c FFF7FEFF 		bl	enableSpeakerForSirenTone
 1236              	.LBE10:
 1237 02a0 59E0     		b	.L45
 1238              	.L86:
 1239 02a2 00BF     		.align	2
 1240              	.L85:
 1241 02a4 0C000000 		.word	InputRead
 1242 02a8 14000000 		.word	ToneStatus
 1243 02ac 1E000000 		.word	bToneChangeOnHornRing.6310
 1244              	.L77:
 701:SirenState.c  ****     		}
 702:SirenState.c  ****     		else if(isTrailingTone(ToneStatus.previousTone[SPEAKER_1]))
 1245              		.loc 1 702 0
 1246 02b0 294B     		ldr	r3, .L87
 1247 02b2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1248 02b4 1846     		mov	r0, r3
 1249 02b6 FFF7FEFF 		bl	isTrailingTone
 1250 02ba 0346     		mov	r3, r0
 1251 02bc 002B     		cmp	r3, #0
 1252 02be 1DD0     		beq	.L78
 703:SirenState.c  ****     		{
 704:SirenState.c  ****     			if(isAudioTone(ToneStatus.previousTone[SPEAKER_1]))	//Plays ECTO or COMMAND	
 1253              		.loc 1 704 0
 1254 02c0 254B     		ldr	r3, .L87
 1255 02c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1256 02c4 1846     		mov	r0, r3
 1257 02c6 FFF7FEFF 		bl	isAudioTone
 1258 02ca 0346     		mov	r3, r0
 1259 02cc 002B     		cmp	r3, #0
 1260 02ce 07D0     		beq	.L79
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 36


 705:SirenState.c  ****     				enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.previousTone[SPEAKER_1], false);
 1261              		.loc 1 705 0
 1262 02d0 214B     		ldr	r3, .L87
 1263 02d2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1264 02d4 0022     		movs	r2, #0
 1265 02d6 1946     		mov	r1, r3
 1266 02d8 0020     		movs	r0, #0
 1267 02da FFF7FEFF 		bl	enableSpeakersForAudioTone
 1268 02de 06E0     		b	.L80
 1269              	.L79:
 706:SirenState.c  ****     			else	//Plays MANUAL WAIL
 707:SirenState.c  ****     				enableSpeakerForSirenTone(SPEAKER_1, ToneStatus.previousTone[SPEAKER_1], false, false);	
 1270              		.loc 1 707 0
 1271 02e0 1D4B     		ldr	r3, .L87
 1272 02e2 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 1273 02e4 0023     		movs	r3, #0
 1274 02e6 0022     		movs	r2, #0
 1275 02e8 0020     		movs	r0, #0
 1276 02ea FFF7FEFF 		bl	enableSpeakerForSirenTone
 1277              	.L80:
 708:SirenState.c  ****                 
 709:SirenState.c  ****                 ToneStatus.previousTone[SPEAKER_1] = NO_TONE;
 1278              		.loc 1 709 0
 1279 02ee 1A4B     		ldr	r3, .L87
 1280 02f0 0022     		movs	r2, #0
 1281 02f2 1A70     		strb	r2, [r3]
 710:SirenState.c  ****                 bToneChangeOnHornRing = false;
 1282              		.loc 1 710 0
 1283 02f4 194B     		ldr	r3, .L87+4
 1284 02f6 0022     		movs	r2, #0
 1285 02f8 1A70     		strb	r2, [r3]
 1286 02fa 2CE0     		b	.L45
 1287              	.L78:
 711:SirenState.c  ****     		}
 712:SirenState.c  ****     		else if(isTrailingTone(ToneStatus.previousTone[SPEAKER_2]))
 1288              		.loc 1 712 0
 1289 02fc 164B     		ldr	r3, .L87
 1290 02fe 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1291 0300 1846     		mov	r0, r3
 1292 0302 FFF7FEFF 		bl	isTrailingTone
 1293 0306 0346     		mov	r3, r0
 1294 0308 002B     		cmp	r3, #0
 1295 030a 1DD0     		beq	.L81
 713:SirenState.c  ****     		{
 714:SirenState.c  ****     			if(isAudioTone(ToneStatus.previousTone[SPEAKER_2]))	//Plays ECTO or COMMAND	
 1296              		.loc 1 714 0
 1297 030c 124B     		ldr	r3, .L87
 1298 030e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1299 0310 1846     		mov	r0, r3
 1300 0312 FFF7FEFF 		bl	isAudioTone
 1301 0316 0346     		mov	r3, r0
 1302 0318 002B     		cmp	r3, #0
 1303 031a 07D0     		beq	.L82
 715:SirenState.c  ****     				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.previousTone[SPEAKER_2], false);	
 1304              		.loc 1 715 0
 1305 031c 0E4B     		ldr	r3, .L87
 1306 031e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 37


 1307 0320 0022     		movs	r2, #0
 1308 0322 1946     		mov	r1, r3
 1309 0324 0120     		movs	r0, #1
 1310 0326 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1311 032a 06E0     		b	.L83
 1312              	.L82:
 716:SirenState.c  ****     			else	//Plays MANUAL WAIL	
 717:SirenState.c  ****     				enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.previousTone[SPEAKER_2], false, false);	
 1313              		.loc 1 717 0
 1314 032c 0A4B     		ldr	r3, .L87
 1315 032e 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
 1316 0330 0023     		movs	r3, #0
 1317 0332 0022     		movs	r2, #0
 1318 0334 0120     		movs	r0, #1
 1319 0336 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1320              	.L83:
 718:SirenState.c  ****                     
 719:SirenState.c  ****                 ToneStatus.previousTone[SPEAKER_2] = NO_TONE;
 1321              		.loc 1 719 0
 1322 033a 074B     		ldr	r3, .L87
 1323 033c 0022     		movs	r2, #0
 1324 033e 5A70     		strb	r2, [r3, #1]
 720:SirenState.c  ****                 bToneChangeOnHornRing = false;
 1325              		.loc 1 720 0
 1326 0340 064B     		ldr	r3, .L87+4
 1327 0342 0022     		movs	r2, #0
 1328 0344 1A70     		strb	r2, [r3]
 1329 0346 06E0     		b	.L45
 1330              	.L81:
 721:SirenState.c  ****     		}
 722:SirenState.c  ****     		else	//Plays NO TONE
 723:SirenState.c  ****             {
 724:SirenState.c  ****                 bToneChangeOnHornRing = false;
 1331              		.loc 1 724 0
 1332 0348 044B     		ldr	r3, .L87+4
 1333 034a 0022     		movs	r2, #0
 1334 034c 1A70     		strb	r2, [r3]
 725:SirenState.c  ****     			disableBothSpeakers();
 1335              		.loc 1 725 0
 1336 034e FFF7FEFF 		bl	disableBothSpeakers
 1337 0352 00E0     		b	.L45
 1338              	.L84:
 580:SirenState.c  ****     
 1339              		.loc 1 580 0
 1340 0354 00BF     		nop
 1341              	.L45:
 726:SirenState.c  ****             }
 727:SirenState.c  ****         }
 728:SirenState.c  **** 	}
 729:SirenState.c  **** }
 1342              		.loc 1 729 0
 1343 0356 80BD     		pop	{r7, pc}
 1344              	.L88:
 1345              		.align	2
 1346              	.L87:
 1347 0358 14000000 		.word	ToneStatus
 1348 035c 1E000000 		.word	bToneChangeOnHornRing.6310
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 38


 1349              		.cfi_endproc
 1350              	.LFE72:
 1351              		.size	decideTonesToPlay, .-decideTonesToPlay
 1352              		.section	.text.enableSpeakerForSirenTone,"ax",%progbits
 1353              		.align	2
 1354              		.thumb
 1355              		.thumb_func
 1356              		.type	enableSpeakerForSirenTone, %function
 1357              	enableSpeakerForSirenTone:
 1358              	.LFB73:
 730:SirenState.c  **** 
 731:SirenState.c  **** /*******************************************************************************
 732:SirenState.c  **** * Function Name: enableSpeakerForSirenTone
 733:SirenState.c  **** ********************************************************************************
 734:SirenState.c  **** *
 735:SirenState.c  **** * Summary:
 736:SirenState.c  **** *   Procedure for enabling a siren tone for the selected speaker
 737:SirenState.c  **** *
 738:SirenState.c  **** * Parameters: 
 739:SirenState.c  **** *   bSpeaker: Speaker selection (SPEAKER_1 or SPEAKER_2)
 740:SirenState.c  **** *   toneSelection: The tone to play
 741:SirenState.c  **** *   bInputEnable: The current input status
 742:SirenState.c  **** *   bDelay: The Dual Delay status
 743:SirenState.c  **** *
 744:SirenState.c  **** * Return:
 745:SirenState.c  **** *   TRUE for valid inputs, FALSE otherwise
 746:SirenState.c  **** *
 747:SirenState.c  **** *******************************************************************************/
 748:SirenState.c  **** static uint8 enableSpeakerForSirenTone(uint8 bSpeaker, enum ToneType toneSelection,
 749:SirenState.c  ****                                     uint8 bInputEnable, uint8 bDelay)
 750:SirenState.c  **** {
 1359              		.loc 1 750 0
 1360              		.cfi_startproc
 1361              		@ args = 0, pretend = 0, frame = 8
 1362              		@ frame_needed = 1, uses_anonymous_args = 0
 1363 0000 90B5     		push	{r4, r7, lr}
 1364              		.cfi_def_cfa_offset 12
 1365              		.cfi_offset 4, -12
 1366              		.cfi_offset 7, -8
 1367              		.cfi_offset 14, -4
 1368 0002 83B0     		sub	sp, sp, #12
 1369              		.cfi_def_cfa_offset 24
 1370 0004 00AF     		add	r7, sp, #0
 1371              		.cfi_def_cfa_register 7
 1372 0006 0446     		mov	r4, r0
 1373 0008 0846     		mov	r0, r1
 1374 000a 1146     		mov	r1, r2
 1375 000c 1A46     		mov	r2, r3
 1376 000e 2346     		mov	r3, r4
 1377 0010 FB71     		strb	r3, [r7, #7]
 1378 0012 0346     		mov	r3, r0
 1379 0014 BB71     		strb	r3, [r7, #6]
 1380 0016 0B46     		mov	r3, r1
 1381 0018 7B71     		strb	r3, [r7, #5]
 1382 001a 1346     		mov	r3, r2
 1383 001c 3B71     		strb	r3, [r7, #4]
 751:SirenState.c  **** 	if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 39


 1384              		.loc 1 751 0
 1385 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1386 0020 002B     		cmp	r3, #0
 1387 0022 04D0     		beq	.L90
 1388              		.loc 1 751 0 is_stmt 0 discriminator 1
 1389 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1390 0026 012B     		cmp	r3, #1
 1391 0028 01D0     		beq	.L90
 752:SirenState.c  ****         return false;
 1392              		.loc 1 752 0 is_stmt 1
 1393 002a 0023     		movs	r3, #0
 1394 002c 21E0     		b	.L91
 1395              	.L90:
 753:SirenState.c  ****     
 754:SirenState.c  ****     if((toneSelection < NO_TONE) || (toneSelection > TEST_TONE))
 1396              		.loc 1 754 0
 1397 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1398 0030 162B     		cmp	r3, #22
 1399 0032 01D9     		bls	.L92
 755:SirenState.c  ****         return false;
 1400              		.loc 1 755 0
 1401 0034 0023     		movs	r3, #0
 1402 0036 1CE0     		b	.L91
 1403              	.L92:
 756:SirenState.c  ****     
 757:SirenState.c  ****     if((bInputEnable != true) && (bInputEnable != false))
 1404              		.loc 1 757 0
 1405 0038 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1406 003a 012B     		cmp	r3, #1
 1407 003c 04D0     		beq	.L93
 1408              		.loc 1 757 0 is_stmt 0 discriminator 1
 1409 003e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1410 0040 002B     		cmp	r3, #0
 1411 0042 01D0     		beq	.L93
 758:SirenState.c  ****         return false;
 1412              		.loc 1 758 0 is_stmt 1
 1413 0044 0023     		movs	r3, #0
 1414 0046 14E0     		b	.L91
 1415              	.L93:
 759:SirenState.c  ****     
 760:SirenState.c  ****     deactivateAudio();
 1416              		.loc 1 760 0
 1417 0048 FFF7FEFF 		bl	deactivateAudio
 761:SirenState.c  ****     playAudioTone(bSpeaker, NO_TONE, false);
 1418              		.loc 1 761 0
 1419 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1420 004e 0022     		movs	r2, #0
 1421 0050 0021     		movs	r1, #0
 1422 0052 1846     		mov	r0, r3
 1423 0054 FFF7FEFF 		bl	playAudioTone
 762:SirenState.c  **** 	playPWMTone(bSpeaker, toneSelection, bInputEnable, bDelay);
 1424              		.loc 1 762 0
 1425 0058 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1426 005a B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 1427 005c 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1428 005e 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 1429 0060 FFF7FEFF 		bl	playPWMTone
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 40


 763:SirenState.c  **** 	
 764:SirenState.c  ****     if(toneSelection != NO_TONE)
 1430              		.loc 1 764 0
 1431 0064 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1432 0066 002B     		cmp	r3, #0
 1433 0068 02D0     		beq	.L94
 1434              	.LBB11:
 765:SirenState.c  ****     {
 766:SirenState.c  ****     	//if(bSpeaker)
 767:SirenState.c  ****     		PowerAmpOutput1_Write(true);
 1435              		.loc 1 767 0
 1436 006a 0120     		movs	r0, #1
 1437 006c FFF7FEFF 		bl	PowerAmpOutput1_Write
 1438              	.L94:
 1439              	.LBE11:
 768:SirenState.c  ****     	//else
 769:SirenState.c  ****     	//	PowerAmpOutput1_Write(true);
 770:SirenState.c  ****     }
 771:SirenState.c  ****         
 772:SirenState.c  ****     return true;
 1440              		.loc 1 772 0
 1441 0070 0123     		movs	r3, #1
 1442              	.L91:
 773:SirenState.c  **** }
 1443              		.loc 1 773 0
 1444 0072 1846     		mov	r0, r3
 1445 0074 0C37     		adds	r7, r7, #12
 1446              		.cfi_def_cfa_offset 12
 1447 0076 BD46     		mov	sp, r7
 1448              		.cfi_def_cfa_register 13
 1449              		@ sp needed
 1450 0078 90BD     		pop	{r4, r7, pc}
 1451              		.cfi_endproc
 1452              	.LFE73:
 1453              		.size	enableSpeakerForSirenTone, .-enableSpeakerForSirenTone
 1454 007a 00BF     		.section	.text.enableSpeakersForAudioTone,"ax",%progbits
 1455              		.align	2
 1456              		.thumb
 1457              		.thumb_func
 1458              		.type	enableSpeakersForAudioTone, %function
 1459              	enableSpeakersForAudioTone:
 1460              	.LFB74:
 774:SirenState.c  **** 
 775:SirenState.c  **** /*******************************************************************************
 776:SirenState.c  **** * Function Name: enableSpeakersForAudioTone
 777:SirenState.c  **** ********************************************************************************
 778:SirenState.c  **** *
 779:SirenState.c  **** * Summary:
 780:SirenState.c  **** *   Procedure for enabling an audio tone for the selected speaker
 781:SirenState.c  **** *
 782:SirenState.c  **** * Parameters: 
 783:SirenState.c  **** *   bSpeaker: Speaker selection (SPEAKER_1 or SPEAKER_2)
 784:SirenState.c  **** *   toneSelection: The tone to play
 785:SirenState.c  **** *   bInputEnable: The current input status
 786:SirenState.c  **** *
 787:SirenState.c  **** * Return:
 788:SirenState.c  **** *   TRUE for valid inputs, FALSE otherwise
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 41


 789:SirenState.c  **** *
 790:SirenState.c  **** *******************************************************************************/
 791:SirenState.c  **** static uint8 enableSpeakersForAudioTone(uint8 bSpeaker, enum ToneType toneSelection,
 792:SirenState.c  ****                                         uint8 bInputEnable)
 793:SirenState.c  **** {
 1461              		.loc 1 793 0
 1462              		.cfi_startproc
 1463              		@ args = 0, pretend = 0, frame = 8
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465 0000 80B5     		push	{r7, lr}
 1466              		.cfi_def_cfa_offset 8
 1467              		.cfi_offset 7, -8
 1468              		.cfi_offset 14, -4
 1469 0002 82B0     		sub	sp, sp, #8
 1470              		.cfi_def_cfa_offset 16
 1471 0004 00AF     		add	r7, sp, #0
 1472              		.cfi_def_cfa_register 7
 1473 0006 0346     		mov	r3, r0
 1474 0008 FB71     		strb	r3, [r7, #7]
 1475 000a 0B46     		mov	r3, r1
 1476 000c BB71     		strb	r3, [r7, #6]
 1477 000e 1346     		mov	r3, r2
 1478 0010 7B71     		strb	r3, [r7, #5]
 794:SirenState.c  **** 	if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 1479              		.loc 1 794 0
 1480 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1481 0014 002B     		cmp	r3, #0
 1482 0016 04D0     		beq	.L96
 1483              		.loc 1 794 0 is_stmt 0 discriminator 1
 1484 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1485 001a 012B     		cmp	r3, #1
 1486 001c 01D0     		beq	.L96
 795:SirenState.c  ****         return false;
 1487              		.loc 1 795 0 is_stmt 1
 1488 001e 0023     		movs	r3, #0
 1489 0020 21E0     		b	.L97
 1490              	.L96:
 796:SirenState.c  ****     
 797:SirenState.c  ****     if((toneSelection < WAIL) || (toneSelection > TEST_TONE))
 1491              		.loc 1 797 0
 1492 0022 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1493 0024 002B     		cmp	r3, #0
 1494 0026 02D0     		beq	.L98
 1495              		.loc 1 797 0 is_stmt 0 discriminator 1
 1496 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1497 002a 162B     		cmp	r3, #22
 1498 002c 01D9     		bls	.L99
 1499              	.L98:
 798:SirenState.c  ****         return false;
 1500              		.loc 1 798 0 is_stmt 1
 1501 002e 0023     		movs	r3, #0
 1502 0030 19E0     		b	.L97
 1503              	.L99:
 799:SirenState.c  ****     
 800:SirenState.c  ****     if((bInputEnable != true) && (bInputEnable != false))
 1504              		.loc 1 800 0
 1505 0032 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 42


 1506 0034 012B     		cmp	r3, #1
 1507 0036 04D0     		beq	.L100
 1508              		.loc 1 800 0 is_stmt 0 discriminator 1
 1509 0038 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1510 003a 002B     		cmp	r3, #0
 1511 003c 01D0     		beq	.L100
 801:SirenState.c  ****         return false;
 1512              		.loc 1 801 0 is_stmt 1
 1513 003e 0023     		movs	r3, #0
 1514 0040 11E0     		b	.L97
 1515              	.L100:
 802:SirenState.c  ****     
 803:SirenState.c  ****     deactivateManualWail();
 1516              		.loc 1 803 0
 1517 0042 FFF7FEFF 		bl	deactivateManualWail
 804:SirenState.c  ****     playPWMTone(bSpeaker, NO_TONE, false, false);
 1518              		.loc 1 804 0
 1519 0046 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1520 0048 0023     		movs	r3, #0
 1521 004a 0022     		movs	r2, #0
 1522 004c 0021     		movs	r1, #0
 1523 004e FFF7FEFF 		bl	playPWMTone
 805:SirenState.c  **** 	playAudioTone(bSpeaker, toneSelection, bInputEnable);
 1524              		.loc 1 805 0
 1525 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1526 0054 B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 1527 0056 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1528 0058 1846     		mov	r0, r3
 1529 005a FFF7FEFF 		bl	playAudioTone
 806:SirenState.c  **** 	PowerAmpOutput1_Write(true);
 1530              		.loc 1 806 0
 1531 005e 0120     		movs	r0, #1
 1532 0060 FFF7FEFF 		bl	PowerAmpOutput1_Write
 807:SirenState.c  ****     
 808:SirenState.c  ****     return true;
 1533              		.loc 1 808 0
 1534 0064 0123     		movs	r3, #1
 1535              	.L97:
 809:SirenState.c  **** }
 1536              		.loc 1 809 0
 1537 0066 1846     		mov	r0, r3
 1538 0068 0837     		adds	r7, r7, #8
 1539              		.cfi_def_cfa_offset 8
 1540 006a BD46     		mov	sp, r7
 1541              		.cfi_def_cfa_register 13
 1542              		@ sp needed
 1543 006c 80BD     		pop	{r7, pc}
 1544              		.cfi_endproc
 1545              	.LFE74:
 1546              		.size	enableSpeakersForAudioTone, .-enableSpeakersForAudioTone
 1547 006e 00BF     		.section	.text.getHighestPriorityChannel,"ax",%progbits
 1548              		.align	2
 1549              		.thumb
 1550              		.thumb_func
 1551              		.type	getHighestPriorityChannel, %function
 1552              	getHighestPriorityChannel:
 1553              	.LFB75:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 43


 810:SirenState.c  **** 
 811:SirenState.c  **** /*******************************************************************************
 812:SirenState.c  **** * Function Name: getHighestPriorityInput
 813:SirenState.c  **** ********************************************************************************
 814:SirenState.c  **** *
 815:SirenState.c  **** * Summary:
 816:SirenState.c  **** *  Determines the active tone with the highest priority
 817:SirenState.c  **** *
 818:SirenState.c  **** * Parameters: 
 819:SirenState.c  **** *   bSpeakerNumber - The speaker selection for the input reading
 820:SirenState.c  **** *
 821:SirenState.c  **** * Return:
 822:SirenState.c  **** *   The active tone mode with the highest priority
 823:SirenState.c  **** *
 824:SirenState.c  **** *******************************************************************************/
 825:SirenState.c  **** static enum ChannelIndex getHighestPriorityChannel(uint8 bSpeakerNumber)
 826:SirenState.c  **** {
 1554              		.loc 1 826 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 16
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558              		@ link register save eliminated.
 1559 0000 80B4     		push	{r7}
 1560              		.cfi_def_cfa_offset 4
 1561              		.cfi_offset 7, -4
 1562 0002 85B0     		sub	sp, sp, #20
 1563              		.cfi_def_cfa_offset 24
 1564 0004 00AF     		add	r7, sp, #0
 1565              		.cfi_def_cfa_register 7
 1566 0006 0346     		mov	r3, r0
 1567 0008 FB71     		strb	r3, [r7, #7]
 827:SirenState.c  ****     uint8 modeStatusByte = 0;
 1568              		.loc 1 827 0
 1569 000a 0023     		movs	r3, #0
 1570 000c FB73     		strb	r3, [r7, #15]
 828:SirenState.c  ****     
 829:SirenState.c  ****     if((bSpeakerNumber != SPEAKER_1) && (bSpeakerNumber != SPEAKER_2))
 1571              		.loc 1 829 0
 1572 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1573 0010 002B     		cmp	r3, #0
 1574 0012 04D0     		beq	.L102
 1575              		.loc 1 829 0 is_stmt 0 discriminator 1
 1576 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1577 0016 012B     		cmp	r3, #1
 1578 0018 01D0     		beq	.L102
 830:SirenState.c  ****         return NO_CHANNEL;
 1579              		.loc 1 830 0 is_stmt 1
 1580 001a FF23     		movs	r3, #255
 1581 001c 2AE0     		b	.L103
 1582              	.L102:
 831:SirenState.c  ****     
 832:SirenState.c  ****     //if(bSpeakerNumber)
 833:SirenState.c  ****     //    modeStatusByte = ModeStatus2_Read();
 834:SirenState.c  ****     //else
 835:SirenState.c  ****     //    modeStatusByte = ModeStatus_Read();
 836:SirenState.c  ****     
 837:SirenState.c  ****     if(modeStatusByte & 0x20)
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 44


 1583              		.loc 1 837 0
 1584 001e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1585 0020 03F02003 		and	r3, r3, #32
 1586 0024 002B     		cmp	r3, #0
 1587 0026 01D0     		beq	.L104
 838:SirenState.c  ****         return CHANNEL_6;
 1588              		.loc 1 838 0
 1589 0028 0523     		movs	r3, #5
 1590 002a 23E0     		b	.L103
 1591              	.L104:
 839:SirenState.c  ****     if(modeStatusByte & 0x10)
 1592              		.loc 1 839 0
 1593 002c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1594 002e 03F01003 		and	r3, r3, #16
 1595 0032 002B     		cmp	r3, #0
 1596 0034 01D0     		beq	.L105
 840:SirenState.c  ****         return CHANNEL_5;
 1597              		.loc 1 840 0
 1598 0036 0423     		movs	r3, #4
 1599 0038 1CE0     		b	.L103
 1600              	.L105:
 841:SirenState.c  ****     if(modeStatusByte & 0x08)
 1601              		.loc 1 841 0
 1602 003a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1603 003c 03F00803 		and	r3, r3, #8
 1604 0040 002B     		cmp	r3, #0
 1605 0042 01D0     		beq	.L106
 842:SirenState.c  ****         return CHANNEL_4;
 1606              		.loc 1 842 0
 1607 0044 0323     		movs	r3, #3
 1608 0046 15E0     		b	.L103
 1609              	.L106:
 843:SirenState.c  ****     if(modeStatusByte & 0x04)
 1610              		.loc 1 843 0
 1611 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1612 004a 03F00403 		and	r3, r3, #4
 1613 004e 002B     		cmp	r3, #0
 1614 0050 01D0     		beq	.L107
 844:SirenState.c  ****         return CHANNEL_3;    
 1615              		.loc 1 844 0
 1616 0052 0223     		movs	r3, #2
 1617 0054 0EE0     		b	.L103
 1618              	.L107:
 845:SirenState.c  ****     if(modeStatusByte & 0x02)
 1619              		.loc 1 845 0
 1620 0056 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1621 0058 03F00203 		and	r3, r3, #2
 1622 005c 002B     		cmp	r3, #0
 1623 005e 01D0     		beq	.L108
 846:SirenState.c  ****         return CHANNEL_2;
 1624              		.loc 1 846 0
 1625 0060 0123     		movs	r3, #1
 1626 0062 07E0     		b	.L103
 1627              	.L108:
 847:SirenState.c  ****     if(modeStatusByte & 0x01)
 1628              		.loc 1 847 0
 1629 0064 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 45


 1630 0066 03F00103 		and	r3, r3, #1
 1631 006a 002B     		cmp	r3, #0
 1632 006c 01D0     		beq	.L109
 848:SirenState.c  ****         return CHANNEL_1;
 1633              		.loc 1 848 0
 1634 006e 0023     		movs	r3, #0
 1635 0070 00E0     		b	.L103
 1636              	.L109:
 849:SirenState.c  ****     
 850:SirenState.c  ****     return NO_CHANNEL;
 1637              		.loc 1 850 0
 1638 0072 FF23     		movs	r3, #255
 1639              	.L103:
 851:SirenState.c  **** }
 1640              		.loc 1 851 0
 1641 0074 1846     		mov	r0, r3
 1642 0076 1437     		adds	r7, r7, #20
 1643              		.cfi_def_cfa_offset 4
 1644 0078 BD46     		mov	sp, r7
 1645              		.cfi_def_cfa_register 13
 1646              		@ sp needed
 1647 007a 80BC     		pop	{r7}
 1648              		.cfi_restore 7
 1649              		.cfi_def_cfa_offset 0
 1650 007c 7047     		bx	lr
 1651              		.cfi_endproc
 1652              	.LFE75:
 1653              		.size	getHighestPriorityChannel, .-getHighestPriorityChannel
 1654 007e 00BF     		.section	.text.getAlternatingTone,"ax",%progbits
 1655              		.align	2
 1656              		.thumb
 1657              		.thumb_func
 1658              		.type	getAlternatingTone, %function
 1659              	getAlternatingTone:
 1660              	.LFB76:
 852:SirenState.c  **** 
 853:SirenState.c  **** /*******************************************************************************
 854:SirenState.c  **** * Function Name: getAlternatingTone
 855:SirenState.c  **** ********************************************************************************
 856:SirenState.c  **** *
 857:SirenState.c  **** * Summary:
 858:SirenState.c  **** *   Gets the 2nd tone to play during toggling with the horn
 859:SirenState.c  **** *
 860:SirenState.c  **** * Parameters: 
 861:SirenState.c  **** *   toneSelection: The first tone to play during toggling
 862:SirenState.c  **** *
 863:SirenState.c  **** * Return:
 864:SirenState.c  **** *   The alternating tone (or the same tone if no horn capability)
 865:SirenState.c  **** *
 866:SirenState.c  **** *******************************************************************************/
 867:SirenState.c  **** static enum ToneType getAlternatingTone(enum ToneType toneSelection)
 868:SirenState.c  **** {
 1661              		.loc 1 868 0
 1662              		.cfi_startproc
 1663              		@ args = 0, pretend = 0, frame = 8
 1664              		@ frame_needed = 1, uses_anonymous_args = 0
 1665 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 46


 1666              		.cfi_def_cfa_offset 8
 1667              		.cfi_offset 7, -8
 1668              		.cfi_offset 14, -4
 1669 0002 82B0     		sub	sp, sp, #8
 1670              		.cfi_def_cfa_offset 16
 1671 0004 00AF     		add	r7, sp, #0
 1672              		.cfi_def_cfa_register 7
 1673 0006 0346     		mov	r3, r0
 1674 0008 FB71     		strb	r3, [r7, #7]
 869:SirenState.c  **** 	if((toneSelection == NO_TONE) || isAudioTone(toneSelection) || (toneSelection == TEST_TONE))
 1675              		.loc 1 869 0
 1676 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1677 000c 002B     		cmp	r3, #0
 1678 000e 09D0     		beq	.L111
 1679              		.loc 1 869 0 is_stmt 0 discriminator 1
 1680 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1681 0012 1846     		mov	r0, r3
 1682 0014 FFF7FEFF 		bl	isAudioTone
 1683 0018 0346     		mov	r3, r0
 1684 001a 002B     		cmp	r3, #0
 1685 001c 02D1     		bne	.L111
 1686              		.loc 1 869 0 discriminator 2
 1687 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1688 0020 162B     		cmp	r3, #22
 1689 0022 01D1     		bne	.L112
 1690              	.L111:
 870:SirenState.c  **** 		return toneSelection;
 1691              		.loc 1 870 0 is_stmt 1
 1692 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1693 0026 0FE0     		b	.L113
 1694              	.L112:
 871:SirenState.c  **** 	
 872:SirenState.c  **** 	if((toneSelection == MECHANICAL) || (toneSelection == PCALL_FAST))
 1695              		.loc 1 872 0
 1696 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1697 002a 062B     		cmp	r3, #6
 1698 002c 02D0     		beq	.L114
 1699              		.loc 1 872 0 is_stmt 0 discriminator 1
 1700 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1701 0030 0A2B     		cmp	r3, #10
 1702 0032 01D1     		bne	.L115
 1703              	.L114:
 873:SirenState.c  **** 		return PHASER;
 1704              		.loc 1 873 0 is_stmt 1
 1705 0034 0423     		movs	r3, #4
 1706 0036 07E0     		b	.L113
 1707              	.L115:
 874:SirenState.c  **** 	
 875:SirenState.c  **** 	if(toneSelection == PHASER_YELP)
 1708              		.loc 1 875 0
 1709 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1710 003a 0D2B     		cmp	r3, #13
 1711 003c 01D1     		bne	.L116
 876:SirenState.c  **** 		return HORN_PHASER;
 1712              		.loc 1 876 0
 1713 003e 0B23     		movs	r3, #11
 1714 0040 02E0     		b	.L113
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 47


 1715              	.L116:
 877:SirenState.c  **** 	
 878:SirenState.c  **** 	return (toneSelection + 1);
 1716              		.loc 1 878 0
 1717 0042 FB79     		ldrb	r3, [r7, #7]
 1718 0044 0133     		adds	r3, r3, #1
 1719 0046 DBB2     		uxtb	r3, r3
 1720              	.L113:
 879:SirenState.c  **** }
 1721              		.loc 1 879 0
 1722 0048 1846     		mov	r0, r3
 1723 004a 0837     		adds	r7, r7, #8
 1724              		.cfi_def_cfa_offset 8
 1725 004c BD46     		mov	sp, r7
 1726              		.cfi_def_cfa_register 13
 1727              		@ sp needed
 1728 004e 80BD     		pop	{r7, pc}
 1729              		.cfi_endproc
 1730              	.LFE76:
 1731              		.size	getAlternatingTone, .-getAlternatingTone
 1732              		.section	.text.isTrailingTone,"ax",%progbits
 1733              		.align	2
 1734              		.thumb
 1735              		.thumb_func
 1736              		.type	isTrailingTone, %function
 1737              	isTrailingTone:
 1738              	.LFB77:
 880:SirenState.c  **** 
 881:SirenState.c  **** /*******************************************************************************
 882:SirenState.c  **** * Function Name: isTrailingTone
 883:SirenState.c  **** ********************************************************************************
 884:SirenState.c  **** *
 885:SirenState.c  **** * Summary:
 886:SirenState.c  **** *   Determines if the given tone has the trailing effect
 887:SirenState.c  **** *
 888:SirenState.c  **** * Parameters: 
 889:SirenState.c  **** *   thisTone: The tone to check
 890:SirenState.c  **** *
 891:SirenState.c  **** * Return:
 892:SirenState.c  **** *   TRUE if trailing tone, FALSE if not trailing tone or invalid input
 893:SirenState.c  **** *
 894:SirenState.c  **** *******************************************************************************/
 895:SirenState.c  **** static uint8 isTrailingTone(enum ToneType thisTone)
 896:SirenState.c  **** {
 1739              		.loc 1 896 0
 1740              		.cfi_startproc
 1741              		@ args = 0, pretend = 0, frame = 8
 1742              		@ frame_needed = 1, uses_anonymous_args = 0
 1743 0000 80B5     		push	{r7, lr}
 1744              		.cfi_def_cfa_offset 8
 1745              		.cfi_offset 7, -8
 1746              		.cfi_offset 14, -4
 1747 0002 82B0     		sub	sp, sp, #8
 1748              		.cfi_def_cfa_offset 16
 1749 0004 00AF     		add	r7, sp, #0
 1750              		.cfi_def_cfa_register 7
 1751 0006 0346     		mov	r3, r0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 48


 1752 0008 FB71     		strb	r3, [r7, #7]
 897:SirenState.c  ****     if((thisTone == MANUAL_WAIL) || (thisTone == ECTOSIREN) || isCommand(thisTone))
 1753              		.loc 1 897 0
 1754 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1755 000c 072B     		cmp	r3, #7
 1756 000e 09D0     		beq	.L118
 1757              		.loc 1 897 0 is_stmt 0 discriminator 1
 1758 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1759 0012 0E2B     		cmp	r3, #14
 1760 0014 06D0     		beq	.L118
 1761              		.loc 1 897 0 discriminator 2
 1762 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1763 0018 1846     		mov	r0, r3
 1764 001a FFF7FEFF 		bl	isCommand
 1765 001e 0346     		mov	r3, r0
 1766 0020 002B     		cmp	r3, #0
 1767 0022 01D0     		beq	.L119
 1768              	.L118:
 898:SirenState.c  ****         return true;
 1769              		.loc 1 898 0 is_stmt 1
 1770 0024 0123     		movs	r3, #1
 1771 0026 00E0     		b	.L120
 1772              	.L119:
 899:SirenState.c  ****     
 900:SirenState.c  ****     return false;
 1773              		.loc 1 900 0
 1774 0028 0023     		movs	r3, #0
 1775              	.L120:
 901:SirenState.c  **** }
 1776              		.loc 1 901 0
 1777 002a 1846     		mov	r0, r3
 1778 002c 0837     		adds	r7, r7, #8
 1779              		.cfi_def_cfa_offset 8
 1780 002e BD46     		mov	sp, r7
 1781              		.cfi_def_cfa_register 13
 1782              		@ sp needed
 1783 0030 80BD     		pop	{r7, pc}
 1784              		.cfi_endproc
 1785              	.LFE77:
 1786              		.size	isTrailingTone, .-isTrailingTone
 1787 0032 00BF     		.section	.text.isAudioTone,"ax",%progbits
 1788              		.align	2
 1789              		.thumb
 1790              		.thumb_func
 1791              		.type	isAudioTone, %function
 1792              	isAudioTone:
 1793              	.LFB78:
 902:SirenState.c  **** 
 903:SirenState.c  **** /*******************************************************************************
 904:SirenState.c  **** * Function Name: isAudioTone
 905:SirenState.c  **** ********************************************************************************
 906:SirenState.c  **** *
 907:SirenState.c  **** * Summary:
 908:SirenState.c  **** *   Determines if the given tone is an audio tone
 909:SirenState.c  **** *
 910:SirenState.c  **** * Parameters: 
 911:SirenState.c  **** *   thisTone: The tone to check
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 49


 912:SirenState.c  **** *
 913:SirenState.c  **** * Return:
 914:SirenState.c  **** *   TRUE if audio tone, FALSE if not audio tone or invalid input
 915:SirenState.c  **** *
 916:SirenState.c  **** *******************************************************************************/
 917:SirenState.c  **** static uint8 isAudioTone(enum ToneType thisTone)
 918:SirenState.c  **** {
 1794              		.loc 1 918 0
 1795              		.cfi_startproc
 1796              		@ args = 0, pretend = 0, frame = 8
 1797              		@ frame_needed = 1, uses_anonymous_args = 0
 1798 0000 80B5     		push	{r7, lr}
 1799              		.cfi_def_cfa_offset 8
 1800              		.cfi_offset 7, -8
 1801              		.cfi_offset 14, -4
 1802 0002 82B0     		sub	sp, sp, #8
 1803              		.cfi_def_cfa_offset 16
 1804 0004 00AF     		add	r7, sp, #0
 1805              		.cfi_def_cfa_register 7
 1806 0006 0346     		mov	r3, r0
 1807 0008 FB71     		strb	r3, [r7, #7]
 919:SirenState.c  ****     if((thisTone == ECTOSIREN) || isSong(thisTone) || isCommand(thisTone))
 1808              		.loc 1 919 0
 1809 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1810 000c 0E2B     		cmp	r3, #14
 1811 000e 0DD0     		beq	.L122
 1812              		.loc 1 919 0 is_stmt 0 discriminator 1
 1813 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1814 0012 1846     		mov	r0, r3
 1815 0014 FFF7FEFF 		bl	isSong
 1816 0018 0346     		mov	r3, r0
 1817 001a 002B     		cmp	r3, #0
 1818 001c 06D1     		bne	.L122
 1819              		.loc 1 919 0 discriminator 2
 1820 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1821 0020 1846     		mov	r0, r3
 1822 0022 FFF7FEFF 		bl	isCommand
 1823 0026 0346     		mov	r3, r0
 1824 0028 002B     		cmp	r3, #0
 1825 002a 01D0     		beq	.L123
 1826              	.L122:
 920:SirenState.c  ****         return true;
 1827              		.loc 1 920 0 is_stmt 1
 1828 002c 0123     		movs	r3, #1
 1829 002e 00E0     		b	.L124
 1830              	.L123:
 921:SirenState.c  ****     
 922:SirenState.c  ****     return false;
 1831              		.loc 1 922 0
 1832 0030 0023     		movs	r3, #0
 1833              	.L124:
 923:SirenState.c  **** }
 1834              		.loc 1 923 0
 1835 0032 1846     		mov	r0, r3
 1836 0034 0837     		adds	r7, r7, #8
 1837              		.cfi_def_cfa_offset 8
 1838 0036 BD46     		mov	sp, r7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 50


 1839              		.cfi_def_cfa_register 13
 1840              		@ sp needed
 1841 0038 80BD     		pop	{r7, pc}
 1842              		.cfi_endproc
 1843              	.LFE78:
 1844              		.size	isAudioTone, .-isAudioTone
 1845 003a 00BF     		.section	.text.isCommand,"ax",%progbits
 1846              		.align	2
 1847              		.thumb
 1848              		.thumb_func
 1849              		.type	isCommand, %function
 1850              	isCommand:
 1851              	.LFB79:
 924:SirenState.c  **** 
 925:SirenState.c  **** /*******************************************************************************
 926:SirenState.c  **** * Function Name: isCommand
 927:SirenState.c  **** ********************************************************************************
 928:SirenState.c  **** *
 929:SirenState.c  **** * Summary:
 930:SirenState.c  **** *   Determines if the given tone is a command
 931:SirenState.c  **** *
 932:SirenState.c  **** * Parameters: 
 933:SirenState.c  **** *   thisTone: The tone to check
 934:SirenState.c  **** *
 935:SirenState.c  **** * Return:
 936:SirenState.c  **** *   TRUE if a command, FALSE if not a command or invalid input
 937:SirenState.c  **** *
 938:SirenState.c  **** *******************************************************************************/
 939:SirenState.c  **** static uint8 isCommand(enum ToneType thisTone)
 940:SirenState.c  **** {
 1852              		.loc 1 940 0
 1853              		.cfi_startproc
 1854              		@ args = 0, pretend = 0, frame = 8
 1855              		@ frame_needed = 1, uses_anonymous_args = 0
 1856              		@ link register save eliminated.
 1857 0000 80B4     		push	{r7}
 1858              		.cfi_def_cfa_offset 4
 1859              		.cfi_offset 7, -4
 1860 0002 83B0     		sub	sp, sp, #12
 1861              		.cfi_def_cfa_offset 16
 1862 0004 00AF     		add	r7, sp, #0
 1863              		.cfi_def_cfa_register 7
 1864 0006 0346     		mov	r3, r0
 1865 0008 FB71     		strb	r3, [r7, #7]
 941:SirenState.c  ****     if((thisTone >= MOVE_OUT) && (thisTone <= REMAIN_WINDOW_DOWN))
 1866              		.loc 1 941 0
 1867 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1868 000c 0F2B     		cmp	r3, #15
 1869 000e 04D9     		bls	.L126
 1870              		.loc 1 941 0 is_stmt 0 discriminator 1
 1871 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1872 0012 152B     		cmp	r3, #21
 1873 0014 01D8     		bhi	.L126
 942:SirenState.c  ****         return true;
 1874              		.loc 1 942 0 is_stmt 1
 1875 0016 0123     		movs	r3, #1
 1876 0018 00E0     		b	.L127
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 51


 1877              	.L126:
 943:SirenState.c  ****     
 944:SirenState.c  ****     return false;
 1878              		.loc 1 944 0
 1879 001a 0023     		movs	r3, #0
 1880              	.L127:
 945:SirenState.c  **** }
 1881              		.loc 1 945 0
 1882 001c 1846     		mov	r0, r3
 1883 001e 0C37     		adds	r7, r7, #12
 1884              		.cfi_def_cfa_offset 4
 1885 0020 BD46     		mov	sp, r7
 1886              		.cfi_def_cfa_register 13
 1887              		@ sp needed
 1888 0022 80BC     		pop	{r7}
 1889              		.cfi_restore 7
 1890              		.cfi_def_cfa_offset 0
 1891 0024 7047     		bx	lr
 1892              		.cfi_endproc
 1893              	.LFE79:
 1894              		.size	isCommand, .-isCommand
 1895 0026 00BF     		.section	.text.isSong,"ax",%progbits
 1896              		.align	2
 1897              		.thumb
 1898              		.thumb_func
 1899              		.type	isSong, %function
 1900              	isSong:
 1901              	.LFB80:
 946:SirenState.c  **** 
 947:SirenState.c  **** /*******************************************************************************
 948:SirenState.c  **** * Function Name: isSong
 949:SirenState.c  **** ********************************************************************************
 950:SirenState.c  **** *
 951:SirenState.c  **** * Summary:
 952:SirenState.c  **** *   Determines if the given tone is a song
 953:SirenState.c  **** *
 954:SirenState.c  **** * Parameters: 
 955:SirenState.c  **** *   thisTone: The tone to check
 956:SirenState.c  **** *
 957:SirenState.c  **** * Return:
 958:SirenState.c  **** *   TRUE if a song, FALSE if not a song or invalid input
 959:SirenState.c  **** *
 960:SirenState.c  **** *******************************************************************************/
 961:SirenState.c  **** static uint8 isSong(enum ToneType thisTone)
 962:SirenState.c  **** {
 1902              		.loc 1 962 0
 1903              		.cfi_startproc
 1904              		@ args = 0, pretend = 0, frame = 8
 1905              		@ frame_needed = 1, uses_anonymous_args = 0
 1906              		@ link register save eliminated.
 1907 0000 80B4     		push	{r7}
 1908              		.cfi_def_cfa_offset 4
 1909              		.cfi_offset 7, -4
 1910 0002 83B0     		sub	sp, sp, #12
 1911              		.cfi_def_cfa_offset 16
 1912 0004 00AF     		add	r7, sp, #0
 1913              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 52


 1914 0006 0346     		mov	r3, r0
 1915 0008 FB71     		strb	r3, [r7, #7]
 963:SirenState.c  ****     if(thisTone == COPS_SONG)
 1916              		.loc 1 963 0
 1917 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1918 000c 0F2B     		cmp	r3, #15
 1919 000e 01D1     		bne	.L129
 964:SirenState.c  ****         return true;
 1920              		.loc 1 964 0
 1921 0010 0123     		movs	r3, #1
 1922 0012 00E0     		b	.L130
 1923              	.L129:
 965:SirenState.c  ****     
 966:SirenState.c  ****     return false;
 1924              		.loc 1 966 0
 1925 0014 0023     		movs	r3, #0
 1926              	.L130:
 967:SirenState.c  **** }
 1927              		.loc 1 967 0
 1928 0016 1846     		mov	r0, r3
 1929 0018 0C37     		adds	r7, r7, #12
 1930              		.cfi_def_cfa_offset 4
 1931 001a BD46     		mov	sp, r7
 1932              		.cfi_def_cfa_register 13
 1933              		@ sp needed
 1934 001c 80BC     		pop	{r7}
 1935              		.cfi_restore 7
 1936              		.cfi_def_cfa_offset 0
 1937 001e 7047     		bx	lr
 1938              		.cfi_endproc
 1939              	.LFE80:
 1940              		.size	isSong, .-isSong
 1941              		.section	.text.getBitIndex,"ax",%progbits
 1942              		.align	2
 1943              		.thumb
 1944              		.thumb_func
 1945              		.type	getBitIndex, %function
 1946              	getBitIndex:
 1947              	.LFB81:
 968:SirenState.c  **** 
 969:SirenState.c  **** /*******************************************************************************
 970:SirenState.c  **** * Function Name: getBitIndex
 971:SirenState.c  **** ********************************************************************************
 972:SirenState.c  **** *
 973:SirenState.c  **** * Summary:
 974:SirenState.c  **** *  Computes the index of a byte based on the mask given. 7 is the most significant bit.
 975:SirenState.c  **** *
 976:SirenState.c  **** * Parameters:
 977:SirenState.c  **** *  maskNumber: An 8-bit value with a single bit being set to 1
 978:SirenState.c  **** *
 979:SirenState.c  **** * Return:
 980:SirenState.c  **** *  The index of the set bit ranging 0 - 7
 981:SirenState.c  **** *
 982:SirenState.c  **** *******************************************************************************/
 983:SirenState.c  **** static uint8 getBitIndex(enum BitMask maskNumber)
 984:SirenState.c  **** {
 1948              		.loc 1 984 0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 53


 1949              		.cfi_startproc
 1950              		@ args = 0, pretend = 0, frame = 16
 1951              		@ frame_needed = 1, uses_anonymous_args = 0
 1952              		@ link register save eliminated.
 1953 0000 80B4     		push	{r7}
 1954              		.cfi_def_cfa_offset 4
 1955              		.cfi_offset 7, -4
 1956 0002 85B0     		sub	sp, sp, #20
 1957              		.cfi_def_cfa_offset 24
 1958 0004 00AF     		add	r7, sp, #0
 1959              		.cfi_def_cfa_register 7
 1960 0006 0346     		mov	r3, r0
 1961 0008 FB71     		strb	r3, [r7, #7]
 985:SirenState.c  **** 	uint8 indexResult = 0;
 1962              		.loc 1 985 0
 1963 000a 0023     		movs	r3, #0
 1964 000c FB73     		strb	r3, [r7, #15]
 986:SirenState.c  **** 	
 987:SirenState.c  **** 	switch(maskNumber)
 1965              		.loc 1 987 0
 1966 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1967 0010 013B     		subs	r3, r3, #1
 1968 0012 1F2B     		cmp	r3, #31
 1969 0014 54D8     		bhi	.L132
 1970 0016 01A2     		adr	r2, .L134
 1971 0018 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1972              		.p2align 2
 1973              	.L134:
 1974 001c 9D000000 		.word	.L133+1
 1975 0020 A3000000 		.word	.L135+1
 1976 0024 C1000000 		.word	.L132+1
 1977 0028 A9000000 		.word	.L136+1
 1978 002c C1000000 		.word	.L132+1
 1979 0030 C1000000 		.word	.L132+1
 1980 0034 C1000000 		.word	.L132+1
 1981 0038 AF000000 		.word	.L137+1
 1982 003c C1000000 		.word	.L132+1
 1983 0040 C1000000 		.word	.L132+1
 1984 0044 C1000000 		.word	.L132+1
 1985 0048 C1000000 		.word	.L132+1
 1986 004c C1000000 		.word	.L132+1
 1987 0050 C1000000 		.word	.L132+1
 1988 0054 C1000000 		.word	.L132+1
 1989 0058 B5000000 		.word	.L138+1
 1990 005c C1000000 		.word	.L132+1
 1991 0060 C1000000 		.word	.L132+1
 1992 0064 C1000000 		.word	.L132+1
 1993 0068 C1000000 		.word	.L132+1
 1994 006c C1000000 		.word	.L132+1
 1995 0070 C1000000 		.word	.L132+1
 1996 0074 C1000000 		.word	.L132+1
 1997 0078 C1000000 		.word	.L132+1
 1998 007c C1000000 		.word	.L132+1
 1999 0080 C1000000 		.word	.L132+1
 2000 0084 C1000000 		.word	.L132+1
 2001 0088 C1000000 		.word	.L132+1
 2002 008c C1000000 		.word	.L132+1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 54


 2003 0090 C1000000 		.word	.L132+1
 2004 0094 C1000000 		.word	.L132+1
 2005 0098 BB000000 		.word	.L139+1
 2006              		.p2align 1
 2007              	.L133:
 988:SirenState.c  **** 	{
 989:SirenState.c  **** 		case BIT0:
 990:SirenState.c  **** 			indexResult = 0;
 2008              		.loc 1 990 0
 2009 009c 0023     		movs	r3, #0
 2010 009e FB73     		strb	r3, [r7, #15]
 991:SirenState.c  **** 			break;
 2011              		.loc 1 991 0
 2012 00a0 11E0     		b	.L140
 2013              	.L135:
 992:SirenState.c  **** 		case BIT1:
 993:SirenState.c  **** 			indexResult = 1;
 2014              		.loc 1 993 0
 2015 00a2 0123     		movs	r3, #1
 2016 00a4 FB73     		strb	r3, [r7, #15]
 994:SirenState.c  **** 			break;
 2017              		.loc 1 994 0
 2018 00a6 0EE0     		b	.L140
 2019              	.L136:
 995:SirenState.c  **** 		case BIT2:
 996:SirenState.c  **** 			indexResult = 2;
 2020              		.loc 1 996 0
 2021 00a8 0223     		movs	r3, #2
 2022 00aa FB73     		strb	r3, [r7, #15]
 997:SirenState.c  **** 			break;
 2023              		.loc 1 997 0
 2024 00ac 0BE0     		b	.L140
 2025              	.L137:
 998:SirenState.c  **** 		case BIT3:
 999:SirenState.c  **** 			indexResult = 3;
 2026              		.loc 1 999 0
 2027 00ae 0323     		movs	r3, #3
 2028 00b0 FB73     		strb	r3, [r7, #15]
1000:SirenState.c  **** 			break;
 2029              		.loc 1 1000 0
 2030 00b2 08E0     		b	.L140
 2031              	.L138:
1001:SirenState.c  **** 		case BIT4:
1002:SirenState.c  **** 			indexResult = 4;
 2032              		.loc 1 1002 0
 2033 00b4 0423     		movs	r3, #4
 2034 00b6 FB73     		strb	r3, [r7, #15]
1003:SirenState.c  **** 			break;
 2035              		.loc 1 1003 0
 2036 00b8 05E0     		b	.L140
 2037              	.L139:
1004:SirenState.c  **** 		case BIT5:
1005:SirenState.c  **** 			indexResult = 5;
 2038              		.loc 1 1005 0
 2039 00ba 0523     		movs	r3, #5
 2040 00bc FB73     		strb	r3, [r7, #15]
1006:SirenState.c  **** 			break;
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 55


 2041              		.loc 1 1006 0
 2042 00be 02E0     		b	.L140
 2043              	.L132:
1007:SirenState.c  **** 		default:
1008:SirenState.c  **** 			indexResult = NO_CHANNEL;
 2044              		.loc 1 1008 0
 2045 00c0 FF23     		movs	r3, #255
 2046 00c2 FB73     		strb	r3, [r7, #15]
1009:SirenState.c  **** 			break;
 2047              		.loc 1 1009 0
 2048 00c4 00BF     		nop
 2049              	.L140:
1010:SirenState.c  **** 	}
1011:SirenState.c  **** 	
1012:SirenState.c  **** 	return indexResult;
 2050              		.loc 1 1012 0
 2051 00c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1013:SirenState.c  **** }
 2052              		.loc 1 1013 0
 2053 00c8 1846     		mov	r0, r3
 2054 00ca 1437     		adds	r7, r7, #20
 2055              		.cfi_def_cfa_offset 4
 2056 00cc BD46     		mov	sp, r7
 2057              		.cfi_def_cfa_register 13
 2058              		@ sp needed
 2059 00ce 80BC     		pop	{r7}
 2060              		.cfi_restore 7
 2061              		.cfi_def_cfa_offset 0
 2062 00d0 7047     		bx	lr
 2063              		.cfi_endproc
 2064              	.LFE81:
 2065              		.size	getBitIndex, .-getBitIndex
 2066 00d2 00BF     		.bss
 2067 001b 00       		.align	2
 2068              	previousChannels.6288:
 2069 001c 0000     		.space	2
 2070              	bToneChangeOnHornRing.6310:
 2071 001e 00       		.space	1
 2072              		.text
 2073              	.Letext0:
 2074              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2075              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.3\\psoc creator\\import\\gnu\\arm\\5.4.
 2076              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2077              		.file 5 "CommonVariables.h"
 2078              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 2079              		.section	.debug_info,"",%progbits
 2080              	.Ldebug_info0:
 2081 0000 7E080000 		.4byte	0x87e
 2082 0004 0400     		.2byte	0x4
 2083 0006 00000000 		.4byte	.Ldebug_abbrev0
 2084 000a 04       		.byte	0x4
 2085 000b 01       		.uleb128 0x1
 2086 000c C2000000 		.4byte	.LASF123
 2087 0010 0C       		.byte	0xc
 2088 0011 69060000 		.4byte	.LASF124
 2089 0015 A4030000 		.4byte	.LASF125
 2090 0019 00000000 		.4byte	.Ldebug_ranges0+0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 56


 2091 001d 00000000 		.4byte	0
 2092 0021 00000000 		.4byte	.Ldebug_line0
 2093 0025 02       		.uleb128 0x2
 2094 0026 01       		.byte	0x1
 2095 0027 06       		.byte	0x6
 2096 0028 17070000 		.4byte	.LASF0
 2097 002c 02       		.uleb128 0x2
 2098 002d 01       		.byte	0x1
 2099 002e 08       		.byte	0x8
 2100 002f 5B060000 		.4byte	.LASF1
 2101 0033 02       		.uleb128 0x2
 2102 0034 02       		.byte	0x2
 2103 0035 05       		.byte	0x5
 2104 0036 34050000 		.4byte	.LASF2
 2105 003a 02       		.uleb128 0x2
 2106 003b 02       		.byte	0x2
 2107 003c 07       		.byte	0x7
 2108 003d 2E070000 		.4byte	.LASF3
 2109 0041 03       		.uleb128 0x3
 2110 0042 A0000000 		.4byte	.LASF9
 2111 0046 02       		.byte	0x2
 2112 0047 3F       		.byte	0x3f
 2113 0048 4C000000 		.4byte	0x4c
 2114 004c 02       		.uleb128 0x2
 2115 004d 04       		.byte	0x4
 2116 004e 05       		.byte	0x5
 2117 004f 59050000 		.4byte	.LASF4
 2118 0053 02       		.uleb128 0x2
 2119 0054 04       		.byte	0x4
 2120 0055 07       		.byte	0x7
 2121 0056 B4050000 		.4byte	.LASF5
 2122 005a 02       		.uleb128 0x2
 2123 005b 08       		.byte	0x8
 2124 005c 05       		.byte	0x5
 2125 005d 04040000 		.4byte	.LASF6
 2126 0061 02       		.uleb128 0x2
 2127 0062 08       		.byte	0x8
 2128 0063 07       		.byte	0x7
 2129 0064 7D020000 		.4byte	.LASF7
 2130 0068 04       		.uleb128 0x4
 2131 0069 04       		.byte	0x4
 2132 006a 05       		.byte	0x5
 2133 006b 696E7400 		.ascii	"int\000"
 2134 006f 02       		.uleb128 0x2
 2135 0070 04       		.byte	0x4
 2136 0071 07       		.byte	0x7
 2137 0072 81000000 		.4byte	.LASF8
 2138 0076 03       		.uleb128 0x3
 2139 0077 DF050000 		.4byte	.LASF10
 2140 007b 03       		.byte	0x3
 2141 007c 2C       		.byte	0x2c
 2142 007d 41000000 		.4byte	0x41
 2143 0081 05       		.uleb128 0x5
 2144 0082 41070000 		.4byte	.LASF11
 2145 0086 04       		.byte	0x4
 2146 0087 E401     		.2byte	0x1e4
 2147 0089 2C000000 		.4byte	0x2c
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 57


 2148 008d 05       		.uleb128 0x5
 2149 008e 6C030000 		.4byte	.LASF12
 2150 0092 04       		.byte	0x4
 2151 0093 E501     		.2byte	0x1e5
 2152 0095 3A000000 		.4byte	0x3a
 2153 0099 02       		.uleb128 0x2
 2154 009a 04       		.byte	0x4
 2155 009b 04       		.byte	0x4
 2156 009c 36020000 		.4byte	.LASF13
 2157 00a0 02       		.uleb128 0x2
 2158 00a1 08       		.byte	0x8
 2159 00a2 04       		.byte	0x4
 2160 00a3 47070000 		.4byte	.LASF14
 2161 00a7 02       		.uleb128 0x2
 2162 00a8 01       		.byte	0x1
 2163 00a9 08       		.byte	0x8
 2164 00aa 47030000 		.4byte	.LASF15
 2165 00ae 02       		.uleb128 0x2
 2166 00af 08       		.byte	0x8
 2167 00b0 04       		.byte	0x4
 2168 00b1 A9040000 		.4byte	.LASF16
 2169 00b5 02       		.uleb128 0x2
 2170 00b6 04       		.byte	0x4
 2171 00b7 07       		.byte	0x7
 2172 00b8 AB050000 		.4byte	.LASF17
 2173 00bc 06       		.uleb128 0x6
 2174 00bd AC010000 		.4byte	.LASF41
 2175 00c1 01       		.byte	0x1
 2176 00c2 2C000000 		.4byte	0x2c
 2177 00c6 05       		.byte	0x5
 2178 00c7 1D       		.byte	0x1d
 2179 00c8 57010000 		.4byte	0x157
 2180 00cc 07       		.uleb128 0x7
 2181 00cd FF040000 		.4byte	.LASF18
 2182 00d1 00       		.byte	0
 2183 00d2 07       		.uleb128 0x7
 2184 00d3 42030000 		.4byte	.LASF19
 2185 00d7 01       		.byte	0x1
 2186 00d8 07       		.uleb128 0x7
 2187 00d9 A4060000 		.4byte	.LASF20
 2188 00dd 02       		.byte	0x2
 2189 00de 07       		.uleb128 0x7
 2190 00df 52040000 		.4byte	.LASF21
 2191 00e3 03       		.byte	0x3
 2192 00e4 07       		.uleb128 0x7
 2193 00e5 BF060000 		.4byte	.LASF22
 2194 00e9 04       		.byte	0x4
 2195 00ea 07       		.uleb128 0x7
 2196 00eb D6060000 		.4byte	.LASF23
 2197 00ef 05       		.byte	0x5
 2198 00f0 07       		.uleb128 0x7
 2199 00f1 6A000000 		.4byte	.LASF24
 2200 00f5 06       		.byte	0x6
 2201 00f6 07       		.uleb128 0x7
 2202 00f7 71020000 		.4byte	.LASF25
 2203 00fb 07       		.byte	0x7
 2204 00fc 07       		.uleb128 0x7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 58


 2205 00fd 63030000 		.4byte	.LASF26
 2206 0101 08       		.byte	0x8
 2207 0102 07       		.uleb128 0x7
 2208 0103 CF040000 		.4byte	.LASF27
 2209 0107 09       		.byte	0x9
 2210 0108 07       		.uleb128 0x7
 2211 0109 19000000 		.4byte	.LASF28
 2212 010d 0A       		.byte	0xa
 2213 010e 07       		.uleb128 0x7
 2214 010f E6020000 		.4byte	.LASF29
 2215 0113 0B       		.byte	0xb
 2216 0114 07       		.uleb128 0x7
 2217 0115 47000000 		.4byte	.LASF30
 2218 0119 0C       		.byte	0xc
 2219 011a 07       		.uleb128 0x7
 2220 011b 07050000 		.4byte	.LASF31
 2221 011f 0D       		.byte	0xd
 2222 0120 07       		.uleb128 0x7
 2223 0121 4D020000 		.4byte	.LASF32
 2224 0125 0E       		.byte	0xe
 2225 0126 07       		.uleb128 0x7
 2226 0127 B8000000 		.4byte	.LASF33
 2227 012b 0F       		.byte	0xf
 2228 012c 07       		.uleb128 0x7
 2229 012d 15030000 		.4byte	.LASF34
 2230 0131 10       		.byte	0x10
 2231 0132 07       		.uleb128 0x7
 2232 0133 9A030000 		.4byte	.LASF35
 2233 0137 11       		.byte	0x11
 2234 0138 07       		.uleb128 0x7
 2235 0139 ED010000 		.4byte	.LASF36
 2236 013d 12       		.byte	0x12
 2237 013e 07       		.uleb128 0x7
 2238 013f 8E000000 		.4byte	.LASF37
 2239 0143 13       		.byte	0x13
 2240 0144 07       		.uleb128 0x7
 2241 0145 03030000 		.4byte	.LASF38
 2242 0149 14       		.byte	0x14
 2243 014a 07       		.uleb128 0x7
 2244 014b 9E020000 		.4byte	.LASF39
 2245 014f 15       		.byte	0x15
 2246 0150 07       		.uleb128 0x7
 2247 0151 94020000 		.4byte	.LASF40
 2248 0155 16       		.byte	0x16
 2249 0156 00       		.byte	0
 2250 0157 06       		.uleb128 0x6
 2251 0158 B1020000 		.4byte	.LASF42
 2252 015c 01       		.byte	0x1
 2253 015d 2C000000 		.4byte	0x2c
 2254 0161 01       		.byte	0x1
 2255 0162 14       		.byte	0x14
 2256 0163 92010000 		.4byte	0x192
 2257 0167 07       		.uleb128 0x7
 2258 0168 DB060000 		.4byte	.LASF43
 2259 016c 00       		.byte	0
 2260 016d 07       		.uleb128 0x7
 2261 016e E5060000 		.4byte	.LASF44
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 59


 2262 0172 01       		.byte	0x1
 2263 0173 07       		.uleb128 0x7
 2264 0174 EF060000 		.4byte	.LASF45
 2265 0178 02       		.byte	0x2
 2266 0179 07       		.uleb128 0x7
 2267 017a F9060000 		.4byte	.LASF46
 2268 017e 03       		.byte	0x3
 2269 017f 07       		.uleb128 0x7
 2270 0180 03070000 		.4byte	.LASF47
 2271 0184 04       		.byte	0x4
 2272 0185 07       		.uleb128 0x7
 2273 0186 0D070000 		.4byte	.LASF48
 2274 018a 05       		.byte	0x5
 2275 018b 07       		.uleb128 0x7
 2276 018c 81060000 		.4byte	.LASF49
 2277 0190 FF       		.byte	0xff
 2278 0191 00       		.byte	0
 2279 0192 06       		.uleb128 0x6
 2280 0193 4E070000 		.4byte	.LASF50
 2281 0197 01       		.byte	0x1
 2282 0198 2C000000 		.4byte	0x2c
 2283 019c 01       		.byte	0x1
 2284 019d 1F       		.byte	0x1f
 2285 019e D3010000 		.4byte	0x1d3
 2286 01a2 07       		.uleb128 0x7
 2287 01a3 B5010000 		.4byte	.LASF51
 2288 01a7 01       		.byte	0x1
 2289 01a8 07       		.uleb128 0x7
 2290 01a9 BA010000 		.4byte	.LASF52
 2291 01ad 02       		.byte	0x2
 2292 01ae 07       		.uleb128 0x7
 2293 01af BF010000 		.4byte	.LASF53
 2294 01b3 04       		.byte	0x4
 2295 01b4 07       		.uleb128 0x7
 2296 01b5 C4010000 		.4byte	.LASF54
 2297 01b9 08       		.byte	0x8
 2298 01ba 07       		.uleb128 0x7
 2299 01bb C9010000 		.4byte	.LASF55
 2300 01bf 10       		.byte	0x10
 2301 01c0 07       		.uleb128 0x7
 2302 01c1 CE010000 		.4byte	.LASF56
 2303 01c5 20       		.byte	0x20
 2304 01c6 07       		.uleb128 0x7
 2305 01c7 D3010000 		.4byte	.LASF57
 2306 01cb 40       		.byte	0x40
 2307 01cc 07       		.uleb128 0x7
 2308 01cd D8010000 		.4byte	.LASF58
 2309 01d1 80       		.byte	0x80
 2310 01d2 00       		.byte	0
 2311 01d3 08       		.uleb128 0x8
 2312 01d4 07       		.byte	0x7
 2313 01d5 01       		.byte	0x1
 2314 01d6 35       		.byte	0x35
 2315 01d7 24020000 		.4byte	0x224
 2316 01db 09       		.uleb128 0x9
 2317 01dc FF050000 		.4byte	.LASF59
 2318 01e0 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 60


 2319 01e1 37       		.byte	0x37
 2320 01e2 81000000 		.4byte	0x81
 2321 01e6 00       		.byte	0
 2322 01e7 09       		.uleb128 0x9
 2323 01e8 50010000 		.4byte	.LASF60
 2324 01ec 01       		.byte	0x1
 2325 01ed 38       		.byte	0x38
 2326 01ee 81000000 		.4byte	0x81
 2327 01f2 01       		.byte	0x1
 2328 01f3 09       		.uleb128 0x9
 2329 01f4 F6010000 		.4byte	.LASF61
 2330 01f8 01       		.byte	0x1
 2331 01f9 39       		.byte	0x39
 2332 01fa 81000000 		.4byte	0x81
 2333 01fe 02       		.byte	0x2
 2334 01ff 09       		.uleb128 0x9
 2335 0200 A2010000 		.4byte	.LASF62
 2336 0204 01       		.byte	0x1
 2337 0205 3A       		.byte	0x3a
 2338 0206 81000000 		.4byte	0x81
 2339 020a 03       		.byte	0x3
 2340 020b 09       		.uleb128 0x9
 2341 020c 0F060000 		.4byte	.LASF63
 2342 0210 01       		.byte	0x1
 2343 0211 3B       		.byte	0x3b
 2344 0212 81000000 		.4byte	0x81
 2345 0216 04       		.byte	0x4
 2346 0217 09       		.uleb128 0x9
 2347 0218 4C030000 		.4byte	.LASF64
 2348 021c 01       		.byte	0x1
 2349 021d 3C       		.byte	0x3c
 2350 021e 24020000 		.4byte	0x224
 2351 0222 05       		.byte	0x5
 2352 0223 00       		.byte	0
 2353 0224 0A       		.uleb128 0xa
 2354 0225 57010000 		.4byte	0x157
 2355 0229 34020000 		.4byte	0x234
 2356 022d 0B       		.uleb128 0xb
 2357 022e B5000000 		.4byte	0xb5
 2358 0232 01       		.byte	0x1
 2359 0233 00       		.byte	0
 2360 0234 08       		.uleb128 0x8
 2361 0235 07       		.byte	0x7
 2362 0236 01       		.byte	0x1
 2363 0237 3F       		.byte	0x3f
 2364 0238 6D020000 		.4byte	0x26d
 2365 023c 09       		.uleb128 0x9
 2366 023d 7E010000 		.4byte	.LASF65
 2367 0241 01       		.byte	0x1
 2368 0242 41       		.byte	0x41
 2369 0243 6D020000 		.4byte	0x26d
 2370 0247 00       		.byte	0
 2371 0248 09       		.uleb128 0x9
 2372 0249 2D060000 		.4byte	.LASF66
 2373 024d 01       		.byte	0x1
 2374 024e 42       		.byte	0x42
 2375 024f 6D020000 		.4byte	0x26d
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 61


 2376 0253 02       		.byte	0x2
 2377 0254 09       		.uleb128 0x9
 2378 0255 D3050000 		.4byte	.LASF67
 2379 0259 01       		.byte	0x1
 2380 025a 43       		.byte	0x43
 2381 025b 7D020000 		.4byte	0x27d
 2382 025f 04       		.byte	0x4
 2383 0260 09       		.uleb128 0x9
 2384 0261 BE020000 		.4byte	.LASF68
 2385 0265 01       		.byte	0x1
 2386 0266 44       		.byte	0x44
 2387 0267 81000000 		.4byte	0x81
 2388 026b 06       		.byte	0x6
 2389 026c 00       		.byte	0
 2390 026d 0A       		.uleb128 0xa
 2391 026e BC000000 		.4byte	0xbc
 2392 0272 7D020000 		.4byte	0x27d
 2393 0276 0B       		.uleb128 0xb
 2394 0277 B5000000 		.4byte	0xb5
 2395 027b 01       		.byte	0x1
 2396 027c 00       		.byte	0
 2397 027d 0A       		.uleb128 0xa
 2398 027e 81000000 		.4byte	0x81
 2399 0282 8D020000 		.4byte	0x28d
 2400 0286 0B       		.uleb128 0xb
 2401 0287 B5000000 		.4byte	0xb5
 2402 028b 01       		.byte	0x1
 2403 028c 00       		.byte	0
 2404 028d 0C       		.uleb128 0xc
 2405 028e 5C040000 		.4byte	.LASF69
 2406 0292 01       		.byte	0x1
 2407 0293 A3       		.byte	0xa3
 2408 0294 00000000 		.4byte	.LFB63
 2409 0298 0C000000 		.4byte	.LFE63-.LFB63
 2410 029c 01       		.uleb128 0x1
 2411 029d 9C       		.byte	0x9c
 2412 029e 0C       		.uleb128 0xc
 2413 029f DA040000 		.4byte	.LASF70
 2414 02a3 01       		.byte	0x1
 2415 02a4 BC       		.byte	0xbc
 2416 02a5 00000000 		.4byte	.LFB64
 2417 02a9 0C000000 		.4byte	.LFE64-.LFB64
 2418 02ad 01       		.uleb128 0x1
 2419 02ae 9C       		.byte	0x9c
 2420 02af 0D       		.uleb128 0xd
 2421 02b0 8C060000 		.4byte	.LASF71
 2422 02b4 01       		.byte	0x1
 2423 02b5 D5       		.byte	0xd5
 2424 02b6 00000000 		.4byte	.LFB65
 2425 02ba 30000000 		.4byte	.LFE65-.LFB65
 2426 02be 01       		.uleb128 0x1
 2427 02bf 9C       		.byte	0x9c
 2428 02c0 D3020000 		.4byte	0x2d3
 2429 02c4 0E       		.uleb128 0xe
 2430 02c5 83040000 		.4byte	.LASF73
 2431 02c9 01       		.byte	0x1
 2432 02ca D7       		.byte	0xd7
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 62


 2433 02cb 81000000 		.4byte	0x81
 2434 02cf 02       		.uleb128 0x2
 2435 02d0 91       		.byte	0x91
 2436 02d1 77       		.sleb128 -9
 2437 02d2 00       		.byte	0
 2438 02d3 0D       		.uleb128 0xd
 2439 02d4 39060000 		.4byte	.LASF72
 2440 02d8 01       		.byte	0x1
 2441 02d9 F5       		.byte	0xf5
 2442 02da 00000000 		.4byte	.LFB66
 2443 02de 18010000 		.4byte	.LFE66-.LFB66
 2444 02e2 01       		.uleb128 0x1
 2445 02e3 9C       		.byte	0x9c
 2446 02e4 9F030000 		.4byte	0x39f
 2447 02e8 0E       		.uleb128 0xe
 2448 02e9 F9030000 		.4byte	.LASF74
 2449 02ed 01       		.byte	0x1
 2450 02ee F7       		.byte	0xf7
 2451 02ef BC000000 		.4byte	0xbc
 2452 02f3 02       		.uleb128 0x2
 2453 02f4 91       		.byte	0x91
 2454 02f5 6F       		.sleb128 -17
 2455 02f6 0E       		.uleb128 0xe
 2456 02f7 0C020000 		.4byte	.LASF75
 2457 02fb 01       		.byte	0x1
 2458 02fc F8       		.byte	0xf8
 2459 02fd 8D000000 		.4byte	0x8d
 2460 0301 02       		.uleb128 0x2
 2461 0302 91       		.byte	0x91
 2462 0303 6C       		.sleb128 -20
 2463 0304 0E       		.uleb128 0xe
 2464 0305 76040000 		.4byte	.LASF76
 2465 0309 01       		.byte	0x1
 2466 030a F9       		.byte	0xf9
 2467 030b 81000000 		.4byte	0x81
 2468 030f 02       		.uleb128 0x2
 2469 0310 91       		.byte	0x91
 2470 0311 6B       		.sleb128 -21
 2471 0312 0E       		.uleb128 0xe
 2472 0313 AA000000 		.4byte	.LASF77
 2473 0317 01       		.byte	0x1
 2474 0318 FA       		.byte	0xfa
 2475 0319 81000000 		.4byte	0x81
 2476 031d 02       		.uleb128 0x2
 2477 031e 91       		.byte	0x91
 2478 031f 6E       		.sleb128 -18
 2479 0320 0F       		.uleb128 0xf
 2480 0321 2E000000 		.4byte	.LBB2
 2481 0325 0C000000 		.4byte	.LBE2-.LBB2
 2482 0329 4E030000 		.4byte	0x34e
 2483 032d 10       		.uleb128 0x10
 2484 032e 2D030000 		.4byte	.LASF78
 2485 0332 01       		.byte	0x1
 2486 0333 0201     		.2byte	0x102
 2487 0335 68000000 		.4byte	0x68
 2488 0339 3F030000 		.4byte	0x33f
 2489 033d 11       		.uleb128 0x11
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 63


 2490 033e 00       		.byte	0
 2491 033f 12       		.uleb128 0x12
 2492 0340 DD010000 		.4byte	.LASF81
 2493 0344 01       		.byte	0x1
 2494 0345 0301     		.2byte	0x103
 2495 0347 68000000 		.4byte	0x68
 2496 034b 11       		.uleb128 0x11
 2497 034c 00       		.byte	0
 2498 034d 00       		.byte	0
 2499 034e 13       		.uleb128 0x13
 2500 034f 3C000000 		.4byte	.LBB3
 2501 0353 C4000000 		.4byte	.LBE3-.LBB3
 2502 0357 10       		.uleb128 0x10
 2503 0358 51000000 		.4byte	.LASF79
 2504 035c 01       		.byte	0x1
 2505 035d 0801     		.2byte	0x108
 2506 035f 68000000 		.4byte	0x68
 2507 0363 69030000 		.4byte	0x369
 2508 0367 11       		.uleb128 0x11
 2509 0368 00       		.byte	0
 2510 0369 13       		.uleb128 0x13
 2511 036a 6C000000 		.4byte	.LBB4
 2512 036e 84000000 		.4byte	.LBE4-.LBB4
 2513 0372 10       		.uleb128 0x10
 2514 0373 AE060000 		.4byte	.LASF80
 2515 0377 01       		.byte	0x1
 2516 0378 1A01     		.2byte	0x11a
 2517 037a 68000000 		.4byte	0x68
 2518 037e 84030000 		.4byte	0x384
 2519 0382 11       		.uleb128 0x11
 2520 0383 00       		.byte	0
 2521 0384 13       		.uleb128 0x13
 2522 0385 72000000 		.4byte	.LBB5
 2523 0389 3A000000 		.4byte	.LBE5-.LBB5
 2524 038d 12       		.uleb128 0x12
 2525 038e 12040000 		.4byte	.LASF82
 2526 0392 01       		.byte	0x1
 2527 0393 1301     		.2byte	0x113
 2528 0395 68000000 		.4byte	0x68
 2529 0399 11       		.uleb128 0x11
 2530 039a 00       		.byte	0
 2531 039b 00       		.byte	0
 2532 039c 00       		.byte	0
 2533 039d 00       		.byte	0
 2534 039e 00       		.byte	0
 2535 039f 14       		.uleb128 0x14
 2536 03a0 CF020000 		.4byte	.LASF83
 2537 03a4 01       		.byte	0x1
 2538 03a5 5C01     		.2byte	0x15c
 2539 03a7 00000000 		.4byte	.LFB67
 2540 03ab 0C000000 		.4byte	.LFE67-.LFB67
 2541 03af 01       		.uleb128 0x1
 2542 03b0 9C       		.byte	0x9c
 2543 03b1 14       		.uleb128 0x14
 2544 03b2 8B010000 		.4byte	.LASF84
 2545 03b6 01       		.byte	0x1
 2546 03b7 7001     		.2byte	0x170
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 64


 2547 03b9 00000000 		.4byte	.LFB68
 2548 03bd 0C000000 		.4byte	.LFE68-.LFB68
 2549 03c1 01       		.uleb128 0x1
 2550 03c2 9C       		.byte	0x9c
 2551 03c3 14       		.uleb128 0x14
 2552 03c4 E7050000 		.4byte	.LASF85
 2553 03c8 01       		.byte	0x1
 2554 03c9 8401     		.2byte	0x184
 2555 03cb 00000000 		.4byte	.LFB69
 2556 03cf 1C000000 		.4byte	.LFE69-.LFB69
 2557 03d3 01       		.uleb128 0x1
 2558 03d4 9C       		.byte	0x9c
 2559 03d5 15       		.uleb128 0x15
 2560 03d6 90040000 		.4byte	.LASF86
 2561 03da 01       		.byte	0x1
 2562 03db 9901     		.2byte	0x199
 2563 03dd 00000000 		.4byte	.LFB70
 2564 03e1 4C010000 		.4byte	.LFE70-.LFB70
 2565 03e5 01       		.uleb128 0x1
 2566 03e6 9C       		.byte	0x9c
 2567 03e7 49040000 		.4byte	0x449
 2568 03eb 16       		.uleb128 0x16
 2569 03ec F2020000 		.4byte	.LASF87
 2570 03f0 01       		.byte	0x1
 2571 03f1 9B01     		.2byte	0x19b
 2572 03f3 7D020000 		.4byte	0x27d
 2573 03f7 05       		.uleb128 0x5
 2574 03f8 03       		.byte	0x3
 2575 03f9 1C000000 		.4byte	previousChannels.6288
 2576 03fd 16       		.uleb128 0x16
 2577 03fe 24050000 		.4byte	.LASF88
 2578 0402 01       		.byte	0x1
 2579 0403 9C01     		.2byte	0x19c
 2580 0405 7D020000 		.4byte	0x27d
 2581 0409 02       		.uleb128 0x2
 2582 040a 91       		.byte	0x91
 2583 040b 6C       		.sleb128 -20
 2584 040c 16       		.uleb128 0x16
 2585 040d 90050000 		.4byte	.LASF89
 2586 0411 01       		.byte	0x1
 2587 0412 9D01     		.2byte	0x19d
 2588 0414 7D020000 		.4byte	0x27d
 2589 0418 02       		.uleb128 0x2
 2590 0419 91       		.byte	0x91
 2591 041a 68       		.sleb128 -24
 2592 041b 16       		.uleb128 0x16
 2593 041c 0A000000 		.4byte	.LASF90
 2594 0420 01       		.byte	0x1
 2595 0421 9E01     		.2byte	0x19e
 2596 0423 7D020000 		.4byte	0x27d
 2597 0427 02       		.uleb128 0x2
 2598 0428 91       		.byte	0x91
 2599 0429 64       		.sleb128 -28
 2600 042a 16       		.uleb128 0x16
 2601 042b 83040000 		.4byte	.LASF73
 2602 042f 01       		.byte	0x1
 2603 0430 9F01     		.2byte	0x19f
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 65


 2604 0432 81000000 		.4byte	0x81
 2605 0436 02       		.uleb128 0x2
 2606 0437 91       		.byte	0x91
 2607 0438 6F       		.sleb128 -17
 2608 0439 16       		.uleb128 0x16
 2609 043a C6060000 		.4byte	.LASF91
 2610 043e 01       		.byte	0x1
 2611 043f A001     		.2byte	0x1a0
 2612 0441 81000000 		.4byte	0x81
 2613 0445 02       		.uleb128 0x2
 2614 0446 91       		.byte	0x91
 2615 0447 6E       		.sleb128 -18
 2616 0448 00       		.byte	0
 2617 0449 17       		.uleb128 0x17
 2618 044a 76050000 		.4byte	.LASF126
 2619 044e 01       		.byte	0x1
 2620 044f D301     		.2byte	0x1d3
 2621 0451 81000000 		.4byte	0x81
 2622 0455 00000000 		.4byte	.LFB71
 2623 0459 F4000000 		.4byte	.LFE71-.LFB71
 2624 045d 01       		.uleb128 0x1
 2625 045e 9C       		.byte	0x9c
 2626 045f AF040000 		.4byte	0x4af
 2627 0463 18       		.uleb128 0x18
 2628 0464 00000000 		.4byte	.LASF92
 2629 0468 01       		.byte	0x1
 2630 0469 D301     		.2byte	0x1d3
 2631 046b BC000000 		.4byte	0xbc
 2632 046f 02       		.uleb128 0x2
 2633 0470 91       		.byte	0x91
 2634 0471 6F       		.sleb128 -17
 2635 0472 18       		.uleb128 0x18
 2636 0473 76060000 		.4byte	.LASF93
 2637 0477 01       		.byte	0x1
 2638 0478 D301     		.2byte	0x1d3
 2639 047a BC000000 		.4byte	0xbc
 2640 047e 02       		.uleb128 0x2
 2641 047f 91       		.byte	0x91
 2642 0480 6E       		.sleb128 -18
 2643 0481 18       		.uleb128 0x18
 2644 0482 0F060000 		.4byte	.LASF63
 2645 0486 01       		.byte	0x1
 2646 0487 D401     		.2byte	0x1d4
 2647 0489 81000000 		.4byte	0x81
 2648 048d 02       		.uleb128 0x2
 2649 048e 91       		.byte	0x91
 2650 048f 6D       		.sleb128 -19
 2651 0490 16       		.uleb128 0x16
 2652 0491 83040000 		.4byte	.LASF73
 2653 0495 01       		.byte	0x1
 2654 0496 D601     		.2byte	0x1d6
 2655 0498 81000000 		.4byte	0x81
 2656 049c 02       		.uleb128 0x2
 2657 049d 91       		.byte	0x91
 2658 049e 77       		.sleb128 -9
 2659 049f 16       		.uleb128 0x16
 2660 04a0 13050000 		.4byte	.LASF94
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 66


 2661 04a4 01       		.byte	0x1
 2662 04a5 D701     		.2byte	0x1d7
 2663 04a7 81000000 		.4byte	0x81
 2664 04ab 02       		.uleb128 0x2
 2665 04ac 91       		.byte	0x91
 2666 04ad 76       		.sleb128 -10
 2667 04ae 00       		.byte	0
 2668 04af 19       		.uleb128 0x19
 2669 04b0 35000000 		.4byte	.LASF127
 2670 04b4 01       		.byte	0x1
 2671 04b5 3D02     		.2byte	0x23d
 2672 04b7 00000000 		.4byte	.LFB72
 2673 04bb 60030000 		.4byte	.LFE72-.LFB72
 2674 04bf 01       		.uleb128 0x1
 2675 04c0 9C       		.byte	0x9c
 2676 04c1 60050000 		.4byte	0x560
 2677 04c5 16       		.uleb128 0x16
 2678 04c6 20020000 		.4byte	.LASF95
 2679 04ca 01       		.byte	0x1
 2680 04cb 3F02     		.2byte	0x23f
 2681 04cd 81000000 		.4byte	0x81
 2682 04d1 05       		.uleb128 0x5
 2683 04d2 03       		.byte	0x3
 2684 04d3 1E000000 		.4byte	bToneChangeOnHornRing.6310
 2685 04d7 0F       		.uleb128 0xf
 2686 04d8 2E010000 		.4byte	.LBB6
 2687 04dc 16000000 		.4byte	.LBE6-.LBB6
 2688 04e0 F3040000 		.4byte	0x4f3
 2689 04e4 12       		.uleb128 0x12
 2690 04e5 22040000 		.4byte	.LASF96
 2691 04e9 01       		.byte	0x1
 2692 04ea 7502     		.2byte	0x275
 2693 04ec 68000000 		.4byte	0x68
 2694 04f0 11       		.uleb128 0x11
 2695 04f1 00       		.byte	0
 2696 04f2 00       		.byte	0
 2697 04f3 0F       		.uleb128 0xf
 2698 04f4 6E010000 		.4byte	.LBB7
 2699 04f8 16000000 		.4byte	.LBE7-.LBB7
 2700 04fc 0F050000 		.4byte	0x50f
 2701 0500 12       		.uleb128 0x12
 2702 0501 22040000 		.4byte	.LASF96
 2703 0505 01       		.byte	0x1
 2704 0506 7502     		.2byte	0x275
 2705 0508 68000000 		.4byte	0x68
 2706 050c 11       		.uleb128 0x11
 2707 050d 00       		.byte	0
 2708 050e 00       		.byte	0
 2709 050f 0F       		.uleb128 0xf
 2710 0510 12020000 		.4byte	.LBB8
 2711 0514 2E000000 		.4byte	.LBE8-.LBB8
 2712 0518 2B050000 		.4byte	0x52b
 2713 051c 12       		.uleb128 0x12
 2714 051d 22040000 		.4byte	.LASF96
 2715 0521 01       		.byte	0x1
 2716 0522 7502     		.2byte	0x275
 2717 0524 68000000 		.4byte	0x68
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 67


 2718 0528 11       		.uleb128 0x11
 2719 0529 00       		.byte	0
 2720 052a 00       		.byte	0
 2721 052b 0F       		.uleb128 0xf
 2722 052c 42020000 		.4byte	.LBB9
 2723 0530 26000000 		.4byte	.LBE9-.LBB9
 2724 0534 47050000 		.4byte	0x547
 2725 0538 12       		.uleb128 0x12
 2726 0539 22040000 		.4byte	.LASF96
 2727 053d 01       		.byte	0x1
 2728 053e 7502     		.2byte	0x275
 2729 0540 68000000 		.4byte	0x68
 2730 0544 11       		.uleb128 0x11
 2731 0545 00       		.byte	0
 2732 0546 00       		.byte	0
 2733 0547 13       		.uleb128 0x13
 2734 0548 7E020000 		.4byte	.LBB10
 2735 054c 22000000 		.4byte	.LBE10-.LBB10
 2736 0550 12       		.uleb128 0x12
 2737 0551 2D030000 		.4byte	.LASF78
 2738 0555 01       		.byte	0x1
 2739 0556 0201     		.2byte	0x102
 2740 0558 68000000 		.4byte	0x68
 2741 055c 11       		.uleb128 0x11
 2742 055d 00       		.byte	0
 2743 055e 00       		.byte	0
 2744 055f 00       		.byte	0
 2745 0560 1A       		.uleb128 0x1a
 2746 0561 B5040000 		.4byte	.LASF103
 2747 0565 01       		.byte	0x1
 2748 0566 EC02     		.2byte	0x2ec
 2749 0568 81000000 		.4byte	0x81
 2750 056c 00000000 		.4byte	.LFB73
 2751 0570 7A000000 		.4byte	.LFE73-.LFB73
 2752 0574 01       		.uleb128 0x1
 2753 0575 9C       		.byte	0x9c
 2754 0576 05060000 		.4byte	0x605
 2755 057a 18       		.uleb128 0x18
 2756 057b 75010000 		.4byte	.LASF97
 2757 057f 01       		.byte	0x1
 2758 0580 EC02     		.2byte	0x2ec
 2759 0582 81000000 		.4byte	0x81
 2760 0586 02       		.uleb128 0x2
 2761 0587 91       		.byte	0x91
 2762 0588 6F       		.sleb128 -17
 2763 0589 18       		.uleb128 0x18
 2764 058a 9D050000 		.4byte	.LASF98
 2765 058e 01       		.byte	0x1
 2766 058f EC02     		.2byte	0x2ec
 2767 0591 BC000000 		.4byte	0xbc
 2768 0595 02       		.uleb128 0x2
 2769 0596 91       		.byte	0x91
 2770 0597 6E       		.sleb128 -18
 2771 0598 18       		.uleb128 0x18
 2772 0599 C6050000 		.4byte	.LASF99
 2773 059d 01       		.byte	0x1
 2774 059e ED02     		.2byte	0x2ed
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 68


 2775 05a0 81000000 		.4byte	0x81
 2776 05a4 02       		.uleb128 0x2
 2777 05a5 91       		.byte	0x91
 2778 05a6 6D       		.sleb128 -19
 2779 05a7 18       		.uleb128 0x18
 2780 05a8 6F050000 		.4byte	.LASF100
 2781 05ac 01       		.byte	0x1
 2782 05ad ED02     		.2byte	0x2ed
 2783 05af 81000000 		.4byte	0x81
 2784 05b3 02       		.uleb128 0x2
 2785 05b4 91       		.byte	0x91
 2786 05b5 6C       		.sleb128 -20
 2787 05b6 10       		.uleb128 0x10
 2788 05b7 DD010000 		.4byte	.LASF81
 2789 05bb 01       		.byte	0x1
 2790 05bc 0301     		.2byte	0x103
 2791 05be 68000000 		.4byte	0x68
 2792 05c2 C8050000 		.4byte	0x5c8
 2793 05c6 11       		.uleb128 0x11
 2794 05c7 00       		.byte	0
 2795 05c8 10       		.uleb128 0x10
 2796 05c9 56070000 		.4byte	.LASF101
 2797 05cd 01       		.byte	0x1
 2798 05ce F902     		.2byte	0x2f9
 2799 05d0 68000000 		.4byte	0x68
 2800 05d4 DA050000 		.4byte	0x5da
 2801 05d8 11       		.uleb128 0x11
 2802 05d9 00       		.byte	0
 2803 05da 10       		.uleb128 0x10
 2804 05db 75000000 		.4byte	.LASF102
 2805 05df 01       		.byte	0x1
 2806 05e0 FA02     		.2byte	0x2fa
 2807 05e2 68000000 		.4byte	0x68
 2808 05e6 EC050000 		.4byte	0x5ec
 2809 05ea 11       		.uleb128 0x11
 2810 05eb 00       		.byte	0
 2811 05ec 13       		.uleb128 0x13
 2812 05ed 6A000000 		.4byte	.LBB11
 2813 05f1 06000000 		.4byte	.LBE11-.LBB11
 2814 05f5 12       		.uleb128 0x12
 2815 05f6 22040000 		.4byte	.LASF96
 2816 05fa 01       		.byte	0x1
 2817 05fb 7502     		.2byte	0x275
 2818 05fd 68000000 		.4byte	0x68
 2819 0601 11       		.uleb128 0x11
 2820 0602 00       		.byte	0
 2821 0603 00       		.byte	0
 2822 0604 00       		.byte	0
 2823 0605 1A       		.uleb128 0x1a
 2824 0606 3E050000 		.4byte	.LASF104
 2825 060a 01       		.byte	0x1
 2826 060b 1703     		.2byte	0x317
 2827 060d 81000000 		.4byte	0x81
 2828 0611 00000000 		.4byte	.LFB74
 2829 0615 6E000000 		.4byte	.LFE74-.LFB74
 2830 0619 01       		.uleb128 0x1
 2831 061a 9C       		.byte	0x9c
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 69


 2832 061b 91060000 		.4byte	0x691
 2833 061f 18       		.uleb128 0x18
 2834 0620 75010000 		.4byte	.LASF97
 2835 0624 01       		.byte	0x1
 2836 0625 1703     		.2byte	0x317
 2837 0627 81000000 		.4byte	0x81
 2838 062b 02       		.uleb128 0x2
 2839 062c 91       		.byte	0x91
 2840 062d 77       		.sleb128 -9
 2841 062e 18       		.uleb128 0x18
 2842 062f 9D050000 		.4byte	.LASF98
 2843 0633 01       		.byte	0x1
 2844 0634 1703     		.2byte	0x317
 2845 0636 BC000000 		.4byte	0xbc
 2846 063a 02       		.uleb128 0x2
 2847 063b 91       		.byte	0x91
 2848 063c 76       		.sleb128 -10
 2849 063d 18       		.uleb128 0x18
 2850 063e C6050000 		.4byte	.LASF99
 2851 0642 01       		.byte	0x1
 2852 0643 1803     		.2byte	0x318
 2853 0645 81000000 		.4byte	0x81
 2854 0649 02       		.uleb128 0x2
 2855 064a 91       		.byte	0x91
 2856 064b 75       		.sleb128 -11
 2857 064c 10       		.uleb128 0x10
 2858 064d 2D030000 		.4byte	.LASF78
 2859 0651 01       		.byte	0x1
 2860 0652 0201     		.2byte	0x102
 2861 0654 68000000 		.4byte	0x68
 2862 0658 5E060000 		.4byte	0x65e
 2863 065c 11       		.uleb128 0x11
 2864 065d 00       		.byte	0
 2865 065e 10       		.uleb128 0x10
 2866 065f 75000000 		.4byte	.LASF102
 2867 0663 01       		.byte	0x1
 2868 0664 FA02     		.2byte	0x2fa
 2869 0666 68000000 		.4byte	0x68
 2870 066a 70060000 		.4byte	0x670
 2871 066e 11       		.uleb128 0x11
 2872 066f 00       		.byte	0
 2873 0670 10       		.uleb128 0x10
 2874 0671 56070000 		.4byte	.LASF101
 2875 0675 01       		.byte	0x1
 2876 0676 F902     		.2byte	0x2f9
 2877 0678 68000000 		.4byte	0x68
 2878 067c 82060000 		.4byte	0x682
 2879 0680 11       		.uleb128 0x11
 2880 0681 00       		.byte	0
 2881 0682 12       		.uleb128 0x12
 2882 0683 22040000 		.4byte	.LASF96
 2883 0687 01       		.byte	0x1
 2884 0688 7502     		.2byte	0x275
 2885 068a 68000000 		.4byte	0x68
 2886 068e 11       		.uleb128 0x11
 2887 068f 00       		.byte	0
 2888 0690 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 70


 2889 0691 1B       		.uleb128 0x1b
 2890 0692 38040000 		.4byte	.LASF105
 2891 0696 01       		.byte	0x1
 2892 0697 3903     		.2byte	0x339
 2893 0699 57010000 		.4byte	0x157
 2894 069d 00000000 		.4byte	.LFB75
 2895 06a1 7E000000 		.4byte	.LFE75-.LFB75
 2896 06a5 01       		.uleb128 0x1
 2897 06a6 9C       		.byte	0x9c
 2898 06a7 CA060000 		.4byte	0x6ca
 2899 06ab 18       		.uleb128 0x18
 2900 06ac 1E030000 		.4byte	.LASF106
 2901 06b0 01       		.byte	0x1
 2902 06b1 3903     		.2byte	0x339
 2903 06b3 81000000 		.4byte	0x81
 2904 06b7 02       		.uleb128 0x2
 2905 06b8 91       		.byte	0x91
 2906 06b9 6F       		.sleb128 -17
 2907 06ba 16       		.uleb128 0x16
 2908 06bb 57020000 		.4byte	.LASF107
 2909 06bf 01       		.byte	0x1
 2910 06c0 3B03     		.2byte	0x33b
 2911 06c2 81000000 		.4byte	0x81
 2912 06c6 02       		.uleb128 0x2
 2913 06c7 91       		.byte	0x91
 2914 06c8 77       		.sleb128 -9
 2915 06c9 00       		.byte	0
 2916 06ca 1A       		.uleb128 0x1a
 2917 06cb 1A060000 		.4byte	.LASF108
 2918 06cf 01       		.byte	0x1
 2919 06d0 6303     		.2byte	0x363
 2920 06d2 BC000000 		.4byte	0xbc
 2921 06d6 00000000 		.4byte	.LFB76
 2922 06da 50000000 		.4byte	.LFE76-.LFB76
 2923 06de 01       		.uleb128 0x1
 2924 06df 9C       		.byte	0x9c
 2925 06e0 F4060000 		.4byte	0x6f4
 2926 06e4 18       		.uleb128 0x18
 2927 06e5 9D050000 		.4byte	.LASF98
 2928 06e9 01       		.byte	0x1
 2929 06ea 6303     		.2byte	0x363
 2930 06ec BC000000 		.4byte	0xbc
 2931 06f0 02       		.uleb128 0x2
 2932 06f1 91       		.byte	0x91
 2933 06f2 77       		.sleb128 -9
 2934 06f3 00       		.byte	0
 2935 06f4 1A       		.uleb128 0x1a
 2936 06f5 8B030000 		.4byte	.LASF109
 2937 06f9 01       		.byte	0x1
 2938 06fa 7F03     		.2byte	0x37f
 2939 06fc 81000000 		.4byte	0x81
 2940 0700 00000000 		.4byte	.LFB77
 2941 0704 32000000 		.4byte	.LFE77-.LFB77
 2942 0708 01       		.uleb128 0x1
 2943 0709 9C       		.byte	0x9c
 2944 070a 1E070000 		.4byte	0x71e
 2945 070e 18       		.uleb128 0x18
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 71


 2946 070f 52060000 		.4byte	.LASF110
 2947 0713 01       		.byte	0x1
 2948 0714 7F03     		.2byte	0x37f
 2949 0716 BC000000 		.4byte	0xbc
 2950 071a 02       		.uleb128 0x2
 2951 071b 91       		.byte	0x91
 2952 071c 77       		.sleb128 -9
 2953 071d 00       		.byte	0
 2954 071e 1A       		.uleb128 0x1a
 2955 071f ED030000 		.4byte	.LASF111
 2956 0723 01       		.byte	0x1
 2957 0724 9503     		.2byte	0x395
 2958 0726 81000000 		.4byte	0x81
 2959 072a 00000000 		.4byte	.LFB78
 2960 072e 3A000000 		.4byte	.LFE78-.LFB78
 2961 0732 01       		.uleb128 0x1
 2962 0733 9C       		.byte	0x9c
 2963 0734 48070000 		.4byte	0x748
 2964 0738 18       		.uleb128 0x18
 2965 0739 52060000 		.4byte	.LASF110
 2966 073d 01       		.byte	0x1
 2967 073e 9503     		.2byte	0x395
 2968 0740 BC000000 		.4byte	0xbc
 2969 0744 02       		.uleb128 0x2
 2970 0745 91       		.byte	0x91
 2971 0746 77       		.sleb128 -9
 2972 0747 00       		.byte	0
 2973 0748 1B       		.uleb128 0x1b
 2974 0749 02020000 		.4byte	.LASF112
 2975 074d 01       		.byte	0x1
 2976 074e AB03     		.2byte	0x3ab
 2977 0750 81000000 		.4byte	0x81
 2978 0754 00000000 		.4byte	.LFB79
 2979 0758 26000000 		.4byte	.LFE79-.LFB79
 2980 075c 01       		.uleb128 0x1
 2981 075d 9C       		.byte	0x9c
 2982 075e 72070000 		.4byte	0x772
 2983 0762 18       		.uleb128 0x18
 2984 0763 52060000 		.4byte	.LASF110
 2985 0767 01       		.byte	0x1
 2986 0768 AB03     		.2byte	0x3ab
 2987 076a BC000000 		.4byte	0xbc
 2988 076e 02       		.uleb128 0x2
 2989 076f 91       		.byte	0x91
 2990 0770 77       		.sleb128 -9
 2991 0771 00       		.byte	0
 2992 0772 1B       		.uleb128 0x1b
 2993 0773 19020000 		.4byte	.LASF113
 2994 0777 01       		.byte	0x1
 2995 0778 C103     		.2byte	0x3c1
 2996 077a 81000000 		.4byte	0x81
 2997 077e 00000000 		.4byte	.LFB80
 2998 0782 20000000 		.4byte	.LFE80-.LFB80
 2999 0786 01       		.uleb128 0x1
 3000 0787 9C       		.byte	0x9c
 3001 0788 9C070000 		.4byte	0x79c
 3002 078c 18       		.uleb128 0x18
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 72


 3003 078d 52060000 		.4byte	.LASF110
 3004 0791 01       		.byte	0x1
 3005 0792 C103     		.2byte	0x3c1
 3006 0794 BC000000 		.4byte	0xbc
 3007 0798 02       		.uleb128 0x2
 3008 0799 91       		.byte	0x91
 3009 079a 77       		.sleb128 -9
 3010 079b 00       		.byte	0
 3011 079c 1B       		.uleb128 0x1b
 3012 079d 73030000 		.4byte	.LASF114
 3013 07a1 01       		.byte	0x1
 3014 07a2 D703     		.2byte	0x3d7
 3015 07a4 81000000 		.4byte	0x81
 3016 07a8 00000000 		.4byte	.LFB81
 3017 07ac D2000000 		.4byte	.LFE81-.LFB81
 3018 07b0 01       		.uleb128 0x1
 3019 07b1 9C       		.byte	0x9c
 3020 07b2 D5070000 		.4byte	0x7d5
 3021 07b6 18       		.uleb128 0x18
 3022 07b7 66020000 		.4byte	.LASF115
 3023 07bb 01       		.byte	0x1
 3024 07bc D703     		.2byte	0x3d7
 3025 07be 92010000 		.4byte	0x192
 3026 07c2 02       		.uleb128 0x2
 3027 07c3 91       		.byte	0x91
 3028 07c4 6F       		.sleb128 -17
 3029 07c5 16       		.uleb128 0x16
 3030 07c6 7F030000 		.4byte	.LASF116
 3031 07ca 01       		.byte	0x1
 3032 07cb D903     		.2byte	0x3d9
 3033 07cd 81000000 		.4byte	0x81
 3034 07d1 02       		.uleb128 0x2
 3035 07d2 91       		.byte	0x91
 3036 07d3 77       		.sleb128 -9
 3037 07d4 00       		.byte	0
 3038 07d5 0A       		.uleb128 0xa
 3039 07d6 E5070000 		.4byte	0x7e5
 3040 07da E5070000 		.4byte	0x7e5
 3041 07de 0B       		.uleb128 0xb
 3042 07df B5000000 		.4byte	0xb5
 3043 07e3 0B       		.byte	0xb
 3044 07e4 00       		.byte	0
 3045 07e5 1C       		.uleb128 0x1c
 3046 07e6 81000000 		.4byte	0x81
 3047 07ea 0E       		.uleb128 0xe
 3048 07eb 5A010000 		.4byte	.LASF117
 3049 07ef 01       		.byte	0x1
 3050 07f0 2B       		.byte	0x2b
 3051 07f1 FB070000 		.4byte	0x7fb
 3052 07f5 05       		.uleb128 0x5
 3053 07f6 03       		.byte	0x3
 3054 07f7 00000000 		.4byte	DEFAULT_CONFIGURATION_LIST
 3055 07fb 1C       		.uleb128 0x1c
 3056 07fc D5070000 		.4byte	0x7d5
 3057 0800 0E       		.uleb128 0xe
 3058 0801 24000000 		.4byte	.LASF118
 3059 0805 01       		.byte	0x1
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 73


 3060 0806 2F       		.byte	0x2f
 3061 0807 11080000 		.4byte	0x811
 3062 080b 05       		.uleb128 0x5
 3063 080c 03       		.byte	0x3
 3064 080d 0C000000 		.4byte	EEPROM_KEY_INDEX
 3065 0811 1C       		.uleb128 0x1c
 3066 0812 8D000000 		.4byte	0x8d
 3067 0816 0E       		.uleb128 0xe
 3068 0817 3C020000 		.4byte	.LASF119
 3069 081b 01       		.byte	0x1
 3070 081c 30       		.byte	0x30
 3071 081d E5070000 		.4byte	0x7e5
 3072 0821 05       		.uleb128 0x5
 3073 0822 03       		.byte	0x3
 3074 0823 0E000000 		.4byte	EEPROM_KEY_VALUE
 3075 0827 0A       		.uleb128 0xa
 3076 0828 BC000000 		.4byte	0xbc
 3077 082c 3D080000 		.4byte	0x83d
 3078 0830 0B       		.uleb128 0xb
 3079 0831 B5000000 		.4byte	0xb5
 3080 0835 01       		.byte	0x1
 3081 0836 0B       		.uleb128 0xb
 3082 0837 B5000000 		.4byte	0xb5
 3083 083b 05       		.byte	0x5
 3084 083c 00       		.byte	0
 3085 083d 0E       		.uleb128 0xe
 3086 083e 64070000 		.4byte	.LASF120
 3087 0842 01       		.byte	0x1
 3088 0843 33       		.byte	0x33
 3089 0844 27080000 		.4byte	0x827
 3090 0848 05       		.uleb128 0x5
 3091 0849 03       		.byte	0x3
 3092 084a 00000000 		.4byte	toneConfigurationList
 3093 084e 0E       		.uleb128 0xe
 3094 084f F5040000 		.4byte	.LASF121
 3095 0853 01       		.byte	0x1
 3096 0854 3D       		.byte	0x3d
 3097 0855 D3010000 		.4byte	0x1d3
 3098 0859 05       		.uleb128 0x5
 3099 085a 03       		.byte	0x3
 3100 085b 0C000000 		.4byte	InputRead
 3101 085f 0E       		.uleb128 0xe
 3102 0860 23070000 		.4byte	.LASF122
 3103 0864 01       		.byte	0x1
 3104 0865 45       		.byte	0x45
 3105 0866 34020000 		.4byte	0x234
 3106 086a 05       		.uleb128 0x5
 3107 086b 03       		.byte	0x3
 3108 086c 14000000 		.4byte	ToneStatus
 3109 0870 1D       		.uleb128 0x1d
 3110 0871 62050000 		.4byte	.LASF128
 3111 0875 06       		.byte	0x6
 3112 0876 1207     		.2byte	0x712
 3113 0878 7C080000 		.4byte	0x87c
 3114 087c 1E       		.uleb128 0x1e
 3115 087d 76000000 		.4byte	0x76
 3116 0881 00       		.byte	0
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 74


 3117              		.section	.debug_abbrev,"",%progbits
 3118              	.Ldebug_abbrev0:
 3119 0000 01       		.uleb128 0x1
 3120 0001 11       		.uleb128 0x11
 3121 0002 01       		.byte	0x1
 3122 0003 25       		.uleb128 0x25
 3123 0004 0E       		.uleb128 0xe
 3124 0005 13       		.uleb128 0x13
 3125 0006 0B       		.uleb128 0xb
 3126 0007 03       		.uleb128 0x3
 3127 0008 0E       		.uleb128 0xe
 3128 0009 1B       		.uleb128 0x1b
 3129 000a 0E       		.uleb128 0xe
 3130 000b 55       		.uleb128 0x55
 3131 000c 17       		.uleb128 0x17
 3132 000d 11       		.uleb128 0x11
 3133 000e 01       		.uleb128 0x1
 3134 000f 10       		.uleb128 0x10
 3135 0010 17       		.uleb128 0x17
 3136 0011 00       		.byte	0
 3137 0012 00       		.byte	0
 3138 0013 02       		.uleb128 0x2
 3139 0014 24       		.uleb128 0x24
 3140 0015 00       		.byte	0
 3141 0016 0B       		.uleb128 0xb
 3142 0017 0B       		.uleb128 0xb
 3143 0018 3E       		.uleb128 0x3e
 3144 0019 0B       		.uleb128 0xb
 3145 001a 03       		.uleb128 0x3
 3146 001b 0E       		.uleb128 0xe
 3147 001c 00       		.byte	0
 3148 001d 00       		.byte	0
 3149 001e 03       		.uleb128 0x3
 3150 001f 16       		.uleb128 0x16
 3151 0020 00       		.byte	0
 3152 0021 03       		.uleb128 0x3
 3153 0022 0E       		.uleb128 0xe
 3154 0023 3A       		.uleb128 0x3a
 3155 0024 0B       		.uleb128 0xb
 3156 0025 3B       		.uleb128 0x3b
 3157 0026 0B       		.uleb128 0xb
 3158 0027 49       		.uleb128 0x49
 3159 0028 13       		.uleb128 0x13
 3160 0029 00       		.byte	0
 3161 002a 00       		.byte	0
 3162 002b 04       		.uleb128 0x4
 3163 002c 24       		.uleb128 0x24
 3164 002d 00       		.byte	0
 3165 002e 0B       		.uleb128 0xb
 3166 002f 0B       		.uleb128 0xb
 3167 0030 3E       		.uleb128 0x3e
 3168 0031 0B       		.uleb128 0xb
 3169 0032 03       		.uleb128 0x3
 3170 0033 08       		.uleb128 0x8
 3171 0034 00       		.byte	0
 3172 0035 00       		.byte	0
 3173 0036 05       		.uleb128 0x5
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 75


 3174 0037 16       		.uleb128 0x16
 3175 0038 00       		.byte	0
 3176 0039 03       		.uleb128 0x3
 3177 003a 0E       		.uleb128 0xe
 3178 003b 3A       		.uleb128 0x3a
 3179 003c 0B       		.uleb128 0xb
 3180 003d 3B       		.uleb128 0x3b
 3181 003e 05       		.uleb128 0x5
 3182 003f 49       		.uleb128 0x49
 3183 0040 13       		.uleb128 0x13
 3184 0041 00       		.byte	0
 3185 0042 00       		.byte	0
 3186 0043 06       		.uleb128 0x6
 3187 0044 04       		.uleb128 0x4
 3188 0045 01       		.byte	0x1
 3189 0046 03       		.uleb128 0x3
 3190 0047 0E       		.uleb128 0xe
 3191 0048 0B       		.uleb128 0xb
 3192 0049 0B       		.uleb128 0xb
 3193 004a 49       		.uleb128 0x49
 3194 004b 13       		.uleb128 0x13
 3195 004c 3A       		.uleb128 0x3a
 3196 004d 0B       		.uleb128 0xb
 3197 004e 3B       		.uleb128 0x3b
 3198 004f 0B       		.uleb128 0xb
 3199 0050 01       		.uleb128 0x1
 3200 0051 13       		.uleb128 0x13
 3201 0052 00       		.byte	0
 3202 0053 00       		.byte	0
 3203 0054 07       		.uleb128 0x7
 3204 0055 28       		.uleb128 0x28
 3205 0056 00       		.byte	0
 3206 0057 03       		.uleb128 0x3
 3207 0058 0E       		.uleb128 0xe
 3208 0059 1C       		.uleb128 0x1c
 3209 005a 0B       		.uleb128 0xb
 3210 005b 00       		.byte	0
 3211 005c 00       		.byte	0
 3212 005d 08       		.uleb128 0x8
 3213 005e 13       		.uleb128 0x13
 3214 005f 01       		.byte	0x1
 3215 0060 0B       		.uleb128 0xb
 3216 0061 0B       		.uleb128 0xb
 3217 0062 3A       		.uleb128 0x3a
 3218 0063 0B       		.uleb128 0xb
 3219 0064 3B       		.uleb128 0x3b
 3220 0065 0B       		.uleb128 0xb
 3221 0066 01       		.uleb128 0x1
 3222 0067 13       		.uleb128 0x13
 3223 0068 00       		.byte	0
 3224 0069 00       		.byte	0
 3225 006a 09       		.uleb128 0x9
 3226 006b 0D       		.uleb128 0xd
 3227 006c 00       		.byte	0
 3228 006d 03       		.uleb128 0x3
 3229 006e 0E       		.uleb128 0xe
 3230 006f 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 76


 3231 0070 0B       		.uleb128 0xb
 3232 0071 3B       		.uleb128 0x3b
 3233 0072 0B       		.uleb128 0xb
 3234 0073 49       		.uleb128 0x49
 3235 0074 13       		.uleb128 0x13
 3236 0075 38       		.uleb128 0x38
 3237 0076 0B       		.uleb128 0xb
 3238 0077 00       		.byte	0
 3239 0078 00       		.byte	0
 3240 0079 0A       		.uleb128 0xa
 3241 007a 01       		.uleb128 0x1
 3242 007b 01       		.byte	0x1
 3243 007c 49       		.uleb128 0x49
 3244 007d 13       		.uleb128 0x13
 3245 007e 01       		.uleb128 0x1
 3246 007f 13       		.uleb128 0x13
 3247 0080 00       		.byte	0
 3248 0081 00       		.byte	0
 3249 0082 0B       		.uleb128 0xb
 3250 0083 21       		.uleb128 0x21
 3251 0084 00       		.byte	0
 3252 0085 49       		.uleb128 0x49
 3253 0086 13       		.uleb128 0x13
 3254 0087 2F       		.uleb128 0x2f
 3255 0088 0B       		.uleb128 0xb
 3256 0089 00       		.byte	0
 3257 008a 00       		.byte	0
 3258 008b 0C       		.uleb128 0xc
 3259 008c 2E       		.uleb128 0x2e
 3260 008d 00       		.byte	0
 3261 008e 3F       		.uleb128 0x3f
 3262 008f 19       		.uleb128 0x19
 3263 0090 03       		.uleb128 0x3
 3264 0091 0E       		.uleb128 0xe
 3265 0092 3A       		.uleb128 0x3a
 3266 0093 0B       		.uleb128 0xb
 3267 0094 3B       		.uleb128 0x3b
 3268 0095 0B       		.uleb128 0xb
 3269 0096 27       		.uleb128 0x27
 3270 0097 19       		.uleb128 0x19
 3271 0098 11       		.uleb128 0x11
 3272 0099 01       		.uleb128 0x1
 3273 009a 12       		.uleb128 0x12
 3274 009b 06       		.uleb128 0x6
 3275 009c 40       		.uleb128 0x40
 3276 009d 18       		.uleb128 0x18
 3277 009e 9742     		.uleb128 0x2117
 3278 00a0 19       		.uleb128 0x19
 3279 00a1 00       		.byte	0
 3280 00a2 00       		.byte	0
 3281 00a3 0D       		.uleb128 0xd
 3282 00a4 2E       		.uleb128 0x2e
 3283 00a5 01       		.byte	0x1
 3284 00a6 3F       		.uleb128 0x3f
 3285 00a7 19       		.uleb128 0x19
 3286 00a8 03       		.uleb128 0x3
 3287 00a9 0E       		.uleb128 0xe
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 77


 3288 00aa 3A       		.uleb128 0x3a
 3289 00ab 0B       		.uleb128 0xb
 3290 00ac 3B       		.uleb128 0x3b
 3291 00ad 0B       		.uleb128 0xb
 3292 00ae 27       		.uleb128 0x27
 3293 00af 19       		.uleb128 0x19
 3294 00b0 11       		.uleb128 0x11
 3295 00b1 01       		.uleb128 0x1
 3296 00b2 12       		.uleb128 0x12
 3297 00b3 06       		.uleb128 0x6
 3298 00b4 40       		.uleb128 0x40
 3299 00b5 18       		.uleb128 0x18
 3300 00b6 9642     		.uleb128 0x2116
 3301 00b8 19       		.uleb128 0x19
 3302 00b9 01       		.uleb128 0x1
 3303 00ba 13       		.uleb128 0x13
 3304 00bb 00       		.byte	0
 3305 00bc 00       		.byte	0
 3306 00bd 0E       		.uleb128 0xe
 3307 00be 34       		.uleb128 0x34
 3308 00bf 00       		.byte	0
 3309 00c0 03       		.uleb128 0x3
 3310 00c1 0E       		.uleb128 0xe
 3311 00c2 3A       		.uleb128 0x3a
 3312 00c3 0B       		.uleb128 0xb
 3313 00c4 3B       		.uleb128 0x3b
 3314 00c5 0B       		.uleb128 0xb
 3315 00c6 49       		.uleb128 0x49
 3316 00c7 13       		.uleb128 0x13
 3317 00c8 02       		.uleb128 0x2
 3318 00c9 18       		.uleb128 0x18
 3319 00ca 00       		.byte	0
 3320 00cb 00       		.byte	0
 3321 00cc 0F       		.uleb128 0xf
 3322 00cd 0B       		.uleb128 0xb
 3323 00ce 01       		.byte	0x1
 3324 00cf 11       		.uleb128 0x11
 3325 00d0 01       		.uleb128 0x1
 3326 00d1 12       		.uleb128 0x12
 3327 00d2 06       		.uleb128 0x6
 3328 00d3 01       		.uleb128 0x1
 3329 00d4 13       		.uleb128 0x13
 3330 00d5 00       		.byte	0
 3331 00d6 00       		.byte	0
 3332 00d7 10       		.uleb128 0x10
 3333 00d8 2E       		.uleb128 0x2e
 3334 00d9 01       		.byte	0x1
 3335 00da 3F       		.uleb128 0x3f
 3336 00db 19       		.uleb128 0x19
 3337 00dc 03       		.uleb128 0x3
 3338 00dd 0E       		.uleb128 0xe
 3339 00de 3A       		.uleb128 0x3a
 3340 00df 0B       		.uleb128 0xb
 3341 00e0 3B       		.uleb128 0x3b
 3342 00e1 05       		.uleb128 0x5
 3343 00e2 49       		.uleb128 0x49
 3344 00e3 13       		.uleb128 0x13
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 78


 3345 00e4 3C       		.uleb128 0x3c
 3346 00e5 19       		.uleb128 0x19
 3347 00e6 01       		.uleb128 0x1
 3348 00e7 13       		.uleb128 0x13
 3349 00e8 00       		.byte	0
 3350 00e9 00       		.byte	0
 3351 00ea 11       		.uleb128 0x11
 3352 00eb 18       		.uleb128 0x18
 3353 00ec 00       		.byte	0
 3354 00ed 00       		.byte	0
 3355 00ee 00       		.byte	0
 3356 00ef 12       		.uleb128 0x12
 3357 00f0 2E       		.uleb128 0x2e
 3358 00f1 01       		.byte	0x1
 3359 00f2 3F       		.uleb128 0x3f
 3360 00f3 19       		.uleb128 0x19
 3361 00f4 03       		.uleb128 0x3
 3362 00f5 0E       		.uleb128 0xe
 3363 00f6 3A       		.uleb128 0x3a
 3364 00f7 0B       		.uleb128 0xb
 3365 00f8 3B       		.uleb128 0x3b
 3366 00f9 05       		.uleb128 0x5
 3367 00fa 49       		.uleb128 0x49
 3368 00fb 13       		.uleb128 0x13
 3369 00fc 3C       		.uleb128 0x3c
 3370 00fd 19       		.uleb128 0x19
 3371 00fe 00       		.byte	0
 3372 00ff 00       		.byte	0
 3373 0100 13       		.uleb128 0x13
 3374 0101 0B       		.uleb128 0xb
 3375 0102 01       		.byte	0x1
 3376 0103 11       		.uleb128 0x11
 3377 0104 01       		.uleb128 0x1
 3378 0105 12       		.uleb128 0x12
 3379 0106 06       		.uleb128 0x6
 3380 0107 00       		.byte	0
 3381 0108 00       		.byte	0
 3382 0109 14       		.uleb128 0x14
 3383 010a 2E       		.uleb128 0x2e
 3384 010b 00       		.byte	0
 3385 010c 3F       		.uleb128 0x3f
 3386 010d 19       		.uleb128 0x19
 3387 010e 03       		.uleb128 0x3
 3388 010f 0E       		.uleb128 0xe
 3389 0110 3A       		.uleb128 0x3a
 3390 0111 0B       		.uleb128 0xb
 3391 0112 3B       		.uleb128 0x3b
 3392 0113 05       		.uleb128 0x5
 3393 0114 27       		.uleb128 0x27
 3394 0115 19       		.uleb128 0x19
 3395 0116 11       		.uleb128 0x11
 3396 0117 01       		.uleb128 0x1
 3397 0118 12       		.uleb128 0x12
 3398 0119 06       		.uleb128 0x6
 3399 011a 40       		.uleb128 0x40
 3400 011b 18       		.uleb128 0x18
 3401 011c 9642     		.uleb128 0x2116
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 79


 3402 011e 19       		.uleb128 0x19
 3403 011f 00       		.byte	0
 3404 0120 00       		.byte	0
 3405 0121 15       		.uleb128 0x15
 3406 0122 2E       		.uleb128 0x2e
 3407 0123 01       		.byte	0x1
 3408 0124 3F       		.uleb128 0x3f
 3409 0125 19       		.uleb128 0x19
 3410 0126 03       		.uleb128 0x3
 3411 0127 0E       		.uleb128 0xe
 3412 0128 3A       		.uleb128 0x3a
 3413 0129 0B       		.uleb128 0xb
 3414 012a 3B       		.uleb128 0x3b
 3415 012b 05       		.uleb128 0x5
 3416 012c 27       		.uleb128 0x27
 3417 012d 19       		.uleb128 0x19
 3418 012e 11       		.uleb128 0x11
 3419 012f 01       		.uleb128 0x1
 3420 0130 12       		.uleb128 0x12
 3421 0131 06       		.uleb128 0x6
 3422 0132 40       		.uleb128 0x40
 3423 0133 18       		.uleb128 0x18
 3424 0134 9642     		.uleb128 0x2116
 3425 0136 19       		.uleb128 0x19
 3426 0137 01       		.uleb128 0x1
 3427 0138 13       		.uleb128 0x13
 3428 0139 00       		.byte	0
 3429 013a 00       		.byte	0
 3430 013b 16       		.uleb128 0x16
 3431 013c 34       		.uleb128 0x34
 3432 013d 00       		.byte	0
 3433 013e 03       		.uleb128 0x3
 3434 013f 0E       		.uleb128 0xe
 3435 0140 3A       		.uleb128 0x3a
 3436 0141 0B       		.uleb128 0xb
 3437 0142 3B       		.uleb128 0x3b
 3438 0143 05       		.uleb128 0x5
 3439 0144 49       		.uleb128 0x49
 3440 0145 13       		.uleb128 0x13
 3441 0146 02       		.uleb128 0x2
 3442 0147 18       		.uleb128 0x18
 3443 0148 00       		.byte	0
 3444 0149 00       		.byte	0
 3445 014a 17       		.uleb128 0x17
 3446 014b 2E       		.uleb128 0x2e
 3447 014c 01       		.byte	0x1
 3448 014d 3F       		.uleb128 0x3f
 3449 014e 19       		.uleb128 0x19
 3450 014f 03       		.uleb128 0x3
 3451 0150 0E       		.uleb128 0xe
 3452 0151 3A       		.uleb128 0x3a
 3453 0152 0B       		.uleb128 0xb
 3454 0153 3B       		.uleb128 0x3b
 3455 0154 05       		.uleb128 0x5
 3456 0155 27       		.uleb128 0x27
 3457 0156 19       		.uleb128 0x19
 3458 0157 49       		.uleb128 0x49
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 80


 3459 0158 13       		.uleb128 0x13
 3460 0159 11       		.uleb128 0x11
 3461 015a 01       		.uleb128 0x1
 3462 015b 12       		.uleb128 0x12
 3463 015c 06       		.uleb128 0x6
 3464 015d 40       		.uleb128 0x40
 3465 015e 18       		.uleb128 0x18
 3466 015f 9642     		.uleb128 0x2116
 3467 0161 19       		.uleb128 0x19
 3468 0162 01       		.uleb128 0x1
 3469 0163 13       		.uleb128 0x13
 3470 0164 00       		.byte	0
 3471 0165 00       		.byte	0
 3472 0166 18       		.uleb128 0x18
 3473 0167 05       		.uleb128 0x5
 3474 0168 00       		.byte	0
 3475 0169 03       		.uleb128 0x3
 3476 016a 0E       		.uleb128 0xe
 3477 016b 3A       		.uleb128 0x3a
 3478 016c 0B       		.uleb128 0xb
 3479 016d 3B       		.uleb128 0x3b
 3480 016e 05       		.uleb128 0x5
 3481 016f 49       		.uleb128 0x49
 3482 0170 13       		.uleb128 0x13
 3483 0171 02       		.uleb128 0x2
 3484 0172 18       		.uleb128 0x18
 3485 0173 00       		.byte	0
 3486 0174 00       		.byte	0
 3487 0175 19       		.uleb128 0x19
 3488 0176 2E       		.uleb128 0x2e
 3489 0177 01       		.byte	0x1
 3490 0178 03       		.uleb128 0x3
 3491 0179 0E       		.uleb128 0xe
 3492 017a 3A       		.uleb128 0x3a
 3493 017b 0B       		.uleb128 0xb
 3494 017c 3B       		.uleb128 0x3b
 3495 017d 05       		.uleb128 0x5
 3496 017e 27       		.uleb128 0x27
 3497 017f 19       		.uleb128 0x19
 3498 0180 11       		.uleb128 0x11
 3499 0181 01       		.uleb128 0x1
 3500 0182 12       		.uleb128 0x12
 3501 0183 06       		.uleb128 0x6
 3502 0184 40       		.uleb128 0x40
 3503 0185 18       		.uleb128 0x18
 3504 0186 9642     		.uleb128 0x2116
 3505 0188 19       		.uleb128 0x19
 3506 0189 01       		.uleb128 0x1
 3507 018a 13       		.uleb128 0x13
 3508 018b 00       		.byte	0
 3509 018c 00       		.byte	0
 3510 018d 1A       		.uleb128 0x1a
 3511 018e 2E       		.uleb128 0x2e
 3512 018f 01       		.byte	0x1
 3513 0190 03       		.uleb128 0x3
 3514 0191 0E       		.uleb128 0xe
 3515 0192 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 81


 3516 0193 0B       		.uleb128 0xb
 3517 0194 3B       		.uleb128 0x3b
 3518 0195 05       		.uleb128 0x5
 3519 0196 27       		.uleb128 0x27
 3520 0197 19       		.uleb128 0x19
 3521 0198 49       		.uleb128 0x49
 3522 0199 13       		.uleb128 0x13
 3523 019a 11       		.uleb128 0x11
 3524 019b 01       		.uleb128 0x1
 3525 019c 12       		.uleb128 0x12
 3526 019d 06       		.uleb128 0x6
 3527 019e 40       		.uleb128 0x40
 3528 019f 18       		.uleb128 0x18
 3529 01a0 9642     		.uleb128 0x2116
 3530 01a2 19       		.uleb128 0x19
 3531 01a3 01       		.uleb128 0x1
 3532 01a4 13       		.uleb128 0x13
 3533 01a5 00       		.byte	0
 3534 01a6 00       		.byte	0
 3535 01a7 1B       		.uleb128 0x1b
 3536 01a8 2E       		.uleb128 0x2e
 3537 01a9 01       		.byte	0x1
 3538 01aa 03       		.uleb128 0x3
 3539 01ab 0E       		.uleb128 0xe
 3540 01ac 3A       		.uleb128 0x3a
 3541 01ad 0B       		.uleb128 0xb
 3542 01ae 3B       		.uleb128 0x3b
 3543 01af 05       		.uleb128 0x5
 3544 01b0 27       		.uleb128 0x27
 3545 01b1 19       		.uleb128 0x19
 3546 01b2 49       		.uleb128 0x49
 3547 01b3 13       		.uleb128 0x13
 3548 01b4 11       		.uleb128 0x11
 3549 01b5 01       		.uleb128 0x1
 3550 01b6 12       		.uleb128 0x12
 3551 01b7 06       		.uleb128 0x6
 3552 01b8 40       		.uleb128 0x40
 3553 01b9 18       		.uleb128 0x18
 3554 01ba 9742     		.uleb128 0x2117
 3555 01bc 19       		.uleb128 0x19
 3556 01bd 01       		.uleb128 0x1
 3557 01be 13       		.uleb128 0x13
 3558 01bf 00       		.byte	0
 3559 01c0 00       		.byte	0
 3560 01c1 1C       		.uleb128 0x1c
 3561 01c2 26       		.uleb128 0x26
 3562 01c3 00       		.byte	0
 3563 01c4 49       		.uleb128 0x49
 3564 01c5 13       		.uleb128 0x13
 3565 01c6 00       		.byte	0
 3566 01c7 00       		.byte	0
 3567 01c8 1D       		.uleb128 0x1d
 3568 01c9 34       		.uleb128 0x34
 3569 01ca 00       		.byte	0
 3570 01cb 03       		.uleb128 0x3
 3571 01cc 0E       		.uleb128 0xe
 3572 01cd 3A       		.uleb128 0x3a
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 82


 3573 01ce 0B       		.uleb128 0xb
 3574 01cf 3B       		.uleb128 0x3b
 3575 01d0 05       		.uleb128 0x5
 3576 01d1 49       		.uleb128 0x49
 3577 01d2 13       		.uleb128 0x13
 3578 01d3 3F       		.uleb128 0x3f
 3579 01d4 19       		.uleb128 0x19
 3580 01d5 3C       		.uleb128 0x3c
 3581 01d6 19       		.uleb128 0x19
 3582 01d7 00       		.byte	0
 3583 01d8 00       		.byte	0
 3584 01d9 1E       		.uleb128 0x1e
 3585 01da 35       		.uleb128 0x35
 3586 01db 00       		.byte	0
 3587 01dc 49       		.uleb128 0x49
 3588 01dd 13       		.uleb128 0x13
 3589 01de 00       		.byte	0
 3590 01df 00       		.byte	0
 3591 01e0 00       		.byte	0
 3592              		.section	.debug_aranges,"",%progbits
 3593 0000 AC000000 		.4byte	0xac
 3594 0004 0200     		.2byte	0x2
 3595 0006 00000000 		.4byte	.Ldebug_info0
 3596 000a 04       		.byte	0x4
 3597 000b 00       		.byte	0
 3598 000c 0000     		.2byte	0
 3599 000e 0000     		.2byte	0
 3600 0010 00000000 		.4byte	.LFB63
 3601 0014 0C000000 		.4byte	.LFE63-.LFB63
 3602 0018 00000000 		.4byte	.LFB64
 3603 001c 0C000000 		.4byte	.LFE64-.LFB64
 3604 0020 00000000 		.4byte	.LFB65
 3605 0024 30000000 		.4byte	.LFE65-.LFB65
 3606 0028 00000000 		.4byte	.LFB66
 3607 002c 18010000 		.4byte	.LFE66-.LFB66
 3608 0030 00000000 		.4byte	.LFB67
 3609 0034 0C000000 		.4byte	.LFE67-.LFB67
 3610 0038 00000000 		.4byte	.LFB68
 3611 003c 0C000000 		.4byte	.LFE68-.LFB68
 3612 0040 00000000 		.4byte	.LFB69
 3613 0044 1C000000 		.4byte	.LFE69-.LFB69
 3614 0048 00000000 		.4byte	.LFB70
 3615 004c 4C010000 		.4byte	.LFE70-.LFB70
 3616 0050 00000000 		.4byte	.LFB71
 3617 0054 F4000000 		.4byte	.LFE71-.LFB71
 3618 0058 00000000 		.4byte	.LFB72
 3619 005c 60030000 		.4byte	.LFE72-.LFB72
 3620 0060 00000000 		.4byte	.LFB73
 3621 0064 7A000000 		.4byte	.LFE73-.LFB73
 3622 0068 00000000 		.4byte	.LFB74
 3623 006c 6E000000 		.4byte	.LFE74-.LFB74
 3624 0070 00000000 		.4byte	.LFB75
 3625 0074 7E000000 		.4byte	.LFE75-.LFB75
 3626 0078 00000000 		.4byte	.LFB76
 3627 007c 50000000 		.4byte	.LFE76-.LFB76
 3628 0080 00000000 		.4byte	.LFB77
 3629 0084 32000000 		.4byte	.LFE77-.LFB77
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 83


 3630 0088 00000000 		.4byte	.LFB78
 3631 008c 3A000000 		.4byte	.LFE78-.LFB78
 3632 0090 00000000 		.4byte	.LFB79
 3633 0094 26000000 		.4byte	.LFE79-.LFB79
 3634 0098 00000000 		.4byte	.LFB80
 3635 009c 20000000 		.4byte	.LFE80-.LFB80
 3636 00a0 00000000 		.4byte	.LFB81
 3637 00a4 D2000000 		.4byte	.LFE81-.LFB81
 3638 00a8 00000000 		.4byte	0
 3639 00ac 00000000 		.4byte	0
 3640              		.section	.debug_ranges,"",%progbits
 3641              	.Ldebug_ranges0:
 3642 0000 00000000 		.4byte	.LFB63
 3643 0004 0C000000 		.4byte	.LFE63
 3644 0008 00000000 		.4byte	.LFB64
 3645 000c 0C000000 		.4byte	.LFE64
 3646 0010 00000000 		.4byte	.LFB65
 3647 0014 30000000 		.4byte	.LFE65
 3648 0018 00000000 		.4byte	.LFB66
 3649 001c 18010000 		.4byte	.LFE66
 3650 0020 00000000 		.4byte	.LFB67
 3651 0024 0C000000 		.4byte	.LFE67
 3652 0028 00000000 		.4byte	.LFB68
 3653 002c 0C000000 		.4byte	.LFE68
 3654 0030 00000000 		.4byte	.LFB69
 3655 0034 1C000000 		.4byte	.LFE69
 3656 0038 00000000 		.4byte	.LFB70
 3657 003c 4C010000 		.4byte	.LFE70
 3658 0040 00000000 		.4byte	.LFB71
 3659 0044 F4000000 		.4byte	.LFE71
 3660 0048 00000000 		.4byte	.LFB72
 3661 004c 60030000 		.4byte	.LFE72
 3662 0050 00000000 		.4byte	.LFB73
 3663 0054 7A000000 		.4byte	.LFE73
 3664 0058 00000000 		.4byte	.LFB74
 3665 005c 6E000000 		.4byte	.LFE74
 3666 0060 00000000 		.4byte	.LFB75
 3667 0064 7E000000 		.4byte	.LFE75
 3668 0068 00000000 		.4byte	.LFB76
 3669 006c 50000000 		.4byte	.LFE76
 3670 0070 00000000 		.4byte	.LFB77
 3671 0074 32000000 		.4byte	.LFE77
 3672 0078 00000000 		.4byte	.LFB78
 3673 007c 3A000000 		.4byte	.LFE78
 3674 0080 00000000 		.4byte	.LFB79
 3675 0084 26000000 		.4byte	.LFE79
 3676 0088 00000000 		.4byte	.LFB80
 3677 008c 20000000 		.4byte	.LFE80
 3678 0090 00000000 		.4byte	.LFB81
 3679 0094 D2000000 		.4byte	.LFE81
 3680 0098 00000000 		.4byte	0
 3681 009c 00000000 		.4byte	0
 3682              		.section	.debug_line,"",%progbits
 3683              	.Ldebug_line0:
 3684 0000 68040000 		.section	.debug_str,"MS",%progbits,1
 3684      02006701 
 3684      00000201 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 84


 3684      FB0E0D00 
 3684      01010101 
 3685              	.LASF92:
 3686 0000 66697273 		.ascii	"firstTone\000"
 3686      74546F6E 
 3686      6500
 3687              	.LASF90:
 3688 000a 6368616E 		.ascii	"changedChannel\000"
 3688      67656443 
 3688      68616E6E 
 3688      656C00
 3689              	.LASF28:
 3690 0019 5043414C 		.ascii	"PCALL_FAST\000"
 3690      4C5F4641 
 3690      535400
 3691              	.LASF118:
 3692 0024 45455052 		.ascii	"EEPROM_KEY_INDEX\000"
 3692      4F4D5F4B 
 3692      45595F49 
 3692      4E444558 
 3692      00
 3693              	.LASF127:
 3694 0035 64656369 		.ascii	"decideTonesToPlay\000"
 3694      6465546F 
 3694      6E657354 
 3694      6F506C61 
 3694      7900
 3695              	.LASF30:
 3696 0047 484F524E 		.ascii	"HORN_YELP\000"
 3696      5F59454C 
 3696      5000
 3697              	.LASF79:
 3698 0051 45455052 		.ascii	"EEPROM_UpdateTemperature\000"
 3698      4F4D5F55 
 3698      70646174 
 3698      6554656D 
 3698      70657261 
 3699              	.LASF24:
 3700 006a 4D454348 		.ascii	"MECHANICAL\000"
 3700      414E4943 
 3700      414C00
 3701              	.LASF102:
 3702 0075 706C6179 		.ascii	"playPWMTone\000"
 3702      50574D54 
 3702      6F6E6500 
 3703              	.LASF8:
 3704 0081 756E7369 		.ascii	"unsigned int\000"
 3704      676E6564 
 3704      20696E74 
 3704      00
 3705              	.LASF37:
 3706 008e 53544550 		.ascii	"STEP_OUT_HANDS_UP\000"
 3706      5F4F5554 
 3706      5F48414E 
 3706      44535F55 
 3706      5000
 3707              	.LASF9:
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 85


 3708 00a0 5F5F696E 		.ascii	"__int32_t\000"
 3708      7433325F 
 3708      7400
 3709              	.LASF77:
 3710 00aa 62537065 		.ascii	"bSpeakerIndex\000"
 3710      616B6572 
 3710      496E6465 
 3710      7800
 3711              	.LASF33:
 3712 00b8 434F5053 		.ascii	"COPS_SONG\000"
 3712      5F534F4E 
 3712      4700
 3713              	.LASF123:
 3714 00c2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3714      43313120 
 3714      352E342E 
 3714      31203230 
 3714      31363036 
 3715 00f5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 3715      20726576 
 3715      6973696F 
 3715      6E203233 
 3715      37373135 
 3716 0128 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3716      66756E63 
 3716      74696F6E 
 3716      2D736563 
 3716      74696F6E 
 3717              	.LASF60:
 3718 0150 62506172 		.ascii	"bParkKill\000"
 3718      6B4B696C 
 3718      6C00
 3719              	.LASF117:
 3720 015a 44454641 		.ascii	"DEFAULT_CONFIGURATION_LIST\000"
 3720      554C545F 
 3720      434F4E46 
 3720      49475552 
 3720      4154494F 
 3721              	.LASF97:
 3722 0175 62537065 		.ascii	"bSpeaker\000"
 3722      616B6572 
 3722      00
 3723              	.LASF65:
 3724 017e 70726576 		.ascii	"previousTone\000"
 3724      696F7573 
 3724      546F6E65 
 3724      00
 3725              	.LASF84:
 3726 018b 70726F63 		.ascii	"processHornRingRoutine\000"
 3726      65737348 
 3726      6F726E52 
 3726      696E6752 
 3726      6F757469 
 3727              	.LASF62:
 3728 01a2 62486F72 		.ascii	"bHornRing\000"
 3728      6E52696E 
 3728      6700
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 86


 3729              	.LASF41:
 3730 01ac 546F6E65 		.ascii	"ToneType\000"
 3730      54797065 
 3730      00
 3731              	.LASF51:
 3732 01b5 42495430 		.ascii	"BIT0\000"
 3732      00
 3733              	.LASF52:
 3734 01ba 42495431 		.ascii	"BIT1\000"
 3734      00
 3735              	.LASF53:
 3736 01bf 42495432 		.ascii	"BIT2\000"
 3736      00
 3737              	.LASF54:
 3738 01c4 42495433 		.ascii	"BIT3\000"
 3738      00
 3739              	.LASF55:
 3740 01c9 42495434 		.ascii	"BIT4\000"
 3740      00
 3741              	.LASF56:
 3742 01ce 42495435 		.ascii	"BIT5\000"
 3742      00
 3743              	.LASF57:
 3744 01d3 42495436 		.ascii	"BIT6\000"
 3744      00
 3745              	.LASF58:
 3746 01d8 42495437 		.ascii	"BIT7\000"
 3746      00
 3747              	.LASF81:
 3748 01dd 64656163 		.ascii	"deactivateAudio\000"
 3748      74697661 
 3748      74654175 
 3748      64696F00 
 3749              	.LASF36:
 3750 01ed 53544550 		.ascii	"STEP_OUT\000"
 3750      5F4F5554 
 3750      00
 3751              	.LASF61:
 3752 01f6 62546163 		.ascii	"bTackSwitch\000"
 3752      6B537769 
 3752      74636800 
 3753              	.LASF112:
 3754 0202 6973436F 		.ascii	"isCommand\000"
 3754      6D6D616E 
 3754      6400
 3755              	.LASF75:
 3756 020c 61646472 		.ascii	"addressIndex\000"
 3756      65737349 
 3756      6E646578 
 3756      00
 3757              	.LASF113:
 3758 0219 6973536F 		.ascii	"isSong\000"
 3758      6E6700
 3759              	.LASF95:
 3760 0220 62546F6E 		.ascii	"bToneChangeOnHornRing\000"
 3760      65436861 
 3760      6E67654F 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 87


 3760      6E486F72 
 3760      6E52696E 
 3761              	.LASF13:
 3762 0236 666C6F61 		.ascii	"float\000"
 3762      7400
 3763              	.LASF119:
 3764 023c 45455052 		.ascii	"EEPROM_KEY_VALUE\000"
 3764      4F4D5F4B 
 3764      45595F56 
 3764      414C5545 
 3764      00
 3765              	.LASF32:
 3766 024d 4543544F 		.ascii	"ECTOSIREN\000"
 3766      53495245 
 3766      4E00
 3767              	.LASF107:
 3768 0257 6D6F6465 		.ascii	"modeStatusByte\000"
 3768      53746174 
 3768      75734279 
 3768      746500
 3769              	.LASF115:
 3770 0266 6D61736B 		.ascii	"maskNumber\000"
 3770      4E756D62 
 3770      657200
 3771              	.LASF25:
 3772 0271 4D414E55 		.ascii	"MANUAL_WAIL\000"
 3772      414C5F57 
 3772      41494C00 
 3773              	.LASF7:
 3774 027d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3774      206C6F6E 
 3774      6720756E 
 3774      7369676E 
 3774      65642069 
 3775              	.LASF40:
 3776 0294 54455354 		.ascii	"TEST_TONE\000"
 3776      5F544F4E 
 3776      4500
 3777              	.LASF39:
 3778 029e 52454D41 		.ascii	"REMAIN_WINDOW_DOWN\000"
 3778      494E5F57 
 3778      494E444F 
 3778      575F444F 
 3778      574E00
 3779              	.LASF42:
 3780 02b1 4368616E 		.ascii	"ChannelIndex\000"
 3780      6E656C49 
 3780      6E646578 
 3780      00
 3781              	.LASF68:
 3782 02be 62447561 		.ascii	"bDualDelayEnable\000"
 3782      6C44656C 
 3782      6179456E 
 3782      61626C65 
 3782      00
 3783              	.LASF83:
 3784 02cf 70726F63 		.ascii	"processParkKillRoutine\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 88


 3784      65737350 
 3784      61726B4B 
 3784      696C6C52 
 3784      6F757469 
 3785              	.LASF29:
 3786 02e6 484F524E 		.ascii	"HORN_PHASER\000"
 3786      5F504841 
 3786      53455200 
 3787              	.LASF87:
 3788 02f2 70726576 		.ascii	"previousChannels\000"
 3788      696F7573 
 3788      4368616E 
 3788      6E656C73 
 3788      00
 3789              	.LASF38:
 3790 0303 52454D41 		.ascii	"REMAIN_IN_VEHICLE\000"
 3790      494E5F49 
 3790      4E5F5645 
 3790      4849434C 
 3790      4500
 3791              	.LASF34:
 3792 0315 4D4F5645 		.ascii	"MOVE_OUT\000"
 3792      5F4F5554 
 3792      00
 3793              	.LASF106:
 3794 031e 62537065 		.ascii	"bSpeakerNumber\000"
 3794      616B6572 
 3794      4E756D62 
 3794      657200
 3795              	.LASF78:
 3796 032d 64656163 		.ascii	"deactivateManualWail\000"
 3796      74697661 
 3796      74654D61 
 3796      6E75616C 
 3796      5761696C 
 3797              	.LASF19:
 3798 0342 5741494C 		.ascii	"WAIL\000"
 3798      00
 3799              	.LASF15:
 3800 0347 63686172 		.ascii	"char\000"
 3800      00
 3801              	.LASF64:
 3802 034c 68696768 		.ascii	"highestPriorityChannel\000"
 3802      65737450 
 3802      72696F72 
 3802      69747943 
 3802      68616E6E 
 3803              	.LASF26:
 3804 0363 48494748 		.ascii	"HIGH_LOW\000"
 3804      5F4C4F57 
 3804      00
 3805              	.LASF12:
 3806 036c 75696E74 		.ascii	"uint16\000"
 3806      313600
 3807              	.LASF114:
 3808 0373 67657442 		.ascii	"getBitIndex\000"
 3808      6974496E 
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 89


 3808      64657800 
 3809              	.LASF116:
 3810 037f 696E6465 		.ascii	"indexResult\000"
 3810      78526573 
 3810      756C7400 
 3811              	.LASF109:
 3812 038b 69735472 		.ascii	"isTrailingTone\000"
 3812      61696C69 
 3812      6E67546F 
 3812      6E6500
 3813              	.LASF35:
 3814 039a 50554C4C 		.ascii	"PULL_OVER\000"
 3814      5F4F5645 
 3814      5200
 3815              	.LASF125:
 3816 03a4 433A5C55 		.ascii	"C:\\Users\\marthnick\\Desktop\\F1-Test Fixture Firm"
 3816      73657273 
 3816      5C6D6172 
 3816      74686E69 
 3816      636B5C44 
 3817 03d3 77617265 		.ascii	"ware\\ReleaseVersion.cydsn\000"
 3817      5C52656C 
 3817      65617365 
 3817      56657273 
 3817      696F6E2E 
 3818              	.LASF111:
 3819 03ed 69734175 		.ascii	"isAudioTone\000"
 3819      64696F54 
 3819      6F6E6500 
 3820              	.LASF74:
 3821 03f9 746F6E65 		.ascii	"toneToPlay\000"
 3821      546F506C 
 3821      617900
 3822              	.LASF6:
 3823 0404 6C6F6E67 		.ascii	"long long int\000"
 3823      206C6F6E 
 3823      6720696E 
 3823      7400
 3824              	.LASF82:
 3825 0412 45455052 		.ascii	"EEPROM_ReadByte\000"
 3825      4F4D5F52 
 3825      65616442 
 3825      79746500 
 3826              	.LASF96:
 3827 0422 506F7765 		.ascii	"PowerAmpOutput1_Write\000"
 3827      72416D70 
 3827      4F757470 
 3827      7574315F 
 3827      57726974 
 3828              	.LASF105:
 3829 0438 67657448 		.ascii	"getHighestPriorityChannel\000"
 3829      69676865 
 3829      73745072 
 3829      696F7269 
 3829      74794368 
 3830              	.LASF21:
 3831 0452 46415354 		.ascii	"FAST_YELP\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 90


 3831      5F59454C 
 3831      5000
 3832              	.LASF69:
 3833 045c 656E6162 		.ascii	"enableToneInputInterrupts\000"
 3833      6C65546F 
 3833      6E65496E 
 3833      70757449 
 3833      6E746572 
 3834              	.LASF76:
 3835 0476 6368616E 		.ascii	"channelIndex\000"
 3835      6E656C49 
 3835      6E646578 
 3835      00
 3836              	.LASF73:
 3837 0483 73706561 		.ascii	"speakerIndex\000"
 3837      6B657249 
 3837      6E646578 
 3837      00
 3838              	.LASF86:
 3839 0490 70726F63 		.ascii	"processToneChangeRoutine\000"
 3839      65737354 
 3839      6F6E6543 
 3839      68616E67 
 3839      65526F75 
 3840              	.LASF16:
 3841 04a9 6C6F6E67 		.ascii	"long double\000"
 3841      20646F75 
 3841      626C6500 
 3842              	.LASF103:
 3843 04b5 656E6162 		.ascii	"enableSpeakerForSirenTone\000"
 3843      6C655370 
 3843      65616B65 
 3843      72466F72 
 3843      53697265 
 3844              	.LASF27:
 3845 04cf 5043414C 		.ascii	"PCALL_SLOW\000"
 3845      4C5F534C 
 3845      4F5700
 3846              	.LASF70:
 3847 04da 64697361 		.ascii	"disableToneInputInterrupts\000"
 3847      626C6554 
 3847      6F6E6549 
 3847      6E707574 
 3847      496E7465 
 3848              	.LASF121:
 3849 04f5 496E7075 		.ascii	"InputRead\000"
 3849      74526561 
 3849      6400
 3850              	.LASF18:
 3851 04ff 4E4F5F54 		.ascii	"NO_TONE\000"
 3851      4F4E4500 
 3852              	.LASF31:
 3853 0507 50484153 		.ascii	"PHASER_YELP\000"
 3853      45525F59 
 3853      454C5000 
 3854              	.LASF94:
 3855 0513 62447561 		.ascii	"bDualDelayChange\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 91


 3855      6C44656C 
 3855      61794368 
 3855      616E6765 
 3855      00
 3856              	.LASF88:
 3857 0524 63757272 		.ascii	"currentChannels\000"
 3857      656E7443 
 3857      68616E6E 
 3857      656C7300 
 3858              	.LASF2:
 3859 0534 73686F72 		.ascii	"short int\000"
 3859      7420696E 
 3859      7400
 3860              	.LASF104:
 3861 053e 656E6162 		.ascii	"enableSpeakersForAudioTone\000"
 3861      6C655370 
 3861      65616B65 
 3861      7273466F 
 3861      72417564 
 3862              	.LASF4:
 3863 0559 6C6F6E67 		.ascii	"long int\000"
 3863      20696E74 
 3863      00
 3864              	.LASF128:
 3865 0562 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3865      52784275 
 3865      66666572 
 3865      00
 3866              	.LASF100:
 3867 056f 6244656C 		.ascii	"bDelay\000"
 3867      617900
 3868              	.LASF126:
 3869 0576 73657454 		.ascii	"setTonesWithCommunication\000"
 3869      6F6E6573 
 3869      57697468 
 3869      436F6D6D 
 3869      756E6963 
 3870              	.LASF89:
 3871 0590 6368616E 		.ascii	"changeStatus\000"
 3871      67655374 
 3871      61747573 
 3871      00
 3872              	.LASF98:
 3873 059d 746F6E65 		.ascii	"toneSelection\000"
 3873      53656C65 
 3873      6374696F 
 3873      6E00
 3874              	.LASF17:
 3875 05ab 73697A65 		.ascii	"sizetype\000"
 3875      74797065 
 3875      00
 3876              	.LASF5:
 3877 05b4 6C6F6E67 		.ascii	"long unsigned int\000"
 3877      20756E73 
 3877      69676E65 
 3877      6420696E 
 3877      7400
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 92


 3878              	.LASF99:
 3879 05c6 62496E70 		.ascii	"bInputEnable\000"
 3879      7574456E 
 3879      61626C65 
 3879      00
 3880              	.LASF67:
 3881 05d3 62526973 		.ascii	"bRisingEdge\000"
 3881      696E6745 
 3881      64676500 
 3882              	.LASF10:
 3883 05df 696E7433 		.ascii	"int32_t\000"
 3883      325F7400 
 3884              	.LASF85:
 3885 05e7 70726F63 		.ascii	"processDualDelayRoutine\000"
 3885      65737344 
 3885      75616C44 
 3885      656C6179 
 3885      526F7574 
 3886              	.LASF59:
 3887 05ff 62526164 		.ascii	"bRadioAndMicKey\000"
 3887      696F416E 
 3887      644D6963 
 3887      4B657900 
 3888              	.LASF63:
 3889 060f 62447561 		.ascii	"bDualDelay\000"
 3889      6C44656C 
 3889      617900
 3890              	.LASF108:
 3891 061a 67657441 		.ascii	"getAlternatingTone\000"
 3891      6C746572 
 3891      6E617469 
 3891      6E67546F 
 3891      6E6500
 3892              	.LASF66:
 3893 062d 63757272 		.ascii	"currentTone\000"
 3893      656E7454 
 3893      6F6E6500 
 3894              	.LASF72:
 3895 0639 70726F63 		.ascii	"processTackSwitchRoutine\000"
 3895      65737354 
 3895      61636B53 
 3895      77697463 
 3895      68526F75 
 3896              	.LASF110:
 3897 0652 74686973 		.ascii	"thisTone\000"
 3897      546F6E65 
 3897      00
 3898              	.LASF1:
 3899 065b 756E7369 		.ascii	"unsigned char\000"
 3899      676E6564 
 3899      20636861 
 3899      7200
 3900              	.LASF124:
 3901 0669 53697265 		.ascii	"SirenState.c\000"
 3901      6E537461 
 3901      74652E63 
 3901      00
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 93


 3902              	.LASF93:
 3903 0676 7365636F 		.ascii	"secondTone\000"
 3903      6E64546F 
 3903      6E6500
 3904              	.LASF49:
 3905 0681 4E4F5F43 		.ascii	"NO_CHANNEL\000"
 3905      48414E4E 
 3905      454C00
 3906              	.LASF71:
 3907 068c 696E6974 		.ascii	"initializeInputReadings\000"
 3907      69616C69 
 3907      7A65496E 
 3907      70757452 
 3907      65616469 
 3908              	.LASF20:
 3909 06a4 534C4F57 		.ascii	"SLOW_YELP\000"
 3909      5F59454C 
 3909      5000
 3910              	.LASF80:
 3911 06ae 45455052 		.ascii	"EEPROM_WriteByte\000"
 3911      4F4D5F57 
 3911      72697465 
 3911      42797465 
 3911      00
 3912              	.LASF22:
 3913 06bf 50484153 		.ascii	"PHASER\000"
 3913      455200
 3914              	.LASF91:
 3915 06c6 7072696F 		.ascii	"priorityChannel\000"
 3915      72697479 
 3915      4368616E 
 3915      6E656C00 
 3916              	.LASF23:
 3917 06d6 484F524E 		.ascii	"HORN\000"
 3917      00
 3918              	.LASF43:
 3919 06db 4348414E 		.ascii	"CHANNEL_1\000"
 3919      4E454C5F 
 3919      3100
 3920              	.LASF44:
 3921 06e5 4348414E 		.ascii	"CHANNEL_2\000"
 3921      4E454C5F 
 3921      3200
 3922              	.LASF45:
 3923 06ef 4348414E 		.ascii	"CHANNEL_3\000"
 3923      4E454C5F 
 3923      3300
 3924              	.LASF46:
 3925 06f9 4348414E 		.ascii	"CHANNEL_4\000"
 3925      4E454C5F 
 3925      3400
 3926              	.LASF47:
 3927 0703 4348414E 		.ascii	"CHANNEL_5\000"
 3927      4E454C5F 
 3927      3500
 3928              	.LASF48:
 3929 070d 4348414E 		.ascii	"CHANNEL_6\000"
ARM GAS  C:\Users\MARTHN~1\AppData\Local\Temp\ccFPeGXU.s 			page 94


 3929      4E454C5F 
 3929      3600
 3930              	.LASF0:
 3931 0717 7369676E 		.ascii	"signed char\000"
 3931      65642063 
 3931      68617200 
 3932              	.LASF122:
 3933 0723 546F6E65 		.ascii	"ToneStatus\000"
 3933      53746174 
 3933      757300
 3934              	.LASF3:
 3935 072e 73686F72 		.ascii	"short unsigned int\000"
 3935      7420756E 
 3935      7369676E 
 3935      65642069 
 3935      6E7400
 3936              	.LASF11:
 3937 0741 75696E74 		.ascii	"uint8\000"
 3937      3800
 3938              	.LASF14:
 3939 0747 646F7562 		.ascii	"double\000"
 3939      6C6500
 3940              	.LASF50:
 3941 074e 4269744D 		.ascii	"BitMask\000"
 3941      61736B00 
 3942              	.LASF101:
 3943 0756 706C6179 		.ascii	"playAudioTone\000"
 3943      41756469 
 3943      6F546F6E 
 3943      6500
 3944              	.LASF120:
 3945 0764 746F6E65 		.ascii	"toneConfigurationList\000"
 3945      436F6E66 
 3945      69677572 
 3945      6174696F 
 3945      6E4C6973 
 3946              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
