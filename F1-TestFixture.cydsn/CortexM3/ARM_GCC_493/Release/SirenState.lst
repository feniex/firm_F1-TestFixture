ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"SirenState.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	2
  20              		.type	DEFAULT_CONFIGURATION_LIST, %object
  21              		.size	DEFAULT_CONFIGURATION_LIST, 12
  22              	DEFAULT_CONFIGURATION_LIST:
  23 0000 0E       		.byte	14
  24 0001 01       		.byte	1
  25 0002 02       		.byte	2
  26 0003 04       		.byte	4
  27 0004 05       		.byte	5
  28 0005 0B       		.byte	11
  29 0006 0F       		.byte	15
  30 0007 01       		.byte	1
  31 0008 02       		.byte	2
  32 0009 04       		.byte	4
  33 000a 05       		.byte	5
  34 000b 0B       		.byte	11
  35              		.align	1
  36              		.type	EEPROM_KEY_INDEX, %object
  37              		.size	EEPROM_KEY_INDEX, 2
  38              	EEPROM_KEY_INDEX:
  39 000c FF00     		.short	255
  40              		.type	EEPROM_KEY_VALUE, %object
  41              		.size	EEPROM_KEY_VALUE, 1
  42              	EEPROM_KEY_VALUE:
  43 000e AA       		.byte	-86
  44 000f 00       		.bss
  45              		.align	2
  46              	toneConfigurationList:
  47 0000 00000000 		.space	12
  47      00000000 
  47      00000000 
  48              		.align	2
  49              	InputRead:
  50 000c 00000000 		.space	7
  50      000000
  51 0013 00       		.align	2
  52              	ToneStatus:
  53 0014 00000000 		.space	7
  53      000000
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 2


  54              		.section	.text.initializeToneConfigurationList,"ax",%progbits
  55              		.align	2
  56              		.global	initializeToneConfigurationList
  57              		.thumb
  58              		.thumb_func
  59              		.type	initializeToneConfigurationList, %function
  60              	initializeToneConfigurationList:
  61              	.LFB63:
  62              		.file 1 ".\\SirenState.c"
   1:.\SirenState.c **** /* ========================================
   2:.\SirenState.c ****  *
   3:.\SirenState.c ****  * Copyright YOUR COMPANY, THE YEAR
   4:.\SirenState.c ****  * All Rights Reserved
   5:.\SirenState.c ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\SirenState.c ****  *
   7:.\SirenState.c ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\SirenState.c ****  * WHICH IS THE PROPERTY OF your company.
   9:.\SirenState.c ****  *
  10:.\SirenState.c ****  * ========================================
  11:.\SirenState.c **** */
  12:.\SirenState.c **** 
  13:.\SirenState.c **** /**********PREPROCESSOR DIRECTIVES**********/
  14:.\SirenState.c **** #include "CommonVariables.h"
  15:.\SirenState.c **** #include "SirenState.h"
  16:.\SirenState.c **** #include "Tones.h"
  17:.\SirenState.c **** #include "DACaudio.h"
  18:.\SirenState.c **** 
  19:.\SirenState.c **** /**********DEFINED CONSTANTS**********/
  20:.\SirenState.c **** enum ChannelIndex
  21:.\SirenState.c **** {
  22:.\SirenState.c **** 	CHANNEL_1 = 0,
  23:.\SirenState.c **** 	CHANNEL_2 = 1,
  24:.\SirenState.c **** 	CHANNEL_3 = 2,
  25:.\SirenState.c **** 	CHANNEL_4 = 3,
  26:.\SirenState.c **** 	CHANNEL_5 = 4,
  27:.\SirenState.c **** 	CHANNEL_6 = 5,
  28:.\SirenState.c **** 	NO_CHANNEL = 0xFF
  29:.\SirenState.c **** };
  30:.\SirenState.c **** 
  31:.\SirenState.c **** enum BitMask
  32:.\SirenState.c **** {
  33:.\SirenState.c **** 	BIT0 = 0x01,
  34:.\SirenState.c **** 	BIT1 = 0x02,
  35:.\SirenState.c **** 	BIT2 = 0x04,
  36:.\SirenState.c **** 	BIT3 = 0x08,
  37:.\SirenState.c **** 	BIT4 = 0x10,
  38:.\SirenState.c **** 	BIT5 = 0x20,
  39:.\SirenState.c **** 	BIT6 = 0x40,
  40:.\SirenState.c **** 	BIT7 = 0x80
  41:.\SirenState.c **** };
  42:.\SirenState.c **** 
  43:.\SirenState.c **** static const uint8 DEFAULT_CONFIGURATION_LIST[SPEAKER_COUNT * CHANNEL_COUNT_PER_SPEAKER] = 
  44:.\SirenState.c ****     {ECTOSIREN, WAIL, SLOW_YELP, PHASER, HORN, HORN_PHASER,
  45:.\SirenState.c ****     COPS_SONG, WAIL, SLOW_YELP, PHASER, HORN, HORN_PHASER};
  46:.\SirenState.c **** 
  47:.\SirenState.c **** static const uint16 EEPROM_KEY_INDEX = 0xFF;
  48:.\SirenState.c **** static const uint8 EEPROM_KEY_VALUE = 0xAA;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 3


  49:.\SirenState.c **** 
  50:.\SirenState.c **** /**********DATA STRUCTURES**********/
  51:.\SirenState.c **** static enum ToneType toneConfigurationList[SPEAKER_COUNT][CHANNEL_COUNT_PER_SPEAKER];
  52:.\SirenState.c ****     
  53:.\SirenState.c **** static struct
  54:.\SirenState.c **** {
  55:.\SirenState.c ****     uint8 bRadioAndMicKey;
  56:.\SirenState.c ****     uint8 bParkKill;
  57:.\SirenState.c ****     uint8 bTackSwitch;
  58:.\SirenState.c ****     uint8 bHornRing;
  59:.\SirenState.c ****     uint8 bDualDelay;
  60:.\SirenState.c ****     enum ChannelIndex highestPriorityChannel[SPEAKER_COUNT];
  61:.\SirenState.c **** }InputRead;
  62:.\SirenState.c **** 
  63:.\SirenState.c **** static struct
  64:.\SirenState.c **** {
  65:.\SirenState.c ****     enum ToneType previousTone[SPEAKER_COUNT];
  66:.\SirenState.c ****     enum ToneType currentTone[SPEAKER_COUNT];
  67:.\SirenState.c ****     uint8 bRisingEdge[SPEAKER_COUNT];
  68:.\SirenState.c ****     uint8 bDualDelayEnable;
  69:.\SirenState.c **** }ToneStatus;
  70:.\SirenState.c **** 
  71:.\SirenState.c **** /**********GLOBAL VARIABLES**********/
  72:.\SirenState.c **** 
  73:.\SirenState.c **** 
  74:.\SirenState.c **** /**********FUNCTION PROTOTYPES**********/
  75:.\SirenState.c **** static void decideTonesToPlay(void);
  76:.\SirenState.c **** static uint8 enableSpeakerForSirenTone(uint8 bSpeaker, enum ToneType toneSelection, uint8 bInputEna
  77:.\SirenState.c **** static uint8 enableSpeakersForAudioTone(uint8 bSpeaker, enum ToneType toneSelection, uint8 bInputEn
  78:.\SirenState.c **** static enum ChannelIndex getHighestPriorityChannel(uint8 bSpeakerNumber);
  79:.\SirenState.c **** static enum ToneType getAlternatingTone(enum ToneType toneSelection);
  80:.\SirenState.c **** static uint8 isTrailingTone(enum ToneType thisTone);
  81:.\SirenState.c **** static uint8 isAudioTone(enum ToneType thisTone);
  82:.\SirenState.c **** static uint8 isCommand(enum ToneType thisTone);
  83:.\SirenState.c **** static uint8 isSong(enum ToneType thisTone);
  84:.\SirenState.c **** static uint8 getBitIndex(enum BitMask maskNumber);
  85:.\SirenState.c **** 
  86:.\SirenState.c **** /**********DEFINED FUNCTIONS**********/
  87:.\SirenState.c **** /*******************************************************************************
  88:.\SirenState.c **** * Function Name: initializeToneConfigurationList
  89:.\SirenState.c **** ********************************************************************************
  90:.\SirenState.c **** *
  91:.\SirenState.c **** * Summary:
  92:.\SirenState.c **** *  Sets the configuration list to the tones saved in EEPROM
  93:.\SirenState.c **** *
  94:.\SirenState.c **** * Parameters:  
  95:.\SirenState.c **** *   None
  96:.\SirenState.c **** *
  97:.\SirenState.c **** * Return:
  98:.\SirenState.c **** *   None
  99:.\SirenState.c **** *
 100:.\SirenState.c **** *******************************************************************************/
 101:.\SirenState.c **** void initializeToneConfigurationList(void)
 102:.\SirenState.c **** {
  63              		.loc 1 102 0
  64              		.cfi_startproc
  65              		@ args = 0, pretend = 0, frame = 8
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 4


  66              		@ frame_needed = 1, uses_anonymous_args = 0
  67 0000 B0B5     		push	{r4, r5, r7, lr}
  68              		.cfi_def_cfa_offset 16
  69              		.cfi_offset 4, -16
  70              		.cfi_offset 5, -12
  71              		.cfi_offset 7, -8
  72              		.cfi_offset 14, -4
  73 0002 82B0     		sub	sp, sp, #8
  74              		.cfi_def_cfa_offset 24
  75 0004 00AF     		add	r7, sp, #0
  76              		.cfi_def_cfa_register 7
 103:.\SirenState.c ****     uint8 bHasNoTone = false;  
  77              		.loc 1 103 0
  78 0006 0023     		movs	r3, #0
  79 0008 FB71     		strb	r3, [r7, #7]
 104:.\SirenState.c ****     uint8 bSpeakerIndex = SPEAKER_1;
  80              		.loc 1 104 0
  81 000a 0023     		movs	r3, #0
  82 000c BB71     		strb	r3, [r7, #6]
 105:.\SirenState.c ****     uint8 channelIndex = NO_CHANNEL;   
  83              		.loc 1 105 0
  84 000e FF23     		movs	r3, #255
  85 0010 7B71     		strb	r3, [r7, #5]
 106:.\SirenState.c ****     uint16 addressIndex = 0;
  86              		.loc 1 106 0
  87 0012 0023     		movs	r3, #0
  88 0014 7B80     		strh	r3, [r7, #2]	@ movhi
 107:.\SirenState.c ****     
 108:.\SirenState.c ****     EEPROM_Start();   
  89              		.loc 1 108 0
  90 0016 FFF7FEFF 		bl	EEPROM_Start
 109:.\SirenState.c ****     
 110:.\SirenState.c ****     for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
  91              		.loc 1 110 0
  92 001a 0023     		movs	r3, #0
  93 001c BB71     		strb	r3, [r7, #6]
  94 001e 20E0     		b	.L2
  95              	.L7:
 111:.\SirenState.c ****     {   //Check for indices with no tone written to it
 112:.\SirenState.c ****         for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
  96              		.loc 1 112 0
  97 0020 0023     		movs	r3, #0
  98 0022 7B71     		strb	r3, [r7, #5]
  99 0024 17E0     		b	.L3
 100              	.L6:
 113:.\SirenState.c ****         {
 114:.\SirenState.c ****             addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 101              		.loc 1 114 0
 102 0026 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 103 0028 9BB2     		uxth	r3, r3
 104 002a 1A46     		mov	r2, r3	@ movhi
 105 002c 5200     		lsls	r2, r2, #1
 106 002e 1344     		add	r3, r3, r2
 107 0030 5B00     		lsls	r3, r3, #1
 108 0032 9AB2     		uxth	r2, r3
 109 0034 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 110 0036 9BB2     		uxth	r3, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 5


 111 0038 1344     		add	r3, r3, r2
 112 003a 7B80     		strh	r3, [r7, #2]	@ movhi
 115:.\SirenState.c ****             if(EEPROM_ReadByte(addressIndex) >= TONE_TYPE_LIST_SIZE)
 113              		.loc 1 115 0
 114 003c 7B88     		ldrh	r3, [r7, #2]
 115 003e 1846     		mov	r0, r3
 116 0040 FFF7FEFF 		bl	EEPROM_ReadByte
 117 0044 0346     		mov	r3, r0
 118 0046 162B     		cmp	r3, #22
 119 0048 02D9     		bls	.L4
 116:.\SirenState.c ****             {   //Terminate loop after finding first invalid tone
 117:.\SirenState.c ****                 bHasNoTone = true;
 120              		.loc 1 117 0
 121 004a 0123     		movs	r3, #1
 122 004c FB71     		strb	r3, [r7, #7]
 118:.\SirenState.c ****                 break;
 123              		.loc 1 118 0
 124 004e 05E0     		b	.L5
 125              	.L4:
 112:.\SirenState.c ****         {
 126              		.loc 1 112 0 discriminator 2
 127 0050 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 128 0052 0133     		adds	r3, r3, #1
 129 0054 7B71     		strb	r3, [r7, #5]
 130              	.L3:
 112:.\SirenState.c ****         {
 131              		.loc 1 112 0 is_stmt 0 discriminator 1
 132 0056 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 133 0058 052B     		cmp	r3, #5
 134 005a E4D9     		bls	.L6
 135              	.L5:
 110:.\SirenState.c ****     {   //Check for indices with no tone written to it
 136              		.loc 1 110 0 is_stmt 1 discriminator 2
 137 005c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 138 005e 0133     		adds	r3, r3, #1
 139 0060 BB71     		strb	r3, [r7, #6]
 140              	.L2:
 110:.\SirenState.c ****     {   //Check for indices with no tone written to it
 141              		.loc 1 110 0 is_stmt 0 discriminator 1
 142 0062 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 143 0064 012B     		cmp	r3, #1
 144 0066 DBD9     		bls	.L7
 119:.\SirenState.c ****             }
 120:.\SirenState.c ****         }
 121:.\SirenState.c ****     }
 122:.\SirenState.c ****     
 123:.\SirenState.c ****     if((bHasNoTone == true) || (EEPROM_ReadByte(EEPROM_KEY_INDEX) != EEPROM_KEY_VALUE))
 145              		.loc 1 123 0 is_stmt 1
 146 0068 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 147 006a 012B     		cmp	r3, #1
 148 006c 08D0     		beq	.L8
 149              		.loc 1 123 0 is_stmt 0 discriminator 1
 150 006e FF23     		movs	r3, #255
 151 0070 1846     		mov	r0, r3
 152 0072 FFF7FEFF 		bl	EEPROM_ReadByte
 153 0076 0346     		mov	r3, r0
 154 0078 1A46     		mov	r2, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 6


 155 007a AA23     		movs	r3, #170
 156 007c 9A42     		cmp	r2, r3
 157 007e 2CD0     		beq	.L9
 158              	.L8:
 124:.\SirenState.c ****     {   //Write to EEPROM 
 125:.\SirenState.c ****         EEPROM_UpdateTemperature(); //Optimizes write timings based on temperature reading 
 159              		.loc 1 125 0 is_stmt 1
 160 0080 FFF7FEFF 		bl	EEPROM_UpdateTemperature
 126:.\SirenState.c ****         
 127:.\SirenState.c ****         for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 161              		.loc 1 127 0
 162 0084 0023     		movs	r3, #0
 163 0086 BB71     		strb	r3, [r7, #6]
 164 0088 1EE0     		b	.L10
 165              	.L13:
 128:.\SirenState.c ****         {   //Obtain tones from EEPROM to configure channels
 129:.\SirenState.c ****             for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
 166              		.loc 1 129 0
 167 008a 0023     		movs	r3, #0
 168 008c 7B71     		strb	r3, [r7, #5]
 169 008e 15E0     		b	.L11
 170              	.L12:
 130:.\SirenState.c ****             {
 131:.\SirenState.c ****                 addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 171              		.loc 1 131 0 discriminator 3
 172 0090 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 173 0092 9BB2     		uxth	r3, r3
 174 0094 1A46     		mov	r2, r3	@ movhi
 175 0096 5200     		lsls	r2, r2, #1
 176 0098 1344     		add	r3, r3, r2
 177 009a 5B00     		lsls	r3, r3, #1
 178 009c 9AB2     		uxth	r2, r3
 179 009e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 180 00a0 9BB2     		uxth	r3, r3
 181 00a2 1344     		add	r3, r3, r2
 182 00a4 7B80     		strh	r3, [r7, #2]	@ movhi
 132:.\SirenState.c ****                 EEPROM_WriteByte(DEFAULT_CONFIGURATION_LIST[addressIndex], addressIndex);
 183              		.loc 1 132 0 discriminator 3
 184 00a6 7B88     		ldrh	r3, [r7, #2]
 185 00a8 244A     		ldr	r2, .L18
 186 00aa D25C     		ldrb	r2, [r2, r3]	@ zero_extendqisi2
 187 00ac 7B88     		ldrh	r3, [r7, #2]
 188 00ae 1046     		mov	r0, r2
 189 00b0 1946     		mov	r1, r3
 190 00b2 FFF7FEFF 		bl	EEPROM_WriteByte
 129:.\SirenState.c ****             {
 191              		.loc 1 129 0 discriminator 3
 192 00b6 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 193 00b8 0133     		adds	r3, r3, #1
 194 00ba 7B71     		strb	r3, [r7, #5]
 195              	.L11:
 129:.\SirenState.c ****             {
 196              		.loc 1 129 0 is_stmt 0 discriminator 1
 197 00bc 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 198 00be 052B     		cmp	r3, #5
 199 00c0 E6D9     		bls	.L12
 127:.\SirenState.c ****         {   //Obtain tones from EEPROM to configure channels
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 7


 200              		.loc 1 127 0 is_stmt 1 discriminator 2
 201 00c2 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 202 00c4 0133     		adds	r3, r3, #1
 203 00c6 BB71     		strb	r3, [r7, #6]
 204              	.L10:
 127:.\SirenState.c ****         {   //Obtain tones from EEPROM to configure channels
 205              		.loc 1 127 0 is_stmt 0 discriminator 1
 206 00c8 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 207 00ca 012B     		cmp	r3, #1
 208 00cc DDD9     		bls	.L13
 133:.\SirenState.c ****             }
 134:.\SirenState.c ****         }
 135:.\SirenState.c ****         
 136:.\SirenState.c ****         EEPROM_WriteByte(EEPROM_KEY_VALUE, EEPROM_KEY_INDEX);
 209              		.loc 1 136 0 is_stmt 1
 210 00ce AA22     		movs	r2, #170
 211 00d0 FF23     		movs	r3, #255
 212 00d2 1046     		mov	r0, r2
 213 00d4 1946     		mov	r1, r3
 214 00d6 FFF7FEFF 		bl	EEPROM_WriteByte
 215              	.L9:
 137:.\SirenState.c ****     }
 138:.\SirenState.c ****     
 139:.\SirenState.c ****     for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 216              		.loc 1 139 0
 217 00da 0023     		movs	r3, #0
 218 00dc BB71     		strb	r3, [r7, #6]
 219 00de 27E0     		b	.L14
 220              	.L17:
 140:.\SirenState.c ****     {   //Obtain tones from EEPROM to configure channels
 141:.\SirenState.c ****         for(channelIndex = 0; channelIndex < CHANNEL_COUNT_PER_SPEAKER; channelIndex++)
 221              		.loc 1 141 0
 222 00e0 0023     		movs	r3, #0
 223 00e2 7B71     		strb	r3, [r7, #5]
 224 00e4 1EE0     		b	.L15
 225              	.L16:
 142:.\SirenState.c ****         {
 143:.\SirenState.c ****             addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 226              		.loc 1 143 0 discriminator 3
 227 00e6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 228 00e8 9BB2     		uxth	r3, r3
 229 00ea 1A46     		mov	r2, r3	@ movhi
 230 00ec 5200     		lsls	r2, r2, #1
 231 00ee 1344     		add	r3, r3, r2
 232 00f0 5B00     		lsls	r3, r3, #1
 233 00f2 9AB2     		uxth	r2, r3
 234 00f4 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 235 00f6 9BB2     		uxth	r3, r3
 236 00f8 1344     		add	r3, r3, r2
 237 00fa 7B80     		strh	r3, [r7, #2]	@ movhi
 144:.\SirenState.c ****             toneConfigurationList[bSpeakerIndex][channelIndex] = EEPROM_ReadByte(addressIndex);
 238              		.loc 1 144 0 discriminator 3
 239 00fc BC79     		ldrb	r4, [r7, #6]	@ zero_extendqisi2
 240 00fe 7D79     		ldrb	r5, [r7, #5]	@ zero_extendqisi2
 241 0100 7B88     		ldrh	r3, [r7, #2]
 242 0102 1846     		mov	r0, r3
 243 0104 FFF7FEFF 		bl	EEPROM_ReadByte
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 8


 244 0108 0346     		mov	r3, r0
 245 010a 1946     		mov	r1, r3
 246 010c 0C4A     		ldr	r2, .L18+4
 247 010e 2346     		mov	r3, r4
 248 0110 5B00     		lsls	r3, r3, #1
 249 0112 2344     		add	r3, r3, r4
 250 0114 5B00     		lsls	r3, r3, #1
 251 0116 2B44     		add	r3, r3, r5
 252 0118 1344     		add	r3, r3, r2
 253 011a 0A46     		mov	r2, r1
 254 011c 1A70     		strb	r2, [r3]
 141:.\SirenState.c ****         {
 255              		.loc 1 141 0 discriminator 3
 256 011e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 257 0120 0133     		adds	r3, r3, #1
 258 0122 7B71     		strb	r3, [r7, #5]
 259              	.L15:
 141:.\SirenState.c ****         {
 260              		.loc 1 141 0 is_stmt 0 discriminator 1
 261 0124 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 262 0126 052B     		cmp	r3, #5
 263 0128 DDD9     		bls	.L16
 139:.\SirenState.c ****     {   //Obtain tones from EEPROM to configure channels
 264              		.loc 1 139 0 is_stmt 1 discriminator 2
 265 012a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 266 012c 0133     		adds	r3, r3, #1
 267 012e BB71     		strb	r3, [r7, #6]
 268              	.L14:
 139:.\SirenState.c ****     {   //Obtain tones from EEPROM to configure channels
 269              		.loc 1 139 0 is_stmt 0 discriminator 1
 270 0130 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 271 0132 012B     		cmp	r3, #1
 272 0134 D4D9     		bls	.L17
 145:.\SirenState.c ****         }
 146:.\SirenState.c ****     }
 147:.\SirenState.c **** }
 273              		.loc 1 147 0 is_stmt 1
 274 0136 0837     		adds	r7, r7, #8
 275              		.cfi_def_cfa_offset 16
 276 0138 BD46     		mov	sp, r7
 277              		.cfi_def_cfa_register 13
 278              		@ sp needed
 279 013a B0BD     		pop	{r4, r5, r7, pc}
 280              	.L19:
 281              		.align	2
 282              	.L18:
 283 013c 00000000 		.word	DEFAULT_CONFIGURATION_LIST
 284 0140 00000000 		.word	toneConfigurationList
 285              		.cfi_endproc
 286              	.LFE63:
 287              		.size	initializeToneConfigurationList, .-initializeToneConfigurationList
 288              		.section	.text.enableToneInputInterrupts,"ax",%progbits
 289              		.align	2
 290              		.global	enableToneInputInterrupts
 291              		.thumb
 292              		.thumb_func
 293              		.type	enableToneInputInterrupts, %function
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 9


 294              	enableToneInputInterrupts:
 295              	.LFB64:
 148:.\SirenState.c **** 
 149:.\SirenState.c **** /*******************************************************************************
 150:.\SirenState.c **** * Function Name: enableToneInputInterrupts
 151:.\SirenState.c **** ********************************************************************************
 152:.\SirenState.c **** *
 153:.\SirenState.c **** * Summary:
 154:.\SirenState.c **** *   Enables the input interrupts that cannot be activated during Data Link
 155:.\SirenState.c **** *
 156:.\SirenState.c **** * Parameters:  
 157:.\SirenState.c **** *   None
 158:.\SirenState.c **** *
 159:.\SirenState.c **** * Return:
 160:.\SirenState.c **** *   None
 161:.\SirenState.c **** *
 162:.\SirenState.c **** *******************************************************************************/
 163:.\SirenState.c **** void enableToneInputInterrupts(void)
 164:.\SirenState.c **** {
 296              		.loc 1 164 0
 297              		.cfi_startproc
 298              		@ args = 0, pretend = 0, frame = 0
 299              		@ frame_needed = 1, uses_anonymous_args = 0
 300 0000 80B5     		push	{r7, lr}
 301              		.cfi_def_cfa_offset 8
 302              		.cfi_offset 7, -8
 303              		.cfi_offset 14, -4
 304 0002 00AF     		add	r7, sp, #0
 305              		.cfi_def_cfa_register 7
 165:.\SirenState.c ****     TackSwitchISR_Start();
 306              		.loc 1 165 0
 307 0004 FFF7FEFF 		bl	TackSwitchISR_Start
 166:.\SirenState.c ****     TackSwitchStatus_InterruptEnable();
 308              		.loc 1 166 0
 309 0008 FFF7FEFF 		bl	TackSwitchStatus_InterruptEnable
 167:.\SirenState.c ****     
 168:.\SirenState.c ****     DualDelayISR_Start();
 310              		.loc 1 168 0
 311 000c FFF7FEFF 		bl	DualDelayISR_Start
 169:.\SirenState.c ****     DualDelayStatus_InterruptEnable();
 312              		.loc 1 169 0
 313 0010 FFF7FEFF 		bl	DualDelayStatus_InterruptEnable
 170:.\SirenState.c ****     
 171:.\SirenState.c ****     ModeStatusISR_Start();
 314              		.loc 1 171 0
 315 0014 FFF7FEFF 		bl	ModeStatusISR_Start
 172:.\SirenState.c **** }
 316              		.loc 1 172 0
 317 0018 80BD     		pop	{r7, pc}
 318              		.cfi_endproc
 319              	.LFE64:
 320              		.size	enableToneInputInterrupts, .-enableToneInputInterrupts
 321 001a 00BF     		.section	.text.disableToneInputInterrupts,"ax",%progbits
 322              		.align	2
 323              		.global	disableToneInputInterrupts
 324              		.thumb
 325              		.thumb_func
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 10


 326              		.type	disableToneInputInterrupts, %function
 327              	disableToneInputInterrupts:
 328              	.LFB65:
 173:.\SirenState.c **** 
 174:.\SirenState.c **** /*******************************************************************************
 175:.\SirenState.c **** * Function Name: disableToneInputInterrupts
 176:.\SirenState.c **** ********************************************************************************
 177:.\SirenState.c **** *
 178:.\SirenState.c **** * Summary:
 179:.\SirenState.c **** *   Disables specific input interrupts that cannot be activated during Data Link
 180:.\SirenState.c **** *
 181:.\SirenState.c **** * Parameters:  
 182:.\SirenState.c **** *   None
 183:.\SirenState.c **** *
 184:.\SirenState.c **** * Return:
 185:.\SirenState.c **** *   None
 186:.\SirenState.c **** *
 187:.\SirenState.c **** *******************************************************************************/
 188:.\SirenState.c **** void disableToneInputInterrupts(void)
 189:.\SirenState.c **** {
 329              		.loc 1 189 0
 330              		.cfi_startproc
 331              		@ args = 0, pretend = 0, frame = 0
 332              		@ frame_needed = 1, uses_anonymous_args = 0
 333 0000 80B5     		push	{r7, lr}
 334              		.cfi_def_cfa_offset 8
 335              		.cfi_offset 7, -8
 336              		.cfi_offset 14, -4
 337 0002 00AF     		add	r7, sp, #0
 338              		.cfi_def_cfa_register 7
 190:.\SirenState.c ****     TackSwitchStatus_InterruptDisable();
 339              		.loc 1 190 0
 340 0004 FFF7FEFF 		bl	TackSwitchStatus_InterruptDisable
 191:.\SirenState.c ****     TackSwitchISR_Stop();
 341              		.loc 1 191 0
 342 0008 FFF7FEFF 		bl	TackSwitchISR_Stop
 192:.\SirenState.c ****     
 193:.\SirenState.c ****     DualDelayStatus_InterruptDisable();
 343              		.loc 1 193 0
 344 000c FFF7FEFF 		bl	DualDelayStatus_InterruptDisable
 194:.\SirenState.c ****     DualDelayISR_Stop();
 345              		.loc 1 194 0
 346 0010 FFF7FEFF 		bl	DualDelayISR_Stop
 195:.\SirenState.c ****     
 196:.\SirenState.c ****     ModeStatusISR_Stop();
 347              		.loc 1 196 0
 348 0014 FFF7FEFF 		bl	ModeStatusISR_Stop
 197:.\SirenState.c **** }
 349              		.loc 1 197 0
 350 0018 80BD     		pop	{r7, pc}
 351              		.cfi_endproc
 352              	.LFE65:
 353              		.size	disableToneInputInterrupts, .-disableToneInputInterrupts
 354 001a 00BF     		.section	.text.initializeInputReadings,"ax",%progbits
 355              		.align	2
 356              		.global	initializeInputReadings
 357              		.thumb
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 11


 358              		.thumb_func
 359              		.type	initializeInputReadings, %function
 360              	initializeInputReadings:
 361              	.LFB66:
 198:.\SirenState.c **** 
 199:.\SirenState.c **** /*******************************************************************************
 200:.\SirenState.c **** * Function Name: initializeInputReadings
 201:.\SirenState.c **** ********************************************************************************
 202:.\SirenState.c **** *
 203:.\SirenState.c **** * Summary:
 204:.\SirenState.c **** *  Sets InputRead struct to current input readings at the beginning of the program
 205:.\SirenState.c **** *
 206:.\SirenState.c **** * Parameters:  
 207:.\SirenState.c **** *   None
 208:.\SirenState.c **** *
 209:.\SirenState.c **** * Return:
 210:.\SirenState.c **** *   None
 211:.\SirenState.c **** *
 212:.\SirenState.c **** *******************************************************************************/
 213:.\SirenState.c **** void initializeInputReadings(void)
 214:.\SirenState.c **** {
 362              		.loc 1 214 0
 363              		.cfi_startproc
 364              		@ args = 0, pretend = 0, frame = 8
 365              		@ frame_needed = 1, uses_anonymous_args = 0
 366 0000 90B5     		push	{r4, r7, lr}
 367              		.cfi_def_cfa_offset 12
 368              		.cfi_offset 4, -12
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 83B0     		sub	sp, sp, #12
 372              		.cfi_def_cfa_offset 24
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 215:.\SirenState.c **** 	uint8 speakerIndex = 0;
 375              		.loc 1 215 0
 376 0006 0023     		movs	r3, #0
 377 0008 FB71     		strb	r3, [r7, #7]
 216:.\SirenState.c **** 	
 217:.\SirenState.c ****     InputRead.bRadioAndMicKey = RadioRebroadcastInput_Read();
 378              		.loc 1 217 0
 379 000a FFF7FEFF 		bl	RadioRebroadcastInput_Read
 380 000e 0346     		mov	r3, r0
 381 0010 1A46     		mov	r2, r3
 382 0012 1A4B     		ldr	r3, .L25
 383 0014 1A70     		strb	r2, [r3]
 218:.\SirenState.c ****     InputRead.bRadioAndMicKey |= MicKeyInput_Read();
 384              		.loc 1 218 0
 385 0016 FFF7FEFF 		bl	MicKeyInput_Read
 386 001a 0346     		mov	r3, r0
 387 001c 1A46     		mov	r2, r3
 388 001e 174B     		ldr	r3, .L25
 389 0020 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 390 0022 1343     		orrs	r3, r3, r2
 391 0024 DAB2     		uxtb	r2, r3
 392 0026 154B     		ldr	r3, .L25
 393 0028 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 12


 219:.\SirenState.c ****     InputRead.bParkKill = ParkKillStatus_Read() & 0x01;
 394              		.loc 1 219 0
 395 002a FFF7FEFF 		bl	ParkKillStatus_Read
 396 002e 0346     		mov	r3, r0
 397 0030 03F00103 		and	r3, r3, #1
 398 0034 DAB2     		uxtb	r2, r3
 399 0036 114B     		ldr	r3, .L25
 400 0038 5A70     		strb	r2, [r3, #1]
 220:.\SirenState.c ****     InputRead.bHornRing = HornRingStatus_Read() & 0x01;
 401              		.loc 1 220 0
 402 003a FFF7FEFF 		bl	HornRingStatus_Read
 403 003e 0346     		mov	r3, r0
 404 0040 03F00103 		and	r3, r3, #1
 405 0044 DAB2     		uxtb	r2, r3
 406 0046 0D4B     		ldr	r3, .L25
 407 0048 DA70     		strb	r2, [r3, #3]
 221:.\SirenState.c **** 	
 222:.\SirenState.c **** 	for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 408              		.loc 1 222 0
 409 004a 0023     		movs	r3, #0
 410 004c FB71     		strb	r3, [r7, #7]
 411 004e 0CE0     		b	.L23
 412              	.L24:
 223:.\SirenState.c **** 		InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 413              		.loc 1 223 0 discriminator 3
 414 0050 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 415 0052 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 416 0054 1846     		mov	r0, r3
 417 0056 FFF7FEFF 		bl	getHighestPriorityChannel
 418 005a 0346     		mov	r3, r0
 419 005c 1A46     		mov	r2, r3
 420 005e 074B     		ldr	r3, .L25
 421 0060 2344     		add	r3, r3, r4
 422 0062 5A71     		strb	r2, [r3, #5]
 222:.\SirenState.c **** 		InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 423              		.loc 1 222 0 discriminator 3
 424 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 425 0066 0133     		adds	r3, r3, #1
 426 0068 FB71     		strb	r3, [r7, #7]
 427              	.L23:
 222:.\SirenState.c **** 		InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 428              		.loc 1 222 0 is_stmt 0 discriminator 1
 429 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 430 006c 012B     		cmp	r3, #1
 431 006e EFD9     		bls	.L24
 224:.\SirenState.c ****     
 225:.\SirenState.c ****     decideTonesToPlay();
 432              		.loc 1 225 0 is_stmt 1
 433 0070 FFF7FEFF 		bl	decideTonesToPlay
 226:.\SirenState.c **** }
 434              		.loc 1 226 0
 435 0074 0C37     		adds	r7, r7, #12
 436              		.cfi_def_cfa_offset 12
 437 0076 BD46     		mov	sp, r7
 438              		.cfi_def_cfa_register 13
 439              		@ sp needed
 440 0078 90BD     		pop	{r4, r7, pc}
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 13


 441              	.L26:
 442 007a 00BF     		.align	2
 443              	.L25:
 444 007c 0C000000 		.word	InputRead
 445              		.cfi_endproc
 446              	.LFE66:
 447              		.size	initializeInputReadings, .-initializeInputReadings
 448              		.section	.text.processTackSwitchRoutine,"ax",%progbits
 449              		.align	2
 450              		.global	processTackSwitchRoutine
 451              		.thumb
 452              		.thumb_func
 453              		.type	processTackSwitchRoutine, %function
 454              	processTackSwitchRoutine:
 455              	.LFB67:
 227:.\SirenState.c **** 
 228:.\SirenState.c **** /*******************************************************************************
 229:.\SirenState.c **** * Function Name: processTackSwitchRoutine
 230:.\SirenState.c **** ********************************************************************************
 231:.\SirenState.c **** *
 232:.\SirenState.c **** * Summary:
 233:.\SirenState.c **** *  Cycles through the tones and configures the tone selection for the specified
 234:.\SirenState.c **** *  input, called in TackSwitchISR
 235:.\SirenState.c **** *
 236:.\SirenState.c **** * Parameters:  
 237:.\SirenState.c **** *   None
 238:.\SirenState.c **** *
 239:.\SirenState.c **** * Return:
 240:.\SirenState.c **** *   None
 241:.\SirenState.c **** *
 242:.\SirenState.c **** *******************************************************************************/
 243:.\SirenState.c **** void processTackSwitchRoutine(void)
 244:.\SirenState.c **** {
 456              		.loc 1 244 0
 457              		.cfi_startproc
 458              		@ args = 0, pretend = 0, frame = 8
 459              		@ frame_needed = 1, uses_anonymous_args = 0
 460 0000 80B5     		push	{r7, lr}
 461              		.cfi_def_cfa_offset 8
 462              		.cfi_offset 7, -8
 463              		.cfi_offset 14, -4
 464 0002 82B0     		sub	sp, sp, #8
 465              		.cfi_def_cfa_offset 16
 466 0004 00AF     		add	r7, sp, #0
 467              		.cfi_def_cfa_register 7
 245:.\SirenState.c ****     enum ToneType toneToPlay = NO_TONE;
 468              		.loc 1 245 0
 469 0006 0023     		movs	r3, #0
 470 0008 FB71     		strb	r3, [r7, #7]
 246:.\SirenState.c ****     uint16 addressIndex = 0;
 471              		.loc 1 246 0
 472 000a 0023     		movs	r3, #0
 473 000c BB80     		strh	r3, [r7, #4]	@ movhi
 247:.\SirenState.c ****     uint8 channelIndex = 0;
 474              		.loc 1 247 0
 475 000e 0023     		movs	r3, #0
 476 0010 FB70     		strb	r3, [r7, #3]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 14


 248:.\SirenState.c ****     uint8 bSpeakerIndex = 0;
 477              		.loc 1 248 0
 478 0012 0023     		movs	r3, #0
 479 0014 BB71     		strb	r3, [r7, #6]
 249:.\SirenState.c ****     
 250:.\SirenState.c ****     InputRead.bTackSwitch = TackSwitchStatus_Read() & 0x01;
 480              		.loc 1 250 0
 481 0016 FFF7FEFF 		bl	TackSwitchStatus_Read
 482 001a 0346     		mov	r3, r0
 483 001c 03F00103 		and	r3, r3, #1
 484 0020 DAB2     		uxtb	r2, r3
 485 0022 3D4B     		ldr	r3, .L34
 486 0024 9A70     		strb	r2, [r3, #2]
 251:.\SirenState.c ****     
 252:.\SirenState.c ****     if((!InputRead.bRadioAndMicKey) && (!InputRead.bParkKill))
 487              		.loc 1 252 0
 488 0026 3C4B     		ldr	r3, .L34
 489 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 490 002a 002B     		cmp	r3, #0
 491 002c 70D1     		bne	.L27
 492              		.loc 1 252 0 is_stmt 0 discriminator 1
 493 002e 3A4B     		ldr	r3, .L34
 494 0030 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 495 0032 002B     		cmp	r3, #0
 496 0034 6CD1     		bne	.L27
 253:.\SirenState.c ****     {
 254:.\SirenState.c ****         if(InputRead.bTackSwitch)
 497              		.loc 1 254 0 is_stmt 1
 498 0036 384B     		ldr	r3, .L34
 499 0038 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 500 003a 002B     		cmp	r3, #0
 501 003c 06D0     		beq	.L29
 255:.\SirenState.c ****         {
 256:.\SirenState.c ****             deactivateManualWail();
 502              		.loc 1 256 0
 503 003e FFF7FEFF 		bl	deactivateManualWail
 257:.\SirenState.c **** 	        deactivateAudio();
 504              		.loc 1 257 0
 505 0042 FFF7FEFF 		bl	deactivateAudio
 258:.\SirenState.c **** 			disableAudioAndPWM();
 506              		.loc 1 258 0
 507 0046 FFF7FEFF 		bl	disableAudioAndPWM
 508 004a 61E0     		b	.L27
 509              	.L29:
 259:.\SirenState.c ****         }
 260:.\SirenState.c ****         else
 261:.\SirenState.c ****         {   //Tack switch is disabled
 262:.\SirenState.c ****             EEPROM_UpdateTemperature(); //Optimizes write timings based on temperature reading
 510              		.loc 1 262 0
 511 004c FFF7FEFF 		bl	EEPROM_UpdateTemperature
 263:.\SirenState.c ****             
 264:.\SirenState.c ****             for(bSpeakerIndex = 0; bSpeakerIndex < SPEAKER_COUNT; bSpeakerIndex++)
 512              		.loc 1 264 0
 513 0050 0023     		movs	r3, #0
 514 0052 BB71     		strb	r3, [r7, #6]
 515 0054 57E0     		b	.L30
 516              	.L33:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 15


 265:.\SirenState.c ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 266:.\SirenState.c ****                 channelIndex = InputRead.highestPriorityChannel[bSpeakerIndex];
 517              		.loc 1 266 0
 518 0056 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 519 0058 2F4A     		ldr	r2, .L34
 520 005a 1344     		add	r3, r3, r2
 521 005c 5B79     		ldrb	r3, [r3, #5]
 522 005e FB70     		strb	r3, [r7, #3]
 267:.\SirenState.c ****                 addressIndex = (uint16)(CHANNEL_COUNT_PER_SPEAKER * bSpeakerIndex + channelIndex);
 523              		.loc 1 267 0
 524 0060 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 525 0062 9BB2     		uxth	r3, r3
 526 0064 1A46     		mov	r2, r3	@ movhi
 527 0066 5200     		lsls	r2, r2, #1
 528 0068 1344     		add	r3, r3, r2
 529 006a 5B00     		lsls	r3, r3, #1
 530 006c 9AB2     		uxth	r2, r3
 531 006e FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 532 0070 9BB2     		uxth	r3, r3
 533 0072 1344     		add	r3, r3, r2
 534 0074 BB80     		strh	r3, [r7, #4]	@ movhi
 268:.\SirenState.c ****                 
 269:.\SirenState.c ****                 if(channelIndex != NO_CHANNEL)
 535              		.loc 1 269 0
 536 0076 FB78     		ldrb	r3, [r7, #3]	@ zero_extendqisi2
 537 0078 FF2B     		cmp	r3, #255
 538 007a 41D0     		beq	.L31
 270:.\SirenState.c ****                 {
 271:.\SirenState.c ****                     if(toneToPlay == NO_TONE)
 539              		.loc 1 271 0
 540 007c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 541 007e 002B     		cmp	r3, #0
 542 0080 1CD1     		bne	.L32
 272:.\SirenState.c ****                     {   //Gets original tone for that channel as starting tone in the list         
 273:.\SirenState.c ****                         toneToPlay = EEPROM_ReadByte(addressIndex);    
 543              		.loc 1 273 0
 544 0082 BB88     		ldrh	r3, [r7, #4]
 545 0084 1846     		mov	r0, r3
 546 0086 FFF7FEFF 		bl	EEPROM_ReadByte
 547 008a 0346     		mov	r3, r0
 548 008c FB71     		strb	r3, [r7, #7]
 274:.\SirenState.c ****                         toneToPlay = (toneToPlay + 1) % TONE_TYPE_LIST_SIZE;  //Increments to next 
 549              		.loc 1 274 0
 550 008e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 551 0090 5A1C     		adds	r2, r3, #1
 552 0092 224B     		ldr	r3, .L34+4
 553 0094 82FB0301 		smull	r0, r1, r2, r3
 554 0098 5318     		adds	r3, r2, r1
 555 009a 1911     		asrs	r1, r3, #4
 556 009c D317     		asrs	r3, r2, #31
 557 009e C91A     		subs	r1, r1, r3
 558 00a0 0B46     		mov	r3, r1
 559 00a2 5B00     		lsls	r3, r3, #1
 560 00a4 0B44     		add	r3, r3, r1
 561 00a6 DB00     		lsls	r3, r3, #3
 562 00a8 5B1A     		subs	r3, r3, r1
 563 00aa D11A     		subs	r1, r2, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 16


 564 00ac 0B46     		mov	r3, r1
 565 00ae FB71     		strb	r3, [r7, #7]
 275:.\SirenState.c ****                         
 276:.\SirenState.c ****                         if(toneToPlay == NO_TONE)
 566              		.loc 1 276 0
 567 00b0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 568 00b2 002B     		cmp	r3, #0
 569 00b4 02D1     		bne	.L32
 277:.\SirenState.c ****                             toneToPlay++;  //Makes sure a tone is always selected
 570              		.loc 1 277 0
 571 00b6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 572 00b8 0133     		adds	r3, r3, #1
 573 00ba FB71     		strb	r3, [r7, #7]
 574              	.L32:
 278:.\SirenState.c ****                     }
 279:.\SirenState.c ****                     
 280:.\SirenState.c ****                     EEPROM_WriteByte(toneToPlay, addressIndex);
 575              		.loc 1 280 0
 576 00bc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 577 00be BB88     		ldrh	r3, [r7, #4]
 578 00c0 1046     		mov	r0, r2
 579 00c2 1946     		mov	r1, r3
 580 00c4 FFF7FEFF 		bl	EEPROM_WriteByte
 281:.\SirenState.c **** 					toneConfigurationList[bSpeakerIndex][channelIndex] = toneToPlay;
 581              		.loc 1 281 0
 582 00c8 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 583 00ca F978     		ldrb	r1, [r7, #3]	@ zero_extendqisi2
 584 00cc 1448     		ldr	r0, .L34+8
 585 00ce 1346     		mov	r3, r2
 586 00d0 5B00     		lsls	r3, r3, #1
 587 00d2 1344     		add	r3, r3, r2
 588 00d4 5B00     		lsls	r3, r3, #1
 589 00d6 0B44     		add	r3, r3, r1
 590 00d8 0344     		add	r3, r3, r0
 591 00da FA79     		ldrb	r2, [r7, #7]
 592 00dc 1A70     		strb	r2, [r3]
 282:.\SirenState.c **** 					ToneStatus.previousTone[bSpeakerIndex] = ToneStatus.currentTone[bSpeakerIndex];
 593              		.loc 1 282 0
 594 00de BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 595 00e0 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 596 00e2 1049     		ldr	r1, .L34+12
 597 00e4 0A44     		add	r2, r2, r1
 598 00e6 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 599 00e8 0E4A     		ldr	r2, .L34+12
 600 00ea D154     		strb	r1, [r2, r3]
 283:.\SirenState.c **** 					ToneStatus.currentTone[bSpeakerIndex] = toneToPlay;
 601              		.loc 1 283 0
 602 00ec BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 603 00ee 0D4A     		ldr	r2, .L34+12
 604 00f0 1344     		add	r3, r3, r2
 605 00f2 FA79     		ldrb	r2, [r7, #7]
 606 00f4 9A70     		strb	r2, [r3, #2]
 284:.\SirenState.c **** 					ToneStatus.bRisingEdge[bSpeakerIndex] = true;
 607              		.loc 1 284 0
 608 00f6 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 609 00f8 0A4A     		ldr	r2, .L34+12
 610 00fa 1344     		add	r3, r3, r2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 17


 611 00fc 0122     		movs	r2, #1
 612 00fe 1A71     		strb	r2, [r3, #4]
 613              	.L31:
 264:.\SirenState.c ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 614              		.loc 1 264 0 discriminator 2
 615 0100 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 616 0102 0133     		adds	r3, r3, #1
 617 0104 BB71     		strb	r3, [r7, #6]
 618              	.L30:
 264:.\SirenState.c ****             {   //Speaker 1 addresses range 0x00 to 0x05, Speaker 2 addresses range 0x06 to 0x0B 
 619              		.loc 1 264 0 is_stmt 0 discriminator 1
 620 0106 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 621 0108 012B     		cmp	r3, #1
 622 010a A4D9     		bls	.L33
 285:.\SirenState.c ****                 }
 286:.\SirenState.c ****             }
 287:.\SirenState.c ****             
 288:.\SirenState.c ****             decideTonesToPlay();  
 623              		.loc 1 288 0 is_stmt 1
 624 010c FFF7FEFF 		bl	decideTonesToPlay
 625              	.L27:
 289:.\SirenState.c ****         }
 290:.\SirenState.c ****     }
 291:.\SirenState.c **** }
 626              		.loc 1 291 0
 627 0110 0837     		adds	r7, r7, #8
 628              		.cfi_def_cfa_offset 8
 629 0112 BD46     		mov	sp, r7
 630              		.cfi_def_cfa_register 13
 631              		@ sp needed
 632 0114 80BD     		pop	{r7, pc}
 633              	.L35:
 634 0116 00BF     		.align	2
 635              	.L34:
 636 0118 0C000000 		.word	InputRead
 637 011c C94216B2 		.word	-1307163959
 638 0120 00000000 		.word	toneConfigurationList
 639 0124 14000000 		.word	ToneStatus
 640              		.cfi_endproc
 641              	.LFE67:
 642              		.size	processTackSwitchRoutine, .-processTackSwitchRoutine
 643              		.section	.text.processRadioMicKeyRoutine,"ax",%progbits
 644              		.align	2
 645              		.global	processRadioMicKeyRoutine
 646              		.thumb
 647              		.thumb_func
 648              		.type	processRadioMicKeyRoutine, %function
 649              	processRadioMicKeyRoutine:
 650              	.LFB68:
 292:.\SirenState.c **** 
 293:.\SirenState.c **** /*******************************************************************************
 294:.\SirenState.c **** * Function Name: processRadioMicKeyRoutine
 295:.\SirenState.c **** ********************************************************************************
 296:.\SirenState.c **** *
 297:.\SirenState.c **** * Summary:
 298:.\SirenState.c **** *  Updates the siren system for the radio rebroadcast or mic key input change,
 299:.\SirenState.c **** *  called in RadioMicKeyISR
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 18


 300:.\SirenState.c **** *
 301:.\SirenState.c **** * Parameters:  
 302:.\SirenState.c **** *   None
 303:.\SirenState.c **** *
 304:.\SirenState.c **** * Return:
 305:.\SirenState.c **** *   None
 306:.\SirenState.c **** *
 307:.\SirenState.c **** *******************************************************************************/
 308:.\SirenState.c **** void processRadioMicKeyRoutine(void)
 309:.\SirenState.c **** {
 651              		.loc 1 309 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 8
 654              		@ frame_needed = 1, uses_anonymous_args = 0
 655 0000 80B5     		push	{r7, lr}
 656              		.cfi_def_cfa_offset 8
 657              		.cfi_offset 7, -8
 658              		.cfi_offset 14, -4
 659 0002 82B0     		sub	sp, sp, #8
 660              		.cfi_def_cfa_offset 16
 661 0004 00AF     		add	r7, sp, #0
 662              		.cfi_def_cfa_register 7
 310:.\SirenState.c **** 	uint8 speakerIndex = 0;
 663              		.loc 1 310 0
 664 0006 0023     		movs	r3, #0
 665 0008 FB71     		strb	r3, [r7, #7]
 311:.\SirenState.c **** 	
 312:.\SirenState.c ****     InputRead.bRadioAndMicKey = RadioRebroadcastInput_Read() ||  MicKeyInput_Read();
 666              		.loc 1 312 0
 667 000a FFF7FEFF 		bl	RadioRebroadcastInput_Read
 668 000e 0346     		mov	r3, r0
 669 0010 002B     		cmp	r3, #0
 670 0012 04D1     		bne	.L37
 671              		.loc 1 312 0 is_stmt 0 discriminator 2
 672 0014 FFF7FEFF 		bl	MicKeyInput_Read
 673 0018 0346     		mov	r3, r0
 674 001a 002B     		cmp	r3, #0
 675 001c 01D0     		beq	.L38
 676              	.L37:
 677              		.loc 1 312 0 discriminator 3
 678 001e 0123     		movs	r3, #1
 679 0020 00E0     		b	.L39
 680              	.L38:
 681              		.loc 1 312 0 discriminator 4
 682 0022 0023     		movs	r3, #0
 683              	.L39:
 684              		.loc 1 312 0 discriminator 6
 685 0024 DAB2     		uxtb	r2, r3
 686 0026 164B     		ldr	r3, .L44
 687 0028 1A70     		strb	r2, [r3]
 313:.\SirenState.c ****     
 314:.\SirenState.c ****     if(InputRead.bRadioAndMicKey)
 688              		.loc 1 314 0 is_stmt 1 discriminator 6
 689 002a 154B     		ldr	r3, .L44
 690 002c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 691 002e 002B     		cmp	r3, #0
 692 0030 20D0     		beq	.L40
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 19


 315:.\SirenState.c ****     {
 316:.\SirenState.c **** 		deactivateManualWail(); //Deactivate tones and leave one power amp on
 693              		.loc 1 316 0
 694 0032 FFF7FEFF 		bl	deactivateManualWail
 317:.\SirenState.c ****         deactivateAudio();
 695              		.loc 1 317 0
 696 0036 FFF7FEFF 		bl	deactivateAudio
 318:.\SirenState.c **** 		PowerAmpOutput1_Write(true);
 697              		.loc 1 318 0
 698 003a 0120     		movs	r0, #1
 699 003c FFF7FEFF 		bl	PowerAmpOutput1_Write
 319:.\SirenState.c ****         PowerAmpOutput2_Write(false);
 700              		.loc 1 319 0
 701 0040 0020     		movs	r0, #0
 702 0042 FFF7FEFF 		bl	PowerAmpOutput2_Write
 320:.\SirenState.c **** 		
 321:.\SirenState.c **** 		for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 703              		.loc 1 321 0
 704 0046 0023     		movs	r3, #0
 705 0048 FB71     		strb	r3, [r7, #7]
 706 004a 0FE0     		b	.L41
 707              	.L42:
 322:.\SirenState.c **** 		{
 323:.\SirenState.c **** 			stopPWMTone(speakerIndex);
 708              		.loc 1 323 0 discriminator 3
 709 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 710 004e 1846     		mov	r0, r3
 711 0050 FFF7FEFF 		bl	stopPWMTone
 324:.\SirenState.c **** 			stopAudioTone(speakerIndex);
 712              		.loc 1 324 0 discriminator 3
 713 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 714 0056 1846     		mov	r0, r3
 715 0058 FFF7FEFF 		bl	stopAudioTone
 325:.\SirenState.c ****             ToneStatus.bRisingEdge[speakerIndex] = false;
 716              		.loc 1 325 0 discriminator 3
 717 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 718 005e 094A     		ldr	r2, .L44+4
 719 0060 1344     		add	r3, r3, r2
 720 0062 0022     		movs	r2, #0
 721 0064 1A71     		strb	r2, [r3, #4]
 321:.\SirenState.c **** 		{
 722              		.loc 1 321 0 discriminator 3
 723 0066 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 724 0068 0133     		adds	r3, r3, #1
 725 006a FB71     		strb	r3, [r7, #7]
 726              	.L41:
 321:.\SirenState.c **** 		{
 727              		.loc 1 321 0 is_stmt 0 discriminator 1
 728 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 729 006e 012B     		cmp	r3, #1
 730 0070 ECD9     		bls	.L42
 731 0072 01E0     		b	.L36
 732              	.L40:
 326:.\SirenState.c **** 		}
 327:.\SirenState.c ****     }
 328:.\SirenState.c **** 	else
 329:.\SirenState.c **** 		decideTonesToPlay();
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 20


 733              		.loc 1 329 0 is_stmt 1
 734 0074 FFF7FEFF 		bl	decideTonesToPlay
 735              	.L36:
 330:.\SirenState.c **** }
 736              		.loc 1 330 0
 737 0078 0837     		adds	r7, r7, #8
 738              		.cfi_def_cfa_offset 8
 739 007a BD46     		mov	sp, r7
 740              		.cfi_def_cfa_register 13
 741              		@ sp needed
 742 007c 80BD     		pop	{r7, pc}
 743              	.L45:
 744 007e 00BF     		.align	2
 745              	.L44:
 746 0080 0C000000 		.word	InputRead
 747 0084 14000000 		.word	ToneStatus
 748              		.cfi_endproc
 749              	.LFE68:
 750              		.size	processRadioMicKeyRoutine, .-processRadioMicKeyRoutine
 751              		.section	.text.processParkKillRoutine,"ax",%progbits
 752              		.align	2
 753              		.global	processParkKillRoutine
 754              		.thumb
 755              		.thumb_func
 756              		.type	processParkKillRoutine, %function
 757              	processParkKillRoutine:
 758              	.LFB69:
 331:.\SirenState.c **** 
 332:.\SirenState.c **** /*******************************************************************************
 333:.\SirenState.c **** * Function Name: processParkKillRoutine
 334:.\SirenState.c **** ********************************************************************************
 335:.\SirenState.c **** *
 336:.\SirenState.c **** * Summary:
 337:.\SirenState.c **** *  Updates the siren system for the park kill input change, called in ParkKillISR
 338:.\SirenState.c **** *
 339:.\SirenState.c **** * Parameters:  
 340:.\SirenState.c **** *   None
 341:.\SirenState.c **** *
 342:.\SirenState.c **** * Return:
 343:.\SirenState.c **** *   None
 344:.\SirenState.c **** *
 345:.\SirenState.c **** *******************************************************************************/
 346:.\SirenState.c **** void processParkKillRoutine(void)
 347:.\SirenState.c **** {
 759              		.loc 1 347 0
 760              		.cfi_startproc
 761              		@ args = 0, pretend = 0, frame = 0
 762              		@ frame_needed = 1, uses_anonymous_args = 0
 763 0000 80B5     		push	{r7, lr}
 764              		.cfi_def_cfa_offset 8
 765              		.cfi_offset 7, -8
 766              		.cfi_offset 14, -4
 767 0002 00AF     		add	r7, sp, #0
 768              		.cfi_def_cfa_register 7
 348:.\SirenState.c ****     InputRead.bParkKill = ParkKillStatus_Read() & 0x01;    
 769              		.loc 1 348 0
 770 0004 FFF7FEFF 		bl	ParkKillStatus_Read
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 21


 771 0008 0346     		mov	r3, r0
 772 000a 03F00103 		and	r3, r3, #1
 773 000e DAB2     		uxtb	r2, r3
 774 0010 024B     		ldr	r3, .L47
 775 0012 5A70     		strb	r2, [r3, #1]
 349:.\SirenState.c ****     decideTonesToPlay();
 776              		.loc 1 349 0
 777 0014 FFF7FEFF 		bl	decideTonesToPlay
 350:.\SirenState.c **** }
 778              		.loc 1 350 0
 779 0018 80BD     		pop	{r7, pc}
 780              	.L48:
 781 001a 00BF     		.align	2
 782              	.L47:
 783 001c 0C000000 		.word	InputRead
 784              		.cfi_endproc
 785              	.LFE69:
 786              		.size	processParkKillRoutine, .-processParkKillRoutine
 787              		.section	.text.processHornRingRoutine,"ax",%progbits
 788              		.align	2
 789              		.global	processHornRingRoutine
 790              		.thumb
 791              		.thumb_func
 792              		.type	processHornRingRoutine, %function
 793              	processHornRingRoutine:
 794              	.LFB70:
 351:.\SirenState.c **** 
 352:.\SirenState.c **** /*******************************************************************************
 353:.\SirenState.c **** * Function Name: processHornRingRoutine
 354:.\SirenState.c **** ********************************************************************************
 355:.\SirenState.c **** *
 356:.\SirenState.c **** * Summary:
 357:.\SirenState.c **** *  Updates the siren system for the horn input change, called in HornRingISR
 358:.\SirenState.c **** *
 359:.\SirenState.c **** * Parameters:  
 360:.\SirenState.c **** *   None
 361:.\SirenState.c **** *
 362:.\SirenState.c **** * Return:
 363:.\SirenState.c **** *   None
 364:.\SirenState.c **** *
 365:.\SirenState.c **** *******************************************************************************/
 366:.\SirenState.c **** void processHornRingRoutine(void)
 367:.\SirenState.c **** {
 795              		.loc 1 367 0
 796              		.cfi_startproc
 797              		@ args = 0, pretend = 0, frame = 0
 798              		@ frame_needed = 1, uses_anonymous_args = 0
 799 0000 80B5     		push	{r7, lr}
 800              		.cfi_def_cfa_offset 8
 801              		.cfi_offset 7, -8
 802              		.cfi_offset 14, -4
 803 0002 00AF     		add	r7, sp, #0
 804              		.cfi_def_cfa_register 7
 368:.\SirenState.c ****     InputRead.bHornRing = HornRingStatus_Read() & 0x01;
 805              		.loc 1 368 0
 806 0004 FFF7FEFF 		bl	HornRingStatus_Read
 807 0008 0346     		mov	r3, r0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 22


 808 000a 03F00103 		and	r3, r3, #1
 809 000e DAB2     		uxtb	r2, r3
 810 0010 024B     		ldr	r3, .L50
 811 0012 DA70     		strb	r2, [r3, #3]
 369:.\SirenState.c ****     decideTonesToPlay();
 812              		.loc 1 369 0
 813 0014 FFF7FEFF 		bl	decideTonesToPlay
 370:.\SirenState.c **** }
 814              		.loc 1 370 0
 815 0018 80BD     		pop	{r7, pc}
 816              	.L51:
 817 001a 00BF     		.align	2
 818              	.L50:
 819 001c 0C000000 		.word	InputRead
 820              		.cfi_endproc
 821              	.LFE70:
 822              		.size	processHornRingRoutine, .-processHornRingRoutine
 823              		.section	.text.processDualDelayRoutine,"ax",%progbits
 824              		.align	2
 825              		.global	processDualDelayRoutine
 826              		.thumb
 827              		.thumb_func
 828              		.type	processDualDelayRoutine, %function
 829              	processDualDelayRoutine:
 830              	.LFB71:
 371:.\SirenState.c **** 
 372:.\SirenState.c **** /*******************************************************************************
 373:.\SirenState.c **** * Function Name: processDualDelayRoutine
 374:.\SirenState.c **** ********************************************************************************
 375:.\SirenState.c **** *
 376:.\SirenState.c **** * Summary:
 377:.\SirenState.c **** *  Activates delay functionality for the two current tones, called in DualDelayISR
 378:.\SirenState.c **** *
 379:.\SirenState.c **** * Parameters:  
 380:.\SirenState.c **** *   None
 381:.\SirenState.c **** *
 382:.\SirenState.c **** * Return:
 383:.\SirenState.c **** *   None
 384:.\SirenState.c **** *
 385:.\SirenState.c **** *******************************************************************************/
 386:.\SirenState.c **** void processDualDelayRoutine(void)
 387:.\SirenState.c **** {
 831              		.loc 1 387 0
 832              		.cfi_startproc
 833              		@ args = 0, pretend = 0, frame = 0
 834              		@ frame_needed = 1, uses_anonymous_args = 0
 835 0000 80B5     		push	{r7, lr}
 836              		.cfi_def_cfa_offset 8
 837              		.cfi_offset 7, -8
 838              		.cfi_offset 14, -4
 839 0002 00AF     		add	r7, sp, #0
 840              		.cfi_def_cfa_register 7
 388:.\SirenState.c ****     InputRead.bDualDelay = DualDelayStatus_Read() & 0x01;
 841              		.loc 1 388 0
 842 0004 FFF7FEFF 		bl	DualDelayStatus_Read
 843 0008 0346     		mov	r3, r0
 844 000a 03F00103 		and	r3, r3, #1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 23


 845 000e DAB2     		uxtb	r2, r3
 846 0010 044B     		ldr	r3, .L53
 847 0012 1A71     		strb	r2, [r3, #4]
 389:.\SirenState.c ****     ToneStatus.bDualDelayEnable = InputRead.bDualDelay;
 848              		.loc 1 389 0
 849 0014 034B     		ldr	r3, .L53
 850 0016 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 851 0018 034B     		ldr	r3, .L53+4
 852 001a 9A71     		strb	r2, [r3, #6]
 390:.\SirenState.c ****     decideTonesToPlay();
 853              		.loc 1 390 0
 854 001c FFF7FEFF 		bl	decideTonesToPlay
 391:.\SirenState.c **** }
 855              		.loc 1 391 0
 856 0020 80BD     		pop	{r7, pc}
 857              	.L54:
 858 0022 00BF     		.align	2
 859              	.L53:
 860 0024 0C000000 		.word	InputRead
 861 0028 14000000 		.word	ToneStatus
 862              		.cfi_endproc
 863              	.LFE71:
 864              		.size	processDualDelayRoutine, .-processDualDelayRoutine
 865              		.section	.text.processToneChangeRoutine,"ax",%progbits
 866              		.align	2
 867              		.global	processToneChangeRoutine
 868              		.thumb
 869              		.thumb_func
 870              		.type	processToneChangeRoutine, %function
 871              	processToneChangeRoutine:
 872              	.LFB72:
 392:.\SirenState.c **** 
 393:.\SirenState.c **** /*******************************************************************************
 394:.\SirenState.c **** * Function Name: processToneChangeRoutine
 395:.\SirenState.c **** ********************************************************************************
 396:.\SirenState.c **** *
 397:.\SirenState.c **** * Summary:
 398:.\SirenState.c **** *  Updates the siren system for the tone input change, called in ModeStatusISR
 399:.\SirenState.c **** *
 400:.\SirenState.c **** * Parameters:  
 401:.\SirenState.c **** *   None
 402:.\SirenState.c **** *
 403:.\SirenState.c **** * Return:
 404:.\SirenState.c **** *   None
 405:.\SirenState.c **** *
 406:.\SirenState.c **** *******************************************************************************/
 407:.\SirenState.c **** void processToneChangeRoutine(void)
 408:.\SirenState.c **** {  
 873              		.loc 1 408 0
 874              		.cfi_startproc
 875              		@ args = 0, pretend = 0, frame = 16
 876              		@ frame_needed = 1, uses_anonymous_args = 0
 877 0000 90B5     		push	{r4, r7, lr}
 878              		.cfi_def_cfa_offset 12
 879              		.cfi_offset 4, -12
 880              		.cfi_offset 7, -8
 881              		.cfi_offset 14, -4
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 24


 882 0002 85B0     		sub	sp, sp, #20
 883              		.cfi_def_cfa_offset 32
 884 0004 00AF     		add	r7, sp, #0
 885              		.cfi_def_cfa_register 7
 409:.\SirenState.c ****     static uint8 previousChannels[SPEAKER_COUNT];
 410:.\SirenState.c ****     uint8 currentChannels[SPEAKER_COUNT];
 411:.\SirenState.c ****     uint8 changeStatus[SPEAKER_COUNT];
 412:.\SirenState.c ****     uint8 changedChannel[SPEAKER_COUNT];
 413:.\SirenState.c ****     uint8 speakerIndex = 0;
 886              		.loc 1 413 0
 887 0006 0023     		movs	r3, #0
 888 0008 FB73     		strb	r3, [r7, #15]
 414:.\SirenState.c **** 	uint8 priorityChannel = 0;
 889              		.loc 1 414 0
 890 000a 0023     		movs	r3, #0
 891 000c BB73     		strb	r3, [r7, #14]
 415:.\SirenState.c ****     
 416:.\SirenState.c ****     currentChannels[SPEAKER_1] = ModeStatus_Read();
 892              		.loc 1 416 0
 893 000e FFF7FEFF 		bl	ModeStatus_Read
 894 0012 0346     		mov	r3, r0
 895 0014 3B73     		strb	r3, [r7, #12]
 417:.\SirenState.c ****     currentChannels[SPEAKER_2] = ModeStatus2_Read();
 896              		.loc 1 417 0
 897 0016 FFF7FEFF 		bl	ModeStatus2_Read
 898 001a 0346     		mov	r3, r0
 899 001c 7B73     		strb	r3, [r7, #13]
 418:.\SirenState.c ****     
 419:.\SirenState.c ****     for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 900              		.loc 1 419 0
 901 001e 0023     		movs	r3, #0
 902 0020 FB73     		strb	r3, [r7, #15]
 903 0022 89E0     		b	.L56
 904              	.L62:
 420:.\SirenState.c ****     {
 421:.\SirenState.c ****         changeStatus[speakerIndex] =
 905              		.loc 1 421 0
 906 0024 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 422:.\SirenState.c ****             previousChannels[speakerIndex] ^ currentChannels[speakerIndex];
 907              		.loc 1 422 0
 908 0026 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 909 0028 4849     		ldr	r1, .L63
 910 002a 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 911 002c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 912 002e 07F11000 		add	r0, r7, #16
 913 0032 0244     		add	r2, r2, r0
 914 0034 12F8042C 		ldrb	r2, [r2, #-4]	@ zero_extendqisi2
 421:.\SirenState.c ****             previousChannels[speakerIndex] ^ currentChannels[speakerIndex];
 915              		.loc 1 421 0
 916 0038 4A40     		eors	r2, r2, r1
 917 003a D2B2     		uxtb	r2, r2
 918 003c 07F11001 		add	r1, r7, #16
 919 0040 0B44     		add	r3, r3, r1
 920 0042 03F8082C 		strb	r2, [r3, #-8]
 423:.\SirenState.c **** 			
 424:.\SirenState.c **** 		changedChannel[speakerIndex] = getBitIndex(changeStatus[speakerIndex]);
 921              		.loc 1 424 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 25


 922 0046 FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 923 0048 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 924 004a 07F11002 		add	r2, r7, #16
 925 004e 1344     		add	r3, r3, r2
 926 0050 13F8083C 		ldrb	r3, [r3, #-8]	@ zero_extendqisi2
 927 0054 1846     		mov	r0, r3
 928 0056 FFF7FEFF 		bl	getBitIndex
 929 005a 0346     		mov	r3, r0
 930 005c 1A46     		mov	r2, r3
 931 005e 07F11003 		add	r3, r7, #16
 932 0062 2344     		add	r3, r3, r4
 933 0064 03F80C2C 		strb	r2, [r3, #-12]
 425:.\SirenState.c **** 		InputRead.highestPriorityChannel[speakerIndex] = getHighestPriorityChannel(speakerIndex);
 934              		.loc 1 425 0
 935 0068 FC7B     		ldrb	r4, [r7, #15]	@ zero_extendqisi2
 936 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 937 006c 1846     		mov	r0, r3
 938 006e FFF7FEFF 		bl	getHighestPriorityChannel
 939 0072 0346     		mov	r3, r0
 940 0074 1A46     		mov	r2, r3
 941 0076 364B     		ldr	r3, .L63+4
 942 0078 2344     		add	r3, r3, r4
 943 007a 5A71     		strb	r2, [r3, #5]
 426:.\SirenState.c **** 		priorityChannel = InputRead.highestPriorityChannel[speakerIndex];
 944              		.loc 1 426 0
 945 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 946 007e 344A     		ldr	r2, .L63+4
 947 0080 1344     		add	r3, r3, r2
 948 0082 5B79     		ldrb	r3, [r3, #5]
 949 0084 BB73     		strb	r3, [r7, #14]
 427:.\SirenState.c **** 			
 428:.\SirenState.c **** 		if(changeStatus[speakerIndex] & currentChannels[speakerIndex])
 950              		.loc 1 428 0
 951 0086 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 952 0088 07F11002 		add	r2, r7, #16
 953 008c 1344     		add	r3, r3, r2
 954 008e 13F8082C 		ldrb	r2, [r3, #-8]	@ zero_extendqisi2
 955 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 956 0094 07F11001 		add	r1, r7, #16
 957 0098 0B44     		add	r3, r3, r1
 958 009a 13F8043C 		ldrb	r3, [r3, #-4]	@ zero_extendqisi2
 959 009e 1340     		ands	r3, r3, r2
 960 00a0 DBB2     		uxtb	r3, r3
 961 00a2 002B     		cmp	r3, #0
 962 00a4 05D0     		beq	.L57
 429:.\SirenState.c **** 			ToneStatus.bRisingEdge[speakerIndex] = true;
 963              		.loc 1 429 0
 964 00a6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 965 00a8 2A4A     		ldr	r2, .L63+8
 966 00aa 1344     		add	r3, r3, r2
 967 00ac 0122     		movs	r2, #1
 968 00ae 1A71     		strb	r2, [r3, #4]
 969 00b0 18E0     		b	.L58
 970              	.L57:
 430:.\SirenState.c **** 		else
 431:.\SirenState.c ****         {
 432:.\SirenState.c ****             if((priorityChannel == NO_CHANNEL) || ((changedChannel[speakerIndex] != NO_CHANNEL) && 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 26


 971              		.loc 1 432 0
 972 00b2 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 973 00b4 FF2B     		cmp	r3, #255
 974 00b6 10D0     		beq	.L59
 975              		.loc 1 432 0 is_stmt 0 discriminator 1
 976 00b8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 977 00ba 07F11002 		add	r2, r7, #16
 978 00be 1344     		add	r3, r3, r2
 979 00c0 13F80C3C 		ldrb	r3, [r3, #-12]	@ zero_extendqisi2
 980 00c4 FF2B     		cmp	r3, #255
 981 00c6 0DD0     		beq	.L58
 433:.\SirenState.c ****                 (priorityChannel < changedChannel[speakerIndex])))
 982              		.loc 1 433 0 is_stmt 1 discriminator 2
 983 00c8 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 984 00ca 07F11002 		add	r2, r7, #16
 985 00ce 1344     		add	r3, r3, r2
 986 00d0 13F80C3C 		ldrb	r3, [r3, #-12]	@ zero_extendqisi2
 432:.\SirenState.c ****                 (priorityChannel < changedChannel[speakerIndex])))
 987              		.loc 1 432 0 discriminator 2
 988 00d4 BA7B     		ldrb	r2, [r7, #14]	@ zero_extendqisi2
 989 00d6 9A42     		cmp	r2, r3
 990 00d8 04D2     		bcs	.L58
 991              	.L59:
 434:.\SirenState.c **** 			    ToneStatus.bRisingEdge[speakerIndex] = false;
 992              		.loc 1 434 0
 993 00da FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 994 00dc 1D4A     		ldr	r2, .L63+8
 995 00de 1344     		add	r3, r3, r2
 996 00e0 0022     		movs	r2, #0
 997 00e2 1A71     		strb	r2, [r3, #4]
 998              	.L58:
 435:.\SirenState.c ****         }
 436:.\SirenState.c **** 		
 437:.\SirenState.c ****         previousChannels[speakerIndex] = currentChannels[speakerIndex];
 999              		.loc 1 437 0
 1000 00e4 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1001 00e6 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1002 00e8 07F11001 		add	r1, r7, #16
 1003 00ec 0A44     		add	r2, r2, r1
 1004 00ee 12F8041C 		ldrb	r1, [r2, #-4]	@ zero_extendqisi2
 1005 00f2 164A     		ldr	r2, .L63
 1006 00f4 D154     		strb	r1, [r2, r3]
 438:.\SirenState.c **** 		ToneStatus.previousTone[speakerIndex] = ToneStatus.currentTone[speakerIndex];	
 1007              		.loc 1 438 0
 1008 00f6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1009 00f8 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1010 00fa 1649     		ldr	r1, .L63+8
 1011 00fc 0A44     		add	r2, r2, r1
 1012 00fe 9178     		ldrb	r1, [r2, #2]	@ zero_extendqisi2
 1013 0100 144A     		ldr	r2, .L63+8
 1014 0102 D154     		strb	r1, [r2, r3]
 439:.\SirenState.c **** 		
 440:.\SirenState.c **** 		if(priorityChannel != NO_CHANNEL)
 1015              		.loc 1 440 0
 1016 0104 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1017 0106 FF2B     		cmp	r3, #255
 1018 0108 0ED0     		beq	.L60
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 27


 441:.\SirenState.c **** 			ToneStatus.currentTone[speakerIndex] = toneConfigurationList[speakerIndex][priorityChannel];
 1019              		.loc 1 441 0
 1020 010a F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 1021 010c FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 1022 010e B87B     		ldrb	r0, [r7, #14]	@ zero_extendqisi2
 1023 0110 114C     		ldr	r4, .L63+12
 1024 0112 1346     		mov	r3, r2
 1025 0114 5B00     		lsls	r3, r3, #1
 1026 0116 1344     		add	r3, r3, r2
 1027 0118 5B00     		lsls	r3, r3, #1
 1028 011a 0344     		add	r3, r3, r0
 1029 011c 2344     		add	r3, r3, r4
 1030 011e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1031 0120 0C4B     		ldr	r3, .L63+8
 1032 0122 0B44     		add	r3, r3, r1
 1033 0124 9A70     		strb	r2, [r3, #2]
 1034 0126 04E0     		b	.L61
 1035              	.L60:
 442:.\SirenState.c **** 		else
 443:.\SirenState.c **** 			ToneStatus.currentTone[speakerIndex] = NO_TONE;
 1036              		.loc 1 443 0
 1037 0128 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1038 012a 0A4A     		ldr	r2, .L63+8
 1039 012c 1344     		add	r3, r3, r2
 1040 012e 0022     		movs	r2, #0
 1041 0130 9A70     		strb	r2, [r3, #2]
 1042              	.L61:
 419:.\SirenState.c ****     {
 1043              		.loc 1 419 0 discriminator 2
 1044 0132 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1045 0134 0133     		adds	r3, r3, #1
 1046 0136 FB73     		strb	r3, [r7, #15]
 1047              	.L56:
 419:.\SirenState.c ****     {
 1048              		.loc 1 419 0 is_stmt 0 discriminator 1
 1049 0138 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1050 013a 012B     		cmp	r3, #1
 1051 013c 7FF672AF 		bls	.L62
 444:.\SirenState.c ****     }
 445:.\SirenState.c **** 	
 446:.\SirenState.c **** 	decideTonesToPlay();
 1052              		.loc 1 446 0 is_stmt 1
 1053 0140 FFF7FEFF 		bl	decideTonesToPlay
 447:.\SirenState.c **** }
 1054              		.loc 1 447 0
 1055 0144 1437     		adds	r7, r7, #20
 1056              		.cfi_def_cfa_offset 12
 1057 0146 BD46     		mov	sp, r7
 1058              		.cfi_def_cfa_register 13
 1059              		@ sp needed
 1060 0148 90BD     		pop	{r4, r7, pc}
 1061              	.L64:
 1062 014a 00BF     		.align	2
 1063              	.L63:
 1064 014c 1C000000 		.word	previousChannels.7356
 1065 0150 0C000000 		.word	InputRead
 1066 0154 14000000 		.word	ToneStatus
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 28


 1067 0158 00000000 		.word	toneConfigurationList
 1068              		.cfi_endproc
 1069              	.LFE72:
 1070              		.size	processToneChangeRoutine, .-processToneChangeRoutine
 1071              		.section	.text.setTonesWithCommunication,"ax",%progbits
 1072              		.align	2
 1073              		.global	setTonesWithCommunication
 1074              		.thumb
 1075              		.thumb_func
 1076              		.type	setTonesWithCommunication, %function
 1077              	setTonesWithCommunication:
 1078              	.LFB73:
 448:.\SirenState.c **** 
 449:.\SirenState.c **** /*******************************************************************************
 450:.\SirenState.c **** * Function Name: setTonesWithCommunication
 451:.\SirenState.c **** ********************************************************************************
 452:.\SirenState.c **** *
 453:.\SirenState.c **** * Summary:
 454:.\SirenState.c **** *   Called during Data Link to update the tone using the data from the Controller
 455:.\SirenState.c **** *
 456:.\SirenState.c **** * Parameters:  
 457:.\SirenState.c **** *   firstTone: The tone selection for Speaker 1
 458:.\SirenState.c **** *   secondTone: The tone selection for Speaker 2
 459:.\SirenState.c **** *   bDualDelay: The Dual Delay status from the Controller
 460:.\SirenState.c **** *
 461:.\SirenState.c **** * Return:
 462:.\SirenState.c **** *   TRUE for valid inputs, FALSE otherwise
 463:.\SirenState.c **** *
 464:.\SirenState.c **** *******************************************************************************/
 465:.\SirenState.c **** uint8 setTonesWithCommunication(enum ToneType firstTone, enum ToneType secondTone,
 466:.\SirenState.c ****                                 uint8 bDualDelay)
 467:.\SirenState.c **** {
 1079              		.loc 1 467 0
 1080              		.cfi_startproc
 1081              		@ args = 0, pretend = 0, frame = 16
 1082              		@ frame_needed = 1, uses_anonymous_args = 0
 1083 0000 80B5     		push	{r7, lr}
 1084              		.cfi_def_cfa_offset 8
 1085              		.cfi_offset 7, -8
 1086              		.cfi_offset 14, -4
 1087 0002 84B0     		sub	sp, sp, #16
 1088              		.cfi_def_cfa_offset 24
 1089 0004 00AF     		add	r7, sp, #0
 1090              		.cfi_def_cfa_register 7
 1091 0006 0346     		mov	r3, r0
 1092 0008 FB71     		strb	r3, [r7, #7]
 1093 000a 0B46     		mov	r3, r1
 1094 000c BB71     		strb	r3, [r7, #6]
 1095 000e 1346     		mov	r3, r2
 1096 0010 7B71     		strb	r3, [r7, #5]
 468:.\SirenState.c ****     uint8 speakerIndex = 0;
 1097              		.loc 1 468 0
 1098 0012 0023     		movs	r3, #0
 1099 0014 FB73     		strb	r3, [r7, #15]
 469:.\SirenState.c ****     uint8 bDualDelayChange = false;
 1100              		.loc 1 469 0
 1101 0016 0023     		movs	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 29


 1102 0018 BB73     		strb	r3, [r7, #14]
 470:.\SirenState.c ****     
 471:.\SirenState.c ****     if((firstTone < NO_TONE) || (firstTone > TEST_TONE))
 1103              		.loc 1 471 0
 1104 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1105 001c 162B     		cmp	r3, #22
 1106 001e 01D9     		bls	.L66
 472:.\SirenState.c ****         return false;
 1107              		.loc 1 472 0
 1108 0020 0023     		movs	r3, #0
 1109 0022 60E0     		b	.L67
 1110              	.L66:
 473:.\SirenState.c ****     
 474:.\SirenState.c ****     if((secondTone < NO_TONE) || (secondTone > TEST_TONE))
 1111              		.loc 1 474 0
 1112 0024 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1113 0026 162B     		cmp	r3, #22
 1114 0028 01D9     		bls	.L68
 475:.\SirenState.c ****         return false;
 1115              		.loc 1 475 0
 1116 002a 0023     		movs	r3, #0
 1117 002c 5BE0     		b	.L67
 1118              	.L68:
 476:.\SirenState.c ****     
 477:.\SirenState.c ****     if((bDualDelay != true) && (bDualDelay != false))
 1119              		.loc 1 477 0
 1120 002e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1121 0030 012B     		cmp	r3, #1
 1122 0032 04D0     		beq	.L69
 1123              		.loc 1 477 0 is_stmt 0 discriminator 1
 1124 0034 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1125 0036 002B     		cmp	r3, #0
 1126 0038 01D0     		beq	.L69
 478:.\SirenState.c ****         return false;
 1127              		.loc 1 478 0 is_stmt 1
 1128 003a 0023     		movs	r3, #0
 1129 003c 53E0     		b	.L67
 1130              	.L69:
 479:.\SirenState.c ****     
 480:.\SirenState.c ****     ToneStatus.previousTone[SPEAKER_1] = ToneStatus.currentTone[SPEAKER_1];
 1131              		.loc 1 480 0
 1132 003e 2C4B     		ldr	r3, .L77
 1133 0040 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1134 0042 2B4B     		ldr	r3, .L77
 1135 0044 1A70     		strb	r2, [r3]
 481:.\SirenState.c ****     ToneStatus.previousTone[SPEAKER_2] = ToneStatus.currentTone[SPEAKER_2];
 1136              		.loc 1 481 0
 1137 0046 2A4B     		ldr	r3, .L77
 1138 0048 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1139 004a 294B     		ldr	r3, .L77
 1140 004c 5A70     		strb	r2, [r3, #1]
 482:.\SirenState.c ****     ToneStatus.currentTone[SPEAKER_1] = firstTone;
 1141              		.loc 1 482 0
 1142 004e 284A     		ldr	r2, .L77
 1143 0050 FB79     		ldrb	r3, [r7, #7]
 1144 0052 9370     		strb	r3, [r2, #2]
 483:.\SirenState.c ****     ToneStatus.currentTone[SPEAKER_2] = secondTone;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 30


 1145              		.loc 1 483 0
 1146 0054 264A     		ldr	r2, .L77
 1147 0056 BB79     		ldrb	r3, [r7, #6]
 1148 0058 D370     		strb	r3, [r2, #3]
 484:.\SirenState.c ****     
 485:.\SirenState.c ****     if(bDualDelay != ToneStatus.bDualDelayEnable)
 1149              		.loc 1 485 0
 1150 005a 254B     		ldr	r3, .L77
 1151 005c 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1152 005e 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1153 0060 9A42     		cmp	r2, r3
 1154 0062 01D0     		beq	.L70
 486:.\SirenState.c ****         bDualDelayChange = true;
 1155              		.loc 1 486 0
 1156 0064 0123     		movs	r3, #1
 1157 0066 BB73     		strb	r3, [r7, #14]
 1158              	.L70:
 487:.\SirenState.c ****     
 488:.\SirenState.c ****     ToneStatus.bDualDelayEnable = bDualDelay;
 1159              		.loc 1 488 0
 1160 0068 214A     		ldr	r2, .L77
 1161 006a 7B79     		ldrb	r3, [r7, #5]
 1162 006c 9371     		strb	r3, [r2, #6]
 489:.\SirenState.c ****     
 490:.\SirenState.c ****     for(speakerIndex = 0; speakerIndex < SPEAKER_COUNT; speakerIndex++)
 1163              		.loc 1 490 0
 1164 006e 0023     		movs	r3, #0
 1165 0070 FB73     		strb	r3, [r7, #15]
 1166 0072 23E0     		b	.L71
 1167              	.L74:
 491:.\SirenState.c ****     {
 492:.\SirenState.c ****         if((ToneStatus.previousTone[speakerIndex] == NO_TONE) &&
 1168              		.loc 1 492 0
 1169 0074 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1170 0076 1E4A     		ldr	r2, .L77
 1171 0078 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1172 007a 002B     		cmp	r3, #0
 1173 007c 0BD1     		bne	.L72
 493:.\SirenState.c ****             (ToneStatus.currentTone[speakerIndex] != NO_TONE))
 1174              		.loc 1 493 0 discriminator 1
 1175 007e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1176 0080 1B4A     		ldr	r2, .L77
 1177 0082 1344     		add	r3, r3, r2
 1178 0084 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 492:.\SirenState.c ****             (ToneStatus.currentTone[speakerIndex] != NO_TONE))
 1179              		.loc 1 492 0 discriminator 1
 1180 0086 002B     		cmp	r3, #0
 1181 0088 05D0     		beq	.L72
 494:.\SirenState.c ****             ToneStatus.bRisingEdge[speakerIndex] = true;
 1182              		.loc 1 494 0
 1183 008a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1184 008c 184A     		ldr	r2, .L77
 1185 008e 1344     		add	r3, r3, r2
 1186 0090 0122     		movs	r2, #1
 1187 0092 1A71     		strb	r2, [r3, #4]
 1188 0094 0FE0     		b	.L73
 1189              	.L72:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 31


 495:.\SirenState.c ****         else if((ToneStatus.previousTone[speakerIndex] != NO_TONE) &&
 1190              		.loc 1 495 0
 1191 0096 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1192 0098 154A     		ldr	r2, .L77
 1193 009a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1194 009c 002B     		cmp	r3, #0
 1195 009e 0AD0     		beq	.L73
 496:.\SirenState.c ****             (ToneStatus.currentTone[speakerIndex] == NO_TONE))
 1196              		.loc 1 496 0 discriminator 1
 1197 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1198 00a2 134A     		ldr	r2, .L77
 1199 00a4 1344     		add	r3, r3, r2
 1200 00a6 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 495:.\SirenState.c ****         else if((ToneStatus.previousTone[speakerIndex] != NO_TONE) &&
 1201              		.loc 1 495 0 discriminator 1
 1202 00a8 002B     		cmp	r3, #0
 1203 00aa 04D1     		bne	.L73
 497:.\SirenState.c ****             ToneStatus.bRisingEdge[speakerIndex] = false;
 1204              		.loc 1 497 0
 1205 00ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1206 00ae 104A     		ldr	r2, .L77
 1207 00b0 1344     		add	r3, r3, r2
 1208 00b2 0022     		movs	r2, #0
 1209 00b4 1A71     		strb	r2, [r3, #4]
 1210              	.L73:
 490:.\SirenState.c ****     {
 1211              		.loc 1 490 0 discriminator 2
 1212 00b6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1213 00b8 0133     		adds	r3, r3, #1
 1214 00ba FB73     		strb	r3, [r7, #15]
 1215              	.L71:
 490:.\SirenState.c ****     {
 1216              		.loc 1 490 0 is_stmt 0 discriminator 1
 1217 00bc FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1218 00be 012B     		cmp	r3, #1
 1219 00c0 D8D9     		bls	.L74
 498:.\SirenState.c ****     }
 499:.\SirenState.c ****     
 500:.\SirenState.c ****     if((ToneStatus.previousTone[SPEAKER_1] != ToneStatus.currentTone[SPEAKER_1]) ||
 1220              		.loc 1 500 0 is_stmt 1
 1221 00c2 0B4B     		ldr	r3, .L77
 1222 00c4 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 1223 00c6 0A4B     		ldr	r3, .L77
 1224 00c8 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1225 00ca 9A42     		cmp	r2, r3
 1226 00cc 08D1     		bne	.L75
 501:.\SirenState.c ****         (ToneStatus.previousTone[SPEAKER_2] != ToneStatus.currentTone[SPEAKER_2]) ||
 1227              		.loc 1 501 0 discriminator 1
 1228 00ce 084B     		ldr	r3, .L77
 1229 00d0 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1230 00d2 074B     		ldr	r3, .L77
 1231 00d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 500:.\SirenState.c ****         (ToneStatus.previousTone[SPEAKER_2] != ToneStatus.currentTone[SPEAKER_2]) ||
 1232              		.loc 1 500 0 discriminator 1
 1233 00d6 9A42     		cmp	r2, r3
 1234 00d8 02D1     		bne	.L75
 1235              		.loc 1 501 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 32


 1236 00da BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 1237 00dc 012B     		cmp	r3, #1
 1238 00de 01D1     		bne	.L76
 1239              	.L75:
 502:.\SirenState.c ****         (bDualDelayChange == true))
 503:.\SirenState.c ****         decideTonesToPlay();
 1240              		.loc 1 503 0
 1241 00e0 FFF7FEFF 		bl	decideTonesToPlay
 1242              	.L76:
 504:.\SirenState.c ****     
 505:.\SirenState.c ****     return true;
 1243              		.loc 1 505 0
 1244 00e4 0123     		movs	r3, #1
 1245              	.L67:
 506:.\SirenState.c **** }
 1246              		.loc 1 506 0
 1247 00e6 1846     		mov	r0, r3
 1248 00e8 1037     		adds	r7, r7, #16
 1249              		.cfi_def_cfa_offset 8
 1250 00ea BD46     		mov	sp, r7
 1251              		.cfi_def_cfa_register 13
 1252              		@ sp needed
 1253 00ec 80BD     		pop	{r7, pc}
 1254              	.L78:
 1255 00ee 00BF     		.align	2
 1256              	.L77:
 1257 00f0 14000000 		.word	ToneStatus
 1258              		.cfi_endproc
 1259              	.LFE73:
 1260              		.size	setTonesWithCommunication, .-setTonesWithCommunication
 1261              		.section	.text.disableAudioAndPWM,"ax",%progbits
 1262              		.align	2
 1263              		.global	disableAudioAndPWM
 1264              		.thumb
 1265              		.thumb_func
 1266              		.type	disableAudioAndPWM, %function
 1267              	disableAudioAndPWM:
 1268              	.LFB74:
 507:.\SirenState.c **** 
 508:.\SirenState.c **** /*******************************************************************************
 509:.\SirenState.c **** * Function Name: disableAudioAndPWM
 510:.\SirenState.c **** ********************************************************************************
 511:.\SirenState.c **** *
 512:.\SirenState.c **** * Summary:
 513:.\SirenState.c **** *   Disables the DAC and PWM for both speakers, typically called before the Power
 514:.\SirenState.c **** *   Amps are disabled for a clear shut down
 515:.\SirenState.c **** *
 516:.\SirenState.c **** * Parameters: 
 517:.\SirenState.c **** *   None
 518:.\SirenState.c **** *
 519:.\SirenState.c **** * Return:
 520:.\SirenState.c **** *   None
 521:.\SirenState.c **** *
 522:.\SirenState.c **** *******************************************************************************/
 523:.\SirenState.c **** void disableAudioAndPWM(void)
 524:.\SirenState.c **** {
 1269              		.loc 1 524 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 33


 1270              		.cfi_startproc
 1271              		@ args = 0, pretend = 0, frame = 0
 1272              		@ frame_needed = 1, uses_anonymous_args = 0
 1273 0000 80B5     		push	{r7, lr}
 1274              		.cfi_def_cfa_offset 8
 1275              		.cfi_offset 7, -8
 1276              		.cfi_offset 14, -4
 1277 0002 00AF     		add	r7, sp, #0
 1278              		.cfi_def_cfa_register 7
 525:.\SirenState.c **** 	stopPWMTone(SPEAKER_1);
 1279              		.loc 1 525 0
 1280 0004 0020     		movs	r0, #0
 1281 0006 FFF7FEFF 		bl	stopPWMTone
 526:.\SirenState.c ****     stopPWMTone(SPEAKER_2);
 1282              		.loc 1 526 0
 1283 000a 0120     		movs	r0, #1
 1284 000c FFF7FEFF 		bl	stopPWMTone
 527:.\SirenState.c ****     stopAudioTone(SPEAKER_1);
 1285              		.loc 1 527 0
 1286 0010 0020     		movs	r0, #0
 1287 0012 FFF7FEFF 		bl	stopAudioTone
 528:.\SirenState.c ****     stopAudioTone(SPEAKER_2);
 1288              		.loc 1 528 0
 1289 0016 0120     		movs	r0, #1
 1290 0018 FFF7FEFF 		bl	stopAudioTone
 529:.\SirenState.c **** }
 1291              		.loc 1 529 0
 1292 001c 80BD     		pop	{r7, pc}
 1293              		.cfi_endproc
 1294              	.LFE74:
 1295              		.size	disableAudioAndPWM, .-disableAudioAndPWM
 1296 001e 00BF     		.section	.text.disableBothSpeakers,"ax",%progbits
 1297              		.align	2
 1298              		.global	disableBothSpeakers
 1299              		.thumb
 1300              		.thumb_func
 1301              		.type	disableBothSpeakers, %function
 1302              	disableBothSpeakers:
 1303              	.LFB75:
 530:.\SirenState.c **** 
 531:.\SirenState.c **** /*******************************************************************************
 532:.\SirenState.c **** * Function Name: disableBothSpeakers
 533:.\SirenState.c **** ********************************************************************************
 534:.\SirenState.c **** *
 535:.\SirenState.c **** * Summary:
 536:.\SirenState.c **** *   Disables the Power Amps and updates the PWM and DAC status to play no tone
 537:.\SirenState.c **** *   for both speakers, typically called after the DAC and PWM are disabled.
 538:.\SirenState.c **** *
 539:.\SirenState.c **** * Parameters: 
 540:.\SirenState.c **** *   None
 541:.\SirenState.c **** *
 542:.\SirenState.c **** * Return:
 543:.\SirenState.c **** *   None
 544:.\SirenState.c **** *
 545:.\SirenState.c **** *******************************************************************************/
 546:.\SirenState.c **** void disableBothSpeakers(void)
 547:.\SirenState.c **** {
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 34


 1304              		.loc 1 547 0
 1305              		.cfi_startproc
 1306              		@ args = 0, pretend = 0, frame = 0
 1307              		@ frame_needed = 1, uses_anonymous_args = 0
 1308 0000 80B5     		push	{r7, lr}
 1309              		.cfi_def_cfa_offset 8
 1310              		.cfi_offset 7, -8
 1311              		.cfi_offset 14, -4
 1312 0002 00AF     		add	r7, sp, #0
 1313              		.cfi_def_cfa_register 7
 548:.\SirenState.c **** 	deactivateManualWail();
 1314              		.loc 1 548 0
 1315 0004 FFF7FEFF 		bl	deactivateManualWail
 549:.\SirenState.c **** 	deactivateAudio();
 1316              		.loc 1 549 0
 1317 0008 FFF7FEFF 		bl	deactivateAudio
 550:.\SirenState.c **** 	PowerAmpOutput1_Write(false);
 1318              		.loc 1 550 0
 1319 000c 0020     		movs	r0, #0
 1320 000e FFF7FEFF 		bl	PowerAmpOutput1_Write
 551:.\SirenState.c **** 	PowerAmpOutput2_Write(false);
 1321              		.loc 1 551 0
 1322 0012 0020     		movs	r0, #0
 1323 0014 FFF7FEFF 		bl	PowerAmpOutput2_Write
 552:.\SirenState.c ****     playAudioTone(SPEAKER_1, NO_TONE, false);
 1324              		.loc 1 552 0
 1325 0018 0020     		movs	r0, #0
 1326 001a 0021     		movs	r1, #0
 1327 001c 0022     		movs	r2, #0
 1328 001e FFF7FEFF 		bl	playAudioTone
 553:.\SirenState.c ****     playAudioTone(SPEAKER_2, NO_TONE, false);
 1329              		.loc 1 553 0
 1330 0022 0120     		movs	r0, #1
 1331 0024 0021     		movs	r1, #0
 1332 0026 0022     		movs	r2, #0
 1333 0028 FFF7FEFF 		bl	playAudioTone
 554:.\SirenState.c ****     playPWMTone(SPEAKER_1, NO_TONE, false, false);
 1334              		.loc 1 554 0
 1335 002c 0020     		movs	r0, #0
 1336 002e 0021     		movs	r1, #0
 1337 0030 0022     		movs	r2, #0
 1338 0032 0023     		movs	r3, #0
 1339 0034 FFF7FEFF 		bl	playPWMTone
 555:.\SirenState.c ****     playPWMTone(SPEAKER_2, NO_TONE, false, false);
 1340              		.loc 1 555 0
 1341 0038 0120     		movs	r0, #1
 1342 003a 0021     		movs	r1, #0
 1343 003c 0022     		movs	r2, #0
 1344 003e 0023     		movs	r3, #0
 1345 0040 FFF7FEFF 		bl	playPWMTone
 556:.\SirenState.c **** }
 1346              		.loc 1 556 0
 1347 0044 80BD     		pop	{r7, pc}
 1348              		.cfi_endproc
 1349              	.LFE75:
 1350              		.size	disableBothSpeakers, .-disableBothSpeakers
 1351 0046 00BF     		.section	.text.decideTonesToPlay,"ax",%progbits
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 35


 1352              		.align	2
 1353              		.thumb
 1354              		.thumb_func
 1355              		.type	decideTonesToPlay, %function
 1356              	decideTonesToPlay:
 1357              	.LFB76:
 557:.\SirenState.c **** 
 558:.\SirenState.c **** /*******************************************************************************
 559:.\SirenState.c **** * Function Name: decideTonesToPlay
 560:.\SirenState.c **** ********************************************************************************
 561:.\SirenState.c **** *
 562:.\SirenState.c **** * Summary:
 563:.\SirenState.c **** *  The state machine that determines the tone outcome for each speaker.
 564:.\SirenState.c **** *
 565:.\SirenState.c **** * Parameters:  
 566:.\SirenState.c **** *   None
 567:.\SirenState.c **** *
 568:.\SirenState.c **** * Return:
 569:.\SirenState.c **** *   None
 570:.\SirenState.c **** *
 571:.\SirenState.c **** *******************************************************************************/
 572:.\SirenState.c **** static void decideTonesToPlay(void)
 573:.\SirenState.c **** {
 1358              		.loc 1 573 0
 1359              		.cfi_startproc
 1360              		@ args = 0, pretend = 0, frame = 0
 1361              		@ frame_needed = 1, uses_anonymous_args = 0
 1362 0000 80B5     		push	{r7, lr}
 1363              		.cfi_def_cfa_offset 8
 1364              		.cfi_offset 7, -8
 1365              		.cfi_offset 14, -4
 1366 0002 00AF     		add	r7, sp, #0
 1367              		.cfi_def_cfa_register 7
 574:.\SirenState.c **** 	static uint8 bToneChangeOnHornRing = false;
 575:.\SirenState.c ****     
 576:.\SirenState.c ****     disableAudioAndPWM();
 1368              		.loc 1 576 0
 1369 0004 FFF7FEFF 		bl	disableAudioAndPWM
 577:.\SirenState.c ****     
 578:.\SirenState.c ****     if(InputRead.bRadioAndMicKey)
 1370              		.loc 1 578 0
 1371 0008 A94B     		ldr	r3, .L120
 1372 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1373 000c 002B     		cmp	r3, #0
 1374 000e 00D0     		beq	.L82
 579:.\SirenState.c ****         return;	
 1375              		.loc 1 579 0
 1376 0010 A7E1     		b	.L81
 1377              	.L82:
 580:.\SirenState.c ****     
 581:.\SirenState.c **** 	if(ToneStatus.currentTone[SPEAKER_1] != NO_TONE)
 1378              		.loc 1 581 0
 1379 0012 A84B     		ldr	r3, .L120+4
 1380 0014 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1381 0016 002B     		cmp	r3, #0
 1382 0018 00F0B880 		beq	.L84
 582:.\SirenState.c **** 	{
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 36


 583:.\SirenState.c **** 		if(isAudioTone(ToneStatus.currentTone[SPEAKER_1]))
 1383              		.loc 1 583 0
 1384 001c A54B     		ldr	r3, .L120+4
 1385 001e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1386 0020 1846     		mov	r0, r3
 1387 0022 FFF7FEFF 		bl	isAudioTone
 1388 0026 0346     		mov	r3, r0
 1389 0028 002B     		cmp	r3, #0
 1390 002a 1ED0     		beq	.L85
 584:.\SirenState.c **** 		{
 585:.\SirenState.c **** 			if(isSong(ToneStatus.currentTone[SPEAKER_1]))
 1391              		.loc 1 585 0
 1392 002c A14B     		ldr	r3, .L120+4
 1393 002e 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1394 0030 1846     		mov	r0, r3
 1395 0032 FFF7FEFF 		bl	isSong
 1396 0036 0346     		mov	r3, r0
 1397 0038 002B     		cmp	r3, #0
 1398 003a 0ED0     		beq	.L86
 586:.\SirenState.c **** 			{
 587:.\SirenState.c **** 				if(ToneStatus.bRisingEdge[SPEAKER_1])	//Plays BAD BOYS	
 1399              		.loc 1 587 0
 1400 003c 9D4B     		ldr	r3, .L120+4
 1401 003e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1402 0040 002B     		cmp	r3, #0
 1403 0042 07D0     		beq	.L87
 588:.\SirenState.c **** 					enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1], true);
 1404              		.loc 1 588 0
 1405 0044 9B4B     		ldr	r3, .L120+4
 1406 0046 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1407 0048 0020     		movs	r0, #0
 1408 004a 1946     		mov	r1, r3
 1409 004c 0122     		movs	r2, #1
 1410 004e FFF7FEFF 		bl	enableSpeakersForAudioTone
 1411 0052 86E1     		b	.L81
 1412              	.L87:
 589:.\SirenState.c **** 				else	//Plays NO TONE
 590:.\SirenState.c **** 					disableBothSpeakers();
 1413              		.loc 1 590 0
 1414 0054 FFF7FEFF 		bl	disableBothSpeakers
 1415 0058 83E1     		b	.L81
 1416              	.L86:
 591:.\SirenState.c **** 				
 592:.\SirenState.c **** 			}
 593:.\SirenState.c **** 			else	//Plays ECTO OR COMMAND 
 594:.\SirenState.c **** 				enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1], true);
 1417              		.loc 1 594 0
 1418 005a 964B     		ldr	r3, .L120+4
 1419 005c 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1420 005e 0020     		movs	r0, #0
 1421 0060 1946     		mov	r1, r3
 1422 0062 0122     		movs	r2, #1
 1423 0064 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1424 0068 7BE1     		b	.L81
 1425              	.L85:
 595:.\SirenState.c **** 		}
 596:.\SirenState.c **** 		else
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 37


 597:.\SirenState.c **** 		{	
 598:.\SirenState.c ****             if(isAudioTone(ToneStatus.currentTone[SPEAKER_2]))
 1426              		.loc 1 598 0
 1427 006a 924B     		ldr	r3, .L120+4
 1428 006c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1429 006e 1846     		mov	r0, r3
 1430 0070 FFF7FEFF 		bl	isAudioTone
 1431 0074 0346     		mov	r3, r0
 1432 0076 002B     		cmp	r3, #0
 1433 0078 1ED0     		beq	.L91
 599:.\SirenState.c ****     		{
 600:.\SirenState.c ****     			if(isSong(ToneStatus.currentTone[SPEAKER_2]))
 1434              		.loc 1 600 0
 1435 007a 8E4B     		ldr	r3, .L120+4
 1436 007c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1437 007e 1846     		mov	r0, r3
 1438 0080 FFF7FEFF 		bl	isSong
 1439 0084 0346     		mov	r3, r0
 1440 0086 002B     		cmp	r3, #0
 1441 0088 0ED0     		beq	.L92
 601:.\SirenState.c ****     			{
 602:.\SirenState.c ****     				if(ToneStatus.bRisingEdge[SPEAKER_2])	//Plays BAD BOYS	
 1442              		.loc 1 602 0
 1443 008a 8A4B     		ldr	r3, .L120+4
 1444 008c 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1445 008e 002B     		cmp	r3, #0
 1446 0090 07D0     		beq	.L93
 603:.\SirenState.c ****     					enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1447              		.loc 1 603 0
 1448 0092 884B     		ldr	r3, .L120+4
 1449 0094 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1450 0096 0120     		movs	r0, #1
 1451 0098 1946     		mov	r1, r3
 1452 009a 0122     		movs	r2, #1
 1453 009c FFF7FEFF 		bl	enableSpeakersForAudioTone
 1454 00a0 5FE1     		b	.L81
 1455              	.L93:
 604:.\SirenState.c ****     				else	//Plays NO TONE
 605:.\SirenState.c ****     					disableBothSpeakers();
 1456              		.loc 1 605 0
 1457 00a2 FFF7FEFF 		bl	disableBothSpeakers
 1458 00a6 5CE1     		b	.L81
 1459              	.L92:
 606:.\SirenState.c ****     				
 607:.\SirenState.c ****     			}
 608:.\SirenState.c ****     			else	//Plays ECTO OR COMMAND 
 609:.\SirenState.c ****     				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1460              		.loc 1 609 0
 1461 00a8 824B     		ldr	r3, .L120+4
 1462 00aa DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1463 00ac 0120     		movs	r0, #1
 1464 00ae 1946     		mov	r1, r3
 1465 00b0 0122     		movs	r2, #1
 1466 00b2 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1467 00b6 54E1     		b	.L81
 1468              	.L91:
 610:.\SirenState.c ****     		}
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 38


 611:.\SirenState.c **** 			else if(InputRead.bParkKill)	//Plays NO TONE
 1469              		.loc 1 611 0
 1470 00b8 7D4B     		ldr	r3, .L120
 1471 00ba 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1472 00bc 002B     		cmp	r3, #0
 1473 00be 02D0     		beq	.L96
 612:.\SirenState.c **** 				disableBothSpeakers();
 1474              		.loc 1 612 0
 1475 00c0 FFF7FEFF 		bl	disableBothSpeakers
 1476 00c4 4DE1     		b	.L81
 1477              	.L96:
 613:.\SirenState.c **** 			else if(InputRead.bHornRing)
 1478              		.loc 1 613 0
 1479 00c6 7A4B     		ldr	r3, .L120
 1480 00c8 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1481 00ca 002B     		cmp	r3, #0
 1482 00cc 0CD0     		beq	.L97
 614:.\SirenState.c **** 			{	//Plays NO TONE
 615:.\SirenState.c **** 				bToneChangeOnHornRing = !bToneChangeOnHornRing;
 1483              		.loc 1 615 0
 1484 00ce 7A4B     		ldr	r3, .L120+8
 1485 00d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1486 00d2 002B     		cmp	r3, #0
 1487 00d4 0CBF     		ite	eq
 1488 00d6 0123     		moveq	r3, #1
 1489 00d8 0023     		movne	r3, #0
 1490 00da DBB2     		uxtb	r3, r3
 1491 00dc 1A46     		mov	r2, r3
 1492 00de 764B     		ldr	r3, .L120+8
 1493 00e0 1A70     		strb	r2, [r3]
 616:.\SirenState.c **** 				disableBothSpeakers();
 1494              		.loc 1 616 0
 1495 00e2 FFF7FEFF 		bl	disableBothSpeakers
 1496 00e6 3CE1     		b	.L81
 1497              	.L97:
 617:.\SirenState.c **** 			}
 618:.\SirenState.c **** 			else if(bToneChangeOnHornRing)
 1498              		.loc 1 618 0
 1499 00e8 734B     		ldr	r3, .L120+8
 1500 00ea 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1501 00ec 002B     		cmp	r3, #0
 1502 00ee 2BD0     		beq	.L98
 619:.\SirenState.c **** 			{	//Plays SPEAKER 1 SIREN TONE
 620:.\SirenState.c **** 				enableSpeakerForSirenTone(SPEAKER_1, getAlternatingTone(ToneStatus.currentTone[SPEAKER_1]), 
 1503              		.loc 1 620 0
 1504 00f0 704B     		ldr	r3, .L120+4
 1505 00f2 9B78     		ldrb	r3, [r3, #2]	@ zero_extendqisi2
 1506 00f4 1846     		mov	r0, r3
 1507 00f6 FFF7FEFF 		bl	getAlternatingTone
 1508 00fa 0346     		mov	r3, r0
 1509 00fc 1A46     		mov	r2, r3
 1510 00fe 6D4B     		ldr	r3, .L120+4
 1511 0100 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1512 0102 0020     		movs	r0, #0
 1513 0104 1146     		mov	r1, r2
 1514 0106 0122     		movs	r2, #1
 1515 0108 FFF7FEFF 		bl	enableSpeakerForSirenTone
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 39


 621:.\SirenState.c ****                     true, ToneStatus.bDualDelayEnable);
 622:.\SirenState.c **** 				
 623:.\SirenState.c **** 				if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1516              		.loc 1 623 0
 1517 010c 694B     		ldr	r3, .L120+4
 1518 010e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1519 0110 002B     		cmp	r3, #0
 1520 0112 0ED0     		beq	.L99
 624:.\SirenState.c **** 					enableSpeakerForSirenTone(SPEAKER_2, getAlternatingTone(ToneStatus.currentTone[SPEAKER_2]), 
 1521              		.loc 1 624 0
 1522 0114 674B     		ldr	r3, .L120+4
 1523 0116 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1524 0118 1846     		mov	r0, r3
 1525 011a FFF7FEFF 		bl	getAlternatingTone
 1526 011e 0346     		mov	r3, r0
 1527 0120 1A46     		mov	r2, r3
 1528 0122 644B     		ldr	r3, .L120+4
 1529 0124 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1530 0126 0120     		movs	r0, #1
 1531 0128 1146     		mov	r1, r2
 1532 012a 0122     		movs	r2, #1
 1533 012c FFF7FEFF 		bl	enableSpeakerForSirenTone
 1534 0130 17E1     		b	.L81
 1535              	.L99:
 625:.\SirenState.c ****                         true, ToneStatus.bDualDelayEnable);
 626:.\SirenState.c **** 				else
 627:.\SirenState.c ****                 {
 628:.\SirenState.c ****                     PowerAmpOutput2_Write(false);
 1536              		.loc 1 628 0
 1537 0132 0020     		movs	r0, #0
 1538 0134 FFF7FEFF 		bl	PowerAmpOutput2_Write
 629:.\SirenState.c ****                     enableSpeakerForSirenTone(SPEAKER_2, NO_TONE, false, ToneStatus.bDualDelayEnabl
 1539              		.loc 1 629 0
 1540 0138 5E4B     		ldr	r3, .L120+4
 1541 013a 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1542 013c 0120     		movs	r0, #1
 1543 013e 0021     		movs	r1, #0
 1544 0140 0022     		movs	r2, #0
 1545 0142 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1546 0146 0CE1     		b	.L81
 1547              	.L98:
 630:.\SirenState.c ****                 }
 631:.\SirenState.c **** 			}
 632:.\SirenState.c **** 			else
 633:.\SirenState.c **** 			{	//Plays SPEAKER 1 SIREN TONE
 634:.\SirenState.c **** 				enableSpeakerForSirenTone(SPEAKER_1, ToneStatus.currentTone[SPEAKER_1],
 1548              		.loc 1 634 0
 1549 0148 5A4B     		ldr	r3, .L120+4
 1550 014a 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1551 014c 594B     		ldr	r3, .L120+4
 1552 014e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1553 0150 0020     		movs	r0, #0
 1554 0152 1146     		mov	r1, r2
 1555 0154 0122     		movs	r2, #1
 1556 0156 FFF7FEFF 		bl	enableSpeakerForSirenTone
 635:.\SirenState.c ****                     true, ToneStatus.bDualDelayEnable);
 636:.\SirenState.c **** 				
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 40


 637:.\SirenState.c **** 				if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1557              		.loc 1 637 0
 1558 015a 564B     		ldr	r3, .L120+4
 1559 015c DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1560 015e 002B     		cmp	r3, #0
 1561 0160 09D0     		beq	.L101
 638:.\SirenState.c **** 					enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2],
 1562              		.loc 1 638 0
 1563 0162 544B     		ldr	r3, .L120+4
 1564 0164 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1565 0166 534B     		ldr	r3, .L120+4
 1566 0168 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1567 016a 0120     		movs	r0, #1
 1568 016c 1146     		mov	r1, r2
 1569 016e 0122     		movs	r2, #1
 1570 0170 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1571 0174 F5E0     		b	.L81
 1572              	.L101:
 639:.\SirenState.c ****                         true, ToneStatus.bDualDelayEnable);
 640:.\SirenState.c **** 				else
 641:.\SirenState.c ****                 {
 642:.\SirenState.c **** 				    PowerAmpOutput2_Write(false);
 1573              		.loc 1 642 0
 1574 0176 0020     		movs	r0, #0
 1575 0178 FFF7FEFF 		bl	PowerAmpOutput2_Write
 643:.\SirenState.c ****                     enableSpeakerForSirenTone(SPEAKER_2, NO_TONE, false, ToneStatus.bDualDelayEnabl
 1576              		.loc 1 643 0
 1577 017c 4D4B     		ldr	r3, .L120+4
 1578 017e 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1579 0180 0120     		movs	r0, #1
 1580 0182 0021     		movs	r1, #0
 1581 0184 0022     		movs	r2, #0
 1582 0186 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1583 018a EAE0     		b	.L81
 1584              	.L84:
 644:.\SirenState.c ****                 }
 645:.\SirenState.c **** 			}
 646:.\SirenState.c **** 		}
 647:.\SirenState.c **** 	}
 648:.\SirenState.c **** 	else if(ToneStatus.currentTone[SPEAKER_2] != NO_TONE)
 1585              		.loc 1 648 0
 1586 018c 494B     		ldr	r3, .L120+4
 1587 018e DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1588 0190 002B     		cmp	r3, #0
 1589 0192 6FD0     		beq	.L102
 649:.\SirenState.c **** 	{
 650:.\SirenState.c **** 		if(isAudioTone(ToneStatus.currentTone[SPEAKER_2]))
 1590              		.loc 1 650 0
 1591 0194 474B     		ldr	r3, .L120+4
 1592 0196 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1593 0198 1846     		mov	r0, r3
 1594 019a FFF7FEFF 		bl	isAudioTone
 1595 019e 0346     		mov	r3, r0
 1596 01a0 002B     		cmp	r3, #0
 1597 01a2 1ED0     		beq	.L103
 651:.\SirenState.c **** 		{
 652:.\SirenState.c **** 			if(isSong(ToneStatus.currentTone[SPEAKER_2]))
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 41


 1598              		.loc 1 652 0
 1599 01a4 434B     		ldr	r3, .L120+4
 1600 01a6 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1601 01a8 1846     		mov	r0, r3
 1602 01aa FFF7FEFF 		bl	isSong
 1603 01ae 0346     		mov	r3, r0
 1604 01b0 002B     		cmp	r3, #0
 1605 01b2 0ED0     		beq	.L104
 653:.\SirenState.c **** 			{
 654:.\SirenState.c **** 				if(ToneStatus.bRisingEdge[SPEAKER_2])	//Plays BAD BOYS	
 1606              		.loc 1 654 0
 1607 01b4 3F4B     		ldr	r3, .L120+4
 1608 01b6 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1609 01b8 002B     		cmp	r3, #0
 1610 01ba 07D0     		beq	.L105
 655:.\SirenState.c **** 					enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1611              		.loc 1 655 0
 1612 01bc 3D4B     		ldr	r3, .L120+4
 1613 01be DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1614 01c0 0120     		movs	r0, #1
 1615 01c2 1946     		mov	r1, r3
 1616 01c4 0122     		movs	r2, #1
 1617 01c6 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1618 01ca CAE0     		b	.L81
 1619              	.L105:
 656:.\SirenState.c **** 				else	//Plays NO TONE
 657:.\SirenState.c **** 					disableBothSpeakers();
 1620              		.loc 1 657 0
 1621 01cc FFF7FEFF 		bl	disableBothSpeakers
 1622 01d0 C7E0     		b	.L81
 1623              	.L104:
 658:.\SirenState.c **** 				
 659:.\SirenState.c **** 			}
 660:.\SirenState.c **** 			else	//Plays ECTO OR COMMAND 
 661:.\SirenState.c **** 				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2], true);
 1624              		.loc 1 661 0
 1625 01d2 384B     		ldr	r3, .L120+4
 1626 01d4 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1627 01d6 0120     		movs	r0, #1
 1628 01d8 1946     		mov	r1, r3
 1629 01da 0122     		movs	r2, #1
 1630 01dc FFF7FEFF 		bl	enableSpeakersForAudioTone
 1631 01e0 BFE0     		b	.L81
 1632              	.L103:
 662:.\SirenState.c **** 		}
 663:.\SirenState.c **** 		else
 664:.\SirenState.c **** 		{	
 665:.\SirenState.c **** 			if(InputRead.bParkKill)	//Plays NO TONE
 1633              		.loc 1 665 0
 1634 01e2 334B     		ldr	r3, .L120
 1635 01e4 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1636 01e6 002B     		cmp	r3, #0
 1637 01e8 02D0     		beq	.L109
 666:.\SirenState.c **** 				disableBothSpeakers();
 1638              		.loc 1 666 0
 1639 01ea FFF7FEFF 		bl	disableBothSpeakers
 1640 01ee B8E0     		b	.L81
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 42


 1641              	.L109:
 667:.\SirenState.c **** 			else if(InputRead.bHornRing)
 1642              		.loc 1 667 0
 1643 01f0 2F4B     		ldr	r3, .L120
 1644 01f2 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1645 01f4 002B     		cmp	r3, #0
 1646 01f6 0CD0     		beq	.L110
 668:.\SirenState.c **** 			{	//Plays NO TONE
 669:.\SirenState.c **** 				bToneChangeOnHornRing = !bToneChangeOnHornRing;
 1647              		.loc 1 669 0
 1648 01f8 2F4B     		ldr	r3, .L120+8
 1649 01fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1650 01fc 002B     		cmp	r3, #0
 1651 01fe 0CBF     		ite	eq
 1652 0200 0123     		moveq	r3, #1
 1653 0202 0023     		movne	r3, #0
 1654 0204 DBB2     		uxtb	r3, r3
 1655 0206 1A46     		mov	r2, r3
 1656 0208 2B4B     		ldr	r3, .L120+8
 1657 020a 1A70     		strb	r2, [r3]
 670:.\SirenState.c **** 				disableBothSpeakers();
 1658              		.loc 1 670 0
 1659 020c FFF7FEFF 		bl	disableBothSpeakers
 1660 0210 A7E0     		b	.L81
 1661              	.L110:
 671:.\SirenState.c **** 			}
 672:.\SirenState.c **** 			else if(bToneChangeOnHornRing)
 1662              		.loc 1 672 0
 1663 0212 294B     		ldr	r3, .L120+8
 1664 0214 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1665 0216 002B     		cmp	r3, #0
 1666 0218 18D0     		beq	.L111
 673:.\SirenState.c **** 			{	//Plays SPEAKER 2 SIREN TONE
 674:.\SirenState.c **** 				PowerAmpOutput1_Write(false);
 1667              		.loc 1 674 0
 1668 021a 0020     		movs	r0, #0
 1669 021c FFF7FEFF 		bl	PowerAmpOutput1_Write
 675:.\SirenState.c ****                 enableSpeakerForSirenTone(SPEAKER_1, NO_TONE, false, ToneStatus.bDualDelayEnable);
 1670              		.loc 1 675 0
 1671 0220 244B     		ldr	r3, .L120+4
 1672 0222 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1673 0224 0020     		movs	r0, #0
 1674 0226 0021     		movs	r1, #0
 1675 0228 0022     		movs	r2, #0
 1676 022a FFF7FEFF 		bl	enableSpeakerForSirenTone
 676:.\SirenState.c **** 				enableSpeakerForSirenTone(SPEAKER_2, getAlternatingTone(ToneStatus.currentTone[SPEAKER_2]),
 1677              		.loc 1 676 0
 1678 022e 214B     		ldr	r3, .L120+4
 1679 0230 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1680 0232 1846     		mov	r0, r3
 1681 0234 FFF7FEFF 		bl	getAlternatingTone
 1682 0238 0346     		mov	r3, r0
 1683 023a 1A46     		mov	r2, r3
 1684 023c 1C4B     		ldr	r3, .L120
 1685 023e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1686 0240 0120     		movs	r0, #1
 1687 0242 1146     		mov	r1, r2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 43


 1688 0244 0122     		movs	r2, #1
 1689 0246 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1690 024a 8AE0     		b	.L81
 1691              	.L111:
 677:.\SirenState.c ****                     true, InputRead.bDualDelay);
 678:.\SirenState.c **** 			}
 679:.\SirenState.c **** 			else
 680:.\SirenState.c **** 			{	//Plays SPEAKER 2 SIREN TONE
 681:.\SirenState.c **** 				PowerAmpOutput1_Write(false);
 1692              		.loc 1 681 0
 1693 024c 0020     		movs	r0, #0
 1694 024e FFF7FEFF 		bl	PowerAmpOutput1_Write
 682:.\SirenState.c ****                 enableSpeakerForSirenTone(SPEAKER_1, NO_TONE, false, ToneStatus.bDualDelayEnable);
 1695              		.loc 1 682 0
 1696 0252 184B     		ldr	r3, .L120+4
 1697 0254 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1698 0256 0020     		movs	r0, #0
 1699 0258 0021     		movs	r1, #0
 1700 025a 0022     		movs	r2, #0
 1701 025c FFF7FEFF 		bl	enableSpeakerForSirenTone
 683:.\SirenState.c **** 				enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.currentTone[SPEAKER_2],
 1702              		.loc 1 683 0
 1703 0260 144B     		ldr	r3, .L120+4
 1704 0262 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1705 0264 124B     		ldr	r3, .L120
 1706 0266 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1707 0268 0120     		movs	r0, #1
 1708 026a 1146     		mov	r1, r2
 1709 026c 0122     		movs	r2, #1
 1710 026e FFF7FEFF 		bl	enableSpeakerForSirenTone
 1711 0272 76E0     		b	.L81
 1712              	.L102:
 684:.\SirenState.c ****                     true, InputRead.bDualDelay);
 685:.\SirenState.c **** 			}
 686:.\SirenState.c **** 		}
 687:.\SirenState.c **** 	}
 688:.\SirenState.c **** 	else
 689:.\SirenState.c **** 	{	
 690:.\SirenState.c ****         if(InputRead.bParkKill)
 1713              		.loc 1 690 0
 1714 0274 0E4B     		ldr	r3, .L120
 1715 0276 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1716 0278 002B     		cmp	r3, #0
 1717 027a 02D0     		beq	.L112
 691:.\SirenState.c ****             disableBothSpeakers();
 1718              		.loc 1 691 0
 1719 027c FFF7FEFF 		bl	disableBothSpeakers
 1720 0280 6FE0     		b	.L81
 1721              	.L112:
 692:.\SirenState.c ****         else
 693:.\SirenState.c ****         {
 694:.\SirenState.c ****     		if(InputRead.bHornRing)
 1722              		.loc 1 694 0
 1723 0282 0B4B     		ldr	r3, .L120
 1724 0284 DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1725 0286 002B     		cmp	r3, #0
 1726 0288 18D0     		beq	.L113
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 44


 695:.\SirenState.c ****     		{	//Plays HORN
 696:.\SirenState.c ****     			bToneChangeOnHornRing = false;
 1727              		.loc 1 696 0
 1728 028a 0B4B     		ldr	r3, .L120+8
 1729 028c 0022     		movs	r2, #0
 1730 028e 1A70     		strb	r2, [r3]
 697:.\SirenState.c ****     			deactivateManualWail();
 1731              		.loc 1 697 0
 1732 0290 FFF7FEFF 		bl	deactivateManualWail
 698:.\SirenState.c ****     			enableSpeakerForSirenTone(SPEAKER_1, HORN, false, false);
 1733              		.loc 1 698 0
 1734 0294 0020     		movs	r0, #0
 1735 0296 0521     		movs	r1, #5
 1736 0298 0022     		movs	r2, #0
 1737 029a 0023     		movs	r3, #0
 1738 029c FFF7FEFF 		bl	enableSpeakerForSirenTone
 699:.\SirenState.c ****     			enableSpeakerForSirenTone(SPEAKER_2, HORN, false, false);
 1739              		.loc 1 699 0
 1740 02a0 0120     		movs	r0, #1
 1741 02a2 0521     		movs	r1, #5
 1742 02a4 0022     		movs	r2, #0
 1743 02a6 0023     		movs	r3, #0
 1744 02a8 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1745 02ac 59E0     		b	.L81
 1746              	.L121:
 1747 02ae 00BF     		.align	2
 1748              	.L120:
 1749 02b0 0C000000 		.word	InputRead
 1750 02b4 14000000 		.word	ToneStatus
 1751 02b8 1E000000 		.word	bToneChangeOnHornRing.7384
 1752              	.L113:
 700:.\SirenState.c ****     		}
 701:.\SirenState.c ****     		else if(isTrailingTone(ToneStatus.previousTone[SPEAKER_1]))
 1753              		.loc 1 701 0
 1754 02bc 294B     		ldr	r3, .L122
 1755 02be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1756 02c0 1846     		mov	r0, r3
 1757 02c2 FFF7FEFF 		bl	isTrailingTone
 1758 02c6 0346     		mov	r3, r0
 1759 02c8 002B     		cmp	r3, #0
 1760 02ca 1ED0     		beq	.L114
 702:.\SirenState.c ****     		{
 703:.\SirenState.c ****     			if(isAudioTone(ToneStatus.previousTone[SPEAKER_1]))	//Plays ECTO or COMMAND	
 1761              		.loc 1 703 0
 1762 02cc 254B     		ldr	r3, .L122
 1763 02ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1764 02d0 1846     		mov	r0, r3
 1765 02d2 FFF7FEFF 		bl	isAudioTone
 1766 02d6 0346     		mov	r3, r0
 1767 02d8 002B     		cmp	r3, #0
 1768 02da 07D0     		beq	.L115
 704:.\SirenState.c ****     				enableSpeakersForAudioTone(SPEAKER_1, ToneStatus.previousTone[SPEAKER_1], false);
 1769              		.loc 1 704 0
 1770 02dc 214B     		ldr	r3, .L122
 1771 02de 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1772 02e0 0020     		movs	r0, #0
 1773 02e2 1946     		mov	r1, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 45


 1774 02e4 0022     		movs	r2, #0
 1775 02e6 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1776 02ea 07E0     		b	.L116
 1777              	.L115:
 705:.\SirenState.c ****     			else	//Plays MANUAL WAIL
 706:.\SirenState.c ****     				enableSpeakerForSirenTone(SPEAKER_1, ToneStatus.previousTone[SPEAKER_1], false, false);	
 1778              		.loc 1 706 0
 1779 02ec 1D4B     		ldr	r3, .L122
 1780 02ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1781 02f0 0020     		movs	r0, #0
 1782 02f2 1946     		mov	r1, r3
 1783 02f4 0022     		movs	r2, #0
 1784 02f6 0023     		movs	r3, #0
 1785 02f8 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1786              	.L116:
 707:.\SirenState.c ****                 
 708:.\SirenState.c ****                 ToneStatus.previousTone[SPEAKER_1] = NO_TONE;
 1787              		.loc 1 708 0
 1788 02fc 194B     		ldr	r3, .L122
 1789 02fe 0022     		movs	r2, #0
 1790 0300 1A70     		strb	r2, [r3]
 709:.\SirenState.c ****                 bToneChangeOnHornRing = false;
 1791              		.loc 1 709 0
 1792 0302 194B     		ldr	r3, .L122+4
 1793 0304 0022     		movs	r2, #0
 1794 0306 1A70     		strb	r2, [r3]
 1795 0308 2BE0     		b	.L81
 1796              	.L114:
 710:.\SirenState.c ****     		}
 711:.\SirenState.c ****     		else if(isTrailingTone(ToneStatus.previousTone[SPEAKER_2]))
 1797              		.loc 1 711 0
 1798 030a 164B     		ldr	r3, .L122
 1799 030c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1800 030e 1846     		mov	r0, r3
 1801 0310 FFF7FEFF 		bl	isTrailingTone
 1802 0314 0346     		mov	r3, r0
 1803 0316 002B     		cmp	r3, #0
 1804 0318 1ED0     		beq	.L117
 712:.\SirenState.c ****     		{
 713:.\SirenState.c ****     			if(isAudioTone(ToneStatus.previousTone[SPEAKER_2]))	//Plays ECTO or COMMAND	
 1805              		.loc 1 713 0
 1806 031a 124B     		ldr	r3, .L122
 1807 031c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1808 031e 1846     		mov	r0, r3
 1809 0320 FFF7FEFF 		bl	isAudioTone
 1810 0324 0346     		mov	r3, r0
 1811 0326 002B     		cmp	r3, #0
 1812 0328 07D0     		beq	.L118
 714:.\SirenState.c ****     				enableSpeakersForAudioTone(SPEAKER_2, ToneStatus.previousTone[SPEAKER_2], false);	
 1813              		.loc 1 714 0
 1814 032a 0E4B     		ldr	r3, .L122
 1815 032c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1816 032e 0120     		movs	r0, #1
 1817 0330 1946     		mov	r1, r3
 1818 0332 0022     		movs	r2, #0
 1819 0334 FFF7FEFF 		bl	enableSpeakersForAudioTone
 1820 0338 07E0     		b	.L119
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 46


 1821              	.L118:
 715:.\SirenState.c ****     			else	//Plays MANUAL WAIL	
 716:.\SirenState.c ****     				enableSpeakerForSirenTone(SPEAKER_2, ToneStatus.previousTone[SPEAKER_2], false, false);	
 1822              		.loc 1 716 0
 1823 033a 0A4B     		ldr	r3, .L122
 1824 033c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1825 033e 0120     		movs	r0, #1
 1826 0340 1946     		mov	r1, r3
 1827 0342 0022     		movs	r2, #0
 1828 0344 0023     		movs	r3, #0
 1829 0346 FFF7FEFF 		bl	enableSpeakerForSirenTone
 1830              	.L119:
 717:.\SirenState.c ****                     
 718:.\SirenState.c ****                 ToneStatus.previousTone[SPEAKER_2] = NO_TONE;
 1831              		.loc 1 718 0
 1832 034a 064B     		ldr	r3, .L122
 1833 034c 0022     		movs	r2, #0
 1834 034e 5A70     		strb	r2, [r3, #1]
 719:.\SirenState.c ****                 bToneChangeOnHornRing = false;
 1835              		.loc 1 719 0
 1836 0350 054B     		ldr	r3, .L122+4
 1837 0352 0022     		movs	r2, #0
 1838 0354 1A70     		strb	r2, [r3]
 1839 0356 04E0     		b	.L81
 1840              	.L117:
 720:.\SirenState.c ****     		}
 721:.\SirenState.c ****     		else	//Plays NO TONE
 722:.\SirenState.c ****             {
 723:.\SirenState.c ****                 bToneChangeOnHornRing = false;
 1841              		.loc 1 723 0
 1842 0358 034B     		ldr	r3, .L122+4
 1843 035a 0022     		movs	r2, #0
 1844 035c 1A70     		strb	r2, [r3]
 724:.\SirenState.c ****     			disableBothSpeakers();
 1845              		.loc 1 724 0
 1846 035e FFF7FEFF 		bl	disableBothSpeakers
 1847              	.L81:
 725:.\SirenState.c ****             }
 726:.\SirenState.c ****         }
 727:.\SirenState.c **** 	}
 728:.\SirenState.c **** }
 1848              		.loc 1 728 0
 1849 0362 80BD     		pop	{r7, pc}
 1850              	.L123:
 1851              		.align	2
 1852              	.L122:
 1853 0364 14000000 		.word	ToneStatus
 1854 0368 1E000000 		.word	bToneChangeOnHornRing.7384
 1855              		.cfi_endproc
 1856              	.LFE76:
 1857              		.size	decideTonesToPlay, .-decideTonesToPlay
 1858              		.section	.text.enableSpeakerForSirenTone,"ax",%progbits
 1859              		.align	2
 1860              		.thumb
 1861              		.thumb_func
 1862              		.type	enableSpeakerForSirenTone, %function
 1863              	enableSpeakerForSirenTone:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 47


 1864              	.LFB77:
 729:.\SirenState.c **** 
 730:.\SirenState.c **** /*******************************************************************************
 731:.\SirenState.c **** * Function Name: enableSpeakerForSirenTone
 732:.\SirenState.c **** ********************************************************************************
 733:.\SirenState.c **** *
 734:.\SirenState.c **** * Summary:
 735:.\SirenState.c **** *   Procedure for enabling a siren tone for the selected speaker
 736:.\SirenState.c **** *
 737:.\SirenState.c **** * Parameters: 
 738:.\SirenState.c **** *   bSpeaker: Speaker selection (SPEAKER_1 or SPEAKER_2)
 739:.\SirenState.c **** *   toneSelection: The tone to play
 740:.\SirenState.c **** *   bInputEnable: The current input status
 741:.\SirenState.c **** *   bDelay: The Dual Delay status
 742:.\SirenState.c **** *
 743:.\SirenState.c **** * Return:
 744:.\SirenState.c **** *   TRUE for valid inputs, FALSE otherwise
 745:.\SirenState.c **** *
 746:.\SirenState.c **** *******************************************************************************/
 747:.\SirenState.c **** static uint8 enableSpeakerForSirenTone(uint8 bSpeaker, enum ToneType toneSelection,
 748:.\SirenState.c ****                                     uint8 bInputEnable, uint8 bDelay)
 749:.\SirenState.c **** {
 1865              		.loc 1 749 0
 1866              		.cfi_startproc
 1867              		@ args = 0, pretend = 0, frame = 8
 1868              		@ frame_needed = 1, uses_anonymous_args = 0
 1869 0000 90B5     		push	{r4, r7, lr}
 1870              		.cfi_def_cfa_offset 12
 1871              		.cfi_offset 4, -12
 1872              		.cfi_offset 7, -8
 1873              		.cfi_offset 14, -4
 1874 0002 83B0     		sub	sp, sp, #12
 1875              		.cfi_def_cfa_offset 24
 1876 0004 00AF     		add	r7, sp, #0
 1877              		.cfi_def_cfa_register 7
 1878 0006 0446     		mov	r4, r0
 1879 0008 0846     		mov	r0, r1
 1880 000a 1146     		mov	r1, r2
 1881 000c 1A46     		mov	r2, r3
 1882 000e 2346     		mov	r3, r4
 1883 0010 FB71     		strb	r3, [r7, #7]
 1884 0012 0346     		mov	r3, r0
 1885 0014 BB71     		strb	r3, [r7, #6]
 1886 0016 0B46     		mov	r3, r1
 1887 0018 7B71     		strb	r3, [r7, #5]
 1888 001a 1346     		mov	r3, r2
 1889 001c 3B71     		strb	r3, [r7, #4]
 750:.\SirenState.c **** 	if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 1890              		.loc 1 750 0
 1891 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1892 0020 002B     		cmp	r3, #0
 1893 0022 04D0     		beq	.L125
 1894              		.loc 1 750 0 is_stmt 0 discriminator 1
 1895 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1896 0026 012B     		cmp	r3, #1
 1897 0028 01D0     		beq	.L125
 751:.\SirenState.c ****         return false;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 48


 1898              		.loc 1 751 0 is_stmt 1
 1899 002a 0023     		movs	r3, #0
 1900 002c 28E0     		b	.L126
 1901              	.L125:
 752:.\SirenState.c ****     
 753:.\SirenState.c ****     if((toneSelection < NO_TONE) || (toneSelection > TEST_TONE))
 1902              		.loc 1 753 0
 1903 002e BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1904 0030 162B     		cmp	r3, #22
 1905 0032 01D9     		bls	.L127
 754:.\SirenState.c ****         return false;
 1906              		.loc 1 754 0
 1907 0034 0023     		movs	r3, #0
 1908 0036 23E0     		b	.L126
 1909              	.L127:
 755:.\SirenState.c ****     
 756:.\SirenState.c ****     if((bInputEnable != true) && (bInputEnable != false))
 1910              		.loc 1 756 0
 1911 0038 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1912 003a 012B     		cmp	r3, #1
 1913 003c 04D0     		beq	.L128
 1914              		.loc 1 756 0 is_stmt 0 discriminator 1
 1915 003e 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1916 0040 002B     		cmp	r3, #0
 1917 0042 01D0     		beq	.L128
 757:.\SirenState.c ****         return false;
 1918              		.loc 1 757 0 is_stmt 1
 1919 0044 0023     		movs	r3, #0
 1920 0046 1BE0     		b	.L126
 1921              	.L128:
 758:.\SirenState.c ****     
 759:.\SirenState.c ****     deactivateAudio();
 1922              		.loc 1 759 0
 1923 0048 FFF7FEFF 		bl	deactivateAudio
 760:.\SirenState.c ****     playAudioTone(bSpeaker, NO_TONE, false);
 1924              		.loc 1 760 0
 1925 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1926 004e 1846     		mov	r0, r3
 1927 0050 0021     		movs	r1, #0
 1928 0052 0022     		movs	r2, #0
 1929 0054 FFF7FEFF 		bl	playAudioTone
 761:.\SirenState.c **** 	playPWMTone(bSpeaker, toneSelection, bInputEnable, bDelay);
 1930              		.loc 1 761 0
 1931 0058 F879     		ldrb	r0, [r7, #7]	@ zero_extendqisi2
 1932 005a B979     		ldrb	r1, [r7, #6]	@ zero_extendqisi2
 1933 005c 7A79     		ldrb	r2, [r7, #5]	@ zero_extendqisi2
 1934 005e 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 1935 0060 FFF7FEFF 		bl	playPWMTone
 762:.\SirenState.c **** 	
 763:.\SirenState.c ****     if(toneSelection != NO_TONE)
 1936              		.loc 1 763 0
 1937 0064 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1938 0066 002B     		cmp	r3, #0
 1939 0068 09D0     		beq	.L129
 764:.\SirenState.c ****     {
 765:.\SirenState.c ****     	if(bSpeaker)
 1940              		.loc 1 765 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 49


 1941 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1942 006c 002B     		cmp	r3, #0
 1943 006e 03D0     		beq	.L130
 766:.\SirenState.c ****     		PowerAmpOutput2_Write(true);
 1944              		.loc 1 766 0
 1945 0070 0120     		movs	r0, #1
 1946 0072 FFF7FEFF 		bl	PowerAmpOutput2_Write
 1947 0076 02E0     		b	.L129
 1948              	.L130:
 767:.\SirenState.c ****     	else
 768:.\SirenState.c ****     		PowerAmpOutput1_Write(true);
 1949              		.loc 1 768 0
 1950 0078 0120     		movs	r0, #1
 1951 007a FFF7FEFF 		bl	PowerAmpOutput1_Write
 1952              	.L129:
 769:.\SirenState.c ****     }
 770:.\SirenState.c ****         
 771:.\SirenState.c ****     return true;
 1953              		.loc 1 771 0
 1954 007e 0123     		movs	r3, #1
 1955              	.L126:
 772:.\SirenState.c **** }
 1956              		.loc 1 772 0
 1957 0080 1846     		mov	r0, r3
 1958 0082 0C37     		adds	r7, r7, #12
 1959              		.cfi_def_cfa_offset 12
 1960 0084 BD46     		mov	sp, r7
 1961              		.cfi_def_cfa_register 13
 1962              		@ sp needed
 1963 0086 90BD     		pop	{r4, r7, pc}
 1964              		.cfi_endproc
 1965              	.LFE77:
 1966              		.size	enableSpeakerForSirenTone, .-enableSpeakerForSirenTone
 1967              		.section	.text.enableSpeakersForAudioTone,"ax",%progbits
 1968              		.align	2
 1969              		.thumb
 1970              		.thumb_func
 1971              		.type	enableSpeakersForAudioTone, %function
 1972              	enableSpeakersForAudioTone:
 1973              	.LFB78:
 773:.\SirenState.c **** 
 774:.\SirenState.c **** /*******************************************************************************
 775:.\SirenState.c **** * Function Name: enableSpeakersForAudioTone
 776:.\SirenState.c **** ********************************************************************************
 777:.\SirenState.c **** *
 778:.\SirenState.c **** * Summary:
 779:.\SirenState.c **** *   Procedure for enabling an audio tone for the selected speaker
 780:.\SirenState.c **** *
 781:.\SirenState.c **** * Parameters: 
 782:.\SirenState.c **** *   bSpeaker: Speaker selection (SPEAKER_1 or SPEAKER_2)
 783:.\SirenState.c **** *   toneSelection: The tone to play
 784:.\SirenState.c **** *   bInputEnable: The current input status
 785:.\SirenState.c **** *
 786:.\SirenState.c **** * Return:
 787:.\SirenState.c **** *   TRUE for valid inputs, FALSE otherwise
 788:.\SirenState.c **** *
 789:.\SirenState.c **** *******************************************************************************/
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 50


 790:.\SirenState.c **** static uint8 enableSpeakersForAudioTone(uint8 bSpeaker, enum ToneType toneSelection,
 791:.\SirenState.c ****                                         uint8 bInputEnable)
 792:.\SirenState.c **** {
 1974              		.loc 1 792 0
 1975              		.cfi_startproc
 1976              		@ args = 0, pretend = 0, frame = 8
 1977              		@ frame_needed = 1, uses_anonymous_args = 0
 1978 0000 80B5     		push	{r7, lr}
 1979              		.cfi_def_cfa_offset 8
 1980              		.cfi_offset 7, -8
 1981              		.cfi_offset 14, -4
 1982 0002 82B0     		sub	sp, sp, #8
 1983              		.cfi_def_cfa_offset 16
 1984 0004 00AF     		add	r7, sp, #0
 1985              		.cfi_def_cfa_register 7
 1986 0006 0346     		mov	r3, r0
 1987 0008 FB71     		strb	r3, [r7, #7]
 1988 000a 0B46     		mov	r3, r1
 1989 000c BB71     		strb	r3, [r7, #6]
 1990 000e 1346     		mov	r3, r2
 1991 0010 7B71     		strb	r3, [r7, #5]
 793:.\SirenState.c **** 	if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 1992              		.loc 1 793 0
 1993 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1994 0014 002B     		cmp	r3, #0
 1995 0016 04D0     		beq	.L132
 1996              		.loc 1 793 0 is_stmt 0 discriminator 1
 1997 0018 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1998 001a 012B     		cmp	r3, #1
 1999 001c 01D0     		beq	.L132
 794:.\SirenState.c ****         return false;
 2000              		.loc 1 794 0 is_stmt 1
 2001 001e 0023     		movs	r3, #0
 2002 0020 27E0     		b	.L133
 2003              	.L132:
 795:.\SirenState.c ****     
 796:.\SirenState.c ****     if((toneSelection < WAIL) || (toneSelection > TEST_TONE))
 2004              		.loc 1 796 0
 2005 0022 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2006 0024 002B     		cmp	r3, #0
 2007 0026 02D0     		beq	.L134
 2008              		.loc 1 796 0 is_stmt 0 discriminator 1
 2009 0028 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 2010 002a 162B     		cmp	r3, #22
 2011 002c 01D9     		bls	.L135
 2012              	.L134:
 797:.\SirenState.c ****         return false;
 2013              		.loc 1 797 0 is_stmt 1
 2014 002e 0023     		movs	r3, #0
 2015 0030 1FE0     		b	.L133
 2016              	.L135:
 798:.\SirenState.c ****     
 799:.\SirenState.c ****     if((bInputEnable != true) && (bInputEnable != false))
 2017              		.loc 1 799 0
 2018 0032 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2019 0034 012B     		cmp	r3, #1
 2020 0036 04D0     		beq	.L136
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 51


 2021              		.loc 1 799 0 is_stmt 0 discriminator 1
 2022 0038 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2023 003a 002B     		cmp	r3, #0
 2024 003c 01D0     		beq	.L136
 800:.\SirenState.c ****         return false;
 2025              		.loc 1 800 0 is_stmt 1
 2026 003e 0023     		movs	r3, #0
 2027 0040 17E0     		b	.L133
 2028              	.L136:
 801:.\SirenState.c ****     
 802:.\SirenState.c ****     deactivateManualWail();
 2029              		.loc 1 802 0
 2030 0042 FFF7FEFF 		bl	deactivateManualWail
 803:.\SirenState.c ****     playPWMTone(bSpeaker, NO_TONE, false, false);
 2031              		.loc 1 803 0
 2032 0046 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2033 0048 1846     		mov	r0, r3
 2034 004a 0021     		movs	r1, #0
 2035 004c 0022     		movs	r2, #0
 2036 004e 0023     		movs	r3, #0
 2037 0050 FFF7FEFF 		bl	playPWMTone
 804:.\SirenState.c **** 	playAudioTone(bSpeaker, toneSelection, bInputEnable);
 2038              		.loc 1 804 0
 2039 0054 F979     		ldrb	r1, [r7, #7]	@ zero_extendqisi2
 2040 0056 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 2041 0058 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 2042 005a 0846     		mov	r0, r1
 2043 005c 1146     		mov	r1, r2
 2044 005e 1A46     		mov	r2, r3
 2045 0060 FFF7FEFF 		bl	playAudioTone
 805:.\SirenState.c **** 	PowerAmpOutput1_Write(true);
 2046              		.loc 1 805 0
 2047 0064 0120     		movs	r0, #1
 2048 0066 FFF7FEFF 		bl	PowerAmpOutput1_Write
 806:.\SirenState.c **** 	PowerAmpOutput2_Write(true);
 2049              		.loc 1 806 0
 2050 006a 0120     		movs	r0, #1
 2051 006c FFF7FEFF 		bl	PowerAmpOutput2_Write
 807:.\SirenState.c ****     
 808:.\SirenState.c ****     return true;
 2052              		.loc 1 808 0
 2053 0070 0123     		movs	r3, #1
 2054              	.L133:
 809:.\SirenState.c **** }
 2055              		.loc 1 809 0
 2056 0072 1846     		mov	r0, r3
 2057 0074 0837     		adds	r7, r7, #8
 2058              		.cfi_def_cfa_offset 8
 2059 0076 BD46     		mov	sp, r7
 2060              		.cfi_def_cfa_register 13
 2061              		@ sp needed
 2062 0078 80BD     		pop	{r7, pc}
 2063              		.cfi_endproc
 2064              	.LFE78:
 2065              		.size	enableSpeakersForAudioTone, .-enableSpeakersForAudioTone
 2066 007a 00BF     		.section	.text.getHighestPriorityChannel,"ax",%progbits
 2067              		.align	2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 52


 2068              		.thumb
 2069              		.thumb_func
 2070              		.type	getHighestPriorityChannel, %function
 2071              	getHighestPriorityChannel:
 2072              	.LFB79:
 810:.\SirenState.c **** 
 811:.\SirenState.c **** /*******************************************************************************
 812:.\SirenState.c **** * Function Name: getHighestPriorityInput
 813:.\SirenState.c **** ********************************************************************************
 814:.\SirenState.c **** *
 815:.\SirenState.c **** * Summary:
 816:.\SirenState.c **** *  Determines the active tone with the highest priority
 817:.\SirenState.c **** *
 818:.\SirenState.c **** * Parameters: 
 819:.\SirenState.c **** *   bSpeakerNumber - The speaker selection for the input reading
 820:.\SirenState.c **** *
 821:.\SirenState.c **** * Return:
 822:.\SirenState.c **** *   The active tone mode with the highest priority
 823:.\SirenState.c **** *
 824:.\SirenState.c **** *******************************************************************************/
 825:.\SirenState.c **** static enum ChannelIndex getHighestPriorityChannel(uint8 bSpeakerNumber)
 826:.\SirenState.c **** {
 2073              		.loc 1 826 0
 2074              		.cfi_startproc
 2075              		@ args = 0, pretend = 0, frame = 16
 2076              		@ frame_needed = 1, uses_anonymous_args = 0
 2077 0000 80B5     		push	{r7, lr}
 2078              		.cfi_def_cfa_offset 8
 2079              		.cfi_offset 7, -8
 2080              		.cfi_offset 14, -4
 2081 0002 84B0     		sub	sp, sp, #16
 2082              		.cfi_def_cfa_offset 24
 2083 0004 00AF     		add	r7, sp, #0
 2084              		.cfi_def_cfa_register 7
 2085 0006 0346     		mov	r3, r0
 2086 0008 FB71     		strb	r3, [r7, #7]
 827:.\SirenState.c ****     uint8 modeStatusByte = 0;
 2087              		.loc 1 827 0
 2088 000a 0023     		movs	r3, #0
 2089 000c FB73     		strb	r3, [r7, #15]
 828:.\SirenState.c ****     
 829:.\SirenState.c ****     if((bSpeakerNumber != SPEAKER_1) && (bSpeakerNumber != SPEAKER_2))
 2090              		.loc 1 829 0
 2091 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2092 0010 002B     		cmp	r3, #0
 2093 0012 04D0     		beq	.L138
 2094              		.loc 1 829 0 is_stmt 0 discriminator 1
 2095 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2096 0016 012B     		cmp	r3, #1
 2097 0018 01D0     		beq	.L138
 830:.\SirenState.c ****         return NO_CHANNEL;
 2098              		.loc 1 830 0 is_stmt 1
 2099 001a FF23     		movs	r3, #255
 2100 001c 36E0     		b	.L139
 2101              	.L138:
 831:.\SirenState.c ****     
 832:.\SirenState.c ****     if(bSpeakerNumber)
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 53


 2102              		.loc 1 832 0
 2103 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2104 0020 002B     		cmp	r3, #0
 2105 0022 04D0     		beq	.L140
 833:.\SirenState.c ****         modeStatusByte = ModeStatus2_Read();
 2106              		.loc 1 833 0
 2107 0024 FFF7FEFF 		bl	ModeStatus2_Read
 2108 0028 0346     		mov	r3, r0
 2109 002a FB73     		strb	r3, [r7, #15]
 2110 002c 03E0     		b	.L141
 2111              	.L140:
 834:.\SirenState.c ****     else
 835:.\SirenState.c ****         modeStatusByte = ModeStatus_Read();
 2112              		.loc 1 835 0
 2113 002e FFF7FEFF 		bl	ModeStatus_Read
 2114 0032 0346     		mov	r3, r0
 2115 0034 FB73     		strb	r3, [r7, #15]
 2116              	.L141:
 836:.\SirenState.c ****     
 837:.\SirenState.c ****     if(modeStatusByte & 0x20)
 2117              		.loc 1 837 0
 2118 0036 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2119 0038 03F02003 		and	r3, r3, #32
 2120 003c 002B     		cmp	r3, #0
 2121 003e 01D0     		beq	.L142
 838:.\SirenState.c ****         return CHANNEL_6;
 2122              		.loc 1 838 0
 2123 0040 0523     		movs	r3, #5
 2124 0042 23E0     		b	.L139
 2125              	.L142:
 839:.\SirenState.c ****     if(modeStatusByte & 0x10)
 2126              		.loc 1 839 0
 2127 0044 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2128 0046 03F01003 		and	r3, r3, #16
 2129 004a 002B     		cmp	r3, #0
 2130 004c 01D0     		beq	.L143
 840:.\SirenState.c ****         return CHANNEL_5;
 2131              		.loc 1 840 0
 2132 004e 0423     		movs	r3, #4
 2133 0050 1CE0     		b	.L139
 2134              	.L143:
 841:.\SirenState.c ****     if(modeStatusByte & 0x08)
 2135              		.loc 1 841 0
 2136 0052 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2137 0054 03F00803 		and	r3, r3, #8
 2138 0058 002B     		cmp	r3, #0
 2139 005a 01D0     		beq	.L144
 842:.\SirenState.c ****         return CHANNEL_4;
 2140              		.loc 1 842 0
 2141 005c 0323     		movs	r3, #3
 2142 005e 15E0     		b	.L139
 2143              	.L144:
 843:.\SirenState.c ****     if(modeStatusByte & 0x04)
 2144              		.loc 1 843 0
 2145 0060 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2146 0062 03F00403 		and	r3, r3, #4
 2147 0066 002B     		cmp	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 54


 2148 0068 01D0     		beq	.L145
 844:.\SirenState.c ****         return CHANNEL_3;    
 2149              		.loc 1 844 0
 2150 006a 0223     		movs	r3, #2
 2151 006c 0EE0     		b	.L139
 2152              	.L145:
 845:.\SirenState.c ****     if(modeStatusByte & 0x02)
 2153              		.loc 1 845 0
 2154 006e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2155 0070 03F00203 		and	r3, r3, #2
 2156 0074 002B     		cmp	r3, #0
 2157 0076 01D0     		beq	.L146
 846:.\SirenState.c ****         return CHANNEL_2;
 2158              		.loc 1 846 0
 2159 0078 0123     		movs	r3, #1
 2160 007a 07E0     		b	.L139
 2161              	.L146:
 847:.\SirenState.c ****     if(modeStatusByte & 0x01)
 2162              		.loc 1 847 0
 2163 007c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2164 007e 03F00103 		and	r3, r3, #1
 2165 0082 002B     		cmp	r3, #0
 2166 0084 01D0     		beq	.L147
 848:.\SirenState.c ****         return CHANNEL_1;
 2167              		.loc 1 848 0
 2168 0086 0023     		movs	r3, #0
 2169 0088 00E0     		b	.L139
 2170              	.L147:
 849:.\SirenState.c ****     
 850:.\SirenState.c ****     return NO_CHANNEL;
 2171              		.loc 1 850 0
 2172 008a FF23     		movs	r3, #255
 2173              	.L139:
 851:.\SirenState.c **** }
 2174              		.loc 1 851 0
 2175 008c 1846     		mov	r0, r3
 2176 008e 1037     		adds	r7, r7, #16
 2177              		.cfi_def_cfa_offset 8
 2178 0090 BD46     		mov	sp, r7
 2179              		.cfi_def_cfa_register 13
 2180              		@ sp needed
 2181 0092 80BD     		pop	{r7, pc}
 2182              		.cfi_endproc
 2183              	.LFE79:
 2184              		.size	getHighestPriorityChannel, .-getHighestPriorityChannel
 2185              		.section	.text.getAlternatingTone,"ax",%progbits
 2186              		.align	2
 2187              		.thumb
 2188              		.thumb_func
 2189              		.type	getAlternatingTone, %function
 2190              	getAlternatingTone:
 2191              	.LFB80:
 852:.\SirenState.c **** 
 853:.\SirenState.c **** /*******************************************************************************
 854:.\SirenState.c **** * Function Name: getAlternatingTone
 855:.\SirenState.c **** ********************************************************************************
 856:.\SirenState.c **** *
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 55


 857:.\SirenState.c **** * Summary:
 858:.\SirenState.c **** *   Gets the 2nd tone to play during toggling with the horn
 859:.\SirenState.c **** *
 860:.\SirenState.c **** * Parameters: 
 861:.\SirenState.c **** *   toneSelection: The first tone to play during toggling
 862:.\SirenState.c **** *
 863:.\SirenState.c **** * Return:
 864:.\SirenState.c **** *   The alternating tone (or the same tone if no horn capability)
 865:.\SirenState.c **** *
 866:.\SirenState.c **** *******************************************************************************/
 867:.\SirenState.c **** static enum ToneType getAlternatingTone(enum ToneType toneSelection)
 868:.\SirenState.c **** {
 2192              		.loc 1 868 0
 2193              		.cfi_startproc
 2194              		@ args = 0, pretend = 0, frame = 8
 2195              		@ frame_needed = 1, uses_anonymous_args = 0
 2196 0000 80B5     		push	{r7, lr}
 2197              		.cfi_def_cfa_offset 8
 2198              		.cfi_offset 7, -8
 2199              		.cfi_offset 14, -4
 2200 0002 82B0     		sub	sp, sp, #8
 2201              		.cfi_def_cfa_offset 16
 2202 0004 00AF     		add	r7, sp, #0
 2203              		.cfi_def_cfa_register 7
 2204 0006 0346     		mov	r3, r0
 2205 0008 FB71     		strb	r3, [r7, #7]
 869:.\SirenState.c **** 	if((toneSelection == NO_TONE) || isAudioTone(toneSelection) || (toneSelection == TEST_TONE))
 2206              		.loc 1 869 0
 2207 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2208 000c 002B     		cmp	r3, #0
 2209 000e 09D0     		beq	.L149
 2210              		.loc 1 869 0 is_stmt 0 discriminator 1
 2211 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2212 0012 1846     		mov	r0, r3
 2213 0014 FFF7FEFF 		bl	isAudioTone
 2214 0018 0346     		mov	r3, r0
 2215 001a 002B     		cmp	r3, #0
 2216 001c 02D1     		bne	.L149
 2217              		.loc 1 869 0 discriminator 2
 2218 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2219 0020 162B     		cmp	r3, #22
 2220 0022 01D1     		bne	.L150
 2221              	.L149:
 870:.\SirenState.c **** 		return toneSelection;
 2222              		.loc 1 870 0 is_stmt 1
 2223 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2224 0026 0FE0     		b	.L151
 2225              	.L150:
 871:.\SirenState.c **** 	
 872:.\SirenState.c **** 	if((toneSelection == MECHANICAL) || (toneSelection == PCALL_FAST))
 2226              		.loc 1 872 0
 2227 0028 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2228 002a 062B     		cmp	r3, #6
 2229 002c 02D0     		beq	.L152
 2230              		.loc 1 872 0 is_stmt 0 discriminator 1
 2231 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2232 0030 0A2B     		cmp	r3, #10
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 56


 2233 0032 01D1     		bne	.L153
 2234              	.L152:
 873:.\SirenState.c **** 		return PHASER;
 2235              		.loc 1 873 0 is_stmt 1
 2236 0034 0423     		movs	r3, #4
 2237 0036 07E0     		b	.L151
 2238              	.L153:
 874:.\SirenState.c **** 	
 875:.\SirenState.c **** 	if(toneSelection == PHASER_YELP)
 2239              		.loc 1 875 0
 2240 0038 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2241 003a 0D2B     		cmp	r3, #13
 2242 003c 01D1     		bne	.L154
 876:.\SirenState.c **** 		return HORN_PHASER;
 2243              		.loc 1 876 0
 2244 003e 0B23     		movs	r3, #11
 2245 0040 02E0     		b	.L151
 2246              	.L154:
 877:.\SirenState.c **** 	
 878:.\SirenState.c **** 	return (toneSelection + 1);
 2247              		.loc 1 878 0
 2248 0042 FB79     		ldrb	r3, [r7, #7]
 2249 0044 0133     		adds	r3, r3, #1
 2250 0046 DBB2     		uxtb	r3, r3
 2251              	.L151:
 879:.\SirenState.c **** }
 2252              		.loc 1 879 0
 2253 0048 1846     		mov	r0, r3
 2254 004a 0837     		adds	r7, r7, #8
 2255              		.cfi_def_cfa_offset 8
 2256 004c BD46     		mov	sp, r7
 2257              		.cfi_def_cfa_register 13
 2258              		@ sp needed
 2259 004e 80BD     		pop	{r7, pc}
 2260              		.cfi_endproc
 2261              	.LFE80:
 2262              		.size	getAlternatingTone, .-getAlternatingTone
 2263              		.section	.text.isTrailingTone,"ax",%progbits
 2264              		.align	2
 2265              		.thumb
 2266              		.thumb_func
 2267              		.type	isTrailingTone, %function
 2268              	isTrailingTone:
 2269              	.LFB81:
 880:.\SirenState.c **** 
 881:.\SirenState.c **** /*******************************************************************************
 882:.\SirenState.c **** * Function Name: isTrailingTone
 883:.\SirenState.c **** ********************************************************************************
 884:.\SirenState.c **** *
 885:.\SirenState.c **** * Summary:
 886:.\SirenState.c **** *   Determines if the given tone has the trailing effect
 887:.\SirenState.c **** *
 888:.\SirenState.c **** * Parameters: 
 889:.\SirenState.c **** *   thisTone: The tone to check
 890:.\SirenState.c **** *
 891:.\SirenState.c **** * Return:
 892:.\SirenState.c **** *   TRUE if trailing tone, FALSE if not trailing tone or invalid input
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 57


 893:.\SirenState.c **** *
 894:.\SirenState.c **** *******************************************************************************/
 895:.\SirenState.c **** static uint8 isTrailingTone(enum ToneType thisTone)
 896:.\SirenState.c **** {
 2270              		.loc 1 896 0
 2271              		.cfi_startproc
 2272              		@ args = 0, pretend = 0, frame = 8
 2273              		@ frame_needed = 1, uses_anonymous_args = 0
 2274 0000 80B5     		push	{r7, lr}
 2275              		.cfi_def_cfa_offset 8
 2276              		.cfi_offset 7, -8
 2277              		.cfi_offset 14, -4
 2278 0002 82B0     		sub	sp, sp, #8
 2279              		.cfi_def_cfa_offset 16
 2280 0004 00AF     		add	r7, sp, #0
 2281              		.cfi_def_cfa_register 7
 2282 0006 0346     		mov	r3, r0
 2283 0008 FB71     		strb	r3, [r7, #7]
 897:.\SirenState.c ****     if((thisTone == MANUAL_WAIL) || (thisTone == ECTOSIREN) || isCommand(thisTone))
 2284              		.loc 1 897 0
 2285 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2286 000c 072B     		cmp	r3, #7
 2287 000e 09D0     		beq	.L156
 2288              		.loc 1 897 0 is_stmt 0 discriminator 1
 2289 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2290 0012 0E2B     		cmp	r3, #14
 2291 0014 06D0     		beq	.L156
 2292              		.loc 1 897 0 discriminator 2
 2293 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2294 0018 1846     		mov	r0, r3
 2295 001a FFF7FEFF 		bl	isCommand
 2296 001e 0346     		mov	r3, r0
 2297 0020 002B     		cmp	r3, #0
 2298 0022 01D0     		beq	.L157
 2299              	.L156:
 898:.\SirenState.c ****         return true;
 2300              		.loc 1 898 0 is_stmt 1
 2301 0024 0123     		movs	r3, #1
 2302 0026 00E0     		b	.L158
 2303              	.L157:
 899:.\SirenState.c ****     
 900:.\SirenState.c ****     return false;
 2304              		.loc 1 900 0
 2305 0028 0023     		movs	r3, #0
 2306              	.L158:
 901:.\SirenState.c **** }
 2307              		.loc 1 901 0
 2308 002a 1846     		mov	r0, r3
 2309 002c 0837     		adds	r7, r7, #8
 2310              		.cfi_def_cfa_offset 8
 2311 002e BD46     		mov	sp, r7
 2312              		.cfi_def_cfa_register 13
 2313              		@ sp needed
 2314 0030 80BD     		pop	{r7, pc}
 2315              		.cfi_endproc
 2316              	.LFE81:
 2317              		.size	isTrailingTone, .-isTrailingTone
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 58


 2318 0032 00BF     		.section	.text.isAudioTone,"ax",%progbits
 2319              		.align	2
 2320              		.thumb
 2321              		.thumb_func
 2322              		.type	isAudioTone, %function
 2323              	isAudioTone:
 2324              	.LFB82:
 902:.\SirenState.c **** 
 903:.\SirenState.c **** /*******************************************************************************
 904:.\SirenState.c **** * Function Name: isAudioTone
 905:.\SirenState.c **** ********************************************************************************
 906:.\SirenState.c **** *
 907:.\SirenState.c **** * Summary:
 908:.\SirenState.c **** *   Determines if the given tone is an audio tone
 909:.\SirenState.c **** *
 910:.\SirenState.c **** * Parameters: 
 911:.\SirenState.c **** *   thisTone: The tone to check
 912:.\SirenState.c **** *
 913:.\SirenState.c **** * Return:
 914:.\SirenState.c **** *   TRUE if audio tone, FALSE if not audio tone or invalid input
 915:.\SirenState.c **** *
 916:.\SirenState.c **** *******************************************************************************/
 917:.\SirenState.c **** static uint8 isAudioTone(enum ToneType thisTone)
 918:.\SirenState.c **** {
 2325              		.loc 1 918 0
 2326              		.cfi_startproc
 2327              		@ args = 0, pretend = 0, frame = 8
 2328              		@ frame_needed = 1, uses_anonymous_args = 0
 2329 0000 80B5     		push	{r7, lr}
 2330              		.cfi_def_cfa_offset 8
 2331              		.cfi_offset 7, -8
 2332              		.cfi_offset 14, -4
 2333 0002 82B0     		sub	sp, sp, #8
 2334              		.cfi_def_cfa_offset 16
 2335 0004 00AF     		add	r7, sp, #0
 2336              		.cfi_def_cfa_register 7
 2337 0006 0346     		mov	r3, r0
 2338 0008 FB71     		strb	r3, [r7, #7]
 919:.\SirenState.c ****     if((thisTone == ECTOSIREN) || isSong(thisTone) || isCommand(thisTone))
 2339              		.loc 1 919 0
 2340 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2341 000c 0E2B     		cmp	r3, #14
 2342 000e 0DD0     		beq	.L160
 2343              		.loc 1 919 0 is_stmt 0 discriminator 1
 2344 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2345 0012 1846     		mov	r0, r3
 2346 0014 FFF7FEFF 		bl	isSong
 2347 0018 0346     		mov	r3, r0
 2348 001a 002B     		cmp	r3, #0
 2349 001c 06D1     		bne	.L160
 2350              		.loc 1 919 0 discriminator 2
 2351 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2352 0020 1846     		mov	r0, r3
 2353 0022 FFF7FEFF 		bl	isCommand
 2354 0026 0346     		mov	r3, r0
 2355 0028 002B     		cmp	r3, #0
 2356 002a 01D0     		beq	.L161
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 59


 2357              	.L160:
 920:.\SirenState.c ****         return true;
 2358              		.loc 1 920 0 is_stmt 1
 2359 002c 0123     		movs	r3, #1
 2360 002e 00E0     		b	.L162
 2361              	.L161:
 921:.\SirenState.c ****     
 922:.\SirenState.c ****     return false;
 2362              		.loc 1 922 0
 2363 0030 0023     		movs	r3, #0
 2364              	.L162:
 923:.\SirenState.c **** }
 2365              		.loc 1 923 0
 2366 0032 1846     		mov	r0, r3
 2367 0034 0837     		adds	r7, r7, #8
 2368              		.cfi_def_cfa_offset 8
 2369 0036 BD46     		mov	sp, r7
 2370              		.cfi_def_cfa_register 13
 2371              		@ sp needed
 2372 0038 80BD     		pop	{r7, pc}
 2373              		.cfi_endproc
 2374              	.LFE82:
 2375              		.size	isAudioTone, .-isAudioTone
 2376 003a 00BF     		.section	.text.isCommand,"ax",%progbits
 2377              		.align	2
 2378              		.thumb
 2379              		.thumb_func
 2380              		.type	isCommand, %function
 2381              	isCommand:
 2382              	.LFB83:
 924:.\SirenState.c **** 
 925:.\SirenState.c **** /*******************************************************************************
 926:.\SirenState.c **** * Function Name: isCommand
 927:.\SirenState.c **** ********************************************************************************
 928:.\SirenState.c **** *
 929:.\SirenState.c **** * Summary:
 930:.\SirenState.c **** *   Determines if the given tone is a command
 931:.\SirenState.c **** *
 932:.\SirenState.c **** * Parameters: 
 933:.\SirenState.c **** *   thisTone: The tone to check
 934:.\SirenState.c **** *
 935:.\SirenState.c **** * Return:
 936:.\SirenState.c **** *   TRUE if a command, FALSE if not a command or invalid input
 937:.\SirenState.c **** *
 938:.\SirenState.c **** *******************************************************************************/
 939:.\SirenState.c **** static uint8 isCommand(enum ToneType thisTone)
 940:.\SirenState.c **** {
 2383              		.loc 1 940 0
 2384              		.cfi_startproc
 2385              		@ args = 0, pretend = 0, frame = 8
 2386              		@ frame_needed = 1, uses_anonymous_args = 0
 2387              		@ link register save eliminated.
 2388 0000 80B4     		push	{r7}
 2389              		.cfi_def_cfa_offset 4
 2390              		.cfi_offset 7, -4
 2391 0002 83B0     		sub	sp, sp, #12
 2392              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 60


 2393 0004 00AF     		add	r7, sp, #0
 2394              		.cfi_def_cfa_register 7
 2395 0006 0346     		mov	r3, r0
 2396 0008 FB71     		strb	r3, [r7, #7]
 941:.\SirenState.c ****     if((thisTone >= MOVE_OUT) && (thisTone <= REMAIN_WINDOW_DOWN))
 2397              		.loc 1 941 0
 2398 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2399 000c 0F2B     		cmp	r3, #15
 2400 000e 04D9     		bls	.L164
 2401              		.loc 1 941 0 is_stmt 0 discriminator 1
 2402 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2403 0012 152B     		cmp	r3, #21
 2404 0014 01D8     		bhi	.L164
 942:.\SirenState.c ****         return true;
 2405              		.loc 1 942 0 is_stmt 1
 2406 0016 0123     		movs	r3, #1
 2407 0018 00E0     		b	.L165
 2408              	.L164:
 943:.\SirenState.c ****     
 944:.\SirenState.c ****     return false;
 2409              		.loc 1 944 0
 2410 001a 0023     		movs	r3, #0
 2411              	.L165:
 945:.\SirenState.c **** }
 2412              		.loc 1 945 0
 2413 001c 1846     		mov	r0, r3
 2414 001e 0C37     		adds	r7, r7, #12
 2415              		.cfi_def_cfa_offset 4
 2416 0020 BD46     		mov	sp, r7
 2417              		.cfi_def_cfa_register 13
 2418              		@ sp needed
 2419 0022 5DF8047B 		ldr	r7, [sp], #4
 2420              		.cfi_restore 7
 2421              		.cfi_def_cfa_offset 0
 2422 0026 7047     		bx	lr
 2423              		.cfi_endproc
 2424              	.LFE83:
 2425              		.size	isCommand, .-isCommand
 2426              		.section	.text.isSong,"ax",%progbits
 2427              		.align	2
 2428              		.thumb
 2429              		.thumb_func
 2430              		.type	isSong, %function
 2431              	isSong:
 2432              	.LFB84:
 946:.\SirenState.c **** 
 947:.\SirenState.c **** /*******************************************************************************
 948:.\SirenState.c **** * Function Name: isSong
 949:.\SirenState.c **** ********************************************************************************
 950:.\SirenState.c **** *
 951:.\SirenState.c **** * Summary:
 952:.\SirenState.c **** *   Determines if the given tone is a song
 953:.\SirenState.c **** *
 954:.\SirenState.c **** * Parameters: 
 955:.\SirenState.c **** *   thisTone: The tone to check
 956:.\SirenState.c **** *
 957:.\SirenState.c **** * Return:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 61


 958:.\SirenState.c **** *   TRUE if a song, FALSE if not a song or invalid input
 959:.\SirenState.c **** *
 960:.\SirenState.c **** *******************************************************************************/
 961:.\SirenState.c **** static uint8 isSong(enum ToneType thisTone)
 962:.\SirenState.c **** {
 2433              		.loc 1 962 0
 2434              		.cfi_startproc
 2435              		@ args = 0, pretend = 0, frame = 8
 2436              		@ frame_needed = 1, uses_anonymous_args = 0
 2437              		@ link register save eliminated.
 2438 0000 80B4     		push	{r7}
 2439              		.cfi_def_cfa_offset 4
 2440              		.cfi_offset 7, -4
 2441 0002 83B0     		sub	sp, sp, #12
 2442              		.cfi_def_cfa_offset 16
 2443 0004 00AF     		add	r7, sp, #0
 2444              		.cfi_def_cfa_register 7
 2445 0006 0346     		mov	r3, r0
 2446 0008 FB71     		strb	r3, [r7, #7]
 963:.\SirenState.c ****     if(thisTone == COPS_SONG)
 2447              		.loc 1 963 0
 2448 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2449 000c 0F2B     		cmp	r3, #15
 2450 000e 01D1     		bne	.L167
 964:.\SirenState.c ****         return true;
 2451              		.loc 1 964 0
 2452 0010 0123     		movs	r3, #1
 2453 0012 00E0     		b	.L168
 2454              	.L167:
 965:.\SirenState.c ****     
 966:.\SirenState.c ****     return false;
 2455              		.loc 1 966 0
 2456 0014 0023     		movs	r3, #0
 2457              	.L168:
 967:.\SirenState.c **** }
 2458              		.loc 1 967 0
 2459 0016 1846     		mov	r0, r3
 2460 0018 0C37     		adds	r7, r7, #12
 2461              		.cfi_def_cfa_offset 4
 2462 001a BD46     		mov	sp, r7
 2463              		.cfi_def_cfa_register 13
 2464              		@ sp needed
 2465 001c 5DF8047B 		ldr	r7, [sp], #4
 2466              		.cfi_restore 7
 2467              		.cfi_def_cfa_offset 0
 2468 0020 7047     		bx	lr
 2469              		.cfi_endproc
 2470              	.LFE84:
 2471              		.size	isSong, .-isSong
 2472 0022 00BF     		.section	.text.getBitIndex,"ax",%progbits
 2473              		.align	2
 2474              		.thumb
 2475              		.thumb_func
 2476              		.type	getBitIndex, %function
 2477              	getBitIndex:
 2478              	.LFB85:
 968:.\SirenState.c **** 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 62


 969:.\SirenState.c **** /*******************************************************************************
 970:.\SirenState.c **** * Function Name: getBitIndex
 971:.\SirenState.c **** ********************************************************************************
 972:.\SirenState.c **** *
 973:.\SirenState.c **** * Summary:
 974:.\SirenState.c **** *  Computes the index of a byte based on the mask given. 7 is the most significant bit.
 975:.\SirenState.c **** *
 976:.\SirenState.c **** * Parameters:
 977:.\SirenState.c **** *  maskNumber: An 8-bit value with a single bit being set to 1
 978:.\SirenState.c **** *
 979:.\SirenState.c **** * Return:
 980:.\SirenState.c **** *  The index of the set bit ranging 0 - 7
 981:.\SirenState.c **** *
 982:.\SirenState.c **** *******************************************************************************/
 983:.\SirenState.c **** static uint8 getBitIndex(enum BitMask maskNumber)
 984:.\SirenState.c **** {
 2479              		.loc 1 984 0
 2480              		.cfi_startproc
 2481              		@ args = 0, pretend = 0, frame = 16
 2482              		@ frame_needed = 1, uses_anonymous_args = 0
 2483              		@ link register save eliminated.
 2484 0000 80B4     		push	{r7}
 2485              		.cfi_def_cfa_offset 4
 2486              		.cfi_offset 7, -4
 2487 0002 85B0     		sub	sp, sp, #20
 2488              		.cfi_def_cfa_offset 24
 2489 0004 00AF     		add	r7, sp, #0
 2490              		.cfi_def_cfa_register 7
 2491 0006 0346     		mov	r3, r0
 2492 0008 FB71     		strb	r3, [r7, #7]
 985:.\SirenState.c **** 	uint8 indexResult = 0;
 2493              		.loc 1 985 0
 2494 000a 0023     		movs	r3, #0
 2495 000c FB73     		strb	r3, [r7, #15]
 986:.\SirenState.c **** 	
 987:.\SirenState.c **** 	switch(maskNumber)
 2496              		.loc 1 987 0
 2497 000e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 2498 0010 013B     		subs	r3, r3, #1
 2499 0012 1F2B     		cmp	r3, #31
 2500 0014 54D8     		bhi	.L170
 2501 0016 01A2     		adr	r2, .L172
 2502 0018 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 2503              		.p2align 2
 2504              	.L172:
 2505 001c 9D000000 		.word	.L171+1
 2506 0020 A3000000 		.word	.L173+1
 2507 0024 C1000000 		.word	.L170+1
 2508 0028 A9000000 		.word	.L174+1
 2509 002c C1000000 		.word	.L170+1
 2510 0030 C1000000 		.word	.L170+1
 2511 0034 C1000000 		.word	.L170+1
 2512 0038 AF000000 		.word	.L175+1
 2513 003c C1000000 		.word	.L170+1
 2514 0040 C1000000 		.word	.L170+1
 2515 0044 C1000000 		.word	.L170+1
 2516 0048 C1000000 		.word	.L170+1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 63


 2517 004c C1000000 		.word	.L170+1
 2518 0050 C1000000 		.word	.L170+1
 2519 0054 C1000000 		.word	.L170+1
 2520 0058 B5000000 		.word	.L176+1
 2521 005c C1000000 		.word	.L170+1
 2522 0060 C1000000 		.word	.L170+1
 2523 0064 C1000000 		.word	.L170+1
 2524 0068 C1000000 		.word	.L170+1
 2525 006c C1000000 		.word	.L170+1
 2526 0070 C1000000 		.word	.L170+1
 2527 0074 C1000000 		.word	.L170+1
 2528 0078 C1000000 		.word	.L170+1
 2529 007c C1000000 		.word	.L170+1
 2530 0080 C1000000 		.word	.L170+1
 2531 0084 C1000000 		.word	.L170+1
 2532 0088 C1000000 		.word	.L170+1
 2533 008c C1000000 		.word	.L170+1
 2534 0090 C1000000 		.word	.L170+1
 2535 0094 C1000000 		.word	.L170+1
 2536 0098 BB000000 		.word	.L177+1
 2537              		.p2align 1
 2538              	.L171:
 988:.\SirenState.c **** 	{
 989:.\SirenState.c **** 		case BIT0:
 990:.\SirenState.c **** 			indexResult = 0;
 2539              		.loc 1 990 0
 2540 009c 0023     		movs	r3, #0
 2541 009e FB73     		strb	r3, [r7, #15]
 991:.\SirenState.c **** 			break;
 2542              		.loc 1 991 0
 2543 00a0 11E0     		b	.L178
 2544              	.L173:
 992:.\SirenState.c **** 		case BIT1:
 993:.\SirenState.c **** 			indexResult = 1;
 2545              		.loc 1 993 0
 2546 00a2 0123     		movs	r3, #1
 2547 00a4 FB73     		strb	r3, [r7, #15]
 994:.\SirenState.c **** 			break;
 2548              		.loc 1 994 0
 2549 00a6 0EE0     		b	.L178
 2550              	.L174:
 995:.\SirenState.c **** 		case BIT2:
 996:.\SirenState.c **** 			indexResult = 2;
 2551              		.loc 1 996 0
 2552 00a8 0223     		movs	r3, #2
 2553 00aa FB73     		strb	r3, [r7, #15]
 997:.\SirenState.c **** 			break;
 2554              		.loc 1 997 0
 2555 00ac 0BE0     		b	.L178
 2556              	.L175:
 998:.\SirenState.c **** 		case BIT3:
 999:.\SirenState.c **** 			indexResult = 3;
 2557              		.loc 1 999 0
 2558 00ae 0323     		movs	r3, #3
 2559 00b0 FB73     		strb	r3, [r7, #15]
1000:.\SirenState.c **** 			break;
 2560              		.loc 1 1000 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 64


 2561 00b2 08E0     		b	.L178
 2562              	.L176:
1001:.\SirenState.c **** 		case BIT4:
1002:.\SirenState.c **** 			indexResult = 4;
 2563              		.loc 1 1002 0
 2564 00b4 0423     		movs	r3, #4
 2565 00b6 FB73     		strb	r3, [r7, #15]
1003:.\SirenState.c **** 			break;
 2566              		.loc 1 1003 0
 2567 00b8 05E0     		b	.L178
 2568              	.L177:
1004:.\SirenState.c **** 		case BIT5:
1005:.\SirenState.c **** 			indexResult = 5;
 2569              		.loc 1 1005 0
 2570 00ba 0523     		movs	r3, #5
 2571 00bc FB73     		strb	r3, [r7, #15]
1006:.\SirenState.c **** 			break;
 2572              		.loc 1 1006 0
 2573 00be 02E0     		b	.L178
 2574              	.L170:
1007:.\SirenState.c **** 		default:
1008:.\SirenState.c **** 			indexResult = NO_CHANNEL;
 2575              		.loc 1 1008 0
 2576 00c0 FF23     		movs	r3, #255
 2577 00c2 FB73     		strb	r3, [r7, #15]
1009:.\SirenState.c **** 			break;
 2578              		.loc 1 1009 0
 2579 00c4 00BF     		nop
 2580              	.L178:
1010:.\SirenState.c **** 	}
1011:.\SirenState.c **** 	
1012:.\SirenState.c **** 	return indexResult;
 2581              		.loc 1 1012 0
 2582 00c6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
1013:.\SirenState.c **** }
 2583              		.loc 1 1013 0
 2584 00c8 1846     		mov	r0, r3
 2585 00ca 1437     		adds	r7, r7, #20
 2586              		.cfi_def_cfa_offset 4
 2587 00cc BD46     		mov	sp, r7
 2588              		.cfi_def_cfa_register 13
 2589              		@ sp needed
 2590 00ce 5DF8047B 		ldr	r7, [sp], #4
 2591              		.cfi_restore 7
 2592              		.cfi_def_cfa_offset 0
 2593 00d2 7047     		bx	lr
 2594              		.cfi_endproc
 2595              	.LFE85:
 2596              		.size	getBitIndex, .-getBitIndex
 2597              		.bss
 2598 001b 00       		.align	2
 2599              	previousChannels.7356:
 2600 001c 0000     		.space	2
 2601              	bToneChangeOnHornRing.7384:
 2602 001e 00       		.space	1
 2603 001f 00       		.text
 2604              	.Letext0:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 65


 2605              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 2606              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 2607              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2608              		.file 5 ".\\CommonVariables.h"
 2609              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 2610              		.section	.debug_info,"",%progbits
 2611              	.Ldebug_info0:
 2612 0000 6C070000 		.4byte	0x76c
 2613 0004 0400     		.2byte	0x4
 2614 0006 00000000 		.4byte	.Ldebug_abbrev0
 2615 000a 04       		.byte	0x4
 2616 000b 01       		.uleb128 0x1
 2617 000c 86030000 		.4byte	.LASF119
 2618 0010 01       		.byte	0x1
 2619 0011 D6010000 		.4byte	.LASF120
 2620 0015 3F050000 		.4byte	.LASF121
 2621 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2622 001d 00000000 		.4byte	0
 2623 0021 00000000 		.4byte	.Ldebug_line0
 2624 0025 02       		.uleb128 0x2
 2625 0026 01       		.byte	0x1
 2626 0027 06       		.byte	0x6
 2627 0028 42000000 		.4byte	.LASF0
 2628 002c 02       		.uleb128 0x2
 2629 002d 01       		.byte	0x1
 2630 002e 08       		.byte	0x8
 2631 002f 7E040000 		.4byte	.LASF1
 2632 0033 02       		.uleb128 0x2
 2633 0034 02       		.byte	0x2
 2634 0035 05       		.byte	0x5
 2635 0036 8C040000 		.4byte	.LASF2
 2636 003a 02       		.uleb128 0x2
 2637 003b 02       		.byte	0x2
 2638 003c 07       		.byte	0x7
 2639 003d 9D020000 		.4byte	.LASF3
 2640 0041 03       		.uleb128 0x3
 2641 0042 35050000 		.4byte	.LASF9
 2642 0046 02       		.byte	0x2
 2643 0047 3F       		.byte	0x3f
 2644 0048 4C000000 		.4byte	0x4c
 2645 004c 02       		.uleb128 0x2
 2646 004d 04       		.byte	0x4
 2647 004e 05       		.byte	0x5
 2648 004f 56010000 		.4byte	.LASF4
 2649 0053 02       		.uleb128 0x2
 2650 0054 04       		.byte	0x4
 2651 0055 07       		.byte	0x7
 2652 0056 14040000 		.4byte	.LASF5
 2653 005a 02       		.uleb128 0x2
 2654 005b 08       		.byte	0x8
 2655 005c 05       		.byte	0x5
 2656 005d E1000000 		.4byte	.LASF6
 2657 0061 02       		.uleb128 0x2
 2658 0062 08       		.byte	0x8
 2659 0063 07       		.byte	0x7
 2660 0064 8F000000 		.4byte	.LASF7
 2661 0068 04       		.uleb128 0x4
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 66


 2662 0069 04       		.byte	0x4
 2663 006a 05       		.byte	0x5
 2664 006b 696E7400 		.ascii	"int\000"
 2665 006f 02       		.uleb128 0x2
 2666 0070 04       		.byte	0x4
 2667 0071 07       		.byte	0x7
 2668 0072 26020000 		.4byte	.LASF8
 2669 0076 03       		.uleb128 0x3
 2670 0077 76040000 		.4byte	.LASF10
 2671 007b 03       		.byte	0x3
 2672 007c 2C       		.byte	0x2c
 2673 007d 41000000 		.4byte	0x41
 2674 0081 03       		.uleb128 0x3
 2675 0082 7E010000 		.4byte	.LASF11
 2676 0086 04       		.byte	0x4
 2677 0087 C2       		.byte	0xc2
 2678 0088 2C000000 		.4byte	0x2c
 2679 008c 03       		.uleb128 0x3
 2680 008d 1B000000 		.4byte	.LASF12
 2681 0091 04       		.byte	0x4
 2682 0092 C3       		.byte	0xc3
 2683 0093 3A000000 		.4byte	0x3a
 2684 0097 02       		.uleb128 0x2
 2685 0098 04       		.byte	0x4
 2686 0099 04       		.byte	0x4
 2687 009a 44040000 		.4byte	.LASF13
 2688 009e 02       		.uleb128 0x2
 2689 009f 08       		.byte	0x8
 2690 00a0 04       		.byte	0x4
 2691 00a1 DE040000 		.4byte	.LASF14
 2692 00a5 02       		.uleb128 0x2
 2693 00a6 01       		.byte	0x1
 2694 00a7 08       		.byte	0x8
 2695 00a8 05050000 		.4byte	.LASF15
 2696 00ac 02       		.uleb128 0x2
 2697 00ad 04       		.byte	0x4
 2698 00ae 07       		.byte	0x7
 2699 00af A3060000 		.4byte	.LASF16
 2700 00b3 05       		.uleb128 0x5
 2701 00b4 8F060000 		.4byte	.LASF40
 2702 00b8 01       		.byte	0x1
 2703 00b9 05       		.byte	0x5
 2704 00ba 1D       		.byte	0x1d
 2705 00bb 4A010000 		.4byte	0x14a
 2706 00bf 06       		.uleb128 0x6
 2707 00c0 9B010000 		.4byte	.LASF17
 2708 00c4 00       		.sleb128 0
 2709 00c5 06       		.uleb128 0x6
 2710 00c6 71060000 		.4byte	.LASF18
 2711 00ca 01       		.sleb128 1
 2712 00cb 06       		.uleb128 0x6
 2713 00cc 00030000 		.4byte	.LASF19
 2714 00d0 02       		.sleb128 2
 2715 00d1 06       		.uleb128 0x6
 2716 00d2 E5010000 		.4byte	.LASF20
 2717 00d6 03       		.sleb128 3
 2718 00d7 06       		.uleb128 0x6
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 67


 2719 00d8 D7040000 		.4byte	.LASF21
 2720 00dc 04       		.sleb128 4
 2721 00dd 06       		.uleb128 0x6
 2722 00de 5F010000 		.4byte	.LASF22
 2723 00e2 05       		.sleb128 5
 2724 00e3 06       		.uleb128 0x6
 2725 00e4 84010000 		.4byte	.LASF23
 2726 00e8 06       		.sleb128 6
 2727 00e9 06       		.uleb128 0x6
 2728 00ea E5040000 		.4byte	.LASF24
 2729 00ee 07       		.sleb128 7
 2730 00ef 06       		.uleb128 0x6
 2731 00f0 BD040000 		.4byte	.LASF25
 2732 00f4 08       		.sleb128 8
 2733 00f5 06       		.uleb128 0x6
 2734 00f6 42070000 		.4byte	.LASF26
 2735 00fa 09       		.sleb128 9
 2736 00fb 06       		.uleb128 0x6
 2737 00fc 98060000 		.4byte	.LASF27
 2738 0100 0A       		.sleb128 10
 2739 0101 06       		.uleb128 0x6
 2740 0102 91020000 		.4byte	.LASF28
 2741 0106 0B       		.sleb128 11
 2742 0107 06       		.uleb128 0x6
 2743 0108 D9050000 		.4byte	.LASF29
 2744 010c 0C       		.sleb128 12
 2745 010d 06       		.uleb128 0x6
 2746 010e B3060000 		.4byte	.LASF30
 2747 0112 0D       		.sleb128 13
 2748 0113 06       		.uleb128 0x6
 2749 0114 C2050000 		.4byte	.LASF31
 2750 0118 0E       		.sleb128 14
 2751 0119 06       		.uleb128 0x6
 2752 011a 74020000 		.4byte	.LASF32
 2753 011e 0F       		.sleb128 15
 2754 011f 06       		.uleb128 0x6
 2755 0120 67070000 		.4byte	.LASF33
 2756 0124 10       		.sleb128 16
 2757 0125 06       		.uleb128 0x6
 2758 0126 7D070000 		.4byte	.LASF34
 2759 012a 11       		.sleb128 17
 2760 012b 06       		.uleb128 0x6
 2761 012c 6B020000 		.4byte	.LASF35
 2762 0130 12       		.sleb128 18
 2763 0131 06       		.uleb128 0x6
 2764 0132 4A040000 		.4byte	.LASF36
 2765 0136 13       		.sleb128 19
 2766 0137 06       		.uleb128 0x6
 2767 0138 C4010000 		.4byte	.LASF37
 2768 013c 14       		.sleb128 20
 2769 013d 06       		.uleb128 0x6
 2770 013e 7E020000 		.4byte	.LASF38
 2771 0142 15       		.sleb128 21
 2772 0143 06       		.uleb128 0x6
 2773 0144 4C010000 		.4byte	.LASF39
 2774 0148 16       		.sleb128 22
 2775 0149 00       		.byte	0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 68


 2776 014a 05       		.uleb128 0x5
 2777 014b AD010000 		.4byte	.LASF41
 2778 014f 01       		.byte	0x1
 2779 0150 01       		.byte	0x1
 2780 0151 14       		.byte	0x14
 2781 0152 82010000 		.4byte	0x182
 2782 0156 06       		.uleb128 0x6
 2783 0157 E3050000 		.4byte	.LASF42
 2784 015b 00       		.sleb128 0
 2785 015c 06       		.uleb128 0x6
 2786 015d ED050000 		.4byte	.LASF43
 2787 0161 01       		.sleb128 1
 2788 0162 06       		.uleb128 0x6
 2789 0163 25060000 		.4byte	.LASF44
 2790 0167 02       		.sleb128 2
 2791 0168 06       		.uleb128 0x6
 2792 0169 06060000 		.4byte	.LASF45
 2793 016d 03       		.sleb128 3
 2794 016e 06       		.uleb128 0x6
 2795 016f 4F060000 		.4byte	.LASF46
 2796 0173 04       		.sleb128 4
 2797 0174 06       		.uleb128 0x6
 2798 0175 1B060000 		.4byte	.LASF47
 2799 0179 05       		.sleb128 5
 2800 017a 06       		.uleb128 0x6
 2801 017b 10060000 		.4byte	.LASF48
 2802 017f FF01     		.sleb128 255
 2803 0181 00       		.byte	0
 2804 0182 05       		.uleb128 0x5
 2805 0183 FB010000 		.4byte	.LASF49
 2806 0187 01       		.byte	0x1
 2807 0188 01       		.byte	0x1
 2808 0189 1F       		.byte	0x1f
 2809 018a C1010000 		.4byte	0x1c1
 2810 018e 06       		.uleb128 0x6
 2811 018f FC000000 		.4byte	.LASF50
 2812 0193 01       		.sleb128 1
 2813 0194 06       		.uleb128 0x6
 2814 0195 01010000 		.4byte	.LASF51
 2815 0199 02       		.sleb128 2
 2816 019a 06       		.uleb128 0x6
 2817 019b 06010000 		.4byte	.LASF52
 2818 019f 04       		.sleb128 4
 2819 01a0 06       		.uleb128 0x6
 2820 01a1 81030000 		.4byte	.LASF53
 2821 01a5 08       		.sleb128 8
 2822 01a6 06       		.uleb128 0x6
 2823 01a7 26010000 		.4byte	.LASF54
 2824 01ab 10       		.sleb128 16
 2825 01ac 06       		.uleb128 0x6
 2826 01ad 2B010000 		.4byte	.LASF55
 2827 01b1 20       		.sleb128 32
 2828 01b2 06       		.uleb128 0x6
 2829 01b3 30010000 		.4byte	.LASF56
 2830 01b7 C000     		.sleb128 64
 2831 01b9 06       		.uleb128 0x6
 2832 01ba 26040000 		.4byte	.LASF57
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 69


 2833 01be 8001     		.sleb128 128
 2834 01c0 00       		.byte	0
 2835 01c1 07       		.uleb128 0x7
 2836 01c2 07       		.byte	0x7
 2837 01c3 01       		.byte	0x1
 2838 01c4 35       		.byte	0x35
 2839 01c5 12020000 		.4byte	0x212
 2840 01c9 08       		.uleb128 0x8
 2841 01ca 22000000 		.4byte	.LASF58
 2842 01ce 01       		.byte	0x1
 2843 01cf 37       		.byte	0x37
 2844 01d0 81000000 		.4byte	0x81
 2845 01d4 00       		.byte	0
 2846 01d5 08       		.uleb128 0x8
 2847 01d6 0D020000 		.4byte	.LASF59
 2848 01da 01       		.byte	0x1
 2849 01db 38       		.byte	0x38
 2850 01dc 81000000 		.4byte	0x81
 2851 01e0 01       		.byte	0x1
 2852 01e1 08       		.uleb128 0x8
 2853 01e2 EF010000 		.4byte	.LASF60
 2854 01e6 01       		.byte	0x1
 2855 01e7 39       		.byte	0x39
 2856 01e8 81000000 		.4byte	0x81
 2857 01ec 02       		.byte	0x2
 2858 01ed 08       		.uleb128 0x8
 2859 01ee 03020000 		.4byte	.LASF61
 2860 01f2 01       		.byte	0x1
 2861 01f3 3A       		.byte	0x3a
 2862 01f4 81000000 		.4byte	0x81
 2863 01f8 03       		.byte	0x3
 2864 01f9 08       		.uleb128 0x8
 2865 01fa B2040000 		.4byte	.LASF62
 2866 01fe 01       		.byte	0x1
 2867 01ff 3B       		.byte	0x3b
 2868 0200 81000000 		.4byte	0x81
 2869 0204 04       		.byte	0x4
 2870 0205 08       		.uleb128 0x8
 2871 0206 5E030000 		.4byte	.LASF63
 2872 020a 01       		.byte	0x1
 2873 020b 3C       		.byte	0x3c
 2874 020c 12020000 		.4byte	0x212
 2875 0210 05       		.byte	0x5
 2876 0211 00       		.byte	0
 2877 0212 09       		.uleb128 0x9
 2878 0213 4A010000 		.4byte	0x14a
 2879 0217 22020000 		.4byte	0x222
 2880 021b 0A       		.uleb128 0xa
 2881 021c AC000000 		.4byte	0xac
 2882 0220 01       		.byte	0x1
 2883 0221 00       		.byte	0
 2884 0222 07       		.uleb128 0x7
 2885 0223 07       		.byte	0x7
 2886 0224 01       		.byte	0x1
 2887 0225 3F       		.byte	0x3f
 2888 0226 5B020000 		.4byte	0x25b
 2889 022a 08       		.uleb128 0x8
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 70


 2890 022b 51020000 		.4byte	.LASF64
 2891 022f 01       		.byte	0x1
 2892 0230 41       		.byte	0x41
 2893 0231 5B020000 		.4byte	0x25b
 2894 0235 00       		.byte	0
 2895 0236 08       		.uleb128 0x8
 2896 0237 FC060000 		.4byte	.LASF65
 2897 023b 01       		.byte	0x1
 2898 023c 42       		.byte	0x42
 2899 023d 5B020000 		.4byte	0x25b
 2900 0241 02       		.byte	0x2
 2901 0242 08       		.uleb128 0x8
 2902 0243 8F010000 		.4byte	.LASF66
 2903 0247 01       		.byte	0x1
 2904 0248 43       		.byte	0x43
 2905 0249 6B020000 		.4byte	0x26b
 2906 024d 04       		.byte	0x4
 2907 024e 08       		.uleb128 0x8
 2908 024f 2F060000 		.4byte	.LASF67
 2909 0253 01       		.byte	0x1
 2910 0254 44       		.byte	0x44
 2911 0255 81000000 		.4byte	0x81
 2912 0259 06       		.byte	0x6
 2913 025a 00       		.byte	0
 2914 025b 09       		.uleb128 0x9
 2915 025c B3000000 		.4byte	0xb3
 2916 0260 6B020000 		.4byte	0x26b
 2917 0264 0A       		.uleb128 0xa
 2918 0265 AC000000 		.4byte	0xac
 2919 0269 01       		.byte	0x1
 2920 026a 00       		.byte	0
 2921 026b 09       		.uleb128 0x9
 2922 026c 81000000 		.4byte	0x81
 2923 0270 7B020000 		.4byte	0x27b
 2924 0274 0A       		.uleb128 0xa
 2925 0275 AC000000 		.4byte	0xac
 2926 0279 01       		.byte	0x1
 2927 027a 00       		.byte	0
 2928 027b 0B       		.uleb128 0xb
 2929 027c 08070000 		.4byte	.LASF74
 2930 0280 01       		.byte	0x1
 2931 0281 65       		.byte	0x65
 2932 0282 00000000 		.4byte	.LFB63
 2933 0286 44010000 		.4byte	.LFE63-.LFB63
 2934 028a 01       		.uleb128 0x1
 2935 028b 9C       		.byte	0x9c
 2936 028c C9020000 		.4byte	0x2c9
 2937 0290 0C       		.uleb128 0xc
 2938 0291 96040000 		.4byte	.LASF68
 2939 0295 01       		.byte	0x1
 2940 0296 67       		.byte	0x67
 2941 0297 81000000 		.4byte	0x81
 2942 029b 02       		.uleb128 0x2
 2943 029c 91       		.byte	0x91
 2944 029d 6F       		.sleb128 -17
 2945 029e 0C       		.uleb128 0xc
 2946 029f 35010000 		.4byte	.LASF69
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 71


 2947 02a3 01       		.byte	0x1
 2948 02a4 68       		.byte	0x68
 2949 02a5 81000000 		.4byte	0x81
 2950 02a9 02       		.uleb128 0x2
 2951 02aa 91       		.byte	0x91
 2952 02ab 6E       		.sleb128 -18
 2953 02ac 0C       		.uleb128 0xc
 2954 02ad CC050000 		.4byte	.LASF70
 2955 02b1 01       		.byte	0x1
 2956 02b2 69       		.byte	0x69
 2957 02b3 81000000 		.4byte	0x81
 2958 02b7 02       		.uleb128 0x2
 2959 02b8 91       		.byte	0x91
 2960 02b9 6D       		.sleb128 -19
 2961 02ba 0C       		.uleb128 0xc
 2962 02bb 70070000 		.4byte	.LASF71
 2963 02bf 01       		.byte	0x1
 2964 02c0 6A       		.byte	0x6a
 2965 02c1 8C000000 		.4byte	0x8c
 2966 02c5 02       		.uleb128 0x2
 2967 02c6 91       		.byte	0x91
 2968 02c7 6A       		.sleb128 -22
 2969 02c8 00       		.byte	0
 2970 02c9 0D       		.uleb128 0xd
 2971 02ca 4D070000 		.4byte	.LASF72
 2972 02ce 01       		.byte	0x1
 2973 02cf A3       		.byte	0xa3
 2974 02d0 00000000 		.4byte	.LFB64
 2975 02d4 1A000000 		.4byte	.LFE64-.LFB64
 2976 02d8 01       		.uleb128 0x1
 2977 02d9 9C       		.byte	0x9c
 2978 02da 0D       		.uleb128 0xd
 2979 02db 00000000 		.4byte	.LASF73
 2980 02df 01       		.byte	0x1
 2981 02e0 BC       		.byte	0xbc
 2982 02e1 00000000 		.4byte	.LFB65
 2983 02e5 1A000000 		.4byte	.LFE65-.LFB65
 2984 02e9 01       		.uleb128 0x1
 2985 02ea 9C       		.byte	0x9c
 2986 02eb 0B       		.uleb128 0xb
 2987 02ec 59060000 		.4byte	.LASF75
 2988 02f0 01       		.byte	0x1
 2989 02f1 D5       		.byte	0xd5
 2990 02f2 00000000 		.4byte	.LFB66
 2991 02f6 80000000 		.4byte	.LFE66-.LFB66
 2992 02fa 01       		.uleb128 0x1
 2993 02fb 9C       		.byte	0x9c
 2994 02fc 0F030000 		.4byte	0x30f
 2995 0300 0C       		.uleb128 0xc
 2996 0301 33020000 		.4byte	.LASF76
 2997 0305 01       		.byte	0x1
 2998 0306 D7       		.byte	0xd7
 2999 0307 81000000 		.4byte	0x81
 3000 030b 02       		.uleb128 0x2
 3001 030c 91       		.byte	0x91
 3002 030d 6F       		.sleb128 -17
 3003 030e 00       		.byte	0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 72


 3004 030f 0B       		.uleb128 0xb
 3005 0310 76060000 		.4byte	.LASF77
 3006 0314 01       		.byte	0x1
 3007 0315 F3       		.byte	0xf3
 3008 0316 00000000 		.4byte	.LFB67
 3009 031a 28010000 		.4byte	.LFE67-.LFB67
 3010 031e 01       		.uleb128 0x1
 3011 031f 9C       		.byte	0x9c
 3012 0320 5D030000 		.4byte	0x35d
 3013 0324 0C       		.uleb128 0xc
 3014 0325 19050000 		.4byte	.LASF78
 3015 0329 01       		.byte	0x1
 3016 032a F5       		.byte	0xf5
 3017 032b B3000000 		.4byte	0xb3
 3018 032f 02       		.uleb128 0x2
 3019 0330 91       		.byte	0x91
 3020 0331 77       		.sleb128 -9
 3021 0332 0C       		.uleb128 0xc
 3022 0333 70070000 		.4byte	.LASF71
 3023 0337 01       		.byte	0x1
 3024 0338 F6       		.byte	0xf6
 3025 0339 8C000000 		.4byte	0x8c
 3026 033d 02       		.uleb128 0x2
 3027 033e 91       		.byte	0x91
 3028 033f 74       		.sleb128 -12
 3029 0340 0C       		.uleb128 0xc
 3030 0341 CC050000 		.4byte	.LASF70
 3031 0345 01       		.byte	0x1
 3032 0346 F7       		.byte	0xf7
 3033 0347 81000000 		.4byte	0x81
 3034 034b 02       		.uleb128 0x2
 3035 034c 91       		.byte	0x91
 3036 034d 73       		.sleb128 -13
 3037 034e 0C       		.uleb128 0xc
 3038 034f 35010000 		.4byte	.LASF69
 3039 0353 01       		.byte	0x1
 3040 0354 F8       		.byte	0xf8
 3041 0355 81000000 		.4byte	0x81
 3042 0359 02       		.uleb128 0x2
 3043 035a 91       		.byte	0x91
 3044 035b 76       		.sleb128 -10
 3045 035c 00       		.byte	0
 3046 035d 0E       		.uleb128 0xe
 3047 035e 28070000 		.4byte	.LASF79
 3048 0362 01       		.byte	0x1
 3049 0363 3401     		.2byte	0x134
 3050 0365 00000000 		.4byte	.LFB68
 3051 0369 88000000 		.4byte	.LFE68-.LFB68
 3052 036d 01       		.uleb128 0x1
 3053 036e 9C       		.byte	0x9c
 3054 036f 83030000 		.4byte	0x383
 3055 0373 0F       		.uleb128 0xf
 3056 0374 33020000 		.4byte	.LASF76
 3057 0378 01       		.byte	0x1
 3058 0379 3601     		.2byte	0x136
 3059 037b 81000000 		.4byte	0x81
 3060 037f 02       		.uleb128 0x2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 73


 3061 0380 91       		.byte	0x91
 3062 0381 77       		.sleb128 -9
 3063 0382 00       		.byte	0
 3064 0383 10       		.uleb128 0x10
 3065 0384 4E000000 		.4byte	.LASF80
 3066 0388 01       		.byte	0x1
 3067 0389 5A01     		.2byte	0x15a
 3068 038b 00000000 		.4byte	.LFB69
 3069 038f 20000000 		.4byte	.LFE69-.LFB69
 3070 0393 01       		.uleb128 0x1
 3071 0394 9C       		.byte	0x9c
 3072 0395 10       		.uleb128 0x10
 3073 0396 40030000 		.4byte	.LASF81
 3074 039a 01       		.byte	0x1
 3075 039b 6E01     		.2byte	0x16e
 3076 039d 00000000 		.4byte	.LFB70
 3077 03a1 20000000 		.4byte	.LFE70-.LFB70
 3078 03a5 01       		.uleb128 0x1
 3079 03a6 9C       		.byte	0x9c
 3080 03a7 10       		.uleb128 0x10
 3081 03a8 65000000 		.4byte	.LASF82
 3082 03ac 01       		.byte	0x1
 3083 03ad 8201     		.2byte	0x182
 3084 03af 00000000 		.4byte	.LFB71
 3085 03b3 2C000000 		.4byte	.LFE71-.LFB71
 3086 03b7 01       		.uleb128 0x1
 3087 03b8 9C       		.byte	0x9c
 3088 03b9 0E       		.uleb128 0xe
 3089 03ba 0A030000 		.4byte	.LASF83
 3090 03be 01       		.byte	0x1
 3091 03bf 9701     		.2byte	0x197
 3092 03c1 00000000 		.4byte	.LFB72
 3093 03c5 5C010000 		.4byte	.LFE72-.LFB72
 3094 03c9 01       		.uleb128 0x1
 3095 03ca 9C       		.byte	0x9c
 3096 03cb 2D040000 		.4byte	0x42d
 3097 03cf 0F       		.uleb128 0xf
 3098 03d0 24050000 		.4byte	.LASF84
 3099 03d4 01       		.byte	0x1
 3100 03d5 9901     		.2byte	0x199
 3101 03d7 6B020000 		.4byte	0x26b
 3102 03db 05       		.uleb128 0x5
 3103 03dc 03       		.byte	0x3
 3104 03dd 1C000000 		.4byte	previousChannels.7356
 3105 03e1 0F       		.uleb128 0xf
 3106 03e2 32000000 		.4byte	.LASF85
 3107 03e6 01       		.byte	0x1
 3108 03e7 9A01     		.2byte	0x19a
 3109 03e9 6B020000 		.4byte	0x26b
 3110 03ed 02       		.uleb128 0x2
 3111 03ee 91       		.byte	0x91
 3112 03ef 6C       		.sleb128 -20
 3113 03f0 0F       		.uleb128 0xf
 3114 03f1 EF000000 		.4byte	.LASF86
 3115 03f5 01       		.byte	0x1
 3116 03f6 9B01     		.2byte	0x19b
 3117 03f8 6B020000 		.4byte	0x26b
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 74


 3118 03fc 02       		.uleb128 0x2
 3119 03fd 91       		.byte	0x91
 3120 03fe 68       		.sleb128 -24
 3121 03ff 0F       		.uleb128 0xf
 3122 0400 0A050000 		.4byte	.LASF87
 3123 0404 01       		.byte	0x1
 3124 0405 9C01     		.2byte	0x19c
 3125 0407 6B020000 		.4byte	0x26b
 3126 040b 02       		.uleb128 0x2
 3127 040c 91       		.byte	0x91
 3128 040d 64       		.sleb128 -28
 3129 040e 0F       		.uleb128 0xf
 3130 040f 33020000 		.4byte	.LASF76
 3131 0413 01       		.byte	0x1
 3132 0414 9D01     		.2byte	0x19d
 3133 0416 81000000 		.4byte	0x81
 3134 041a 02       		.uleb128 0x2
 3135 041b 91       		.byte	0x91
 3136 041c 6F       		.sleb128 -17
 3137 041d 0F       		.uleb128 0xf
 3138 041e E4020000 		.4byte	.LASF88
 3139 0422 01       		.byte	0x1
 3140 0423 9E01     		.2byte	0x19e
 3141 0425 81000000 		.4byte	0x81
 3142 0429 02       		.uleb128 0x2
 3143 042a 91       		.byte	0x91
 3144 042b 6E       		.sleb128 -18
 3145 042c 00       		.byte	0
 3146 042d 11       		.uleb128 0x11
 3147 042e 64010000 		.4byte	.LASF122
 3148 0432 01       		.byte	0x1
 3149 0433 D101     		.2byte	0x1d1
 3150 0435 81000000 		.4byte	0x81
 3151 0439 00000000 		.4byte	.LFB73
 3152 043d F4000000 		.4byte	.LFE73-.LFB73
 3153 0441 01       		.uleb128 0x1
 3154 0442 9C       		.byte	0x9c
 3155 0443 93040000 		.4byte	0x493
 3156 0447 12       		.uleb128 0x12
 3157 0448 BA010000 		.4byte	.LASF89
 3158 044c 01       		.byte	0x1
 3159 044d D101     		.2byte	0x1d1
 3160 044f B3000000 		.4byte	0xb3
 3161 0453 02       		.uleb128 0x2
 3162 0454 91       		.byte	0x91
 3163 0455 6F       		.sleb128 -17
 3164 0456 12       		.uleb128 0x12
 3165 0457 A6000000 		.4byte	.LASF90
 3166 045b 01       		.byte	0x1
 3167 045c D101     		.2byte	0x1d1
 3168 045e B3000000 		.4byte	0xb3
 3169 0462 02       		.uleb128 0x2
 3170 0463 91       		.byte	0x91
 3171 0464 6E       		.sleb128 -18
 3172 0465 12       		.uleb128 0x12
 3173 0466 B2040000 		.4byte	.LASF62
 3174 046a 01       		.byte	0x1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 75


 3175 046b D201     		.2byte	0x1d2
 3176 046d 81000000 		.4byte	0x81
 3177 0471 02       		.uleb128 0x2
 3178 0472 91       		.byte	0x91
 3179 0473 6D       		.sleb128 -19
 3180 0474 0F       		.uleb128 0xf
 3181 0475 33020000 		.4byte	.LASF76
 3182 0479 01       		.byte	0x1
 3183 047a D401     		.2byte	0x1d4
 3184 047c 81000000 		.4byte	0x81
 3185 0480 02       		.uleb128 0x2
 3186 0481 91       		.byte	0x91
 3187 0482 77       		.sleb128 -9
 3188 0483 0F       		.uleb128 0xf
 3189 0484 C6040000 		.4byte	.LASF91
 3190 0488 01       		.byte	0x1
 3191 0489 D501     		.2byte	0x1d5
 3192 048b 81000000 		.4byte	0x81
 3193 048f 02       		.uleb128 0x2
 3194 0490 91       		.byte	0x91
 3195 0491 76       		.sleb128 -10
 3196 0492 00       		.byte	0
 3197 0493 10       		.uleb128 0x10
 3198 0494 2D030000 		.4byte	.LASF92
 3199 0498 01       		.byte	0x1
 3200 0499 0B02     		.2byte	0x20b
 3201 049b 00000000 		.4byte	.LFB74
 3202 049f 1E000000 		.4byte	.LFE74-.LFB74
 3203 04a3 01       		.uleb128 0x1
 3204 04a4 9C       		.byte	0x9c
 3205 04a5 10       		.uleb128 0x10
 3206 04a6 F1040000 		.4byte	.LASF93
 3207 04aa 01       		.byte	0x1
 3208 04ab 2202     		.2byte	0x222
 3209 04ad 00000000 		.4byte	.LFB75
 3210 04b1 46000000 		.4byte	.LFE75-.LFB75
 3211 04b5 01       		.uleb128 0x1
 3212 04b6 9C       		.byte	0x9c
 3213 04b7 13       		.uleb128 0x13
 3214 04b8 7D000000 		.4byte	.LASF123
 3215 04bc 01       		.byte	0x1
 3216 04bd 3C02     		.2byte	0x23c
 3217 04bf 00000000 		.4byte	.LFB76
 3218 04c3 6C030000 		.4byte	.LFE76-.LFB76
 3219 04c7 01       		.uleb128 0x1
 3220 04c8 9C       		.byte	0x9c
 3221 04c9 E0040000 		.4byte	0x4e0
 3222 04cd 0F       		.uleb128 0xf
 3223 04ce CE020000 		.4byte	.LASF94
 3224 04d2 01       		.byte	0x1
 3225 04d3 3E02     		.2byte	0x23e
 3226 04d5 81000000 		.4byte	0x81
 3227 04d9 05       		.uleb128 0x5
 3228 04da 03       		.byte	0x3
 3229 04db 1E000000 		.4byte	bToneChangeOnHornRing.7384
 3230 04df 00       		.byte	0
 3231 04e0 14       		.uleb128 0x14
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 76


 3232 04e1 BE000000 		.4byte	.LASF99
 3233 04e5 01       		.byte	0x1
 3234 04e6 EB02     		.2byte	0x2eb
 3235 04e8 81000000 		.4byte	0x81
 3236 04ec 00000000 		.4byte	.LFB77
 3237 04f0 88000000 		.4byte	.LFE77-.LFB77
 3238 04f4 01       		.uleb128 0x1
 3239 04f5 9C       		.byte	0x9c
 3240 04f6 37050000 		.4byte	0x537
 3241 04fa 12       		.uleb128 0x12
 3242 04fb 43010000 		.4byte	.LASF95
 3243 04ff 01       		.byte	0x1
 3244 0500 EB02     		.2byte	0x2eb
 3245 0502 81000000 		.4byte	0x81
 3246 0506 02       		.uleb128 0x2
 3247 0507 91       		.byte	0x91
 3248 0508 6F       		.sleb128 -17
 3249 0509 12       		.uleb128 0x12
 3250 050a 2B040000 		.4byte	.LASF96
 3251 050e 01       		.byte	0x1
 3252 050f EB02     		.2byte	0x2eb
 3253 0511 B3000000 		.4byte	0xb3
 3254 0515 02       		.uleb128 0x2
 3255 0516 91       		.byte	0x91
 3256 0517 6E       		.sleb128 -18
 3257 0518 12       		.uleb128 0x12
 3258 0519 5E020000 		.4byte	.LASF97
 3259 051d 01       		.byte	0x1
 3260 051e EC02     		.2byte	0x2ec
 3261 0520 81000000 		.4byte	0x81
 3262 0524 02       		.uleb128 0x2
 3263 0525 91       		.byte	0x91
 3264 0526 6D       		.sleb128 -19
 3265 0527 12       		.uleb128 0x12
 3266 0528 57030000 		.4byte	.LASF98
 3267 052c 01       		.byte	0x1
 3268 052d EC02     		.2byte	0x2ec
 3269 052f 81000000 		.4byte	0x81
 3270 0533 02       		.uleb128 0x2
 3271 0534 91       		.byte	0x91
 3272 0535 6C       		.sleb128 -20
 3273 0536 00       		.byte	0
 3274 0537 14       		.uleb128 0x14
 3275 0538 BF060000 		.4byte	.LASF100
 3276 053c 01       		.byte	0x1
 3277 053d 1603     		.2byte	0x316
 3278 053f 81000000 		.4byte	0x81
 3279 0543 00000000 		.4byte	.LFB78
 3280 0547 7A000000 		.4byte	.LFE78-.LFB78
 3281 054b 01       		.uleb128 0x1
 3282 054c 9C       		.byte	0x9c
 3283 054d 7F050000 		.4byte	0x57f
 3284 0551 12       		.uleb128 0x12
 3285 0552 43010000 		.4byte	.LASF95
 3286 0556 01       		.byte	0x1
 3287 0557 1603     		.2byte	0x316
 3288 0559 81000000 		.4byte	0x81
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 77


 3289 055d 02       		.uleb128 0x2
 3290 055e 91       		.byte	0x91
 3291 055f 77       		.sleb128 -9
 3292 0560 12       		.uleb128 0x12
 3293 0561 2B040000 		.4byte	.LASF96
 3294 0565 01       		.byte	0x1
 3295 0566 1603     		.2byte	0x316
 3296 0568 B3000000 		.4byte	0xb3
 3297 056c 02       		.uleb128 0x2
 3298 056d 91       		.byte	0x91
 3299 056e 76       		.sleb128 -10
 3300 056f 12       		.uleb128 0x12
 3301 0570 5E020000 		.4byte	.LASF97
 3302 0574 01       		.byte	0x1
 3303 0575 1703     		.2byte	0x317
 3304 0577 81000000 		.4byte	0x81
 3305 057b 02       		.uleb128 0x2
 3306 057c 91       		.byte	0x91
 3307 057d 75       		.sleb128 -11
 3308 057e 00       		.byte	0
 3309 057f 14       		.uleb128 0x14
 3310 0580 5C040000 		.4byte	.LASF101
 3311 0584 01       		.byte	0x1
 3312 0585 3903     		.2byte	0x339
 3313 0587 4A010000 		.4byte	0x14a
 3314 058b 00000000 		.4byte	.LFB79
 3315 058f 94000000 		.4byte	.LFE79-.LFB79
 3316 0593 01       		.uleb128 0x1
 3317 0594 9C       		.byte	0x9c
 3318 0595 B8050000 		.4byte	0x5b8
 3319 0599 12       		.uleb128 0x12
 3320 059a 40060000 		.4byte	.LASF102
 3321 059e 01       		.byte	0x1
 3322 059f 3903     		.2byte	0x339
 3323 05a1 81000000 		.4byte	0x81
 3324 05a5 02       		.uleb128 0x2
 3325 05a6 91       		.byte	0x91
 3326 05a7 6F       		.sleb128 -17
 3327 05a8 0F       		.uleb128 0xf
 3328 05a9 F7050000 		.4byte	.LASF103
 3329 05ad 01       		.byte	0x1
 3330 05ae 3B03     		.2byte	0x33b
 3331 05b0 81000000 		.4byte	0x81
 3332 05b4 02       		.uleb128 0x2
 3333 05b5 91       		.byte	0x91
 3334 05b6 77       		.sleb128 -9
 3335 05b7 00       		.byte	0
 3336 05b8 14       		.uleb128 0x14
 3337 05b9 BB020000 		.4byte	.LASF104
 3338 05bd 01       		.byte	0x1
 3339 05be 6303     		.2byte	0x363
 3340 05c0 B3000000 		.4byte	0xb3
 3341 05c4 00000000 		.4byte	.LFB80
 3342 05c8 50000000 		.4byte	.LFE80-.LFB80
 3343 05cc 01       		.uleb128 0x1
 3344 05cd 9C       		.byte	0x9c
 3345 05ce E2050000 		.4byte	0x5e2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 78


 3346 05d2 12       		.uleb128 0x12
 3347 05d3 2B040000 		.4byte	.LASF96
 3348 05d7 01       		.byte	0x1
 3349 05d8 6303     		.2byte	0x363
 3350 05da B3000000 		.4byte	0xb3
 3351 05de 02       		.uleb128 0x2
 3352 05df 91       		.byte	0x91
 3353 05e0 77       		.sleb128 -9
 3354 05e1 00       		.byte	0
 3355 05e2 14       		.uleb128 0x14
 3356 05e3 17020000 		.4byte	.LASF105
 3357 05e7 01       		.byte	0x1
 3358 05e8 7F03     		.2byte	0x37f
 3359 05ea 81000000 		.4byte	0x81
 3360 05ee 00000000 		.4byte	.LFB81
 3361 05f2 32000000 		.4byte	.LFE81-.LFB81
 3362 05f6 01       		.uleb128 0x1
 3363 05f7 9C       		.byte	0x9c
 3364 05f8 0C060000 		.4byte	0x60c
 3365 05fc 12       		.uleb128 0x12
 3366 05fd D8000000 		.4byte	.LASF106
 3367 0601 01       		.byte	0x1
 3368 0602 7F03     		.2byte	0x37f
 3369 0604 B3000000 		.4byte	0xb3
 3370 0608 02       		.uleb128 0x2
 3371 0609 91       		.byte	0x91
 3372 060a 77       		.sleb128 -9
 3373 060b 00       		.byte	0
 3374 060c 14       		.uleb128 0x14
 3375 060d F4020000 		.4byte	.LASF107
 3376 0611 01       		.byte	0x1
 3377 0612 9503     		.2byte	0x395
 3378 0614 81000000 		.4byte	0x81
 3379 0618 00000000 		.4byte	.LFB82
 3380 061c 3A000000 		.4byte	.LFE82-.LFB82
 3381 0620 01       		.uleb128 0x1
 3382 0621 9C       		.byte	0x9c
 3383 0622 36060000 		.4byte	0x636
 3384 0626 12       		.uleb128 0x12
 3385 0627 D8000000 		.4byte	.LASF106
 3386 062b 01       		.byte	0x1
 3387 062c 9503     		.2byte	0x395
 3388 062e B3000000 		.4byte	0xb3
 3389 0632 02       		.uleb128 0x2
 3390 0633 91       		.byte	0x91
 3391 0634 77       		.sleb128 -9
 3392 0635 00       		.byte	0
 3393 0636 15       		.uleb128 0x15
 3394 0637 23030000 		.4byte	.LASF108
 3395 063b 01       		.byte	0x1
 3396 063c AB03     		.2byte	0x3ab
 3397 063e 81000000 		.4byte	0x81
 3398 0642 00000000 		.4byte	.LFB83
 3399 0646 28000000 		.4byte	.LFE83-.LFB83
 3400 064a 01       		.uleb128 0x1
 3401 064b 9C       		.byte	0x9c
 3402 064c 60060000 		.4byte	0x660
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 79


 3403 0650 12       		.uleb128 0x12
 3404 0651 D8000000 		.4byte	.LASF106
 3405 0655 01       		.byte	0x1
 3406 0656 AB03     		.2byte	0x3ab
 3407 0658 B3000000 		.4byte	0xb3
 3408 065c 02       		.uleb128 0x2
 3409 065d 91       		.byte	0x91
 3410 065e 77       		.sleb128 -9
 3411 065f 00       		.byte	0
 3412 0660 15       		.uleb128 0x15
 3413 0661 AC060000 		.4byte	.LASF109
 3414 0665 01       		.byte	0x1
 3415 0666 C103     		.2byte	0x3c1
 3416 0668 81000000 		.4byte	0x81
 3417 066c 00000000 		.4byte	.LFB84
 3418 0670 22000000 		.4byte	.LFE84-.LFB84
 3419 0674 01       		.uleb128 0x1
 3420 0675 9C       		.byte	0x9c
 3421 0676 8A060000 		.4byte	0x68a
 3422 067a 12       		.uleb128 0x12
 3423 067b D8000000 		.4byte	.LASF106
 3424 067f 01       		.byte	0x1
 3425 0680 C103     		.2byte	0x3c1
 3426 0682 B3000000 		.4byte	0xb3
 3427 0686 02       		.uleb128 0x2
 3428 0687 91       		.byte	0x91
 3429 0688 77       		.sleb128 -9
 3430 0689 00       		.byte	0
 3431 068a 15       		.uleb128 0x15
 3432 068b DA060000 		.4byte	.LASF110
 3433 068f 01       		.byte	0x1
 3434 0690 D703     		.2byte	0x3d7
 3435 0692 81000000 		.4byte	0x81
 3436 0696 00000000 		.4byte	.LFB85
 3437 069a D4000000 		.4byte	.LFE85-.LFB85
 3438 069e 01       		.uleb128 0x1
 3439 069f 9C       		.byte	0x9c
 3440 06a0 C3060000 		.4byte	0x6c3
 3441 06a4 12       		.uleb128 0x12
 3442 06a5 B0020000 		.4byte	.LASF111
 3443 06a9 01       		.byte	0x1
 3444 06aa D703     		.2byte	0x3d7
 3445 06ac 82010000 		.4byte	0x182
 3446 06b0 02       		.uleb128 0x2
 3447 06b1 91       		.byte	0x91
 3448 06b2 6F       		.sleb128 -17
 3449 06b3 0F       		.uleb128 0xf
 3450 06b4 75030000 		.4byte	.LASF112
 3451 06b8 01       		.byte	0x1
 3452 06b9 D903     		.2byte	0x3d9
 3453 06bb 81000000 		.4byte	0x81
 3454 06bf 02       		.uleb128 0x2
 3455 06c0 91       		.byte	0x91
 3456 06c1 77       		.sleb128 -9
 3457 06c2 00       		.byte	0
 3458 06c3 09       		.uleb128 0x9
 3459 06c4 81000000 		.4byte	0x81
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 80


 3460 06c8 D3060000 		.4byte	0x6d3
 3461 06cc 0A       		.uleb128 0xa
 3462 06cd AC000000 		.4byte	0xac
 3463 06d1 0B       		.byte	0xb
 3464 06d2 00       		.byte	0
 3465 06d3 0C       		.uleb128 0xc
 3466 06d4 0B010000 		.4byte	.LASF113
 3467 06d8 01       		.byte	0x1
 3468 06d9 2B       		.byte	0x2b
 3469 06da E4060000 		.4byte	0x6e4
 3470 06de 05       		.uleb128 0x5
 3471 06df 03       		.byte	0x3
 3472 06e0 00000000 		.4byte	DEFAULT_CONFIGURATION_LIST
 3473 06e4 16       		.uleb128 0x16
 3474 06e5 C3060000 		.4byte	0x6c3
 3475 06e9 0C       		.uleb128 0xc
 3476 06ea A1040000 		.4byte	.LASF114
 3477 06ee 01       		.byte	0x1
 3478 06ef 2F       		.byte	0x2f
 3479 06f0 FA060000 		.4byte	0x6fa
 3480 06f4 05       		.uleb128 0x5
 3481 06f5 03       		.byte	0x3
 3482 06f6 0C000000 		.4byte	EEPROM_KEY_INDEX
 3483 06fa 16       		.uleb128 0x16
 3484 06fb 8C000000 		.4byte	0x8c
 3485 06ff 0C       		.uleb128 0xc
 3486 0700 40020000 		.4byte	.LASF115
 3487 0704 01       		.byte	0x1
 3488 0705 30       		.byte	0x30
 3489 0706 10070000 		.4byte	0x710
 3490 070a 05       		.uleb128 0x5
 3491 070b 03       		.byte	0x3
 3492 070c 0E000000 		.4byte	EEPROM_KEY_VALUE
 3493 0710 16       		.uleb128 0x16
 3494 0711 81000000 		.4byte	0x81
 3495 0715 09       		.uleb128 0x9
 3496 0716 B3000000 		.4byte	0xb3
 3497 071a 2B070000 		.4byte	0x72b
 3498 071e 0A       		.uleb128 0xa
 3499 071f AC000000 		.4byte	0xac
 3500 0723 01       		.byte	0x1
 3501 0724 0A       		.uleb128 0xa
 3502 0725 AC000000 		.4byte	0xac
 3503 0729 05       		.byte	0x5
 3504 072a 00       		.byte	0
 3505 072b 0C       		.uleb128 0xc
 3506 072c E6060000 		.4byte	.LASF116
 3507 0730 01       		.byte	0x1
 3508 0731 33       		.byte	0x33
 3509 0732 15070000 		.4byte	0x715
 3510 0736 05       		.uleb128 0x5
 3511 0737 03       		.byte	0x3
 3512 0738 00000000 		.4byte	toneConfigurationList
 3513 073c 0C       		.uleb128 0xc
 3514 073d A3010000 		.4byte	.LASF117
 3515 0741 01       		.byte	0x1
 3516 0742 3D       		.byte	0x3d
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 81


 3517 0743 C1010000 		.4byte	0x1c1
 3518 0747 05       		.uleb128 0x5
 3519 0748 03       		.byte	0x3
 3520 0749 0C000000 		.4byte	InputRead
 3521 074d 0C       		.uleb128 0xc
 3522 074e 39040000 		.4byte	.LASF118
 3523 0752 01       		.byte	0x1
 3524 0753 45       		.byte	0x45
 3525 0754 22020000 		.4byte	0x222
 3526 0758 05       		.uleb128 0x5
 3527 0759 03       		.byte	0x3
 3528 075a 14000000 		.4byte	ToneStatus
 3529 075e 17       		.uleb128 0x17
 3530 075f B1000000 		.4byte	.LASF124
 3531 0763 06       		.byte	0x6
 3532 0764 2A06     		.2byte	0x62a
 3533 0766 6A070000 		.4byte	0x76a
 3534 076a 18       		.uleb128 0x18
 3535 076b 76000000 		.4byte	0x76
 3536 076f 00       		.byte	0
 3537              		.section	.debug_abbrev,"",%progbits
 3538              	.Ldebug_abbrev0:
 3539 0000 01       		.uleb128 0x1
 3540 0001 11       		.uleb128 0x11
 3541 0002 01       		.byte	0x1
 3542 0003 25       		.uleb128 0x25
 3543 0004 0E       		.uleb128 0xe
 3544 0005 13       		.uleb128 0x13
 3545 0006 0B       		.uleb128 0xb
 3546 0007 03       		.uleb128 0x3
 3547 0008 0E       		.uleb128 0xe
 3548 0009 1B       		.uleb128 0x1b
 3549 000a 0E       		.uleb128 0xe
 3550 000b 55       		.uleb128 0x55
 3551 000c 17       		.uleb128 0x17
 3552 000d 11       		.uleb128 0x11
 3553 000e 01       		.uleb128 0x1
 3554 000f 10       		.uleb128 0x10
 3555 0010 17       		.uleb128 0x17
 3556 0011 00       		.byte	0
 3557 0012 00       		.byte	0
 3558 0013 02       		.uleb128 0x2
 3559 0014 24       		.uleb128 0x24
 3560 0015 00       		.byte	0
 3561 0016 0B       		.uleb128 0xb
 3562 0017 0B       		.uleb128 0xb
 3563 0018 3E       		.uleb128 0x3e
 3564 0019 0B       		.uleb128 0xb
 3565 001a 03       		.uleb128 0x3
 3566 001b 0E       		.uleb128 0xe
 3567 001c 00       		.byte	0
 3568 001d 00       		.byte	0
 3569 001e 03       		.uleb128 0x3
 3570 001f 16       		.uleb128 0x16
 3571 0020 00       		.byte	0
 3572 0021 03       		.uleb128 0x3
 3573 0022 0E       		.uleb128 0xe
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 82


 3574 0023 3A       		.uleb128 0x3a
 3575 0024 0B       		.uleb128 0xb
 3576 0025 3B       		.uleb128 0x3b
 3577 0026 0B       		.uleb128 0xb
 3578 0027 49       		.uleb128 0x49
 3579 0028 13       		.uleb128 0x13
 3580 0029 00       		.byte	0
 3581 002a 00       		.byte	0
 3582 002b 04       		.uleb128 0x4
 3583 002c 24       		.uleb128 0x24
 3584 002d 00       		.byte	0
 3585 002e 0B       		.uleb128 0xb
 3586 002f 0B       		.uleb128 0xb
 3587 0030 3E       		.uleb128 0x3e
 3588 0031 0B       		.uleb128 0xb
 3589 0032 03       		.uleb128 0x3
 3590 0033 08       		.uleb128 0x8
 3591 0034 00       		.byte	0
 3592 0035 00       		.byte	0
 3593 0036 05       		.uleb128 0x5
 3594 0037 04       		.uleb128 0x4
 3595 0038 01       		.byte	0x1
 3596 0039 03       		.uleb128 0x3
 3597 003a 0E       		.uleb128 0xe
 3598 003b 0B       		.uleb128 0xb
 3599 003c 0B       		.uleb128 0xb
 3600 003d 3A       		.uleb128 0x3a
 3601 003e 0B       		.uleb128 0xb
 3602 003f 3B       		.uleb128 0x3b
 3603 0040 0B       		.uleb128 0xb
 3604 0041 01       		.uleb128 0x1
 3605 0042 13       		.uleb128 0x13
 3606 0043 00       		.byte	0
 3607 0044 00       		.byte	0
 3608 0045 06       		.uleb128 0x6
 3609 0046 28       		.uleb128 0x28
 3610 0047 00       		.byte	0
 3611 0048 03       		.uleb128 0x3
 3612 0049 0E       		.uleb128 0xe
 3613 004a 1C       		.uleb128 0x1c
 3614 004b 0D       		.uleb128 0xd
 3615 004c 00       		.byte	0
 3616 004d 00       		.byte	0
 3617 004e 07       		.uleb128 0x7
 3618 004f 13       		.uleb128 0x13
 3619 0050 01       		.byte	0x1
 3620 0051 0B       		.uleb128 0xb
 3621 0052 0B       		.uleb128 0xb
 3622 0053 3A       		.uleb128 0x3a
 3623 0054 0B       		.uleb128 0xb
 3624 0055 3B       		.uleb128 0x3b
 3625 0056 0B       		.uleb128 0xb
 3626 0057 01       		.uleb128 0x1
 3627 0058 13       		.uleb128 0x13
 3628 0059 00       		.byte	0
 3629 005a 00       		.byte	0
 3630 005b 08       		.uleb128 0x8
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 83


 3631 005c 0D       		.uleb128 0xd
 3632 005d 00       		.byte	0
 3633 005e 03       		.uleb128 0x3
 3634 005f 0E       		.uleb128 0xe
 3635 0060 3A       		.uleb128 0x3a
 3636 0061 0B       		.uleb128 0xb
 3637 0062 3B       		.uleb128 0x3b
 3638 0063 0B       		.uleb128 0xb
 3639 0064 49       		.uleb128 0x49
 3640 0065 13       		.uleb128 0x13
 3641 0066 38       		.uleb128 0x38
 3642 0067 0B       		.uleb128 0xb
 3643 0068 00       		.byte	0
 3644 0069 00       		.byte	0
 3645 006a 09       		.uleb128 0x9
 3646 006b 01       		.uleb128 0x1
 3647 006c 01       		.byte	0x1
 3648 006d 49       		.uleb128 0x49
 3649 006e 13       		.uleb128 0x13
 3650 006f 01       		.uleb128 0x1
 3651 0070 13       		.uleb128 0x13
 3652 0071 00       		.byte	0
 3653 0072 00       		.byte	0
 3654 0073 0A       		.uleb128 0xa
 3655 0074 21       		.uleb128 0x21
 3656 0075 00       		.byte	0
 3657 0076 49       		.uleb128 0x49
 3658 0077 13       		.uleb128 0x13
 3659 0078 2F       		.uleb128 0x2f
 3660 0079 0B       		.uleb128 0xb
 3661 007a 00       		.byte	0
 3662 007b 00       		.byte	0
 3663 007c 0B       		.uleb128 0xb
 3664 007d 2E       		.uleb128 0x2e
 3665 007e 01       		.byte	0x1
 3666 007f 3F       		.uleb128 0x3f
 3667 0080 19       		.uleb128 0x19
 3668 0081 03       		.uleb128 0x3
 3669 0082 0E       		.uleb128 0xe
 3670 0083 3A       		.uleb128 0x3a
 3671 0084 0B       		.uleb128 0xb
 3672 0085 3B       		.uleb128 0x3b
 3673 0086 0B       		.uleb128 0xb
 3674 0087 27       		.uleb128 0x27
 3675 0088 19       		.uleb128 0x19
 3676 0089 11       		.uleb128 0x11
 3677 008a 01       		.uleb128 0x1
 3678 008b 12       		.uleb128 0x12
 3679 008c 06       		.uleb128 0x6
 3680 008d 40       		.uleb128 0x40
 3681 008e 18       		.uleb128 0x18
 3682 008f 9642     		.uleb128 0x2116
 3683 0091 19       		.uleb128 0x19
 3684 0092 01       		.uleb128 0x1
 3685 0093 13       		.uleb128 0x13
 3686 0094 00       		.byte	0
 3687 0095 00       		.byte	0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 84


 3688 0096 0C       		.uleb128 0xc
 3689 0097 34       		.uleb128 0x34
 3690 0098 00       		.byte	0
 3691 0099 03       		.uleb128 0x3
 3692 009a 0E       		.uleb128 0xe
 3693 009b 3A       		.uleb128 0x3a
 3694 009c 0B       		.uleb128 0xb
 3695 009d 3B       		.uleb128 0x3b
 3696 009e 0B       		.uleb128 0xb
 3697 009f 49       		.uleb128 0x49
 3698 00a0 13       		.uleb128 0x13
 3699 00a1 02       		.uleb128 0x2
 3700 00a2 18       		.uleb128 0x18
 3701 00a3 00       		.byte	0
 3702 00a4 00       		.byte	0
 3703 00a5 0D       		.uleb128 0xd
 3704 00a6 2E       		.uleb128 0x2e
 3705 00a7 00       		.byte	0
 3706 00a8 3F       		.uleb128 0x3f
 3707 00a9 19       		.uleb128 0x19
 3708 00aa 03       		.uleb128 0x3
 3709 00ab 0E       		.uleb128 0xe
 3710 00ac 3A       		.uleb128 0x3a
 3711 00ad 0B       		.uleb128 0xb
 3712 00ae 3B       		.uleb128 0x3b
 3713 00af 0B       		.uleb128 0xb
 3714 00b0 27       		.uleb128 0x27
 3715 00b1 19       		.uleb128 0x19
 3716 00b2 11       		.uleb128 0x11
 3717 00b3 01       		.uleb128 0x1
 3718 00b4 12       		.uleb128 0x12
 3719 00b5 06       		.uleb128 0x6
 3720 00b6 40       		.uleb128 0x40
 3721 00b7 18       		.uleb128 0x18
 3722 00b8 9642     		.uleb128 0x2116
 3723 00ba 19       		.uleb128 0x19
 3724 00bb 00       		.byte	0
 3725 00bc 00       		.byte	0
 3726 00bd 0E       		.uleb128 0xe
 3727 00be 2E       		.uleb128 0x2e
 3728 00bf 01       		.byte	0x1
 3729 00c0 3F       		.uleb128 0x3f
 3730 00c1 19       		.uleb128 0x19
 3731 00c2 03       		.uleb128 0x3
 3732 00c3 0E       		.uleb128 0xe
 3733 00c4 3A       		.uleb128 0x3a
 3734 00c5 0B       		.uleb128 0xb
 3735 00c6 3B       		.uleb128 0x3b
 3736 00c7 05       		.uleb128 0x5
 3737 00c8 27       		.uleb128 0x27
 3738 00c9 19       		.uleb128 0x19
 3739 00ca 11       		.uleb128 0x11
 3740 00cb 01       		.uleb128 0x1
 3741 00cc 12       		.uleb128 0x12
 3742 00cd 06       		.uleb128 0x6
 3743 00ce 40       		.uleb128 0x40
 3744 00cf 18       		.uleb128 0x18
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 85


 3745 00d0 9642     		.uleb128 0x2116
 3746 00d2 19       		.uleb128 0x19
 3747 00d3 01       		.uleb128 0x1
 3748 00d4 13       		.uleb128 0x13
 3749 00d5 00       		.byte	0
 3750 00d6 00       		.byte	0
 3751 00d7 0F       		.uleb128 0xf
 3752 00d8 34       		.uleb128 0x34
 3753 00d9 00       		.byte	0
 3754 00da 03       		.uleb128 0x3
 3755 00db 0E       		.uleb128 0xe
 3756 00dc 3A       		.uleb128 0x3a
 3757 00dd 0B       		.uleb128 0xb
 3758 00de 3B       		.uleb128 0x3b
 3759 00df 05       		.uleb128 0x5
 3760 00e0 49       		.uleb128 0x49
 3761 00e1 13       		.uleb128 0x13
 3762 00e2 02       		.uleb128 0x2
 3763 00e3 18       		.uleb128 0x18
 3764 00e4 00       		.byte	0
 3765 00e5 00       		.byte	0
 3766 00e6 10       		.uleb128 0x10
 3767 00e7 2E       		.uleb128 0x2e
 3768 00e8 00       		.byte	0
 3769 00e9 3F       		.uleb128 0x3f
 3770 00ea 19       		.uleb128 0x19
 3771 00eb 03       		.uleb128 0x3
 3772 00ec 0E       		.uleb128 0xe
 3773 00ed 3A       		.uleb128 0x3a
 3774 00ee 0B       		.uleb128 0xb
 3775 00ef 3B       		.uleb128 0x3b
 3776 00f0 05       		.uleb128 0x5
 3777 00f1 27       		.uleb128 0x27
 3778 00f2 19       		.uleb128 0x19
 3779 00f3 11       		.uleb128 0x11
 3780 00f4 01       		.uleb128 0x1
 3781 00f5 12       		.uleb128 0x12
 3782 00f6 06       		.uleb128 0x6
 3783 00f7 40       		.uleb128 0x40
 3784 00f8 18       		.uleb128 0x18
 3785 00f9 9642     		.uleb128 0x2116
 3786 00fb 19       		.uleb128 0x19
 3787 00fc 00       		.byte	0
 3788 00fd 00       		.byte	0
 3789 00fe 11       		.uleb128 0x11
 3790 00ff 2E       		.uleb128 0x2e
 3791 0100 01       		.byte	0x1
 3792 0101 3F       		.uleb128 0x3f
 3793 0102 19       		.uleb128 0x19
 3794 0103 03       		.uleb128 0x3
 3795 0104 0E       		.uleb128 0xe
 3796 0105 3A       		.uleb128 0x3a
 3797 0106 0B       		.uleb128 0xb
 3798 0107 3B       		.uleb128 0x3b
 3799 0108 05       		.uleb128 0x5
 3800 0109 27       		.uleb128 0x27
 3801 010a 19       		.uleb128 0x19
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 86


 3802 010b 49       		.uleb128 0x49
 3803 010c 13       		.uleb128 0x13
 3804 010d 11       		.uleb128 0x11
 3805 010e 01       		.uleb128 0x1
 3806 010f 12       		.uleb128 0x12
 3807 0110 06       		.uleb128 0x6
 3808 0111 40       		.uleb128 0x40
 3809 0112 18       		.uleb128 0x18
 3810 0113 9642     		.uleb128 0x2116
 3811 0115 19       		.uleb128 0x19
 3812 0116 01       		.uleb128 0x1
 3813 0117 13       		.uleb128 0x13
 3814 0118 00       		.byte	0
 3815 0119 00       		.byte	0
 3816 011a 12       		.uleb128 0x12
 3817 011b 05       		.uleb128 0x5
 3818 011c 00       		.byte	0
 3819 011d 03       		.uleb128 0x3
 3820 011e 0E       		.uleb128 0xe
 3821 011f 3A       		.uleb128 0x3a
 3822 0120 0B       		.uleb128 0xb
 3823 0121 3B       		.uleb128 0x3b
 3824 0122 05       		.uleb128 0x5
 3825 0123 49       		.uleb128 0x49
 3826 0124 13       		.uleb128 0x13
 3827 0125 02       		.uleb128 0x2
 3828 0126 18       		.uleb128 0x18
 3829 0127 00       		.byte	0
 3830 0128 00       		.byte	0
 3831 0129 13       		.uleb128 0x13
 3832 012a 2E       		.uleb128 0x2e
 3833 012b 01       		.byte	0x1
 3834 012c 03       		.uleb128 0x3
 3835 012d 0E       		.uleb128 0xe
 3836 012e 3A       		.uleb128 0x3a
 3837 012f 0B       		.uleb128 0xb
 3838 0130 3B       		.uleb128 0x3b
 3839 0131 05       		.uleb128 0x5
 3840 0132 27       		.uleb128 0x27
 3841 0133 19       		.uleb128 0x19
 3842 0134 11       		.uleb128 0x11
 3843 0135 01       		.uleb128 0x1
 3844 0136 12       		.uleb128 0x12
 3845 0137 06       		.uleb128 0x6
 3846 0138 40       		.uleb128 0x40
 3847 0139 18       		.uleb128 0x18
 3848 013a 9642     		.uleb128 0x2116
 3849 013c 19       		.uleb128 0x19
 3850 013d 01       		.uleb128 0x1
 3851 013e 13       		.uleb128 0x13
 3852 013f 00       		.byte	0
 3853 0140 00       		.byte	0
 3854 0141 14       		.uleb128 0x14
 3855 0142 2E       		.uleb128 0x2e
 3856 0143 01       		.byte	0x1
 3857 0144 03       		.uleb128 0x3
 3858 0145 0E       		.uleb128 0xe
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 87


 3859 0146 3A       		.uleb128 0x3a
 3860 0147 0B       		.uleb128 0xb
 3861 0148 3B       		.uleb128 0x3b
 3862 0149 05       		.uleb128 0x5
 3863 014a 27       		.uleb128 0x27
 3864 014b 19       		.uleb128 0x19
 3865 014c 49       		.uleb128 0x49
 3866 014d 13       		.uleb128 0x13
 3867 014e 11       		.uleb128 0x11
 3868 014f 01       		.uleb128 0x1
 3869 0150 12       		.uleb128 0x12
 3870 0151 06       		.uleb128 0x6
 3871 0152 40       		.uleb128 0x40
 3872 0153 18       		.uleb128 0x18
 3873 0154 9642     		.uleb128 0x2116
 3874 0156 19       		.uleb128 0x19
 3875 0157 01       		.uleb128 0x1
 3876 0158 13       		.uleb128 0x13
 3877 0159 00       		.byte	0
 3878 015a 00       		.byte	0
 3879 015b 15       		.uleb128 0x15
 3880 015c 2E       		.uleb128 0x2e
 3881 015d 01       		.byte	0x1
 3882 015e 03       		.uleb128 0x3
 3883 015f 0E       		.uleb128 0xe
 3884 0160 3A       		.uleb128 0x3a
 3885 0161 0B       		.uleb128 0xb
 3886 0162 3B       		.uleb128 0x3b
 3887 0163 05       		.uleb128 0x5
 3888 0164 27       		.uleb128 0x27
 3889 0165 19       		.uleb128 0x19
 3890 0166 49       		.uleb128 0x49
 3891 0167 13       		.uleb128 0x13
 3892 0168 11       		.uleb128 0x11
 3893 0169 01       		.uleb128 0x1
 3894 016a 12       		.uleb128 0x12
 3895 016b 06       		.uleb128 0x6
 3896 016c 40       		.uleb128 0x40
 3897 016d 18       		.uleb128 0x18
 3898 016e 9742     		.uleb128 0x2117
 3899 0170 19       		.uleb128 0x19
 3900 0171 01       		.uleb128 0x1
 3901 0172 13       		.uleb128 0x13
 3902 0173 00       		.byte	0
 3903 0174 00       		.byte	0
 3904 0175 16       		.uleb128 0x16
 3905 0176 26       		.uleb128 0x26
 3906 0177 00       		.byte	0
 3907 0178 49       		.uleb128 0x49
 3908 0179 13       		.uleb128 0x13
 3909 017a 00       		.byte	0
 3910 017b 00       		.byte	0
 3911 017c 17       		.uleb128 0x17
 3912 017d 34       		.uleb128 0x34
 3913 017e 00       		.byte	0
 3914 017f 03       		.uleb128 0x3
 3915 0180 0E       		.uleb128 0xe
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 88


 3916 0181 3A       		.uleb128 0x3a
 3917 0182 0B       		.uleb128 0xb
 3918 0183 3B       		.uleb128 0x3b
 3919 0184 05       		.uleb128 0x5
 3920 0185 49       		.uleb128 0x49
 3921 0186 13       		.uleb128 0x13
 3922 0187 3F       		.uleb128 0x3f
 3923 0188 19       		.uleb128 0x19
 3924 0189 3C       		.uleb128 0x3c
 3925 018a 19       		.uleb128 0x19
 3926 018b 00       		.byte	0
 3927 018c 00       		.byte	0
 3928 018d 18       		.uleb128 0x18
 3929 018e 35       		.uleb128 0x35
 3930 018f 00       		.byte	0
 3931 0190 49       		.uleb128 0x49
 3932 0191 13       		.uleb128 0x13
 3933 0192 00       		.byte	0
 3934 0193 00       		.byte	0
 3935 0194 00       		.byte	0
 3936              		.section	.debug_aranges,"",%progbits
 3937 0000 CC000000 		.4byte	0xcc
 3938 0004 0200     		.2byte	0x2
 3939 0006 00000000 		.4byte	.Ldebug_info0
 3940 000a 04       		.byte	0x4
 3941 000b 00       		.byte	0
 3942 000c 0000     		.2byte	0
 3943 000e 0000     		.2byte	0
 3944 0010 00000000 		.4byte	.LFB63
 3945 0014 44010000 		.4byte	.LFE63-.LFB63
 3946 0018 00000000 		.4byte	.LFB64
 3947 001c 1A000000 		.4byte	.LFE64-.LFB64
 3948 0020 00000000 		.4byte	.LFB65
 3949 0024 1A000000 		.4byte	.LFE65-.LFB65
 3950 0028 00000000 		.4byte	.LFB66
 3951 002c 80000000 		.4byte	.LFE66-.LFB66
 3952 0030 00000000 		.4byte	.LFB67
 3953 0034 28010000 		.4byte	.LFE67-.LFB67
 3954 0038 00000000 		.4byte	.LFB68
 3955 003c 88000000 		.4byte	.LFE68-.LFB68
 3956 0040 00000000 		.4byte	.LFB69
 3957 0044 20000000 		.4byte	.LFE69-.LFB69
 3958 0048 00000000 		.4byte	.LFB70
 3959 004c 20000000 		.4byte	.LFE70-.LFB70
 3960 0050 00000000 		.4byte	.LFB71
 3961 0054 2C000000 		.4byte	.LFE71-.LFB71
 3962 0058 00000000 		.4byte	.LFB72
 3963 005c 5C010000 		.4byte	.LFE72-.LFB72
 3964 0060 00000000 		.4byte	.LFB73
 3965 0064 F4000000 		.4byte	.LFE73-.LFB73
 3966 0068 00000000 		.4byte	.LFB74
 3967 006c 1E000000 		.4byte	.LFE74-.LFB74
 3968 0070 00000000 		.4byte	.LFB75
 3969 0074 46000000 		.4byte	.LFE75-.LFB75
 3970 0078 00000000 		.4byte	.LFB76
 3971 007c 6C030000 		.4byte	.LFE76-.LFB76
 3972 0080 00000000 		.4byte	.LFB77
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 89


 3973 0084 88000000 		.4byte	.LFE77-.LFB77
 3974 0088 00000000 		.4byte	.LFB78
 3975 008c 7A000000 		.4byte	.LFE78-.LFB78
 3976 0090 00000000 		.4byte	.LFB79
 3977 0094 94000000 		.4byte	.LFE79-.LFB79
 3978 0098 00000000 		.4byte	.LFB80
 3979 009c 50000000 		.4byte	.LFE80-.LFB80
 3980 00a0 00000000 		.4byte	.LFB81
 3981 00a4 32000000 		.4byte	.LFE81-.LFB81
 3982 00a8 00000000 		.4byte	.LFB82
 3983 00ac 3A000000 		.4byte	.LFE82-.LFB82
 3984 00b0 00000000 		.4byte	.LFB83
 3985 00b4 28000000 		.4byte	.LFE83-.LFB83
 3986 00b8 00000000 		.4byte	.LFB84
 3987 00bc 22000000 		.4byte	.LFE84-.LFB84
 3988 00c0 00000000 		.4byte	.LFB85
 3989 00c4 D4000000 		.4byte	.LFE85-.LFB85
 3990 00c8 00000000 		.4byte	0
 3991 00cc 00000000 		.4byte	0
 3992              		.section	.debug_ranges,"",%progbits
 3993              	.Ldebug_ranges0:
 3994 0000 00000000 		.4byte	.LFB63
 3995 0004 44010000 		.4byte	.LFE63
 3996 0008 00000000 		.4byte	.LFB64
 3997 000c 1A000000 		.4byte	.LFE64
 3998 0010 00000000 		.4byte	.LFB65
 3999 0014 1A000000 		.4byte	.LFE65
 4000 0018 00000000 		.4byte	.LFB66
 4001 001c 80000000 		.4byte	.LFE66
 4002 0020 00000000 		.4byte	.LFB67
 4003 0024 28010000 		.4byte	.LFE67
 4004 0028 00000000 		.4byte	.LFB68
 4005 002c 88000000 		.4byte	.LFE68
 4006 0030 00000000 		.4byte	.LFB69
 4007 0034 20000000 		.4byte	.LFE69
 4008 0038 00000000 		.4byte	.LFB70
 4009 003c 20000000 		.4byte	.LFE70
 4010 0040 00000000 		.4byte	.LFB71
 4011 0044 2C000000 		.4byte	.LFE71
 4012 0048 00000000 		.4byte	.LFB72
 4013 004c 5C010000 		.4byte	.LFE72
 4014 0050 00000000 		.4byte	.LFB73
 4015 0054 F4000000 		.4byte	.LFE73
 4016 0058 00000000 		.4byte	.LFB74
 4017 005c 1E000000 		.4byte	.LFE74
 4018 0060 00000000 		.4byte	.LFB75
 4019 0064 46000000 		.4byte	.LFE75
 4020 0068 00000000 		.4byte	.LFB76
 4021 006c 6C030000 		.4byte	.LFE76
 4022 0070 00000000 		.4byte	.LFB77
 4023 0074 88000000 		.4byte	.LFE77
 4024 0078 00000000 		.4byte	.LFB78
 4025 007c 7A000000 		.4byte	.LFE78
 4026 0080 00000000 		.4byte	.LFB79
 4027 0084 94000000 		.4byte	.LFE79
 4028 0088 00000000 		.4byte	.LFB80
 4029 008c 50000000 		.4byte	.LFE80
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 90


 4030 0090 00000000 		.4byte	.LFB81
 4031 0094 32000000 		.4byte	.LFE81
 4032 0098 00000000 		.4byte	.LFB82
 4033 009c 3A000000 		.4byte	.LFE82
 4034 00a0 00000000 		.4byte	.LFB83
 4035 00a4 28000000 		.4byte	.LFE83
 4036 00a8 00000000 		.4byte	.LFB84
 4037 00ac 22000000 		.4byte	.LFE84
 4038 00b0 00000000 		.4byte	.LFB85
 4039 00b4 D4000000 		.4byte	.LFE85
 4040 00b8 00000000 		.4byte	0
 4041 00bc 00000000 		.4byte	0
 4042              		.section	.debug_line,"",%progbits
 4043              	.Ldebug_line0:
 4044 0000 8E050000 		.section	.debug_str,"MS",%progbits,1
 4044      02006601 
 4044      00000201 
 4044      FB0E0D00 
 4044      01010101 
 4045              	.LASF73:
 4046 0000 64697361 		.ascii	"disableToneInputInterrupts\000"
 4046      626C6554 
 4046      6F6E6549 
 4046      6E707574 
 4046      496E7465 
 4047              	.LASF12:
 4048 001b 75696E74 		.ascii	"uint16\000"
 4048      313600
 4049              	.LASF58:
 4050 0022 62526164 		.ascii	"bRadioAndMicKey\000"
 4050      696F416E 
 4050      644D6963 
 4050      4B657900 
 4051              	.LASF85:
 4052 0032 63757272 		.ascii	"currentChannels\000"
 4052      656E7443 
 4052      68616E6E 
 4052      656C7300 
 4053              	.LASF0:
 4054 0042 7369676E 		.ascii	"signed char\000"
 4054      65642063 
 4054      68617200 
 4055              	.LASF80:
 4056 004e 70726F63 		.ascii	"processParkKillRoutine\000"
 4056      65737350 
 4056      61726B4B 
 4056      696C6C52 
 4056      6F757469 
 4057              	.LASF82:
 4058 0065 70726F63 		.ascii	"processDualDelayRoutine\000"
 4058      65737344 
 4058      75616C44 
 4058      656C6179 
 4058      526F7574 
 4059              	.LASF123:
 4060 007d 64656369 		.ascii	"decideTonesToPlay\000"
 4060      6465546F 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 91


 4060      6E657354 
 4060      6F506C61 
 4060      7900
 4061              	.LASF7:
 4062 008f 6C6F6E67 		.ascii	"long long unsigned int\000"
 4062      206C6F6E 
 4062      6720756E 
 4062      7369676E 
 4062      65642069 
 4063              	.LASF90:
 4064 00a6 7365636F 		.ascii	"secondTone\000"
 4064      6E64546F 
 4064      6E6500
 4065              	.LASF124:
 4066 00b1 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4066      52784275 
 4066      66666572 
 4066      00
 4067              	.LASF99:
 4068 00be 656E6162 		.ascii	"enableSpeakerForSirenTone\000"
 4068      6C655370 
 4068      65616B65 
 4068      72466F72 
 4068      53697265 
 4069              	.LASF106:
 4070 00d8 74686973 		.ascii	"thisTone\000"
 4070      546F6E65 
 4070      00
 4071              	.LASF6:
 4072 00e1 6C6F6E67 		.ascii	"long long int\000"
 4072      206C6F6E 
 4072      6720696E 
 4072      7400
 4073              	.LASF86:
 4074 00ef 6368616E 		.ascii	"changeStatus\000"
 4074      67655374 
 4074      61747573 
 4074      00
 4075              	.LASF50:
 4076 00fc 42495430 		.ascii	"BIT0\000"
 4076      00
 4077              	.LASF51:
 4078 0101 42495431 		.ascii	"BIT1\000"
 4078      00
 4079              	.LASF52:
 4080 0106 42495432 		.ascii	"BIT2\000"
 4080      00
 4081              	.LASF113:
 4082 010b 44454641 		.ascii	"DEFAULT_CONFIGURATION_LIST\000"
 4082      554C545F 
 4082      434F4E46 
 4082      49475552 
 4082      4154494F 
 4083              	.LASF54:
 4084 0126 42495434 		.ascii	"BIT4\000"
 4084      00
 4085              	.LASF55:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 92


 4086 012b 42495435 		.ascii	"BIT5\000"
 4086      00
 4087              	.LASF56:
 4088 0130 42495436 		.ascii	"BIT6\000"
 4088      00
 4089              	.LASF69:
 4090 0135 62537065 		.ascii	"bSpeakerIndex\000"
 4090      616B6572 
 4090      496E6465 
 4090      7800
 4091              	.LASF95:
 4092 0143 62537065 		.ascii	"bSpeaker\000"
 4092      616B6572 
 4092      00
 4093              	.LASF39:
 4094 014c 54455354 		.ascii	"TEST_TONE\000"
 4094      5F544F4E 
 4094      4500
 4095              	.LASF4:
 4096 0156 6C6F6E67 		.ascii	"long int\000"
 4096      20696E74 
 4096      00
 4097              	.LASF22:
 4098 015f 484F524E 		.ascii	"HORN\000"
 4098      00
 4099              	.LASF122:
 4100 0164 73657454 		.ascii	"setTonesWithCommunication\000"
 4100      6F6E6573 
 4100      57697468 
 4100      436F6D6D 
 4100      756E6963 
 4101              	.LASF11:
 4102 017e 75696E74 		.ascii	"uint8\000"
 4102      3800
 4103              	.LASF23:
 4104 0184 4D454348 		.ascii	"MECHANICAL\000"
 4104      414E4943 
 4104      414C00
 4105              	.LASF66:
 4106 018f 62526973 		.ascii	"bRisingEdge\000"
 4106      696E6745 
 4106      64676500 
 4107              	.LASF17:
 4108 019b 4E4F5F54 		.ascii	"NO_TONE\000"
 4108      4F4E4500 
 4109              	.LASF117:
 4110 01a3 496E7075 		.ascii	"InputRead\000"
 4110      74526561 
 4110      6400
 4111              	.LASF41:
 4112 01ad 4368616E 		.ascii	"ChannelIndex\000"
 4112      6E656C49 
 4112      6E646578 
 4112      00
 4113              	.LASF89:
 4114 01ba 66697273 		.ascii	"firstTone\000"
 4114      74546F6E 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 93


 4114      6500
 4115              	.LASF37:
 4116 01c4 52454D41 		.ascii	"REMAIN_IN_VEHICLE\000"
 4116      494E5F49 
 4116      4E5F5645 
 4116      4849434C 
 4116      4500
 4117              	.LASF120:
 4118 01d6 2E5C5369 		.ascii	".\\SirenState.c\000"
 4118      72656E53 
 4118      74617465 
 4118      2E6300
 4119              	.LASF20:
 4120 01e5 46415354 		.ascii	"FAST_YELP\000"
 4120      5F59454C 
 4120      5000
 4121              	.LASF60:
 4122 01ef 62546163 		.ascii	"bTackSwitch\000"
 4122      6B537769 
 4122      74636800 
 4123              	.LASF49:
 4124 01fb 4269744D 		.ascii	"BitMask\000"
 4124      61736B00 
 4125              	.LASF61:
 4126 0203 62486F72 		.ascii	"bHornRing\000"
 4126      6E52696E 
 4126      6700
 4127              	.LASF59:
 4128 020d 62506172 		.ascii	"bParkKill\000"
 4128      6B4B696C 
 4128      6C00
 4129              	.LASF105:
 4130 0217 69735472 		.ascii	"isTrailingTone\000"
 4130      61696C69 
 4130      6E67546F 
 4130      6E6500
 4131              	.LASF8:
 4132 0226 756E7369 		.ascii	"unsigned int\000"
 4132      676E6564 
 4132      20696E74 
 4132      00
 4133              	.LASF76:
 4134 0233 73706561 		.ascii	"speakerIndex\000"
 4134      6B657249 
 4134      6E646578 
 4134      00
 4135              	.LASF115:
 4136 0240 45455052 		.ascii	"EEPROM_KEY_VALUE\000"
 4136      4F4D5F4B 
 4136      45595F56 
 4136      414C5545 
 4136      00
 4137              	.LASF64:
 4138 0251 70726576 		.ascii	"previousTone\000"
 4138      696F7573 
 4138      546F6E65 
 4138      00
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 94


 4139              	.LASF97:
 4140 025e 62496E70 		.ascii	"bInputEnable\000"
 4140      7574456E 
 4140      61626C65 
 4140      00
 4141              	.LASF35:
 4142 026b 53544550 		.ascii	"STEP_OUT\000"
 4142      5F4F5554 
 4142      00
 4143              	.LASF32:
 4144 0274 434F5053 		.ascii	"COPS_SONG\000"
 4144      5F534F4E 
 4144      4700
 4145              	.LASF38:
 4146 027e 52454D41 		.ascii	"REMAIN_WINDOW_DOWN\000"
 4146      494E5F57 
 4146      494E444F 
 4146      575F444F 
 4146      574E00
 4147              	.LASF28:
 4148 0291 484F524E 		.ascii	"HORN_PHASER\000"
 4148      5F504841 
 4148      53455200 
 4149              	.LASF3:
 4150 029d 73686F72 		.ascii	"short unsigned int\000"
 4150      7420756E 
 4150      7369676E 
 4150      65642069 
 4150      6E7400
 4151              	.LASF111:
 4152 02b0 6D61736B 		.ascii	"maskNumber\000"
 4152      4E756D62 
 4152      657200
 4153              	.LASF104:
 4154 02bb 67657441 		.ascii	"getAlternatingTone\000"
 4154      6C746572 
 4154      6E617469 
 4154      6E67546F 
 4154      6E6500
 4155              	.LASF94:
 4156 02ce 62546F6E 		.ascii	"bToneChangeOnHornRing\000"
 4156      65436861 
 4156      6E67654F 
 4156      6E486F72 
 4156      6E52696E 
 4157              	.LASF88:
 4158 02e4 7072696F 		.ascii	"priorityChannel\000"
 4158      72697479 
 4158      4368616E 
 4158      6E656C00 
 4159              	.LASF107:
 4160 02f4 69734175 		.ascii	"isAudioTone\000"
 4160      64696F54 
 4160      6F6E6500 
 4161              	.LASF19:
 4162 0300 534C4F57 		.ascii	"SLOW_YELP\000"
 4162      5F59454C 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 95


 4162      5000
 4163              	.LASF83:
 4164 030a 70726F63 		.ascii	"processToneChangeRoutine\000"
 4164      65737354 
 4164      6F6E6543 
 4164      68616E67 
 4164      65526F75 
 4165              	.LASF108:
 4166 0323 6973436F 		.ascii	"isCommand\000"
 4166      6D6D616E 
 4166      6400
 4167              	.LASF92:
 4168 032d 64697361 		.ascii	"disableAudioAndPWM\000"
 4168      626C6541 
 4168      7564696F 
 4168      416E6450 
 4168      574D00
 4169              	.LASF81:
 4170 0340 70726F63 		.ascii	"processHornRingRoutine\000"
 4170      65737348 
 4170      6F726E52 
 4170      696E6752 
 4170      6F757469 
 4171              	.LASF98:
 4172 0357 6244656C 		.ascii	"bDelay\000"
 4172      617900
 4173              	.LASF63:
 4174 035e 68696768 		.ascii	"highestPriorityChannel\000"
 4174      65737450 
 4174      72696F72 
 4174      69747943 
 4174      68616E6E 
 4175              	.LASF112:
 4176 0375 696E6465 		.ascii	"indexResult\000"
 4176      78526573 
 4176      756C7400 
 4177              	.LASF53:
 4178 0381 42495433 		.ascii	"BIT3\000"
 4178      00
 4179              	.LASF119:
 4180 0386 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4180      4320342E 
 4180      392E3320 
 4180      32303135 
 4180      30333033 
 4181 03b9 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4181      20726576 
 4181      6973696F 
 4181      6E203232 
 4181      31323230 
 4182 03ec 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4182      66756E63 
 4182      74696F6E 
 4182      2D736563 
 4182      74696F6E 
 4183              	.LASF5:
 4184 0414 6C6F6E67 		.ascii	"long unsigned int\000"
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 96


 4184      20756E73 
 4184      69676E65 
 4184      6420696E 
 4184      7400
 4185              	.LASF57:
 4186 0426 42495437 		.ascii	"BIT7\000"
 4186      00
 4187              	.LASF96:
 4188 042b 746F6E65 		.ascii	"toneSelection\000"
 4188      53656C65 
 4188      6374696F 
 4188      6E00
 4189              	.LASF118:
 4190 0439 546F6E65 		.ascii	"ToneStatus\000"
 4190      53746174 
 4190      757300
 4191              	.LASF13:
 4192 0444 666C6F61 		.ascii	"float\000"
 4192      7400
 4193              	.LASF36:
 4194 044a 53544550 		.ascii	"STEP_OUT_HANDS_UP\000"
 4194      5F4F5554 
 4194      5F48414E 
 4194      44535F55 
 4194      5000
 4195              	.LASF101:
 4196 045c 67657448 		.ascii	"getHighestPriorityChannel\000"
 4196      69676865 
 4196      73745072 
 4196      696F7269 
 4196      74794368 
 4197              	.LASF10:
 4198 0476 696E7433 		.ascii	"int32_t\000"
 4198      325F7400 
 4199              	.LASF1:
 4200 047e 756E7369 		.ascii	"unsigned char\000"
 4200      676E6564 
 4200      20636861 
 4200      7200
 4201              	.LASF2:
 4202 048c 73686F72 		.ascii	"short int\000"
 4202      7420696E 
 4202      7400
 4203              	.LASF68:
 4204 0496 62486173 		.ascii	"bHasNoTone\000"
 4204      4E6F546F 
 4204      6E6500
 4205              	.LASF114:
 4206 04a1 45455052 		.ascii	"EEPROM_KEY_INDEX\000"
 4206      4F4D5F4B 
 4206      45595F49 
 4206      4E444558 
 4206      00
 4207              	.LASF62:
 4208 04b2 62447561 		.ascii	"bDualDelay\000"
 4208      6C44656C 
 4208      617900
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 97


 4209              	.LASF25:
 4210 04bd 48494748 		.ascii	"HIGH_LOW\000"
 4210      5F4C4F57 
 4210      00
 4211              	.LASF91:
 4212 04c6 62447561 		.ascii	"bDualDelayChange\000"
 4212      6C44656C 
 4212      61794368 
 4212      616E6765 
 4212      00
 4213              	.LASF21:
 4214 04d7 50484153 		.ascii	"PHASER\000"
 4214      455200
 4215              	.LASF14:
 4216 04de 646F7562 		.ascii	"double\000"
 4216      6C6500
 4217              	.LASF24:
 4218 04e5 4D414E55 		.ascii	"MANUAL_WAIL\000"
 4218      414C5F57 
 4218      41494C00 
 4219              	.LASF93:
 4220 04f1 64697361 		.ascii	"disableBothSpeakers\000"
 4220      626C6542 
 4220      6F746853 
 4220      7065616B 
 4220      65727300 
 4221              	.LASF15:
 4222 0505 63686172 		.ascii	"char\000"
 4222      00
 4223              	.LASF87:
 4224 050a 6368616E 		.ascii	"changedChannel\000"
 4224      67656443 
 4224      68616E6E 
 4224      656C00
 4225              	.LASF78:
 4226 0519 746F6E65 		.ascii	"toneToPlay\000"
 4226      546F506C 
 4226      617900
 4227              	.LASF84:
 4228 0524 70726576 		.ascii	"previousChannels\000"
 4228      696F7573 
 4228      4368616E 
 4228      6E656C73 
 4228      00
 4229              	.LASF9:
 4230 0535 5F5F696E 		.ascii	"__int32_t\000"
 4230      7433325F 
 4230      7400
 4231              	.LASF121:
 4232 053f 5C5C4441 		.ascii	"\\\\DATA\\Folder Redirection\\faithc\\Desktop\\FAIT"
 4232      54415C46 
 4232      6F6C6465 
 4232      72205265 
 4232      64697265 
 4233 056c 48532052 		.ascii	"HS RELEASED FIRMWARE\\SirenProject200W_RevF\\SirenP"
 4233      454C4541 
 4233      53454420 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 98


 4233      4649524D 
 4233      57415245 
 4234 059d 726F6A65 		.ascii	"roject200W_RevD\\ReleaseVersion.cydsn\000"
 4234      63743230 
 4234      30575F52 
 4234      6576445C 
 4234      52656C65 
 4235              	.LASF31:
 4236 05c2 4543544F 		.ascii	"ECTOSIREN\000"
 4236      53495245 
 4236      4E00
 4237              	.LASF70:
 4238 05cc 6368616E 		.ascii	"channelIndex\000"
 4238      6E656C49 
 4238      6E646578 
 4238      00
 4239              	.LASF29:
 4240 05d9 484F524E 		.ascii	"HORN_YELP\000"
 4240      5F59454C 
 4240      5000
 4241              	.LASF42:
 4242 05e3 4348414E 		.ascii	"CHANNEL_1\000"
 4242      4E454C5F 
 4242      3100
 4243              	.LASF43:
 4244 05ed 4348414E 		.ascii	"CHANNEL_2\000"
 4244      4E454C5F 
 4244      3200
 4245              	.LASF103:
 4246 05f7 6D6F6465 		.ascii	"modeStatusByte\000"
 4246      53746174 
 4246      75734279 
 4246      746500
 4247              	.LASF45:
 4248 0606 4348414E 		.ascii	"CHANNEL_4\000"
 4248      4E454C5F 
 4248      3400
 4249              	.LASF48:
 4250 0610 4E4F5F43 		.ascii	"NO_CHANNEL\000"
 4250      48414E4E 
 4250      454C00
 4251              	.LASF47:
 4252 061b 4348414E 		.ascii	"CHANNEL_6\000"
 4252      4E454C5F 
 4252      3600
 4253              	.LASF44:
 4254 0625 4348414E 		.ascii	"CHANNEL_3\000"
 4254      4E454C5F 
 4254      3300
 4255              	.LASF67:
 4256 062f 62447561 		.ascii	"bDualDelayEnable\000"
 4256      6C44656C 
 4256      6179456E 
 4256      61626C65 
 4256      00
 4257              	.LASF102:
 4258 0640 62537065 		.ascii	"bSpeakerNumber\000"
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 99


 4258      616B6572 
 4258      4E756D62 
 4258      657200
 4259              	.LASF46:
 4260 064f 4348414E 		.ascii	"CHANNEL_5\000"
 4260      4E454C5F 
 4260      3500
 4261              	.LASF75:
 4262 0659 696E6974 		.ascii	"initializeInputReadings\000"
 4262      69616C69 
 4262      7A65496E 
 4262      70757452 
 4262      65616469 
 4263              	.LASF18:
 4264 0671 5741494C 		.ascii	"WAIL\000"
 4264      00
 4265              	.LASF77:
 4266 0676 70726F63 		.ascii	"processTackSwitchRoutine\000"
 4266      65737354 
 4266      61636B53 
 4266      77697463 
 4266      68526F75 
 4267              	.LASF40:
 4268 068f 546F6E65 		.ascii	"ToneType\000"
 4268      54797065 
 4268      00
 4269              	.LASF27:
 4270 0698 5043414C 		.ascii	"PCALL_FAST\000"
 4270      4C5F4641 
 4270      535400
 4271              	.LASF16:
 4272 06a3 73697A65 		.ascii	"sizetype\000"
 4272      74797065 
 4272      00
 4273              	.LASF109:
 4274 06ac 6973536F 		.ascii	"isSong\000"
 4274      6E6700
 4275              	.LASF30:
 4276 06b3 50484153 		.ascii	"PHASER_YELP\000"
 4276      45525F59 
 4276      454C5000 
 4277              	.LASF100:
 4278 06bf 656E6162 		.ascii	"enableSpeakersForAudioTone\000"
 4278      6C655370 
 4278      65616B65 
 4278      7273466F 
 4278      72417564 
 4279              	.LASF110:
 4280 06da 67657442 		.ascii	"getBitIndex\000"
 4280      6974496E 
 4280      64657800 
 4281              	.LASF116:
 4282 06e6 746F6E65 		.ascii	"toneConfigurationList\000"
 4282      436F6E66 
 4282      69677572 
 4282      6174696F 
 4282      6E4C6973 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cc1EpcH5.s 			page 100


 4283              	.LASF65:
 4284 06fc 63757272 		.ascii	"currentTone\000"
 4284      656E7454 
 4284      6F6E6500 
 4285              	.LASF74:
 4286 0708 696E6974 		.ascii	"initializeToneConfigurationList\000"
 4286      69616C69 
 4286      7A65546F 
 4286      6E65436F 
 4286      6E666967 
 4287              	.LASF79:
 4288 0728 70726F63 		.ascii	"processRadioMicKeyRoutine\000"
 4288      65737352 
 4288      6164696F 
 4288      4D69634B 
 4288      6579526F 
 4289              	.LASF26:
 4290 0742 5043414C 		.ascii	"PCALL_SLOW\000"
 4290      4C5F534C 
 4290      4F5700
 4291              	.LASF72:
 4292 074d 656E6162 		.ascii	"enableToneInputInterrupts\000"
 4292      6C65546F 
 4292      6E65496E 
 4292      70757449 
 4292      6E746572 
 4293              	.LASF33:
 4294 0767 4D4F5645 		.ascii	"MOVE_OUT\000"
 4294      5F4F5554 
 4294      00
 4295              	.LASF71:
 4296 0770 61646472 		.ascii	"addressIndex\000"
 4296      65737349 
 4296      6E646578 
 4296      00
 4297              	.LASF34:
 4298 077d 50554C4C 		.ascii	"PULL_OVER\000"
 4298      5F4F5645 
 4298      5200
 4299              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
