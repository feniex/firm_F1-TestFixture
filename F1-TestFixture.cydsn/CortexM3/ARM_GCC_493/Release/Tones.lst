ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"Tones.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.rodata
  19              		.align	1
  20              		.type	HORN_FIRST_FREQUENCY, %object
  21              		.size	HORN_FIRST_FREQUENCY, 2
  22              	HORN_FIRST_FREQUENCY:
  23 0000 FA04     		.short	1274
  24              		.data
  25              		.align	2
  26              		.type	toneList, %object
  27              		.size	toneList, 96
  28              	toneList:
  29 0000 0000     		.short	0
  30 0002 0000     		.short	0
  31 0004 7003     		.short	880
  32 0006 00       		.byte	0
  33 0007 00       		.byte	0
  34 0008 D502     		.short	725
  35 000a DC05     		.short	1500
  36 000c AC0D     		.short	3500
  37 000e 01       		.byte	1
  38 000f 00       		.byte	0
  39 0010 D502     		.short	725
  40 0012 4006     		.short	1600
  41 0014 DC00     		.short	220
  42 0016 00       		.byte	0
  43 0017 00       		.byte	0
  44 0018 D502     		.short	725
  45 001a 4006     		.short	1600
  46 001c 6E00     		.short	110
  47 001e 00       		.byte	0
  48 001f 00       		.byte	0
  49 0020 8A02     		.short	650
  50 0022 BD06     		.short	1725
  51 0024 2800     		.short	40
  52 0026 00       		.byte	0
  53 0027 00       		.byte	0
  54 0028 5802     		.short	600
  55 002a B004     		.short	1200
  56 002c 8813     		.short	5000
  57 002e 00       		.byte	0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 2


  58 002f 00       		.byte	0
  59 0030 0203     		.short	770
  60 0032 5A05     		.short	1370
  61 0034 C05D     		.short	24000
  62 0036 01       		.byte	1
  63 0037 01       		.byte	1
  64 0038 D502     		.short	725
  65 003a DC05     		.short	1500
  66 003c AC0D     		.short	3500
  67 003e 01       		.byte	1
  68 003f 00       		.byte	0
  69 0040 2602     		.short	550
  70 0042 EE02     		.short	750
  71 0044 A00F     		.short	4000
  72 0046 00       		.byte	0
  73 0047 00       		.byte	0
  74 0048 F401     		.short	500
  75 004a 3304     		.short	1075
  76 004c 6400     		.short	100
  77 004e 00       		.byte	0
  78 004f 00       		.byte	0
  79 0050 F401     		.short	500
  80 0052 3304     		.short	1075
  81 0054 3C00     		.short	60
  82 0056 00       		.byte	0
  83 0057 00       		.byte	0
  84 0058 B801     		.short	440
  85 005a E006     		.short	1760
  86 005c A00F     		.short	4000
  87 005e 00       		.byte	0
  88 005f 00       		.byte	0
  89              		.section	.rodata
  90 0002 0000     		.align	2
  91              		.type	NOTES_FREQUENCY_LIST, %object
  92              		.size	NOTES_FREQUENCY_LIST, 50
  93              	NOTES_FREQUENCY_LIST:
  94 0004 B801     		.short	440
  95 0006 D201     		.short	466
  96 0008 EE01     		.short	494
  97 000a 0C02     		.short	524
  98 000c 2A02     		.short	554
  99 000e 4C02     		.short	588
 100 0010 6E02     		.short	622
 101 0012 9402     		.short	660
 102 0014 BA02     		.short	698
 103 0016 E402     		.short	740
 104 0018 1003     		.short	784
 105 001a 3E03     		.short	830
 106 001c 7003     		.short	880
 107 001e A403     		.short	932
 108 0020 DC03     		.short	988
 109 0022 1604     		.short	1046
 110 0024 5404     		.short	1108
 111 0026 9604     		.short	1174
 112 0028 DC04     		.short	1244
 113 002a 2605     		.short	1318
 114 002c 7405     		.short	1396
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 3


 115 002e C805     		.short	1480
 116 0030 2006     		.short	1568
 117 0032 7C06     		.short	1660
 118 0034 E006     		.short	1760
 119              		.data
 120              		.align	2
 121              		.type	speakerDataList, %object
 122              		.size	speakerDataList, 48
 123              	speakerDataList:
 124 0060 00       		.byte	0
 125 0061 00       		.space	1
 126 0062 E803     		.short	1000
 127 0064 0000     		.short	0
 128 0066 0000     		.short	0
 129 0068 0000     		.short	0
 130 006a 0000     		.space	2
 131 006c 00000000 		.word	0
 132 0070 01       		.byte	1
 133 0071 00       		.byte	0
 134 0072 00       		.byte	0
 135 0073 00       		.byte	0
 136 0074 00       		.byte	0
 137 0075 00       		.byte	0
 138 0076 00       		.byte	0
 139 0077 00       		.space	1
 140 0078 00       		.byte	0
 141 0079 00       		.space	1
 142 007a E803     		.short	1000
 143 007c 0000     		.short	0
 144 007e 0000     		.short	0
 145 0080 0000     		.short	0
 146 0082 0000     		.space	2
 147 0084 00000000 		.word	0
 148 0088 01       		.byte	1
 149 0089 00       		.byte	0
 150 008a 00       		.byte	0
 151 008b 00       		.byte	0
 152 008c 00       		.byte	0
 153 008d 00       		.byte	0
 154 008e 00       		.byte	0
 155 008f 00       		.space	1
 156              		.bss
 157              	toneEffectStatus:
 158 0000 00       		.space	1
 159              	bEchoEnable:
 160 0001 00       		.space	1
 161              		.section	.text.playPWMTone,"ax",%progbits
 162              		.align	2
 163              		.global	playPWMTone
 164              		.thumb
 165              		.thumb_func
 166              		.type	playPWMTone, %function
 167              	playPWMTone:
 168              	.LFB63:
 169              		.file 1 ".\\Tones.c"
   1:.\Tones.c     **** /* ========================================
   2:.\Tones.c     ****  *
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 4


   3:.\Tones.c     ****  * Copyright YOUR COMPANY, THE YEAR
   4:.\Tones.c     ****  * All Rights Reserved
   5:.\Tones.c     ****  * UNPUBLISHED, LICENSED SOFTWARE.
   6:.\Tones.c     ****  *
   7:.\Tones.c     ****  * CONFIDENTIAL AND PROPRIETARY INFORMATION
   8:.\Tones.c     ****  * WHICH IS THE PROPERTY OF your company.
   9:.\Tones.c     ****  *
  10:.\Tones.c     ****  * ========================================
  11:.\Tones.c     **** */
  12:.\Tones.c     **** 
  13:.\Tones.c     **** /**********PREPROCESSOR DIRECTIVES**********/
  14:.\Tones.c     **** #include "CommonVariables.h"
  15:.\Tones.c     **** #include "SirenState.h"
  16:.\Tones.c     **** #include "Tones.h"
  17:.\Tones.c     **** 
  18:.\Tones.c     **** #define DECREASING	0
  19:.\Tones.c     **** #define INCREASING	1
  20:.\Tones.c     **** 
  21:.\Tones.c     **** #define LOW_PITCH	0
  22:.\Tones.c     **** #define HIGH_PITCH	1
  23:.\Tones.c     **** 
  24:.\Tones.c     **** #define TONE_STRUCT_SIZE    12
  25:.\Tones.c     **** #define NOTES_TABLE_SIZE    25
  26:.\Tones.c     **** #define TEST_TONE_INDEX     11
  27:.\Tones.c     **** 
  28:.\Tones.c     **** /**********DEFINED CONSTANTS**********/
  29:.\Tones.c     **** static const uint16 HORN_FIRST_FREQUENCY = 1274;
  30:.\Tones.c     **** 
  31:.\Tones.c     **** enum ToneEffect
  32:.\Tones.c     **** {
  33:.\Tones.c     ****     NO_EFFECT,
  34:.\Tones.c     ****     SYNC_TONES,
  35:.\Tones.c     ****     DELAY_TONES
  36:.\Tones.c     **** };
  37:.\Tones.c     **** 
  38:.\Tones.c     **** /**********DATA STRUCTURES**********/
  39:.\Tones.c     **** typedef struct
  40:.\Tones.c     **** {
  41:.\Tones.c     ****     uint16 lowestFrequency;
  42:.\Tones.c     ****     uint16 highestFrequency;
  43:.\Tones.c     ****     uint16 delayUs;
  44:.\Tones.c     ****     uint8 bWailEnable;
  45:.\Tones.c     ****     uint8 bHornEnable;
  46:.\Tones.c     **** }ToneStruct;
  47:.\Tones.c     **** 
  48:.\Tones.c     **** static ToneStruct toneList[TONE_STRUCT_SIZE] = 
  49:.\Tones.c     **** {
  50:.\Tones.c     ****     {0, 0, 880, false, false},          //0 NO TONE
  51:.\Tones.c     ****     {725, 1500, 3500, true, false},     //1 WAIL
  52:.\Tones.c     ****     {725, 1600, 220, false, false},     //2 SLOW YELP
  53:.\Tones.c     ****     {725, 1600, 110, false, false},     //3 FAST YELP
  54:.\Tones.c     ****     {650, 1725, 40, false, false},      //4 PHASER
  55:.\Tones.c     ****     {600, 1200, 5000, false, false},    //5 HORN (this list order should match the enum list order)
  56:.\Tones.c     ****     {770, 1370, 24000, true, true},     //6 MECHANICAL
  57:.\Tones.c     ****     {725, 1500, 3500, true, false},     //7 MANUAL WAIL   
  58:.\Tones.c     ****     {550, 750, 4000, false, false},     //8 HIGH/LOW    
  59:.\Tones.c     ****     {500, 1075, 100, false, false},     //9 PCALL SLOW
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 5


  60:.\Tones.c     ****     {500, 1075, 60, false, false},      //10 PCALL FAST
  61:.\Tones.c     ****     {440, 1760, 4000, false, false}     //11 TEST TONE
  62:.\Tones.c     **** };
  63:.\Tones.c     **** 
  64:.\Tones.c     **** typedef struct
  65:.\Tones.c     **** {
  66:.\Tones.c     ****     enum ToneType currentToneNumber;
  67:.\Tones.c     ****     uint16 PWMperiodCount;
  68:.\Tones.c     ****     uint16 PWMcountDifference;
  69:.\Tones.c     ****     uint16 mechanicalRampUpCount;
  70:.\Tones.c     ****     uint16 PCallHoldNoteCount;
  71:.\Tones.c     ****     uint32 comboCount;
  72:.\Tones.c     ****     uint8 bFrequencyChange;  
  73:.\Tones.c     ****     uint8 bComboSwitch;
  74:.\Tones.c     ****     uint8 bTonePlaying;
  75:.\Tones.c     ****     uint8 bManualWailActiveFlag;
  76:.\Tones.c     ****     uint8 bManualWailInputFlag;
  77:.\Tones.c     ****     uint8 bHornPWMenable;   
  78:.\Tones.c     ****     uint8 noteListIndex;
  79:.\Tones.c     **** }CurrentToneData;
  80:.\Tones.c     **** 
  81:.\Tones.c     **** static const uint16 NOTES_FREQUENCY_LIST[NOTES_TABLE_SIZE] = {440, 466, 494, 524, 554, 588, 622, 66
  82:.\Tones.c     ****     880, 932, 988, 1046, 1108, 1174, 1244, 1318, 1396, 1480, 1568, 1660, 1760};
  83:.\Tones.c     **** 
  84:.\Tones.c     **** /**********GLOBAL VARIABLES**********/
  85:.\Tones.c     **** static CurrentToneData speakerDataList[SPEAKER_COUNT] =
  86:.\Tones.c     ****     {{NO_TONE, 1000, 0, 0, 0, 0, INCREASING, false, false, false, false, false, 0},
  87:.\Tones.c     ****     {NO_TONE, 1000, 0, 0, 0, 0, INCREASING, false, false, false, false, false, 0}};
  88:.\Tones.c     ****     
  89:.\Tones.c     **** static enum ToneEffect toneEffectStatus = NO_EFFECT;
  90:.\Tones.c     **** static uint8 bEchoEnable = false;
  91:.\Tones.c     **** 
  92:.\Tones.c     **** /**********FUNCTION PROTOTYPES**********/
  93:.\Tones.c     **** static uint8 setToneEffectStatus(enum ToneType firstTone, enum ToneType secondTone, uint8 bDualDela
  94:.\Tones.c     **** static uint8 playHornTone(CurrentToneData* currentSpeaker);
  95:.\Tones.c     **** static uint8 playGradualChangeTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
  96:.\Tones.c     **** static uint8 playManualWailTone(uint8 bSpeaker, CurrentToneData* currentSpeaker);
  97:.\Tones.c     **** static uint8 playHighLowTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
  98:.\Tones.c     **** static uint8 playMechanicalTone(CurrentToneData* currentSpeaker);
  99:.\Tones.c     **** static uint8 playPCallTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone);
 100:.\Tones.c     **** static uint8 playComboTone(uint8 bSpeaker, ToneStruct* firstToneChoice, ToneStruct* secondToneChoic
 101:.\Tones.c     **** static uint8 playTestTone(CurrentToneData* currentSpeaker);
 102:.\Tones.c     **** static uint16 getCaptureValue(uint16 frequency);
 103:.\Tones.c     **** 
 104:.\Tones.c     **** /**********DEFINED FUNCTIONS**********/
 105:.\Tones.c     **** 
 106:.\Tones.c     **** /*******************************************************************************
 107:.\Tones.c     **** * Function Name: playCurrentTone
 108:.\Tones.c     **** ********************************************************************************
 109:.\Tones.c     **** *
 110:.\Tones.c     **** * Summary:
 111:.\Tones.c     **** *  Starts playing the selected tone by setting the PWM timer period and enabling
 112:.\Tones.c     **** *  the PWM timer
 113:.\Tones.c     **** *
 114:.\Tones.c     **** * Parameters:  
 115:.\Tones.c     **** *   bSpeaker: The speaker number SPEAKER_1 or SPEAKER_2
 116:.\Tones.c     **** *   newTone: The value that represents the tone to play
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 6


 117:.\Tones.c     **** *   bManualWailInput: The current status for the manual wail input
 118:.\Tones.c     **** *   bDualDelayInput: The currant status for the dual delay input
 119:.\Tones.c     **** *
 120:.\Tones.c     **** * Return:
 121:.\Tones.c     **** *   TRUE for valid input, FALSE otherwise
 122:.\Tones.c     **** *
 123:.\Tones.c     **** *******************************************************************************/
 124:.\Tones.c     **** uint8 playPWMTone(uint8 bSpeaker, enum ToneType newTone, uint8 bManualWailInput, uint8 bDualDelayIn
 125:.\Tones.c     **** {
 170              		.loc 1 125 0
 171              		.cfi_startproc
 172              		@ args = 0, pretend = 0, frame = 8
 173              		@ frame_needed = 1, uses_anonymous_args = 0
 174 0000 90B5     		push	{r4, r7, lr}
 175              		.cfi_def_cfa_offset 12
 176              		.cfi_offset 4, -12
 177              		.cfi_offset 7, -8
 178              		.cfi_offset 14, -4
 179 0002 83B0     		sub	sp, sp, #12
 180              		.cfi_def_cfa_offset 24
 181 0004 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
 183 0006 0446     		mov	r4, r0
 184 0008 0846     		mov	r0, r1
 185 000a 1146     		mov	r1, r2
 186 000c 1A46     		mov	r2, r3
 187 000e 2346     		mov	r3, r4
 188 0010 FB71     		strb	r3, [r7, #7]
 189 0012 0346     		mov	r3, r0
 190 0014 BB71     		strb	r3, [r7, #6]
 191 0016 0B46     		mov	r3, r1
 192 0018 7B71     		strb	r3, [r7, #5]
 193 001a 1346     		mov	r3, r2
 194 001c 3B71     		strb	r3, [r7, #4]
 126:.\Tones.c     ****     if(((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2)) ||
 195              		.loc 1 126 0
 196 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 197 0020 002B     		cmp	r3, #0
 198 0022 02D0     		beq	.L2
 199              		.loc 1 126 0 is_stmt 0 discriminator 1
 200 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 201 0026 012B     		cmp	r3, #1
 202 0028 11D1     		bne	.L3
 203              	.L2:
 204              		.loc 1 126 0 discriminator 3
 205 002a BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 206 002c 0D2B     		cmp	r3, #13
 207 002e 02D9     		bls	.L4
 127:.\Tones.c     ****         ((newTone < NO_TONE) || (newTone > PHASER_YELP && newTone != TEST_TONE)) ||
 208              		.loc 1 127 0 is_stmt 1
 209 0030 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 210 0032 162B     		cmp	r3, #22
 211 0034 0BD1     		bne	.L3
 212              	.L4:
 213              		.loc 1 127 0 is_stmt 0 discriminator 1
 214 0036 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 215 0038 002B     		cmp	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 7


 216 003a 02D0     		beq	.L5
 128:.\Tones.c     ****         ((bManualWailInput != false) && (bManualWailInput != true)) ||
 217              		.loc 1 128 0 is_stmt 1
 218 003c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 219 003e 012B     		cmp	r3, #1
 220 0040 05D1     		bne	.L3
 221              	.L5:
 222              		.loc 1 128 0 is_stmt 0 discriminator 1
 223 0042 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 224 0044 002B     		cmp	r3, #0
 225 0046 04D0     		beq	.L6
 129:.\Tones.c     ****         ((bDualDelayInput != false) && (bDualDelayInput != true)))
 226              		.loc 1 129 0 is_stmt 1
 227 0048 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 228 004a 012B     		cmp	r3, #1
 229 004c 01D0     		beq	.L6
 230              	.L3:
 130:.\Tones.c     ****         return false;
 231              		.loc 1 130 0
 232 004e 0023     		movs	r3, #0
 233 0050 15E1     		b	.L7
 234              	.L6:
 131:.\Tones.c     ****     
 132:.\Tones.c     ****     speakerDataList[bSpeaker].currentToneNumber = newTone; //Update global variables
 235              		.loc 1 132 0
 236 0052 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 237 0054 8C49     		ldr	r1, .L29
 238 0056 1346     		mov	r3, r2
 239 0058 5B00     		lsls	r3, r3, #1
 240 005a 1344     		add	r3, r3, r2
 241 005c DB00     		lsls	r3, r3, #3
 242 005e 0B44     		add	r3, r3, r1
 243 0060 BA79     		ldrb	r2, [r7, #6]
 244 0062 1A70     		strb	r2, [r3]
 133:.\Tones.c     ****     speakerDataList[bSpeaker].bManualWailInputFlag = bManualWailInput;
 245              		.loc 1 133 0
 246 0064 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 247 0066 8849     		ldr	r1, .L29
 248 0068 1346     		mov	r3, r2
 249 006a 5B00     		lsls	r3, r3, #1
 250 006c 1344     		add	r3, r3, r2
 251 006e DB00     		lsls	r3, r3, #3
 252 0070 0B44     		add	r3, r3, r1
 253 0072 1033     		adds	r3, r3, #16
 254 0074 7A79     		ldrb	r2, [r7, #5]
 255 0076 1A71     		strb	r2, [r3, #4]
 134:.\Tones.c     ****     
 135:.\Tones.c     ****     setToneEffectStatus(speakerDataList[SPEAKER_1].currentToneNumber,   //Updates global variable t
 256              		.loc 1 135 0
 257 0078 834B     		ldr	r3, .L29
 258 007a 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 259 007c 824B     		ldr	r3, .L29
 260 007e 1A7E     		ldrb	r2, [r3, #24]	@ zero_extendqisi2
 261 0080 3B79     		ldrb	r3, [r7, #4]	@ zero_extendqisi2
 262 0082 0846     		mov	r0, r1
 263 0084 1146     		mov	r1, r2
 264 0086 1A46     		mov	r2, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 8


 265 0088 FFF7FEFF 		bl	setToneEffectStatus
 136:.\Tones.c     ****         speakerDataList[SPEAKER_2].currentToneNumber, bDualDelayInput);
 137:.\Tones.c     ****        
 138:.\Tones.c     ****     if(speakerDataList[bSpeaker].currentToneNumber != NO_TONE)
 266              		.loc 1 138 0
 267 008c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 268 008e 7E49     		ldr	r1, .L29
 269 0090 1346     		mov	r3, r2
 270 0092 5B00     		lsls	r3, r3, #1
 271 0094 1344     		add	r3, r3, r2
 272 0096 DB00     		lsls	r3, r3, #3
 273 0098 0B44     		add	r3, r3, r1
 274 009a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 275 009c 002B     		cmp	r3, #0
 276 009e 00F0ED80 		beq	.L8
 139:.\Tones.c     ****     {
 140:.\Tones.c     ****         if(!bSpeaker)
 277              		.loc 1 140 0
 278 00a2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 279 00a4 002B     		cmp	r3, #0
 280 00a6 67D1     		bne	.L9
 141:.\Tones.c     ****         {   //Start timer and PWM for SPEAKER 1
 142:.\Tones.c     ****             PWMtimer1_Start();    //Need to start timer before updating the period
 281              		.loc 1 142 0
 282 00a8 FFF7FEFF 		bl	PWMtimer1_Start
 143:.\Tones.c     ****             
 144:.\Tones.c     ****             if((speakerDataList[bSpeaker].currentToneNumber >= HORN_PHASER) && 
 283              		.loc 1 144 0
 284 00ac FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 285 00ae 7649     		ldr	r1, .L29
 286 00b0 1346     		mov	r3, r2
 287 00b2 5B00     		lsls	r3, r3, #1
 288 00b4 1344     		add	r3, r3, r2
 289 00b6 DB00     		lsls	r3, r3, #3
 290 00b8 0B44     		add	r3, r3, r1
 291 00ba 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 292 00bc 0A2B     		cmp	r3, #10
 293 00be 35D9     		bls	.L10
 145:.\Tones.c     ****                 (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 294              		.loc 1 145 0 discriminator 1
 295 00c0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 296 00c2 7149     		ldr	r1, .L29
 297 00c4 1346     		mov	r3, r2
 298 00c6 5B00     		lsls	r3, r3, #1
 299 00c8 1344     		add	r3, r3, r2
 300 00ca DB00     		lsls	r3, r3, #3
 301 00cc 0B44     		add	r3, r3, r1
 302 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 144:.\Tones.c     ****                 (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 303              		.loc 1 144 0 discriminator 1
 304 00d0 0D2B     		cmp	r3, #13
 305 00d2 2BD8     		bhi	.L10
 146:.\Tones.c     ****             {   //Update timer period for a combo tone
 147:.\Tones.c     ****                 switch(speakerDataList[bSpeaker].currentToneNumber)
 306              		.loc 1 147 0
 307 00d4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 308 00d6 6C49     		ldr	r1, .L29
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 9


 309 00d8 1346     		mov	r3, r2
 310 00da 5B00     		lsls	r3, r3, #1
 311 00dc 1344     		add	r3, r3, r2
 312 00de DB00     		lsls	r3, r3, #3
 313 00e0 0B44     		add	r3, r3, r1
 314 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 315 00e4 0C2B     		cmp	r3, #12
 316 00e6 0AD0     		beq	.L12
 317 00e8 0D2B     		cmp	r3, #13
 318 00ea 0ED0     		beq	.L13
 319 00ec 0B2B     		cmp	r3, #11
 320 00ee 00D0     		beq	.L14
 148:.\Tones.c     ****                 {
 149:.\Tones.c     ****                     case HORN_PHASER:
 150:.\Tones.c     ****                         PWMtimer1_WritePeriod(toneList[HORN].delayUs);
 151:.\Tones.c     ****                         break;
 152:.\Tones.c     ****                     case HORN_YELP:
 153:.\Tones.c     ****                         PWMtimer1_WritePeriod(toneList[HORN].delayUs);
 154:.\Tones.c     ****                         break;
 155:.\Tones.c     ****                     case PHASER_YELP:
 156:.\Tones.c     ****                         PWMtimer1_WritePeriod(toneList[PHASER].delayUs);
 157:.\Tones.c     ****                         break;
 158:.\Tones.c     ****                     default:
 159:.\Tones.c     ****                         break;
 321              		.loc 1 159 0
 322 00f0 11E0     		b	.L15
 323              	.L14:
 150:.\Tones.c     ****                         break;
 324              		.loc 1 150 0
 325 00f2 664B     		ldr	r3, .L29+4
 326 00f4 9B8D     		ldrh	r3, [r3, #44]
 327 00f6 1846     		mov	r0, r3
 328 00f8 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 151:.\Tones.c     ****                     case HORN_YELP:
 329              		.loc 1 151 0
 330 00fc 0BE0     		b	.L15
 331              	.L12:
 153:.\Tones.c     ****                         break;
 332              		.loc 1 153 0
 333 00fe 634B     		ldr	r3, .L29+4
 334 0100 9B8D     		ldrh	r3, [r3, #44]
 335 0102 1846     		mov	r0, r3
 336 0104 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 154:.\Tones.c     ****                     case PHASER_YELP:
 337              		.loc 1 154 0
 338 0108 05E0     		b	.L15
 339              	.L13:
 156:.\Tones.c     ****                         break;
 340              		.loc 1 156 0
 341 010a 604B     		ldr	r3, .L29+4
 342 010c 9B8C     		ldrh	r3, [r3, #36]
 343 010e 1846     		mov	r0, r3
 344 0110 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 157:.\Tones.c     ****                     default:
 345              		.loc 1 157 0
 346 0114 00BF     		nop
 347              	.L15:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 10


 160:.\Tones.c     ****                 }
 161:.\Tones.c     ****                 
 162:.\Tones.c     ****                 speakerDataList[bSpeaker].bComboSwitch = false;            
 348              		.loc 1 162 0
 349 0116 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 350 0118 5B49     		ldr	r1, .L29
 351 011a 1346     		mov	r3, r2
 352 011c 5B00     		lsls	r3, r3, #1
 353 011e 1344     		add	r3, r3, r2
 354 0120 DB00     		lsls	r3, r3, #3
 355 0122 0B44     		add	r3, r3, r1
 356 0124 1033     		adds	r3, r3, #16
 357 0126 0022     		movs	r2, #0
 358 0128 5A70     		strb	r2, [r3, #1]
 359 012a 1FE0     		b	.L16
 360              	.L10:
 163:.\Tones.c     ****             }
 164:.\Tones.c     ****             else if(speakerDataList[bSpeaker].currentToneNumber == TEST_TONE)
 361              		.loc 1 164 0
 362 012c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 363 012e 5649     		ldr	r1, .L29
 364 0130 1346     		mov	r3, r2
 365 0132 5B00     		lsls	r3, r3, #1
 366 0134 1344     		add	r3, r3, r2
 367 0136 DB00     		lsls	r3, r3, #3
 368 0138 0B44     		add	r3, r3, r1
 369 013a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 013c 162B     		cmp	r3, #22
 371 013e 06D1     		bne	.L17
 165:.\Tones.c     ****                 PWMtimer1_WritePeriod(toneList[TEST_TONE_INDEX].delayUs);
 372              		.loc 1 165 0
 373 0140 524B     		ldr	r3, .L29+4
 374 0142 B3F85C30 		ldrh	r3, [r3, #92]
 375 0146 1846     		mov	r0, r3
 376 0148 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 377 014c 0EE0     		b	.L16
 378              	.L17:
 166:.\Tones.c     ****             else    //Update timer period for every other siren tone
 167:.\Tones.c     ****                 PWMtimer1_WritePeriod(toneList[speakerDataList[bSpeaker].currentToneNumber].delayUs
 379              		.loc 1 167 0
 380 014e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 381 0150 4D49     		ldr	r1, .L29
 382 0152 1346     		mov	r3, r2
 383 0154 5B00     		lsls	r3, r3, #1
 384 0156 1344     		add	r3, r3, r2
 385 0158 DB00     		lsls	r3, r3, #3
 386 015a 0B44     		add	r3, r3, r1
 387 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 388 015e 4B4A     		ldr	r2, .L29+4
 389 0160 DB00     		lsls	r3, r3, #3
 390 0162 1344     		add	r3, r3, r2
 391 0164 9B88     		ldrh	r3, [r3, #4]
 392 0166 1846     		mov	r0, r3
 393 0168 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 394              	.L16:
 168:.\Tones.c     ****             
 169:.\Tones.c     ****             AMux1_FastSelect(PWM_MODE);
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 11


 395              		.loc 1 169 0
 396 016c 0020     		movs	r0, #0
 397 016e FFF7FEFF 		bl	AMux1_FastSelect
 170:.\Tones.c     ****             PWM_1_Start();
 398              		.loc 1 170 0
 399 0172 FFF7FEFF 		bl	PWM_1_Start
 400 0176 81E0     		b	.L8
 401              	.L9:
 171:.\Tones.c     ****         }
 172:.\Tones.c     ****         else
 173:.\Tones.c     ****         {   //Start timer and PWM for SPEAKER 2
 174:.\Tones.c     ****             if(toneEffectStatus != SYNC_TONES)
 402              		.loc 1 174 0
 403 0178 454B     		ldr	r3, .L29+8
 404 017a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 405 017c 012B     		cmp	r3, #1
 406 017e 69D0     		beq	.L18
 175:.\Tones.c     ****             {   //this timer is only used when the tones are NOT in sync
 176:.\Tones.c     ****                 if((toneEffectStatus != DELAY_TONES) || (bEchoEnable == true))
 407              		.loc 1 176 0
 408 0180 434B     		ldr	r3, .L29+8
 409 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 410 0184 022B     		cmp	r3, #2
 411 0186 03D1     		bne	.L19
 412              		.loc 1 176 0 is_stmt 0 discriminator 1
 413 0188 424B     		ldr	r3, .L29+12
 414 018a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 415 018c 012B     		cmp	r3, #1
 416 018e 61D1     		bne	.L18
 417              	.L19:
 177:.\Tones.c     ****                 {   //The timer for Speaker 2 will be called later to create delay
 178:.\Tones.c     ****                     PWMtimer2_Start();   //Need to start timer before updating the period
 418              		.loc 1 178 0 is_stmt 1
 419 0190 FFF7FEFF 		bl	PWMtimer2_Start
 179:.\Tones.c     ****                     
 180:.\Tones.c     ****                     if((speakerDataList[bSpeaker].currentToneNumber >= HORN_PHASER) && 
 420              		.loc 1 180 0
 421 0194 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 422 0196 3C49     		ldr	r1, .L29
 423 0198 1346     		mov	r3, r2
 424 019a 5B00     		lsls	r3, r3, #1
 425 019c 1344     		add	r3, r3, r2
 426 019e DB00     		lsls	r3, r3, #3
 427 01a0 0B44     		add	r3, r3, r1
 428 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 429 01a4 0A2B     		cmp	r3, #10
 430 01a6 35D9     		bls	.L20
 181:.\Tones.c     ****                         (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 431              		.loc 1 181 0 discriminator 1
 432 01a8 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 433 01aa 3749     		ldr	r1, .L29
 434 01ac 1346     		mov	r3, r2
 435 01ae 5B00     		lsls	r3, r3, #1
 436 01b0 1344     		add	r3, r3, r2
 437 01b2 DB00     		lsls	r3, r3, #3
 438 01b4 0B44     		add	r3, r3, r1
 439 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 12


 180:.\Tones.c     ****                         (speakerDataList[bSpeaker].currentToneNumber <= PHASER_YELP))
 440              		.loc 1 180 0 discriminator 1
 441 01b8 0D2B     		cmp	r3, #13
 442 01ba 2BD8     		bhi	.L20
 182:.\Tones.c     ****                     {
 183:.\Tones.c     ****                         switch(speakerDataList[bSpeaker].currentToneNumber)
 443              		.loc 1 183 0
 444 01bc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 445 01be 3249     		ldr	r1, .L29
 446 01c0 1346     		mov	r3, r2
 447 01c2 5B00     		lsls	r3, r3, #1
 448 01c4 1344     		add	r3, r3, r2
 449 01c6 DB00     		lsls	r3, r3, #3
 450 01c8 0B44     		add	r3, r3, r1
 451 01ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 452 01cc 0C2B     		cmp	r3, #12
 453 01ce 0AD0     		beq	.L22
 454 01d0 0D2B     		cmp	r3, #13
 455 01d2 0ED0     		beq	.L23
 456 01d4 0B2B     		cmp	r3, #11
 457 01d6 00D0     		beq	.L24
 184:.\Tones.c     ****                         {   //Update timer period for a combo tone
 185:.\Tones.c     ****                             case HORN_PHASER:
 186:.\Tones.c     ****                                 PWMtimer2_WritePeriod(toneList[HORN].delayUs);
 187:.\Tones.c     ****                                 break;
 188:.\Tones.c     ****                             case HORN_YELP:
 189:.\Tones.c     ****                                 PWMtimer2_WritePeriod(toneList[HORN].delayUs);
 190:.\Tones.c     ****                                 break;
 191:.\Tones.c     ****                             case PHASER_YELP:
 192:.\Tones.c     ****                                 PWMtimer2_WritePeriod(toneList[PHASER].delayUs);
 193:.\Tones.c     ****                                 break;
 194:.\Tones.c     ****                             default:
 195:.\Tones.c     ****                                 break;
 458              		.loc 1 195 0
 459 01d8 11E0     		b	.L25
 460              	.L24:
 186:.\Tones.c     ****                                 break;
 461              		.loc 1 186 0
 462 01da 2C4B     		ldr	r3, .L29+4
 463 01dc 9B8D     		ldrh	r3, [r3, #44]
 464 01de 1846     		mov	r0, r3
 465 01e0 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 187:.\Tones.c     ****                             case HORN_YELP:
 466              		.loc 1 187 0
 467 01e4 0BE0     		b	.L25
 468              	.L22:
 189:.\Tones.c     ****                                 break;
 469              		.loc 1 189 0
 470 01e6 294B     		ldr	r3, .L29+4
 471 01e8 9B8D     		ldrh	r3, [r3, #44]
 472 01ea 1846     		mov	r0, r3
 473 01ec FFF7FEFF 		bl	PWMtimer2_WritePeriod
 190:.\Tones.c     ****                             case PHASER_YELP:
 474              		.loc 1 190 0
 475 01f0 05E0     		b	.L25
 476              	.L23:
 192:.\Tones.c     ****                                 break;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 13


 477              		.loc 1 192 0
 478 01f2 264B     		ldr	r3, .L29+4
 479 01f4 9B8C     		ldrh	r3, [r3, #36]
 480 01f6 1846     		mov	r0, r3
 481 01f8 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 193:.\Tones.c     ****                             default:
 482              		.loc 1 193 0
 483 01fc 00BF     		nop
 484              	.L25:
 196:.\Tones.c     ****                         }
 197:.\Tones.c     ****                         
 198:.\Tones.c     ****                         speakerDataList[bSpeaker].bComboSwitch = false;            
 485              		.loc 1 198 0
 486 01fe FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 487 0200 2149     		ldr	r1, .L29
 488 0202 1346     		mov	r3, r2
 489 0204 5B00     		lsls	r3, r3, #1
 490 0206 1344     		add	r3, r3, r2
 491 0208 DB00     		lsls	r3, r3, #3
 492 020a 0B44     		add	r3, r3, r1
 493 020c 1033     		adds	r3, r3, #16
 494 020e 0022     		movs	r2, #0
 495 0210 5A70     		strb	r2, [r3, #1]
 496 0212 1FE0     		b	.L18
 497              	.L20:
 199:.\Tones.c     ****                     }
 200:.\Tones.c     ****                     else if(speakerDataList[bSpeaker].currentToneNumber == TEST_TONE)
 498              		.loc 1 200 0
 499 0214 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 500 0216 1C49     		ldr	r1, .L29
 501 0218 1346     		mov	r3, r2
 502 021a 5B00     		lsls	r3, r3, #1
 503 021c 1344     		add	r3, r3, r2
 504 021e DB00     		lsls	r3, r3, #3
 505 0220 0B44     		add	r3, r3, r1
 506 0222 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 507 0224 162B     		cmp	r3, #22
 508 0226 06D1     		bne	.L26
 201:.\Tones.c     ****                         PWMtimer2_WritePeriod(toneList[TEST_TONE_INDEX].delayUs);
 509              		.loc 1 201 0
 510 0228 184B     		ldr	r3, .L29+4
 511 022a B3F85C30 		ldrh	r3, [r3, #92]
 512 022e 1846     		mov	r0, r3
 513 0230 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 514 0234 0EE0     		b	.L18
 515              	.L26:
 202:.\Tones.c     ****                     else    //Update timer period for every other siren tone
 203:.\Tones.c     ****                         PWMtimer2_WritePeriod(toneList[speakerDataList[bSpeaker].currentToneNumber]
 516              		.loc 1 203 0
 517 0236 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 518 0238 1349     		ldr	r1, .L29
 519 023a 1346     		mov	r3, r2
 520 023c 5B00     		lsls	r3, r3, #1
 521 023e 1344     		add	r3, r3, r2
 522 0240 DB00     		lsls	r3, r3, #3
 523 0242 0B44     		add	r3, r3, r1
 524 0244 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 14


 525 0246 114A     		ldr	r2, .L29+4
 526 0248 DB00     		lsls	r3, r3, #3
 527 024a 1344     		add	r3, r3, r2
 528 024c 9B88     		ldrh	r3, [r3, #4]
 529 024e 1846     		mov	r0, r3
 530 0250 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 531              	.L18:
 204:.\Tones.c     ****                 }
 205:.\Tones.c     ****             }
 206:.\Tones.c     ****             
 207:.\Tones.c     ****             if((toneEffectStatus != DELAY_TONES) || (bEchoEnable == true))
 532              		.loc 1 207 0
 533 0254 0E4B     		ldr	r3, .L29+8
 534 0256 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 535 0258 022B     		cmp	r3, #2
 536 025a 03D1     		bne	.L27
 537              		.loc 1 207 0 is_stmt 0 discriminator 1
 538 025c 0D4B     		ldr	r3, .L29+12
 539 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540 0260 012B     		cmp	r3, #1
 541 0262 04D1     		bne	.L28
 542              	.L27:
 208:.\Tones.c     ****             {   //The PWM for Speaker 2 will be called later to create delay, still needs to be ena
 209:.\Tones.c     ****                 AMux2_FastSelect(PWM_MODE);
 543              		.loc 1 209 0 is_stmt 1
 544 0264 0020     		movs	r0, #0
 545 0266 FFF7FEFF 		bl	AMux2_FastSelect
 210:.\Tones.c     ****                 PWM_2_Start();
 546              		.loc 1 210 0
 547 026a FFF7FEFF 		bl	PWM_2_Start
 548              	.L28:
 211:.\Tones.c     ****             }
 212:.\Tones.c     ****             
 213:.\Tones.c     ****             if(toneEffectStatus == DELAY_TONES)
 549              		.loc 1 213 0
 550 026e 084B     		ldr	r3, .L29+8
 551 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 552 0272 022B     		cmp	r3, #2
 553 0274 02D1     		bne	.L8
 214:.\Tones.c     ****                 bEchoEnable = true;
 554              		.loc 1 214 0
 555 0276 074B     		ldr	r3, .L29+12
 556 0278 0122     		movs	r2, #1
 557 027a 1A70     		strb	r2, [r3]
 558              	.L8:
 215:.\Tones.c     ****         }
 216:.\Tones.c     ****     }
 217:.\Tones.c     ****     
 218:.\Tones.c     ****     return true;
 559              		.loc 1 218 0
 560 027c 0123     		movs	r3, #1
 561              	.L7:
 219:.\Tones.c     **** }
 562              		.loc 1 219 0
 563 027e 1846     		mov	r0, r3
 564 0280 0C37     		adds	r7, r7, #12
 565              		.cfi_def_cfa_offset 12
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 15


 566 0282 BD46     		mov	sp, r7
 567              		.cfi_def_cfa_register 13
 568              		@ sp needed
 569 0284 90BD     		pop	{r4, r7, pc}
 570              	.L30:
 571 0286 00BF     		.align	2
 572              	.L29:
 573 0288 60000000 		.word	speakerDataList
 574 028c 00000000 		.word	toneList
 575 0290 00000000 		.word	toneEffectStatus
 576 0294 01000000 		.word	bEchoEnable
 577              		.cfi_endproc
 578              	.LFE63:
 579              		.size	playPWMTone, .-playPWMTone
 580              		.section	.text.stopPWMTone,"ax",%progbits
 581              		.align	2
 582              		.global	stopPWMTone
 583              		.thumb
 584              		.thumb_func
 585              		.type	stopPWMTone, %function
 586              	stopPWMTone:
 587              	.LFB64:
 220:.\Tones.c     **** 
 221:.\Tones.c     **** /*******************************************************************************
 222:.\Tones.c     **** * Function Name: stopCurrentTone
 223:.\Tones.c     **** ********************************************************************************
 224:.\Tones.c     **** *
 225:.\Tones.c     **** * Summary:
 226:.\Tones.c     **** *  Stops playing the selected tone by disabling the PWM timer, typically called
 227:.\Tones.c     **** *  during an input change
 228:.\Tones.c     **** *
 229:.\Tones.c     **** * Parameters:  
 230:.\Tones.c     **** *   bSpeaker: The speaker number SPEAKER_1 or SPEAKER_2
 231:.\Tones.c     **** *
 232:.\Tones.c     **** * Return:
 233:.\Tones.c     **** *   TRUE for valid input, FALSE otherwise
 234:.\Tones.c     **** *
 235:.\Tones.c     **** *******************************************************************************/
 236:.\Tones.c     **** uint8 stopPWMTone(uint8 bSpeaker)
 237:.\Tones.c     **** {
 588              		.loc 1 237 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 8
 591              		@ frame_needed = 1, uses_anonymous_args = 0
 592 0000 80B5     		push	{r7, lr}
 593              		.cfi_def_cfa_offset 8
 594              		.cfi_offset 7, -8
 595              		.cfi_offset 14, -4
 596 0002 82B0     		sub	sp, sp, #8
 597              		.cfi_def_cfa_offset 16
 598 0004 00AF     		add	r7, sp, #0
 599              		.cfi_def_cfa_register 7
 600 0006 0346     		mov	r3, r0
 601 0008 FB71     		strb	r3, [r7, #7]
 238:.\Tones.c     ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 602              		.loc 1 238 0
 603 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 16


 604 000c 002B     		cmp	r3, #0
 605 000e 04D0     		beq	.L32
 606              		.loc 1 238 0 is_stmt 0 discriminator 1
 607 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 608 0012 012B     		cmp	r3, #1
 609 0014 01D0     		beq	.L32
 239:.\Tones.c     ****         return false;
 610              		.loc 1 239 0 is_stmt 1
 611 0016 0023     		movs	r3, #0
 612 0018 3DE0     		b	.L33
 613              	.L32:
 240:.\Tones.c     ****     
 241:.\Tones.c     ****     if(bSpeaker)
 614              		.loc 1 241 0
 615 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 616 001c 002B     		cmp	r3, #0
 617 001e 07D0     		beq	.L34
 242:.\Tones.c     ****     {
 243:.\Tones.c     ****         PWM_2_WriteCompare(0);
 618              		.loc 1 243 0
 619 0020 0020     		movs	r0, #0
 620 0022 FFF7FEFF 		bl	PWM_2_WriteCompare
 244:.\Tones.c     ****         PWM_2_Stop();
 621              		.loc 1 244 0
 622 0026 FFF7FEFF 		bl	PWM_2_Stop
 245:.\Tones.c     ****         PWMtimer2_Stop();
 623              		.loc 1 245 0
 624 002a FFF7FEFF 		bl	PWMtimer2_Stop
 625 002e 06E0     		b	.L35
 626              	.L34:
 246:.\Tones.c     ****     }
 247:.\Tones.c     ****     else
 248:.\Tones.c     ****     {
 249:.\Tones.c     ****         PWM_1_WriteCompare(0);     //Keeps PWM signals low once tone stops
 627              		.loc 1 249 0
 628 0030 0020     		movs	r0, #0
 629 0032 FFF7FEFF 		bl	PWM_1_WriteCompare
 250:.\Tones.c     ****         PWM_1_Stop();
 630              		.loc 1 250 0
 631 0036 FFF7FEFF 		bl	PWM_1_Stop
 251:.\Tones.c     ****         PWMtimer1_Stop(); 
 632              		.loc 1 251 0
 633 003a FFF7FEFF 		bl	PWMtimer1_Stop
 634              	.L35:
 252:.\Tones.c     ****     }
 253:.\Tones.c     ****     
 254:.\Tones.c     ****     toneEffectStatus = NO_EFFECT;
 635              		.loc 1 254 0
 636 003e 184B     		ldr	r3, .L36
 637 0040 0022     		movs	r2, #0
 638 0042 1A70     		strb	r2, [r3]
 255:.\Tones.c     ****     speakerDataList[bSpeaker].bFrequencyChange = INCREASING;
 639              		.loc 1 255 0
 640 0044 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 641 0046 1749     		ldr	r1, .L36+4
 642 0048 1346     		mov	r3, r2
 643 004a 5B00     		lsls	r3, r3, #1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 17


 644 004c 1344     		add	r3, r3, r2
 645 004e DB00     		lsls	r3, r3, #3
 646 0050 0B44     		add	r3, r3, r1
 647 0052 1033     		adds	r3, r3, #16
 648 0054 0122     		movs	r2, #1
 649 0056 1A70     		strb	r2, [r3]
 256:.\Tones.c     ****     speakerDataList[bSpeaker].bTonePlaying = false;
 650              		.loc 1 256 0
 651 0058 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 652 005a 1249     		ldr	r1, .L36+4
 653 005c 1346     		mov	r3, r2
 654 005e 5B00     		lsls	r3, r3, #1
 655 0060 1344     		add	r3, r3, r2
 656 0062 DB00     		lsls	r3, r3, #3
 657 0064 0B44     		add	r3, r3, r1
 658 0066 1033     		adds	r3, r3, #16
 659 0068 0022     		movs	r2, #0
 660 006a 9A70     		strb	r2, [r3, #2]
 257:.\Tones.c     ****     speakerDataList[bSpeaker].bHornPWMenable = false;   
 661              		.loc 1 257 0
 662 006c FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 663 006e 0D49     		ldr	r1, .L36+4
 664 0070 1346     		mov	r3, r2
 665 0072 5B00     		lsls	r3, r3, #1
 666 0074 1344     		add	r3, r3, r2
 667 0076 DB00     		lsls	r3, r3, #3
 668 0078 0B44     		add	r3, r3, r1
 669 007a 1033     		adds	r3, r3, #16
 670 007c 0022     		movs	r2, #0
 671 007e 5A71     		strb	r2, [r3, #5]
 258:.\Tones.c     ****     speakerDataList[bSpeaker].noteListIndex = 0;
 672              		.loc 1 258 0
 673 0080 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 674 0082 0849     		ldr	r1, .L36+4
 675 0084 1346     		mov	r3, r2
 676 0086 5B00     		lsls	r3, r3, #1
 677 0088 1344     		add	r3, r3, r2
 678 008a DB00     		lsls	r3, r3, #3
 679 008c 0B44     		add	r3, r3, r1
 680 008e 1033     		adds	r3, r3, #16
 681 0090 0022     		movs	r2, #0
 682 0092 9A71     		strb	r2, [r3, #6]
 259:.\Tones.c     ****        
 260:.\Tones.c     ****     return true;
 683              		.loc 1 260 0
 684 0094 0123     		movs	r3, #1
 685              	.L33:
 261:.\Tones.c     **** }
 686              		.loc 1 261 0
 687 0096 1846     		mov	r0, r3
 688 0098 0837     		adds	r7, r7, #8
 689              		.cfi_def_cfa_offset 8
 690 009a BD46     		mov	sp, r7
 691              		.cfi_def_cfa_register 13
 692              		@ sp needed
 693 009c 80BD     		pop	{r7, pc}
 694              	.L37:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 18


 695 009e 00BF     		.align	2
 696              	.L36:
 697 00a0 00000000 		.word	toneEffectStatus
 698 00a4 60000000 		.word	speakerDataList
 699              		.cfi_endproc
 700              	.LFE64:
 701              		.size	stopPWMTone, .-stopPWMTone
 702              		.section	.text.processPWMtimerRoutine,"ax",%progbits
 703              		.align	2
 704              		.global	processPWMtimerRoutine
 705              		.thumb
 706              		.thumb_func
 707              		.type	processPWMtimerRoutine, %function
 708              	processPWMtimerRoutine:
 709              	.LFB65:
 262:.\Tones.c     **** 
 263:.\Tones.c     **** /*******************************************************************************
 264:.\Tones.c     **** * Function Name: processPWMtimerRoutine
 265:.\Tones.c     **** ********************************************************************************
 266:.\Tones.c     **** *
 267:.\Tones.c     **** * Summary:
 268:.\Tones.c     **** *  Updates the PWM frequency value periodically depending on the selected tone
 269:.\Tones.c     **** *  and speaker, called in the PWMtimerISR
 270:.\Tones.c     **** *
 271:.\Tones.c     **** * Parameters:  
 272:.\Tones.c     **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 273:.\Tones.c     **** *
 274:.\Tones.c     **** * Return:
 275:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 276:.\Tones.c     **** *
 277:.\Tones.c     **** *******************************************************************************/
 278:.\Tones.c     **** uint8 processPWMtimerRoutine(uint8 bSpeaker)
 279:.\Tones.c     **** {   
 710              		.loc 1 279 0
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714 0000 80B5     		push	{r7, lr}
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 7, -8
 717              		.cfi_offset 14, -4
 718 0002 82B0     		sub	sp, sp, #8
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              		.cfi_def_cfa_register 7
 722 0006 0346     		mov	r3, r0
 723 0008 FB71     		strb	r3, [r7, #7]
 280:.\Tones.c     ****     if(bSpeaker)
 724              		.loc 1 280 0
 725 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 726 000c 002B     		cmp	r3, #0
 727 000e 02D0     		beq	.L39
 281:.\Tones.c     ****         PWMtimer2_ReadStatusRegister();  //Clears the sticky interrupt bit
 728              		.loc 1 281 0
 729 0010 FFF7FEFF 		bl	PWMtimer2_ReadStatusRegister
 730 0014 01E0     		b	.L40
 731              	.L39:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 19


 282:.\Tones.c     ****     else
 283:.\Tones.c     ****         PWMtimer1_ReadStatusRegister();
 732              		.loc 1 283 0
 733 0016 FFF7FEFF 		bl	PWMtimer1_ReadStatusRegister
 734              	.L40:
 284:.\Tones.c     ****     
 285:.\Tones.c     ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 735              		.loc 1 285 0
 736 001a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 737 001c 002B     		cmp	r3, #0
 738 001e 04D0     		beq	.L41
 739              		.loc 1 285 0 is_stmt 0 discriminator 1
 740 0020 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 741 0022 012B     		cmp	r3, #1
 742 0024 01D0     		beq	.L41
 286:.\Tones.c     ****         return false;
 743              		.loc 1 286 0 is_stmt 1
 744 0026 0023     		movs	r3, #0
 745 0028 C3E0     		b	.L42
 746              	.L41:
 287:.\Tones.c     ****     
 288:.\Tones.c     ****     CyWdtClear();   //Reset watchdog timer periodically
 747              		.loc 1 288 0
 748 002a FFF7FEFF 		bl	CyWdtClear
 289:.\Tones.c     **** 
 290:.\Tones.c     ****     switch(speakerDataList[bSpeaker].currentToneNumber)
 749              		.loc 1 290 0
 750 002e FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 751 0030 6249     		ldr	r1, .L57
 752 0032 1346     		mov	r3, r2
 753 0034 5B00     		lsls	r3, r3, #1
 754 0036 1344     		add	r3, r3, r2
 755 0038 DB00     		lsls	r3, r3, #3
 756 003a 0B44     		add	r3, r3, r1
 757 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 758 003e 013B     		subs	r3, r3, #1
 759 0040 152B     		cmp	r3, #21
 760 0042 00F2B480 		bhi	.L56
 761 0046 01A2     		adr	r2, .L45
 762 0048 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 763              		.p2align 2
 764              	.L45:
 765 004c A5000000 		.word	.L44+1
 766 0050 A5000000 		.word	.L44+1
 767 0054 A5000000 		.word	.L44+1
 768 0058 A5000000 		.word	.L44+1
 769 005c D1000000 		.word	.L46+1
 770 0060 E7000000 		.word	.L47+1
 771 0064 FD000000 		.word	.L48+1
 772 0068 17010000 		.word	.L49+1
 773 006c 43010000 		.word	.L50+1
 774 0070 43010000 		.word	.L50+1
 775 0074 6F010000 		.word	.L51+1
 776 0078 7D010000 		.word	.L52+1
 777 007c 8B010000 		.word	.L53+1
 778 0080 AF010000 		.word	.L56+1
 779 0084 AF010000 		.word	.L56+1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 20


 780 0088 AF010000 		.word	.L56+1
 781 008c AF010000 		.word	.L56+1
 782 0090 AF010000 		.word	.L56+1
 783 0094 AF010000 		.word	.L56+1
 784 0098 AF010000 		.word	.L56+1
 785 009c AF010000 		.word	.L56+1
 786 00a0 99010000 		.word	.L54+1
 787              		.p2align 1
 788              	.L44:
 291:.\Tones.c     **** 	{
 292:.\Tones.c     ****         case WAIL:
 293:.\Tones.c     ****         case SLOW_YELP:
 294:.\Tones.c     ****         case FAST_YELP:
 295:.\Tones.c     **** 		case PHASER:
 296:.\Tones.c     ****             playGradualChangeTone(&speakerDataList[bSpeaker], &toneList[speakerDataList[bSpeaker].c
 789              		.loc 1 296 0
 790 00a4 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 791 00a6 1346     		mov	r3, r2
 792 00a8 5B00     		lsls	r3, r3, #1
 793 00aa 1344     		add	r3, r3, r2
 794 00ac DB00     		lsls	r3, r3, #3
 795 00ae 434A     		ldr	r2, .L57
 796 00b0 9818     		adds	r0, r3, r2
 797 00b2 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 798 00b4 4149     		ldr	r1, .L57
 799 00b6 1346     		mov	r3, r2
 800 00b8 5B00     		lsls	r3, r3, #1
 801 00ba 1344     		add	r3, r3, r2
 802 00bc DB00     		lsls	r3, r3, #3
 803 00be 0B44     		add	r3, r3, r1
 804 00c0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 805 00c2 DB00     		lsls	r3, r3, #3
 806 00c4 3E4A     		ldr	r2, .L57+4
 807 00c6 1344     		add	r3, r3, r2
 808 00c8 1946     		mov	r1, r3
 809 00ca FFF7FEFF 		bl	playGradualChangeTone
 297:.\Tones.c     ****             break;
 810              		.loc 1 297 0
 811 00ce 6FE0     		b	.L55
 812              	.L46:
 298:.\Tones.c     ****         case HORN:
 299:.\Tones.c     **** 			playHornTone(&speakerDataList[bSpeaker]);
 813              		.loc 1 299 0
 814 00d0 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 815 00d2 1346     		mov	r3, r2
 816 00d4 5B00     		lsls	r3, r3, #1
 817 00d6 1344     		add	r3, r3, r2
 818 00d8 DB00     		lsls	r3, r3, #3
 819 00da 384A     		ldr	r2, .L57
 820 00dc 1344     		add	r3, r3, r2
 821 00de 1846     		mov	r0, r3
 822 00e0 FFF7FEFF 		bl	playHornTone
 300:.\Tones.c     **** 			break;
 823              		.loc 1 300 0
 824 00e4 64E0     		b	.L55
 825              	.L47:
 301:.\Tones.c     ****         case MECHANICAL:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 21


 302:.\Tones.c     **** 			playMechanicalTone(&speakerDataList[bSpeaker]);
 826              		.loc 1 302 0
 827 00e6 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 828 00e8 1346     		mov	r3, r2
 829 00ea 5B00     		lsls	r3, r3, #1
 830 00ec 1344     		add	r3, r3, r2
 831 00ee DB00     		lsls	r3, r3, #3
 832 00f0 324A     		ldr	r2, .L57
 833 00f2 1344     		add	r3, r3, r2
 834 00f4 1846     		mov	r0, r3
 835 00f6 FFF7FEFF 		bl	playMechanicalTone
 303:.\Tones.c     **** 			break;
 836              		.loc 1 303 0
 837 00fa 59E0     		b	.L55
 838              	.L48:
 304:.\Tones.c     **** 		case MANUAL_WAIL:
 305:.\Tones.c     **** 			playManualWailTone(bSpeaker, &speakerDataList[bSpeaker]);
 839              		.loc 1 305 0
 840 00fc FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 841 00fe 1346     		mov	r3, r2
 842 0100 5B00     		lsls	r3, r3, #1
 843 0102 1344     		add	r3, r3, r2
 844 0104 DB00     		lsls	r3, r3, #3
 845 0106 2D4A     		ldr	r2, .L57
 846 0108 1344     		add	r3, r3, r2
 847 010a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 848 010c 1046     		mov	r0, r2
 849 010e 1946     		mov	r1, r3
 850 0110 FFF7FEFF 		bl	playManualWailTone
 306:.\Tones.c     **** 			break;		
 851              		.loc 1 306 0
 852 0114 4CE0     		b	.L55
 853              	.L49:
 307:.\Tones.c     **** 		case HIGH_LOW:
 308:.\Tones.c     ****             playHighLowTone(&speakerDataList[bSpeaker],&toneList[speakerDataList[bSpeaker].currentT
 854              		.loc 1 308 0
 855 0116 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 856 0118 1346     		mov	r3, r2
 857 011a 5B00     		lsls	r3, r3, #1
 858 011c 1344     		add	r3, r3, r2
 859 011e DB00     		lsls	r3, r3, #3
 860 0120 264A     		ldr	r2, .L57
 861 0122 9818     		adds	r0, r3, r2
 862 0124 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 863 0126 2549     		ldr	r1, .L57
 864 0128 1346     		mov	r3, r2
 865 012a 5B00     		lsls	r3, r3, #1
 866 012c 1344     		add	r3, r3, r2
 867 012e DB00     		lsls	r3, r3, #3
 868 0130 0B44     		add	r3, r3, r1
 869 0132 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 870 0134 DB00     		lsls	r3, r3, #3
 871 0136 224A     		ldr	r2, .L57+4
 872 0138 1344     		add	r3, r3, r2
 873 013a 1946     		mov	r1, r3
 874 013c FFF7FEFF 		bl	playHighLowTone
 309:.\Tones.c     ****             break;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 22


 875              		.loc 1 309 0
 876 0140 36E0     		b	.L55
 877              	.L50:
 310:.\Tones.c     ****         case PCALL_SLOW:
 311:.\Tones.c     ****         case PCALL_FAST:             
 312:.\Tones.c     ****             playPCallTone(&speakerDataList[bSpeaker], &toneList[speakerDataList[bSpeaker].currentTo
 878              		.loc 1 312 0
 879 0142 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 880 0144 1346     		mov	r3, r2
 881 0146 5B00     		lsls	r3, r3, #1
 882 0148 1344     		add	r3, r3, r2
 883 014a DB00     		lsls	r3, r3, #3
 884 014c 1B4A     		ldr	r2, .L57
 885 014e 9818     		adds	r0, r3, r2
 886 0150 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 887 0152 1A49     		ldr	r1, .L57
 888 0154 1346     		mov	r3, r2
 889 0156 5B00     		lsls	r3, r3, #1
 890 0158 1344     		add	r3, r3, r2
 891 015a DB00     		lsls	r3, r3, #3
 892 015c 0B44     		add	r3, r3, r1
 893 015e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 0160 DB00     		lsls	r3, r3, #3
 895 0162 174A     		ldr	r2, .L57+4
 896 0164 1344     		add	r3, r3, r2
 897 0166 1946     		mov	r1, r3
 898 0168 FFF7FEFF 		bl	playPCallTone
 313:.\Tones.c     **** 			break;
 899              		.loc 1 313 0
 900 016c 20E0     		b	.L55
 901              	.L51:
 314:.\Tones.c     ****         case HORN_PHASER:
 315:.\Tones.c     ****             playComboTone(bSpeaker, &toneList[HORN], &toneList[PHASER]);
 902              		.loc 1 315 0
 903 016e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 904 0170 1846     		mov	r0, r3
 905 0172 1449     		ldr	r1, .L57+8
 906 0174 144A     		ldr	r2, .L57+12
 907 0176 FFF7FEFF 		bl	playComboTone
 316:.\Tones.c     ****             break;
 908              		.loc 1 316 0
 909 017a 19E0     		b	.L55
 910              	.L52:
 317:.\Tones.c     ****         case HORN_YELP:
 318:.\Tones.c     ****             playComboTone(bSpeaker, &toneList[HORN], &toneList[FAST_YELP]);
 911              		.loc 1 318 0
 912 017c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 913 017e 1846     		mov	r0, r3
 914 0180 1049     		ldr	r1, .L57+8
 915 0182 124A     		ldr	r2, .L57+16
 916 0184 FFF7FEFF 		bl	playComboTone
 319:.\Tones.c     ****             break;
 917              		.loc 1 319 0
 918 0188 12E0     		b	.L55
 919              	.L53:
 320:.\Tones.c     ****         case PHASER_YELP:
 321:.\Tones.c     ****             playComboTone(bSpeaker, &toneList[PHASER], &toneList[FAST_YELP]);
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 23


 920              		.loc 1 321 0
 921 018a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 922 018c 1846     		mov	r0, r3
 923 018e 0E49     		ldr	r1, .L57+12
 924 0190 0E4A     		ldr	r2, .L57+16
 925 0192 FFF7FEFF 		bl	playComboTone
 322:.\Tones.c     ****             break;
 926              		.loc 1 322 0
 927 0196 0BE0     		b	.L55
 928              	.L54:
 323:.\Tones.c     ****         case TEST_TONE:
 324:.\Tones.c     ****             playTestTone(&speakerDataList[bSpeaker]);
 929              		.loc 1 324 0
 930 0198 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 931 019a 1346     		mov	r3, r2
 932 019c 5B00     		lsls	r3, r3, #1
 933 019e 1344     		add	r3, r3, r2
 934 01a0 DB00     		lsls	r3, r3, #3
 935 01a2 064A     		ldr	r2, .L57
 936 01a4 1344     		add	r3, r3, r2
 937 01a6 1846     		mov	r0, r3
 938 01a8 FFF7FEFF 		bl	playTestTone
 325:.\Tones.c     ****             break;
 939              		.loc 1 325 0
 940 01ac 00E0     		b	.L55
 941              	.L56:
 326:.\Tones.c     ****         default:
 327:.\Tones.c     ****             break;
 942              		.loc 1 327 0
 943 01ae 00BF     		nop
 944              	.L55:
 328:.\Tones.c     **** 	}
 329:.\Tones.c     ****     
 330:.\Tones.c     ****     return true;
 945              		.loc 1 330 0
 946 01b0 0123     		movs	r3, #1
 947              	.L42:
 331:.\Tones.c     **** }
 948              		.loc 1 331 0
 949 01b2 1846     		mov	r0, r3
 950 01b4 0837     		adds	r7, r7, #8
 951              		.cfi_def_cfa_offset 8
 952 01b6 BD46     		mov	sp, r7
 953              		.cfi_def_cfa_register 13
 954              		@ sp needed
 955 01b8 80BD     		pop	{r7, pc}
 956              	.L58:
 957 01ba 00BF     		.align	2
 958              	.L57:
 959 01bc 60000000 		.word	speakerDataList
 960 01c0 00000000 		.word	toneList
 961 01c4 28000000 		.word	toneList+40
 962 01c8 20000000 		.word	toneList+32
 963 01cc 18000000 		.word	toneList+24
 964              		.cfi_endproc
 965              	.LFE65:
 966              		.size	processPWMtimerRoutine, .-processPWMtimerRoutine
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 24


 967              		.section	.text.processPWM1updateRoutine,"ax",%progbits
 968              		.align	2
 969              		.global	processPWM1updateRoutine
 970              		.thumb
 971              		.thumb_func
 972              		.type	processPWM1updateRoutine, %function
 973              	processPWM1updateRoutine:
 974              	.LFB66:
 332:.\Tones.c     **** 
 333:.\Tones.c     **** /*******************************************************************************
 334:.\Tones.c     **** * Function Name: processPWM1updateRoutine
 335:.\Tones.c     **** ********************************************************************************
 336:.\Tones.c     **** *
 337:.\Tones.c     **** * Summary:
 338:.\Tones.c     **** *  Updates the PWM frequency value and duty cycle value at the end of each PWM cycle,
 339:.\Tones.c     **** *  called in the PWM_ISR
 340:.\Tones.c     **** *
 341:.\Tones.c     **** * Parameters:  
 342:.\Tones.c     **** *   None
 343:.\Tones.c     **** *
 344:.\Tones.c     **** * Return:
 345:.\Tones.c     **** *   None
 346:.\Tones.c     **** *
 347:.\Tones.c     **** *******************************************************************************/
 348:.\Tones.c     **** void processPWM1updateRoutine(void)
 349:.\Tones.c     **** {
 975              		.loc 1 349 0
 976              		.cfi_startproc
 977              		@ args = 0, pretend = 0, frame = 8
 978              		@ frame_needed = 1, uses_anonymous_args = 0
 979 0000 80B5     		push	{r7, lr}
 980              		.cfi_def_cfa_offset 8
 981              		.cfi_offset 7, -8
 982              		.cfi_offset 14, -4
 983 0002 82B0     		sub	sp, sp, #8
 984              		.cfi_def_cfa_offset 16
 985 0004 00AF     		add	r7, sp, #0
 986              		.cfi_def_cfa_register 7
 350:.\Tones.c     ****     static const uint8 HORN_FREQUENCY_COUNT_LIMIT = 1;
 351:.\Tones.c     ****     static uint8 hornFrequencyCount = 0;
 352:.\Tones.c     ****     uint16 captureValue = 0;
 987              		.loc 1 352 0
 988 0006 0023     		movs	r3, #0
 989 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 353:.\Tones.c     ****     
 354:.\Tones.c     ****     static const uint8 HORN_WIGGLE_WIDTH = 20;
 355:.\Tones.c     ****     static uint8 bFrequencyChange = INCREASING;
 356:.\Tones.c     ****     static uint8 hornWiggleCount = 0;
 357:.\Tones.c     ****     
 358:.\Tones.c     ****     PWM_1_ReadStatusRegister();    //Clears the sticky interrupt bit
 990              		.loc 1 358 0
 991 000a FFF7FEFF 		bl	PWM_1_ReadStatusRegister
 359:.\Tones.c     ****     
 360:.\Tones.c     ****     if(speakerDataList[SPEAKER_1].bHornPWMenable)
 992              		.loc 1 360 0
 993 000e 364B     		ldr	r3, .L72
 994 0010 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 25


 995 0012 002B     		cmp	r3, #0
 996 0014 49D0     		beq	.L60
 361:.\Tones.c     ****     {
 362:.\Tones.c     ****         switch(hornFrequencyCount)
 997              		.loc 1 362 0
 998 0016 354B     		ldr	r3, .L72+4
 999 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1000 001a 002B     		cmp	r3, #0
 1001 001c 02D0     		beq	.L62
 1002 001e 012B     		cmp	r3, #1
 1003 0020 2FD0     		beq	.L63
 1004 0022 32E0     		b	.L61
 1005              	.L62:
 363:.\Tones.c     ****         {   //Used to switch between 2 PWM patterns to create the horn effect
 364:.\Tones.c     ****             case 0:
 365:.\Tones.c     ****                 captureValue = getCaptureValue(HORN_FIRST_FREQUENCY) + hornWiggleCount;
 1006              		.loc 1 365 0
 1007 0024 40F2FA43 		movw	r3, #1274
 1008 0028 1846     		mov	r0, r3
 1009 002a FFF7FEFF 		bl	getCaptureValue
 1010 002e 0346     		mov	r3, r0
 1011 0030 1A46     		mov	r2, r3
 1012 0032 2F4B     		ldr	r3, .L72+8
 1013 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1014 0036 9BB2     		uxth	r3, r3
 1015 0038 1344     		add	r3, r3, r2
 1016 003a FB80     		strh	r3, [r7, #6]	@ movhi
 366:.\Tones.c     ****                 
 367:.\Tones.c     ****                 if(bFrequencyChange == INCREASING)
 1017              		.loc 1 367 0
 1018 003c 2D4B     		ldr	r3, .L72+12
 1019 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1020 0040 012B     		cmp	r3, #1
 1021 0042 06D1     		bne	.L64
 368:.\Tones.c     ****                     hornWiggleCount += 2;   //Creates vibrato effect at this frequency
 1022              		.loc 1 368 0
 1023 0044 2A4B     		ldr	r3, .L72+8
 1024 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1025 0048 0233     		adds	r3, r3, #2
 1026 004a DAB2     		uxtb	r2, r3
 1027 004c 284B     		ldr	r3, .L72+8
 1028 004e 1A70     		strb	r2, [r3]
 1029 0050 05E0     		b	.L65
 1030              	.L64:
 369:.\Tones.c     ****                 else
 370:.\Tones.c     ****                     hornWiggleCount -= 2;
 1031              		.loc 1 370 0
 1032 0052 274B     		ldr	r3, .L72+8
 1033 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1034 0056 023B     		subs	r3, r3, #2
 1035 0058 DAB2     		uxtb	r2, r3
 1036 005a 254B     		ldr	r3, .L72+8
 1037 005c 1A70     		strb	r2, [r3]
 1038              	.L65:
 371:.\Tones.c     ****                 
 372:.\Tones.c     ****                 if(hornWiggleCount <= 0)
 1039              		.loc 1 372 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 26


 1040 005e 244B     		ldr	r3, .L72+8
 1041 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1042 0062 002B     		cmp	r3, #0
 1043 0064 03D1     		bne	.L66
 373:.\Tones.c     ****                     bFrequencyChange = INCREASING;
 1044              		.loc 1 373 0
 1045 0066 234B     		ldr	r3, .L72+12
 1046 0068 0122     		movs	r2, #1
 1047 006a 1A70     		strb	r2, [r3]
 1048 006c 08E0     		b	.L67
 1049              	.L66:
 374:.\Tones.c     ****                 else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 1050              		.loc 1 374 0
 1051 006e 204B     		ldr	r3, .L72+8
 1052 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1053 0072 1422     		movs	r2, #20
 1054 0074 9342     		cmp	r3, r2
 1055 0076 03D3     		bcc	.L67
 375:.\Tones.c     ****                     bFrequencyChange = DECREASING;
 1056              		.loc 1 375 0
 1057 0078 1E4B     		ldr	r3, .L72+12
 1058 007a 0022     		movs	r2, #0
 1059 007c 1A70     		strb	r2, [r3]
 376:.\Tones.c     ****                 break;
 1060              		.loc 1 376 0
 1061 007e 04E0     		b	.L61
 1062              	.L67:
 1063 0080 03E0     		b	.L61
 1064              	.L63:
 377:.\Tones.c     ****             case 1:
 378:.\Tones.c     ****                 captureValue = speakerDataList[SPEAKER_1].PWMperiodCount;
 1065              		.loc 1 378 0
 1066 0082 194B     		ldr	r3, .L72
 1067 0084 5B88     		ldrh	r3, [r3, #2]	@ movhi
 1068 0086 FB80     		strh	r3, [r7, #6]	@ movhi
 379:.\Tones.c     ****                 break;
 1069              		.loc 1 379 0
 1070 0088 00BF     		nop
 1071              	.L61:
 380:.\Tones.c     ****         }
 381:.\Tones.c     ****         
 382:.\Tones.c     ****         if(hornFrequencyCount < HORN_FREQUENCY_COUNT_LIMIT)
 1072              		.loc 1 382 0
 1073 008a 184B     		ldr	r3, .L72+4
 1074 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075 008e 0122     		movs	r2, #1
 1076 0090 9342     		cmp	r3, r2
 1077 0092 06D2     		bcs	.L68
 383:.\Tones.c     ****             hornFrequencyCount++;
 1078              		.loc 1 383 0
 1079 0094 154B     		ldr	r3, .L72+4
 1080 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 0098 0133     		adds	r3, r3, #1
 1082 009a DAB2     		uxtb	r2, r3
 1083 009c 134B     		ldr	r3, .L72+4
 1084 009e 1A70     		strb	r2, [r3]
 1085 00a0 06E0     		b	.L70
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 27


 1086              	.L68:
 384:.\Tones.c     ****         else
 385:.\Tones.c     ****             hornFrequencyCount = 0;
 1087              		.loc 1 385 0
 1088 00a2 124B     		ldr	r3, .L72+4
 1089 00a4 0022     		movs	r2, #0
 1090 00a6 1A70     		strb	r2, [r3]
 1091 00a8 02E0     		b	.L70
 1092              	.L60:
 386:.\Tones.c     ****     }
 387:.\Tones.c     ****     else    //When there is no horn effect
 388:.\Tones.c     ****         captureValue = speakerDataList[SPEAKER_1].PWMperiodCount;
 1093              		.loc 1 388 0
 1094 00aa 0F4B     		ldr	r3, .L72
 1095 00ac 5B88     		ldrh	r3, [r3, #2]	@ movhi
 1096 00ae FB80     		strh	r3, [r7, #6]	@ movhi
 1097              	.L70:
 389:.\Tones.c     ****         
 390:.\Tones.c     ****     PWM_1_WritePeriod(captureValue);    //Load new value to the PWM peripheral
 1098              		.loc 1 390 0
 1099 00b0 FB88     		ldrh	r3, [r7, #6]
 1100 00b2 1846     		mov	r0, r3
 1101 00b4 FFF7FEFF 		bl	PWM_1_WritePeriod
 391:.\Tones.c     ****     PWM_1_WriteCompare(captureValue/2);
 1102              		.loc 1 391 0
 1103 00b8 FB88     		ldrh	r3, [r7, #6]
 1104 00ba 5B08     		lsrs	r3, r3, #1
 1105 00bc 9BB2     		uxth	r3, r3
 1106 00be 1846     		mov	r0, r3
 1107 00c0 FFF7FEFF 		bl	PWM_1_WriteCompare
 392:.\Tones.c     ****     
 393:.\Tones.c     ****     if(toneEffectStatus == SYNC_TONES)
 1108              		.loc 1 393 0
 1109 00c4 0C4B     		ldr	r3, .L72+16
 1110 00c6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1111 00c8 012B     		cmp	r3, #1
 1112 00ca 09D1     		bne	.L59
 394:.\Tones.c     ****     {   //Update PWM 2 as well during sync, uses Speaker 1's capture value
 395:.\Tones.c     ****         PWM_2_WritePeriod(captureValue);
 1113              		.loc 1 395 0
 1114 00cc FB88     		ldrh	r3, [r7, #6]
 1115 00ce 1846     		mov	r0, r3
 1116 00d0 FFF7FEFF 		bl	PWM_2_WritePeriod
 396:.\Tones.c     ****         PWM_2_WriteCompare(captureValue/2);
 1117              		.loc 1 396 0
 1118 00d4 FB88     		ldrh	r3, [r7, #6]
 1119 00d6 5B08     		lsrs	r3, r3, #1
 1120 00d8 9BB2     		uxth	r3, r3
 1121 00da 1846     		mov	r0, r3
 1122 00dc FFF7FEFF 		bl	PWM_2_WriteCompare
 1123              	.L59:
 397:.\Tones.c     ****     }
 398:.\Tones.c     **** }
 1124              		.loc 1 398 0
 1125 00e0 0837     		adds	r7, r7, #8
 1126              		.cfi_def_cfa_offset 8
 1127 00e2 BD46     		mov	sp, r7
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 28


 1128              		.cfi_def_cfa_register 13
 1129              		@ sp needed
 1130 00e4 80BD     		pop	{r7, pc}
 1131              	.L73:
 1132 00e6 00BF     		.align	2
 1133              	.L72:
 1134 00e8 60000000 		.word	speakerDataList
 1135 00ec 02000000 		.word	hornFrequencyCount.7315
 1136 00f0 03000000 		.word	hornWiggleCount.7319
 1137 00f4 90000000 		.word	bFrequencyChange.7318
 1138 00f8 00000000 		.word	toneEffectStatus
 1139              		.cfi_endproc
 1140              	.LFE66:
 1141              		.size	processPWM1updateRoutine, .-processPWM1updateRoutine
 1142              		.section	.text.processPWM2updateRoutine,"ax",%progbits
 1143              		.align	2
 1144              		.global	processPWM2updateRoutine
 1145              		.thumb
 1146              		.thumb_func
 1147              		.type	processPWM2updateRoutine, %function
 1148              	processPWM2updateRoutine:
 1149              	.LFB67:
 399:.\Tones.c     **** 
 400:.\Tones.c     **** /*******************************************************************************
 401:.\Tones.c     **** * Function Name: processPWM2updateRoutine
 402:.\Tones.c     **** ********************************************************************************
 403:.\Tones.c     **** *
 404:.\Tones.c     **** * Summary:
 405:.\Tones.c     **** *  Updates the PWM frequency value and duty cycle value at the end of each PWM cycle,
 406:.\Tones.c     **** *  called in the PWM_ISR
 407:.\Tones.c     **** *
 408:.\Tones.c     **** * Parameters:  
 409:.\Tones.c     **** *   None
 410:.\Tones.c     **** *
 411:.\Tones.c     **** * Return:
 412:.\Tones.c     **** *   None
 413:.\Tones.c     **** *
 414:.\Tones.c     **** *******************************************************************************/
 415:.\Tones.c     **** void processPWM2updateRoutine(void)
 416:.\Tones.c     **** {
 1150              		.loc 1 416 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 8
 1153              		@ frame_needed = 1, uses_anonymous_args = 0
 1154 0000 80B5     		push	{r7, lr}
 1155              		.cfi_def_cfa_offset 8
 1156              		.cfi_offset 7, -8
 1157              		.cfi_offset 14, -4
 1158 0002 82B0     		sub	sp, sp, #8
 1159              		.cfi_def_cfa_offset 16
 1160 0004 00AF     		add	r7, sp, #0
 1161              		.cfi_def_cfa_register 7
 417:.\Tones.c     ****     static const uint8 HORN_FREQUENCY_COUNT_LIMIT = 1;
 418:.\Tones.c     ****     static uint8 hornFrequencyCount = 0;
 419:.\Tones.c     ****     uint16 captureValue = 0;
 1162              		.loc 1 419 0
 1163 0006 0023     		movs	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 29


 1164 0008 FB80     		strh	r3, [r7, #6]	@ movhi
 420:.\Tones.c     ****     
 421:.\Tones.c     ****     static const uint8 HORN_WIGGLE_WIDTH = 20;
 422:.\Tones.c     ****     static uint8 bFrequencyChange = INCREASING;
 423:.\Tones.c     ****     static uint8 hornWiggleCount = 0;
 424:.\Tones.c     ****     
 425:.\Tones.c     ****     PWM_2_ReadStatusRegister();    //Clears the sticky interrupt bit
 1165              		.loc 1 425 0
 1166 000a FFF7FEFF 		bl	PWM_2_ReadStatusRegister
 426:.\Tones.c     ****     
 427:.\Tones.c     ****     if(toneEffectStatus != SYNC_TONES)
 1167              		.loc 1 427 0
 1168 000e 314B     		ldr	r3, .L87
 1169 0010 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1170 0012 012B     		cmp	r3, #1
 1171 0014 5BD0     		beq	.L74
 428:.\Tones.c     ****     {   //Only update PWM 2 in this routine when not in sync
 429:.\Tones.c     ****         if(speakerDataList[SPEAKER_2].bHornPWMenable)
 1172              		.loc 1 429 0
 1173 0016 304B     		ldr	r3, .L87+4
 1174 0018 93F82D30 		ldrb	r3, [r3, #45]	@ zero_extendqisi2
 1175 001c 002B     		cmp	r3, #0
 1176 001e 49D0     		beq	.L76
 430:.\Tones.c     ****         {
 431:.\Tones.c     ****             switch(hornFrequencyCount)
 1177              		.loc 1 431 0
 1178 0020 2E4B     		ldr	r3, .L87+8
 1179 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1180 0024 002B     		cmp	r3, #0
 1181 0026 02D0     		beq	.L78
 1182 0028 012B     		cmp	r3, #1
 1183 002a 2FD0     		beq	.L79
 1184 002c 32E0     		b	.L77
 1185              	.L78:
 432:.\Tones.c     ****             {   //Used to switch between 2 PWM patterns to create the horn effect
 433:.\Tones.c     ****                 case 0:
 434:.\Tones.c     ****                     captureValue = getCaptureValue(HORN_FIRST_FREQUENCY) + hornWiggleCount;
 1186              		.loc 1 434 0
 1187 002e 40F2FA43 		movw	r3, #1274
 1188 0032 1846     		mov	r0, r3
 1189 0034 FFF7FEFF 		bl	getCaptureValue
 1190 0038 0346     		mov	r3, r0
 1191 003a 1A46     		mov	r2, r3
 1192 003c 284B     		ldr	r3, .L87+12
 1193 003e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1194 0040 9BB2     		uxth	r3, r3
 1195 0042 1344     		add	r3, r3, r2
 1196 0044 FB80     		strh	r3, [r7, #6]	@ movhi
 435:.\Tones.c     ****                     
 436:.\Tones.c     ****                     if(bFrequencyChange == INCREASING)
 1197              		.loc 1 436 0
 1198 0046 274B     		ldr	r3, .L87+16
 1199 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1200 004a 012B     		cmp	r3, #1
 1201 004c 06D1     		bne	.L80
 437:.\Tones.c     ****                         hornWiggleCount += 2; //Creates vibrato effect at this frequency
 1202              		.loc 1 437 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 30


 1203 004e 244B     		ldr	r3, .L87+12
 1204 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1205 0052 0233     		adds	r3, r3, #2
 1206 0054 DAB2     		uxtb	r2, r3
 1207 0056 224B     		ldr	r3, .L87+12
 1208 0058 1A70     		strb	r2, [r3]
 1209 005a 05E0     		b	.L81
 1210              	.L80:
 438:.\Tones.c     ****                     else
 439:.\Tones.c     ****                         hornWiggleCount -= 2;
 1211              		.loc 1 439 0
 1212 005c 204B     		ldr	r3, .L87+12
 1213 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1214 0060 023B     		subs	r3, r3, #2
 1215 0062 DAB2     		uxtb	r2, r3
 1216 0064 1E4B     		ldr	r3, .L87+12
 1217 0066 1A70     		strb	r2, [r3]
 1218              	.L81:
 440:.\Tones.c     ****                     
 441:.\Tones.c     ****                     if(hornWiggleCount <= 0)
 1219              		.loc 1 441 0
 1220 0068 1D4B     		ldr	r3, .L87+12
 1221 006a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1222 006c 002B     		cmp	r3, #0
 1223 006e 03D1     		bne	.L82
 442:.\Tones.c     ****                         bFrequencyChange = INCREASING;
 1224              		.loc 1 442 0
 1225 0070 1C4B     		ldr	r3, .L87+16
 1226 0072 0122     		movs	r2, #1
 1227 0074 1A70     		strb	r2, [r3]
 1228 0076 08E0     		b	.L83
 1229              	.L82:
 443:.\Tones.c     ****                     else if(hornWiggleCount >= HORN_WIGGLE_WIDTH)
 1230              		.loc 1 443 0
 1231 0078 194B     		ldr	r3, .L87+12
 1232 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1233 007c 1422     		movs	r2, #20
 1234 007e 9342     		cmp	r3, r2
 1235 0080 03D3     		bcc	.L83
 444:.\Tones.c     ****                         bFrequencyChange = DECREASING;
 1236              		.loc 1 444 0
 1237 0082 184B     		ldr	r3, .L87+16
 1238 0084 0022     		movs	r2, #0
 1239 0086 1A70     		strb	r2, [r3]
 445:.\Tones.c     ****                     
 446:.\Tones.c     ****                     break;
 1240              		.loc 1 446 0
 1241 0088 04E0     		b	.L77
 1242              	.L83:
 1243 008a 03E0     		b	.L77
 1244              	.L79:
 447:.\Tones.c     ****                 case 1:
 448:.\Tones.c     ****                     captureValue = speakerDataList[SPEAKER_2].PWMperiodCount;
 1245              		.loc 1 448 0
 1246 008c 124B     		ldr	r3, .L87+4
 1247 008e 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 1248 0090 FB80     		strh	r3, [r7, #6]	@ movhi
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 31


 449:.\Tones.c     ****                     break;
 1249              		.loc 1 449 0
 1250 0092 00BF     		nop
 1251              	.L77:
 450:.\Tones.c     ****             }
 451:.\Tones.c     ****             
 452:.\Tones.c     ****             if(hornFrequencyCount < HORN_FREQUENCY_COUNT_LIMIT)
 1252              		.loc 1 452 0
 1253 0094 114B     		ldr	r3, .L87+8
 1254 0096 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1255 0098 0122     		movs	r2, #1
 1256 009a 9342     		cmp	r3, r2
 1257 009c 06D2     		bcs	.L84
 453:.\Tones.c     ****                 hornFrequencyCount++;
 1258              		.loc 1 453 0
 1259 009e 0F4B     		ldr	r3, .L87+8
 1260 00a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1261 00a2 0133     		adds	r3, r3, #1
 1262 00a4 DAB2     		uxtb	r2, r3
 1263 00a6 0D4B     		ldr	r3, .L87+8
 1264 00a8 1A70     		strb	r2, [r3]
 1265 00aa 06E0     		b	.L86
 1266              	.L84:
 454:.\Tones.c     ****             else
 455:.\Tones.c     ****                 hornFrequencyCount = 0;
 1267              		.loc 1 455 0
 1268 00ac 0B4B     		ldr	r3, .L87+8
 1269 00ae 0022     		movs	r2, #0
 1270 00b0 1A70     		strb	r2, [r3]
 1271 00b2 02E0     		b	.L86
 1272              	.L76:
 456:.\Tones.c     ****         }
 457:.\Tones.c     ****         else //When there is no horn effect
 458:.\Tones.c     ****             captureValue = speakerDataList[SPEAKER_2].PWMperiodCount;
 1273              		.loc 1 458 0
 1274 00b4 084B     		ldr	r3, .L87+4
 1275 00b6 5B8B     		ldrh	r3, [r3, #26]	@ movhi
 1276 00b8 FB80     		strh	r3, [r7, #6]	@ movhi
 1277              	.L86:
 459:.\Tones.c     ****             
 460:.\Tones.c     ****         PWM_2_WritePeriod(captureValue);
 1278              		.loc 1 460 0
 1279 00ba FB88     		ldrh	r3, [r7, #6]
 1280 00bc 1846     		mov	r0, r3
 1281 00be FFF7FEFF 		bl	PWM_2_WritePeriod
 461:.\Tones.c     ****         PWM_2_WriteCompare(captureValue/2);
 1282              		.loc 1 461 0
 1283 00c2 FB88     		ldrh	r3, [r7, #6]
 1284 00c4 5B08     		lsrs	r3, r3, #1
 1285 00c6 9BB2     		uxth	r3, r3
 1286 00c8 1846     		mov	r0, r3
 1287 00ca FFF7FEFF 		bl	PWM_2_WriteCompare
 1288              	.L74:
 462:.\Tones.c     ****     }
 463:.\Tones.c     **** }
 1289              		.loc 1 463 0
 1290 00ce 0837     		adds	r7, r7, #8
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 32


 1291              		.cfi_def_cfa_offset 8
 1292 00d0 BD46     		mov	sp, r7
 1293              		.cfi_def_cfa_register 13
 1294              		@ sp needed
 1295 00d2 80BD     		pop	{r7, pc}
 1296              	.L88:
 1297              		.align	2
 1298              	.L87:
 1299 00d4 00000000 		.word	toneEffectStatus
 1300 00d8 60000000 		.word	speakerDataList
 1301 00dc 04000000 		.word	hornFrequencyCount.7327
 1302 00e0 05000000 		.word	hornWiggleCount.7331
 1303 00e4 91000000 		.word	bFrequencyChange.7330
 1304              		.cfi_endproc
 1305              	.LFE67:
 1306              		.size	processPWM2updateRoutine, .-processPWM2updateRoutine
 1307              		.section	.text.isManualWailActive,"ax",%progbits
 1308              		.align	2
 1309              		.global	isManualWailActive
 1310              		.thumb
 1311              		.thumb_func
 1312              		.type	isManualWailActive, %function
 1313              	isManualWailActive:
 1314              	.LFB68:
 464:.\Tones.c     **** 
 465:.\Tones.c     **** /*******************************************************************************
 466:.\Tones.c     **** * Function Name: isManualWailActive
 467:.\Tones.c     **** ********************************************************************************
 468:.\Tones.c     **** *
 469:.\Tones.c     **** * Summary:
 470:.\Tones.c     **** *  Returns the boolean that determines if manual wail is active
 471:.\Tones.c     **** *
 472:.\Tones.c     **** * Parameters:  
 473:.\Tones.c     **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 474:.\Tones.c     **** *
 475:.\Tones.c     **** * Return:
 476:.\Tones.c     **** *   The boolean that determines if manual wail is active
 477:.\Tones.c     **** *
 478:.\Tones.c     **** *******************************************************************************/
 479:.\Tones.c     **** uint8 isManualWailActive(uint8 bSpeaker)
 480:.\Tones.c     **** {
 1315              		.loc 1 480 0
 1316              		.cfi_startproc
 1317              		@ args = 0, pretend = 0, frame = 8
 1318              		@ frame_needed = 1, uses_anonymous_args = 0
 1319              		@ link register save eliminated.
 1320 0000 80B4     		push	{r7}
 1321              		.cfi_def_cfa_offset 4
 1322              		.cfi_offset 7, -4
 1323 0002 83B0     		sub	sp, sp, #12
 1324              		.cfi_def_cfa_offset 16
 1325 0004 00AF     		add	r7, sp, #0
 1326              		.cfi_def_cfa_register 7
 1327 0006 0346     		mov	r3, r0
 1328 0008 FB71     		strb	r3, [r7, #7]
 481:.\Tones.c     ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 1329              		.loc 1 481 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 33


 1330 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1331 000c 002B     		cmp	r3, #0
 1332 000e 04D0     		beq	.L90
 1333              		.loc 1 481 0 is_stmt 0 discriminator 1
 1334 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1335 0012 012B     		cmp	r3, #1
 1336 0014 01D0     		beq	.L90
 482:.\Tones.c     ****         return false;
 1337              		.loc 1 482 0 is_stmt 1
 1338 0016 0023     		movs	r3, #0
 1339 0018 08E0     		b	.L91
 1340              	.L90:
 483:.\Tones.c     ****     
 484:.\Tones.c     ****     return speakerDataList[bSpeaker].bManualWailActiveFlag;
 1341              		.loc 1 484 0
 1342 001a FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1343 001c 0649     		ldr	r1, .L92
 1344 001e 1346     		mov	r3, r2
 1345 0020 5B00     		lsls	r3, r3, #1
 1346 0022 1344     		add	r3, r3, r2
 1347 0024 DB00     		lsls	r3, r3, #3
 1348 0026 0B44     		add	r3, r3, r1
 1349 0028 1033     		adds	r3, r3, #16
 1350 002a DB78     		ldrb	r3, [r3, #3]	@ zero_extendqisi2
 1351              	.L91:
 485:.\Tones.c     **** }
 1352              		.loc 1 485 0
 1353 002c 1846     		mov	r0, r3
 1354 002e 0C37     		adds	r7, r7, #12
 1355              		.cfi_def_cfa_offset 4
 1356 0030 BD46     		mov	sp, r7
 1357              		.cfi_def_cfa_register 13
 1358              		@ sp needed
 1359 0032 5DF8047B 		ldr	r7, [sp], #4
 1360              		.cfi_restore 7
 1361              		.cfi_def_cfa_offset 0
 1362 0036 7047     		bx	lr
 1363              	.L93:
 1364              		.align	2
 1365              	.L92:
 1366 0038 60000000 		.word	speakerDataList
 1367              		.cfi_endproc
 1368              	.LFE68:
 1369              		.size	isManualWailActive, .-isManualWailActive
 1370              		.section	.text.deactivateManualWail,"ax",%progbits
 1371              		.align	2
 1372              		.global	deactivateManualWail
 1373              		.thumb
 1374              		.thumb_func
 1375              		.type	deactivateManualWail, %function
 1376              	deactivateManualWail:
 1377              	.LFB69:
 486:.\Tones.c     **** 
 487:.\Tones.c     **** /*******************************************************************************
 488:.\Tones.c     **** * Function Name: deactivateManualWail
 489:.\Tones.c     **** ********************************************************************************
 490:.\Tones.c     **** *
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 34


 491:.\Tones.c     **** * Summary:
 492:.\Tones.c     **** *  Clears the manual wail active flag so it won't continue playing after the tone changes
 493:.\Tones.c     **** *
 494:.\Tones.c     **** * Parameters:  
 495:.\Tones.c     **** *   None
 496:.\Tones.c     **** *
 497:.\Tones.c     **** * Return:
 498:.\Tones.c     **** *   None
 499:.\Tones.c     **** *
 500:.\Tones.c     **** *******************************************************************************/
 501:.\Tones.c     **** void deactivateManualWail(void)
 502:.\Tones.c     **** {
 1378              		.loc 1 502 0
 1379              		.cfi_startproc
 1380              		@ args = 0, pretend = 0, frame = 0
 1381              		@ frame_needed = 1, uses_anonymous_args = 0
 1382              		@ link register save eliminated.
 1383 0000 80B4     		push	{r7}
 1384              		.cfi_def_cfa_offset 4
 1385              		.cfi_offset 7, -4
 1386 0002 00AF     		add	r7, sp, #0
 1387              		.cfi_def_cfa_register 7
 503:.\Tones.c     ****     speakerDataList[SPEAKER_1].bManualWailActiveFlag = false;
 1388              		.loc 1 503 0
 1389 0004 054B     		ldr	r3, .L95
 1390 0006 0022     		movs	r2, #0
 1391 0008 DA74     		strb	r2, [r3, #19]
 504:.\Tones.c     ****     speakerDataList[SPEAKER_2].bManualWailActiveFlag = false;
 1392              		.loc 1 504 0
 1393 000a 044B     		ldr	r3, .L95
 1394 000c 0022     		movs	r2, #0
 1395 000e 83F82B20 		strb	r2, [r3, #43]
 505:.\Tones.c     **** }
 1396              		.loc 1 505 0
 1397 0012 BD46     		mov	sp, r7
 1398              		.cfi_def_cfa_register 13
 1399              		@ sp needed
 1400 0014 5DF8047B 		ldr	r7, [sp], #4
 1401              		.cfi_restore 7
 1402              		.cfi_def_cfa_offset 0
 1403 0018 7047     		bx	lr
 1404              	.L96:
 1405 001a 00BF     		.align	2
 1406              	.L95:
 1407 001c 60000000 		.word	speakerDataList
 1408              		.cfi_endproc
 1409              	.LFE69:
 1410              		.size	deactivateManualWail, .-deactivateManualWail
 1411              		.section	.text.setToneEffectStatus,"ax",%progbits
 1412              		.align	2
 1413              		.thumb
 1414              		.thumb_func
 1415              		.type	setToneEffectStatus, %function
 1416              	setToneEffectStatus:
 1417              	.LFB70:
 506:.\Tones.c     **** 
 507:.\Tones.c     **** /*******************************************************************************
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 35


 508:.\Tones.c     **** * Function Name: setToneEffectStatus
 509:.\Tones.c     **** ********************************************************************************
 510:.\Tones.c     **** *
 511:.\Tones.c     **** * Summary:
 512:.\Tones.c     **** *  Determines if the qualifying tones need to be in sync or have delay
 513:.\Tones.c     **** *
 514:.\Tones.c     **** * Parameters:  
 515:.\Tones.c     **** *   firstTone: The tone for Speaker 1
 516:.\Tones.c     **** *   secondTone: The tone for Speaker 2
 517:.\Tones.c     **** *   bDualDelayInput: The boolean that indicates if dual delay is enabled
 518:.\Tones.c     **** *
 519:.\Tones.c     **** * Return:
 520:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 521:.\Tones.c     **** *
 522:.\Tones.c     **** *******************************************************************************/
 523:.\Tones.c     **** static uint8 setToneEffectStatus(enum ToneType firstTone, enum ToneType secondTone, uint8 bDualDela
 524:.\Tones.c     **** {
 1418              		.loc 1 524 0
 1419              		.cfi_startproc
 1420              		@ args = 0, pretend = 0, frame = 8
 1421              		@ frame_needed = 1, uses_anonymous_args = 0
 1422              		@ link register save eliminated.
 1423 0000 80B4     		push	{r7}
 1424              		.cfi_def_cfa_offset 4
 1425              		.cfi_offset 7, -4
 1426 0002 83B0     		sub	sp, sp, #12
 1427              		.cfi_def_cfa_offset 16
 1428 0004 00AF     		add	r7, sp, #0
 1429              		.cfi_def_cfa_register 7
 1430 0006 0346     		mov	r3, r0
 1431 0008 FB71     		strb	r3, [r7, #7]
 1432 000a 0B46     		mov	r3, r1
 1433 000c BB71     		strb	r3, [r7, #6]
 1434 000e 1346     		mov	r3, r2
 1435 0010 7B71     		strb	r3, [r7, #5]
 525:.\Tones.c     ****     if((firstTone < NO_TONE) || (firstTone > PHASER_YELP))
 1436              		.loc 1 525 0
 1437 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1438 0014 0D2B     		cmp	r3, #13
 1439 0016 01D9     		bls	.L98
 526:.\Tones.c     ****         return false;
 1440              		.loc 1 526 0
 1441 0018 0023     		movs	r3, #0
 1442 001a 35E0     		b	.L99
 1443              	.L98:
 527:.\Tones.c     ****     
 528:.\Tones.c     ****     if((secondTone < NO_TONE) || (secondTone > PHASER_YELP))
 1444              		.loc 1 528 0
 1445 001c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1446 001e 0D2B     		cmp	r3, #13
 1447 0020 01D9     		bls	.L100
 529:.\Tones.c     ****         return false;
 1448              		.loc 1 529 0
 1449 0022 0023     		movs	r3, #0
 1450 0024 30E0     		b	.L99
 1451              	.L100:
 530:.\Tones.c     ****     
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 36


 531:.\Tones.c     ****     if((bDualDelayInput != true) && (bDualDelayInput != false))
 1452              		.loc 1 531 0
 1453 0026 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1454 0028 012B     		cmp	r3, #1
 1455 002a 04D0     		beq	.L101
 1456              		.loc 1 531 0 is_stmt 0 discriminator 1
 1457 002c 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1458 002e 002B     		cmp	r3, #0
 1459 0030 01D0     		beq	.L101
 532:.\Tones.c     ****         return false;
 1460              		.loc 1 532 0 is_stmt 1
 1461 0032 0023     		movs	r3, #0
 1462 0034 28E0     		b	.L99
 1463              	.L101:
 533:.\Tones.c     ****     
 534:.\Tones.c     ****     if((firstTone == NO_TONE) || (secondTone == NO_TONE) || (firstTone != secondTone))
 1464              		.loc 1 534 0
 1465 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1466 0038 002B     		cmp	r3, #0
 1467 003a 06D0     		beq	.L102
 1468              		.loc 1 534 0 is_stmt 0 discriminator 1
 1469 003c BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1470 003e 002B     		cmp	r3, #0
 1471 0040 03D0     		beq	.L102
 1472              		.loc 1 534 0 discriminator 2
 1473 0042 FA79     		ldrb	r2, [r7, #7]	@ zero_extendqisi2
 1474 0044 BB79     		ldrb	r3, [r7, #6]	@ zero_extendqisi2
 1475 0046 9A42     		cmp	r2, r3
 1476 0048 03D0     		beq	.L103
 1477              	.L102:
 535:.\Tones.c     ****         toneEffectStatus = NO_EFFECT;
 1478              		.loc 1 535 0 is_stmt 1
 1479 004a 124B     		ldr	r3, .L109
 1480 004c 0022     		movs	r2, #0
 1481 004e 1A70     		strb	r2, [r3]
 1482 0050 19E0     		b	.L104
 1483              	.L103:
 536:.\Tones.c     ****     else
 537:.\Tones.c     ****     {   //Tones are the same
 538:.\Tones.c     ****         if(bDualDelayInput == true)
 1484              		.loc 1 538 0
 1485 0052 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 1486 0054 012B     		cmp	r3, #1
 1487 0056 13D1     		bne	.L105
 539:.\Tones.c     ****         {
 540:.\Tones.c     ****             if((firstTone == HORN) || (firstTone == MANUAL_WAIL) || (firstTone == TEST_TONE) || (fi
 1488              		.loc 1 540 0
 1489 0058 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1490 005a 052B     		cmp	r3, #5
 1491 005c 08D0     		beq	.L106
 1492              		.loc 1 540 0 is_stmt 0 discriminator 1
 1493 005e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1494 0060 072B     		cmp	r3, #7
 1495 0062 05D0     		beq	.L106
 1496              		.loc 1 540 0 discriminator 2
 1497 0064 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1498 0066 162B     		cmp	r3, #22
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 37


 1499 0068 02D0     		beq	.L106
 1500              		.loc 1 540 0 discriminator 3
 1501 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1502 006c 0A2B     		cmp	r3, #10
 1503 006e 03D9     		bls	.L107
 1504              	.L106:
 541:.\Tones.c     ****                 toneEffectStatus = SYNC_TONES;
 1505              		.loc 1 541 0 is_stmt 1
 1506 0070 084B     		ldr	r3, .L109
 1507 0072 0122     		movs	r2, #1
 1508 0074 1A70     		strb	r2, [r3]
 1509 0076 06E0     		b	.L104
 1510              	.L107:
 542:.\Tones.c     ****             else
 543:.\Tones.c     ****                 toneEffectStatus = DELAY_TONES;
 1511              		.loc 1 543 0
 1512 0078 064B     		ldr	r3, .L109
 1513 007a 0222     		movs	r2, #2
 1514 007c 1A70     		strb	r2, [r3]
 1515 007e 02E0     		b	.L104
 1516              	.L105:
 544:.\Tones.c     ****         }
 545:.\Tones.c     ****         else
 546:.\Tones.c     ****             toneEffectStatus = SYNC_TONES;
 1517              		.loc 1 546 0
 1518 0080 044B     		ldr	r3, .L109
 1519 0082 0122     		movs	r2, #1
 1520 0084 1A70     		strb	r2, [r3]
 1521              	.L104:
 547:.\Tones.c     ****     }
 548:.\Tones.c     ****     
 549:.\Tones.c     ****     return true;
 1522              		.loc 1 549 0
 1523 0086 0123     		movs	r3, #1
 1524              	.L99:
 550:.\Tones.c     **** }
 1525              		.loc 1 550 0
 1526 0088 1846     		mov	r0, r3
 1527 008a 0C37     		adds	r7, r7, #12
 1528              		.cfi_def_cfa_offset 4
 1529 008c BD46     		mov	sp, r7
 1530              		.cfi_def_cfa_register 13
 1531              		@ sp needed
 1532 008e 5DF8047B 		ldr	r7, [sp], #4
 1533              		.cfi_restore 7
 1534              		.cfi_def_cfa_offset 0
 1535 0092 7047     		bx	lr
 1536              	.L110:
 1537              		.align	2
 1538              	.L109:
 1539 0094 00000000 		.word	toneEffectStatus
 1540              		.cfi_endproc
 1541              	.LFE70:
 1542              		.size	setToneEffectStatus, .-setToneEffectStatus
 1543              		.section	.text.playHornTone,"ax",%progbits
 1544              		.align	2
 1545              		.thumb
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 38


 1546              		.thumb_func
 1547              		.type	playHornTone, %function
 1548              	playHornTone:
 1549              	.LFB71:
 551:.\Tones.c     **** 
 552:.\Tones.c     **** /*******************************************************************************
 553:.\Tones.c     **** * Function Name: playHornTone
 554:.\Tones.c     **** ********************************************************************************
 555:.\Tones.c     **** *
 556:.\Tones.c     **** * Summary:
 557:.\Tones.c     **** *  Updates the PWM frequency value for the horn tone
 558:.\Tones.c     **** *
 559:.\Tones.c     **** * Parameters:  
 560:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 561:.\Tones.c     **** *
 562:.\Tones.c     **** * Return:
 563:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 564:.\Tones.c     **** *
 565:.\Tones.c     **** *******************************************************************************/
 566:.\Tones.c     **** static uint8 playHornTone(CurrentToneData* currentSpeaker)
 567:.\Tones.c     **** {
 1550              		.loc 1 567 0
 1551              		.cfi_startproc
 1552              		@ args = 0, pretend = 0, frame = 8
 1553              		@ frame_needed = 1, uses_anonymous_args = 0
 1554 0000 80B5     		push	{r7, lr}
 1555              		.cfi_def_cfa_offset 8
 1556              		.cfi_offset 7, -8
 1557              		.cfi_offset 14, -4
 1558 0002 82B0     		sub	sp, sp, #8
 1559              		.cfi_def_cfa_offset 16
 1560 0004 00AF     		add	r7, sp, #0
 1561              		.cfi_def_cfa_register 7
 1562 0006 7860     		str	r0, [r7, #4]
 568:.\Tones.c     **** 	if(currentSpeaker == NULL)
 1563              		.loc 1 568 0
 1564 0008 7B68     		ldr	r3, [r7, #4]
 1565 000a 002B     		cmp	r3, #0
 1566 000c 01D1     		bne	.L112
 569:.\Tones.c     ****         return false;
 1567              		.loc 1 569 0
 1568 000e 0023     		movs	r3, #0
 1569 0010 21E0     		b	.L113
 1570              	.L112:
 570:.\Tones.c     **** 	
 571:.\Tones.c     **** 	if(currentSpeaker-> bFrequencyChange == HIGH_PITCH)
 1571              		.loc 1 571 0
 1572 0012 7B68     		ldr	r3, [r7, #4]
 1573 0014 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1574 0016 012B     		cmp	r3, #1
 1575 0018 09D1     		bne	.L114
 572:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = getCaptureValue(toneList[HORN].highestFrequency);
 1576              		.loc 1 572 0
 1577 001a 114B     		ldr	r3, .L116
 1578 001c 5B8D     		ldrh	r3, [r3, #42]
 1579 001e 1846     		mov	r0, r3
 1580 0020 FFF7FEFF 		bl	getCaptureValue
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 39


 1581 0024 0346     		mov	r3, r0
 1582 0026 1A46     		mov	r2, r3
 1583 0028 7B68     		ldr	r3, [r7, #4]
 1584 002a 5A80     		strh	r2, [r3, #2]	@ movhi
 1585 002c 08E0     		b	.L115
 1586              	.L114:
 573:.\Tones.c     **** 	else
 574:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = getCaptureValue(toneList[HORN].lowestFrequency);
 1587              		.loc 1 574 0
 1588 002e 0C4B     		ldr	r3, .L116
 1589 0030 1B8D     		ldrh	r3, [r3, #40]
 1590 0032 1846     		mov	r0, r3
 1591 0034 FFF7FEFF 		bl	getCaptureValue
 1592 0038 0346     		mov	r3, r0
 1593 003a 1A46     		mov	r2, r3
 1594 003c 7B68     		ldr	r3, [r7, #4]
 1595 003e 5A80     		strh	r2, [r3, #2]	@ movhi
 1596              	.L115:
 575:.\Tones.c     **** 	
 576:.\Tones.c     **** 	currentSpeaker-> bFrequencyChange = !currentSpeaker-> bFrequencyChange;
 1597              		.loc 1 576 0
 1598 0040 7B68     		ldr	r3, [r7, #4]
 1599 0042 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1600 0044 002B     		cmp	r3, #0
 1601 0046 0CBF     		ite	eq
 1602 0048 0123     		moveq	r3, #1
 1603 004a 0023     		movne	r3, #0
 1604 004c DBB2     		uxtb	r3, r3
 1605 004e 1A46     		mov	r2, r3
 1606 0050 7B68     		ldr	r3, [r7, #4]
 1607 0052 1A74     		strb	r2, [r3, #16]
 577:.\Tones.c     ****         
 578:.\Tones.c     ****     return true;
 1608              		.loc 1 578 0
 1609 0054 0123     		movs	r3, #1
 1610              	.L113:
 579:.\Tones.c     **** }
 1611              		.loc 1 579 0
 1612 0056 1846     		mov	r0, r3
 1613 0058 0837     		adds	r7, r7, #8
 1614              		.cfi_def_cfa_offset 8
 1615 005a BD46     		mov	sp, r7
 1616              		.cfi_def_cfa_register 13
 1617              		@ sp needed
 1618 005c 80BD     		pop	{r7, pc}
 1619              	.L117:
 1620 005e 00BF     		.align	2
 1621              	.L116:
 1622 0060 00000000 		.word	toneList
 1623              		.cfi_endproc
 1624              	.LFE71:
 1625              		.size	playHornTone, .-playHornTone
 1626              		.section	.text.playGradualChangeTone,"ax",%progbits
 1627              		.align	2
 1628              		.thumb
 1629              		.thumb_func
 1630              		.type	playGradualChangeTone, %function
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 40


 1631              	playGradualChangeTone:
 1632              	.LFB72:
 580:.\Tones.c     **** 
 581:.\Tones.c     **** /*******************************************************************************
 582:.\Tones.c     **** * Function Name: playGradualChangeTone
 583:.\Tones.c     **** ********************************************************************************
 584:.\Tones.c     **** *
 585:.\Tones.c     **** * Summary:
 586:.\Tones.c     **** *  Updates the PWM frequency value for the wail, yelp, and phaser tones
 587:.\Tones.c     **** *
 588:.\Tones.c     **** * Parameters:  
 589:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 590:.\Tones.c     **** *   currentTone: The pointer to the struct for the specified tone
 591:.\Tones.c     **** *
 592:.\Tones.c     **** * Return:
 593:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 594:.\Tones.c     **** *
 595:.\Tones.c     **** *******************************************************************************/
 596:.\Tones.c     **** static uint8 playGradualChangeTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 597:.\Tones.c     **** {
 1633              		.loc 1 597 0
 1634              		.cfi_startproc
 1635              		@ args = 0, pretend = 0, frame = 16
 1636              		@ frame_needed = 1, uses_anonymous_args = 0
 1637 0000 80B5     		push	{r7, lr}
 1638              		.cfi_def_cfa_offset 8
 1639              		.cfi_offset 7, -8
 1640              		.cfi_offset 14, -4
 1641 0002 84B0     		sub	sp, sp, #16
 1642              		.cfi_def_cfa_offset 24
 1643 0004 00AF     		add	r7, sp, #0
 1644              		.cfi_def_cfa_register 7
 1645 0006 7860     		str	r0, [r7, #4]
 1646 0008 3960     		str	r1, [r7]
 598:.\Tones.c     **** 	if((currentSpeaker == NULL) || (currentTone == NULL))
 1647              		.loc 1 598 0
 1648 000a 7B68     		ldr	r3, [r7, #4]
 1649 000c 002B     		cmp	r3, #0
 1650 000e 02D0     		beq	.L119
 1651              		.loc 1 598 0 is_stmt 0 discriminator 1
 1652 0010 3B68     		ldr	r3, [r7]
 1653 0012 002B     		cmp	r3, #0
 1654 0014 01D1     		bne	.L120
 1655              	.L119:
 599:.\Tones.c     ****         return false;
 1656              		.loc 1 599 0 is_stmt 1
 1657 0016 0023     		movs	r3, #0
 1658 0018 80E0     		b	.L121
 1659              	.L120:
 600:.\Tones.c     ****     
 601:.\Tones.c     ****     uint16 highestPWMcount = getCaptureValue(currentTone->lowestFrequency);
 1660              		.loc 1 601 0
 1661 001a 3B68     		ldr	r3, [r7]
 1662 001c 1B88     		ldrh	r3, [r3]
 1663 001e 1846     		mov	r0, r3
 1664 0020 FFF7FEFF 		bl	getCaptureValue
 1665 0024 0346     		mov	r3, r0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 41


 1666 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 602:.\Tones.c     ****     uint16 lowestPWMcount = getCaptureValue(currentTone->highestFrequency);
 1667              		.loc 1 602 0
 1668 0028 3B68     		ldr	r3, [r7]
 1669 002a 5B88     		ldrh	r3, [r3, #2]
 1670 002c 1846     		mov	r0, r3
 1671 002e FFF7FEFF 		bl	getCaptureValue
 1672 0032 0346     		mov	r3, r0
 1673 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 603:.\Tones.c     ****     
 604:.\Tones.c     ****     if(!currentSpeaker->bTonePlaying)
 1674              		.loc 1 604 0
 1675 0036 7B68     		ldr	r3, [r7, #4]
 1676 0038 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 1677 003a 002B     		cmp	r3, #0
 1678 003c 08D1     		bne	.L122
 605:.\Tones.c     ****     {
 606:.\Tones.c     ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 1679              		.loc 1 606 0
 1680 003e FA89     		ldrh	r2, [r7, #14]	@ movhi
 1681 0040 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1682 0042 D31A     		subs	r3, r2, r3
 1683 0044 9AB2     		uxth	r2, r3
 1684 0046 7B68     		ldr	r3, [r7, #4]
 1685 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 607:.\Tones.c     ****         currentSpeaker->bTonePlaying = true;
 1686              		.loc 1 607 0
 1687 004a 7B68     		ldr	r3, [r7, #4]
 1688 004c 0122     		movs	r2, #1
 1689 004e 9A74     		strb	r2, [r3, #18]
 1690              	.L122:
 608:.\Tones.c     ****     }
 609:.\Tones.c     **** 
 610:.\Tones.c     **** 	if((currentTone->bWailEnable == true) && (currentSpeaker->bFrequencyChange == INCREASING))
 1691              		.loc 1 610 0
 1692 0050 3B68     		ldr	r3, [r7]
 1693 0052 9B79     		ldrb	r3, [r3, #6]	@ zero_extendqisi2
 1694 0054 012B     		cmp	r3, #1
 1695 0056 16D1     		bne	.L123
 1696              		.loc 1 610 0 is_stmt 0 discriminator 1
 1697 0058 7B68     		ldr	r3, [r7, #4]
 1698 005a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1699 005c 012B     		cmp	r3, #1
 1700 005e 12D1     		bne	.L123
 611:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1701              		.loc 1 611 0 is_stmt 1
 1702 0060 7B68     		ldr	r3, [r7, #4]
 1703 0062 9B88     		ldrh	r3, [r3, #4]
 1704 0064 1A46     		mov	r2, r3
 612:.\Tones.c     ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 1705              		.loc 1 612 0
 1706 0066 7B68     		ldr	r3, [r7, #4]
 1707 0068 9B88     		ldrh	r3, [r3, #4]
 611:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1708              		.loc 1 611 0
 1709 006a 03FB02F3 		mul	r3, r3, r2
 1710              		.loc 1 612 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 42


 1711 006e F989     		ldrh	r1, [r7, #14]
 1712 0070 BA89     		ldrh	r2, [r7, #12]
 1713 0072 8A1A     		subs	r2, r1, r2
 1714 0074 B3FBF2F3 		udiv	r3, r3, r2
 611:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 1715              		.loc 1 611 0
 1716 0078 9AB2     		uxth	r2, r3
 1717 007a BB89     		ldrh	r3, [r7, #12]	@ movhi
 1718 007c 1344     		add	r3, r3, r2
 1719 007e 9AB2     		uxth	r2, r3
 1720 0080 7B68     		ldr	r3, [r7, #4]
 1721 0082 5A80     		strh	r2, [r3, #2]	@ movhi
 1722 0084 06E0     		b	.L124
 1723              	.L123:
 613:.\Tones.c     **** 	else
 614:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;
 1724              		.loc 1 614 0
 1725 0086 7B68     		ldr	r3, [r7, #4]
 1726 0088 9A88     		ldrh	r2, [r3, #4]
 1727 008a BB89     		ldrh	r3, [r7, #12]	@ movhi
 1728 008c 1344     		add	r3, r3, r2
 1729 008e 9AB2     		uxth	r2, r3
 1730 0090 7B68     		ldr	r3, [r7, #4]
 1731 0092 5A80     		strh	r2, [r3, #2]	@ movhi
 1732              	.L124:
 615:.\Tones.c     **** 	
 616:.\Tones.c     **** 	if(currentSpeaker->bFrequencyChange == INCREASING)
 1733              		.loc 1 616 0
 1734 0094 7B68     		ldr	r3, [r7, #4]
 1735 0096 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1736 0098 012B     		cmp	r3, #1
 1737 009a 26D1     		bne	.L125
 617:.\Tones.c     **** 	{
 618:.\Tones.c     **** 		currentSpeaker->PWMcountDifference--;			
 1738              		.loc 1 618 0
 1739 009c 7B68     		ldr	r3, [r7, #4]
 1740 009e 9B88     		ldrh	r3, [r3, #4]
 1741 00a0 013B     		subs	r3, r3, #1
 1742 00a2 9AB2     		uxth	r2, r3
 1743 00a4 7B68     		ldr	r3, [r7, #4]
 1744 00a6 9A80     		strh	r2, [r3, #4]	@ movhi
 619:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference <= 0)
 1745              		.loc 1 619 0
 1746 00a8 7B68     		ldr	r3, [r7, #4]
 1747 00aa 9B88     		ldrh	r3, [r3, #4]
 1748 00ac 002B     		cmp	r3, #0
 1749 00ae 34D1     		bne	.L127
 620:.\Tones.c     **** 		{
 621:.\Tones.c     **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency			
 1750              		.loc 1 621 0
 1751 00b0 7B68     		ldr	r3, [r7, #4]
 1752 00b2 0022     		movs	r2, #0
 1753 00b4 9A80     		strh	r2, [r3, #4]	@ movhi
 622:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 1754              		.loc 1 622 0
 1755 00b6 7B68     		ldr	r3, [r7, #4]
 1756 00b8 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 43


 1757 00ba 002B     		cmp	r3, #0
 1758 00bc 0CBF     		ite	eq
 1759 00be 0123     		moveq	r3, #1
 1760 00c0 0023     		movne	r3, #0
 1761 00c2 DBB2     		uxtb	r3, r3
 1762 00c4 1A46     		mov	r2, r3
 1763 00c6 7B68     		ldr	r3, [r7, #4]
 1764 00c8 1A74     		strb	r2, [r3, #16]
 623:.\Tones.c     ****             
 624:.\Tones.c     ****             if(bEchoEnable)
 1765              		.loc 1 624 0
 1766 00ca 164B     		ldr	r3, .L128
 1767 00cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1768 00ce 002B     		cmp	r3, #0
 1769 00d0 23D0     		beq	.L127
 625:.\Tones.c     ****             {
 626:.\Tones.c     ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 1770              		.loc 1 626 0
 1771 00d2 7B68     		ldr	r3, [r7, #4]
 1772 00d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1773 00d6 0120     		movs	r0, #1
 1774 00d8 1946     		mov	r1, r3
 1775 00da 0022     		movs	r2, #0
 1776 00dc 0123     		movs	r3, #1
 1777 00de FFF7FEFF 		bl	playPWMTone
 627:.\Tones.c     ****                 bEchoEnable = false;
 1778              		.loc 1 627 0
 1779 00e2 104B     		ldr	r3, .L128
 1780 00e4 0022     		movs	r2, #0
 1781 00e6 1A70     		strb	r2, [r3]
 1782 00e8 17E0     		b	.L127
 1783              	.L125:
 628:.\Tones.c     ****             }
 629:.\Tones.c     **** 		}
 630:.\Tones.c     **** 	}
 631:.\Tones.c     **** 	else
 632:.\Tones.c     **** 	{
 633:.\Tones.c     **** 		currentSpeaker->PWMcountDifference++;
 1784              		.loc 1 633 0
 1785 00ea 7B68     		ldr	r3, [r7, #4]
 1786 00ec 9B88     		ldrh	r3, [r3, #4]
 1787 00ee 0133     		adds	r3, r3, #1
 1788 00f0 9AB2     		uxth	r2, r3
 1789 00f2 7B68     		ldr	r3, [r7, #4]
 1790 00f4 9A80     		strh	r2, [r3, #4]	@ movhi
 634:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 1791              		.loc 1 634 0
 1792 00f6 7B68     		ldr	r3, [r7, #4]
 1793 00f8 9B88     		ldrh	r3, [r3, #4]
 1794 00fa 1946     		mov	r1, r3
 1795 00fc FA89     		ldrh	r2, [r7, #14]
 1796 00fe BB89     		ldrh	r3, [r7, #12]
 1797 0100 D31A     		subs	r3, r2, r3
 1798 0102 9942     		cmp	r1, r3
 1799 0104 09DB     		blt	.L127
 635:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 1800              		.loc 1 635 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 44


 1801 0106 7B68     		ldr	r3, [r7, #4]
 1802 0108 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 1803 010a 002B     		cmp	r3, #0
 1804 010c 0CBF     		ite	eq
 1805 010e 0123     		moveq	r3, #1
 1806 0110 0023     		movne	r3, #0
 1807 0112 DBB2     		uxtb	r3, r3
 1808 0114 1A46     		mov	r2, r3
 1809 0116 7B68     		ldr	r3, [r7, #4]
 1810 0118 1A74     		strb	r2, [r3, #16]
 1811              	.L127:
 636:.\Tones.c     **** 	}
 637:.\Tones.c     **** 	
 638:.\Tones.c     **** 	return true;
 1812              		.loc 1 638 0
 1813 011a 0123     		movs	r3, #1
 1814              	.L121:
 639:.\Tones.c     **** }
 1815              		.loc 1 639 0
 1816 011c 1846     		mov	r0, r3
 1817 011e 1037     		adds	r7, r7, #16
 1818              		.cfi_def_cfa_offset 8
 1819 0120 BD46     		mov	sp, r7
 1820              		.cfi_def_cfa_register 13
 1821              		@ sp needed
 1822 0122 80BD     		pop	{r7, pc}
 1823              	.L129:
 1824              		.align	2
 1825              	.L128:
 1826 0124 01000000 		.word	bEchoEnable
 1827              		.cfi_endproc
 1828              	.LFE72:
 1829              		.size	playGradualChangeTone, .-playGradualChangeTone
 1830              		.section	.text.playManualWailTone,"ax",%progbits
 1831              		.align	2
 1832              		.thumb
 1833              		.thumb_func
 1834              		.type	playManualWailTone, %function
 1835              	playManualWailTone:
 1836              	.LFB73:
 640:.\Tones.c     **** 
 641:.\Tones.c     **** /*******************************************************************************
 642:.\Tones.c     **** * Function Name: playManualWailTone
 643:.\Tones.c     **** ********************************************************************************
 644:.\Tones.c     **** *
 645:.\Tones.c     **** * Summary:
 646:.\Tones.c     **** *  Updates the PWM frequency value for the manual wail tone
 647:.\Tones.c     **** *
 648:.\Tones.c     **** * Parameters:  
 649:.\Tones.c     **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 650:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 651:.\Tones.c     **** *
 652:.\Tones.c     **** * Return:
 653:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 654:.\Tones.c     **** *
 655:.\Tones.c     **** *******************************************************************************/
 656:.\Tones.c     **** static uint8 playManualWailTone(uint8 bSpeaker, CurrentToneData* currentSpeaker)
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 45


 657:.\Tones.c     **** {
 1837              		.loc 1 657 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 16
 1840              		@ frame_needed = 1, uses_anonymous_args = 0
 1841 0000 80B5     		push	{r7, lr}
 1842              		.cfi_def_cfa_offset 8
 1843              		.cfi_offset 7, -8
 1844              		.cfi_offset 14, -4
 1845 0002 84B0     		sub	sp, sp, #16
 1846              		.cfi_def_cfa_offset 24
 1847 0004 00AF     		add	r7, sp, #0
 1848              		.cfi_def_cfa_register 7
 1849 0006 0346     		mov	r3, r0
 1850 0008 3960     		str	r1, [r7]
 1851 000a FB71     		strb	r3, [r7, #7]
 658:.\Tones.c     **** 	if((bSpeaker != false) && (bSpeaker != true))
 1852              		.loc 1 658 0
 1853 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1854 000e 002B     		cmp	r3, #0
 1855 0010 04D0     		beq	.L131
 1856              		.loc 1 658 0 is_stmt 0 discriminator 1
 1857 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1858 0014 012B     		cmp	r3, #1
 1859 0016 01D0     		beq	.L131
 659:.\Tones.c     ****         return false;
 1860              		.loc 1 659 0 is_stmt 1
 1861 0018 0023     		movs	r3, #0
 1862 001a 67E0     		b	.L132
 1863              	.L131:
 660:.\Tones.c     ****     
 661:.\Tones.c     ****     if(currentSpeaker == NULL)
 1864              		.loc 1 661 0
 1865 001c 3B68     		ldr	r3, [r7]
 1866 001e 002B     		cmp	r3, #0
 1867 0020 01D1     		bne	.L133
 662:.\Tones.c     ****         return false;
 1868              		.loc 1 662 0
 1869 0022 0023     		movs	r3, #0
 1870 0024 62E0     		b	.L132
 1871              	.L133:
 663:.\Tones.c     ****     
 664:.\Tones.c     ****     uint16 highestPWMcount = getCaptureValue(toneList[MANUAL_WAIL].lowestFrequency);
 1872              		.loc 1 664 0
 1873 0026 334B     		ldr	r3, .L139
 1874 0028 1B8F     		ldrh	r3, [r3, #56]
 1875 002a 1846     		mov	r0, r3
 1876 002c FFF7FEFF 		bl	getCaptureValue
 1877 0030 0346     		mov	r3, r0
 1878 0032 FB81     		strh	r3, [r7, #14]	@ movhi
 665:.\Tones.c     ****     uint16 lowestPWMcount = getCaptureValue(toneList[MANUAL_WAIL].highestFrequency);
 1879              		.loc 1 665 0
 1880 0034 2F4B     		ldr	r3, .L139
 1881 0036 5B8F     		ldrh	r3, [r3, #58]
 1882 0038 1846     		mov	r0, r3
 1883 003a FFF7FEFF 		bl	getCaptureValue
 1884 003e 0346     		mov	r3, r0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 46


 1885 0040 BB81     		strh	r3, [r7, #12]	@ movhi
 666:.\Tones.c     **** 	
 667:.\Tones.c     **** 	if(!currentSpeaker->bManualWailActiveFlag)
 1886              		.loc 1 667 0
 1887 0042 3B68     		ldr	r3, [r7]
 1888 0044 DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1889 0046 002B     		cmp	r3, #0
 1890 0048 08D1     		bne	.L134
 668:.\Tones.c     **** 	{
 669:.\Tones.c     ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 1891              		.loc 1 669 0
 1892 004a FA89     		ldrh	r2, [r7, #14]	@ movhi
 1893 004c BB89     		ldrh	r3, [r7, #12]	@ movhi
 1894 004e D31A     		subs	r3, r2, r3
 1895 0050 9AB2     		uxth	r2, r3
 1896 0052 3B68     		ldr	r3, [r7]
 1897 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 670:.\Tones.c     ****     	currentSpeaker->bManualWailActiveFlag = true;
 1898              		.loc 1 670 0
 1899 0056 3B68     		ldr	r3, [r7]
 1900 0058 0122     		movs	r2, #1
 1901 005a DA74     		strb	r2, [r3, #19]
 1902              	.L134:
 671:.\Tones.c     **** 	}	
 672:.\Tones.c     **** 		
 673:.\Tones.c     **** 	if(currentSpeaker->bManualWailActiveFlag)
 1903              		.loc 1 673 0
 1904 005c 3B68     		ldr	r3, [r7]
 1905 005e DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1906 0060 002B     		cmp	r3, #0
 1907 0062 38D0     		beq	.L135
 674:.\Tones.c     **** 	{
 675:.\Tones.c     **** 		if(currentSpeaker->bManualWailInputFlag)
 1908              		.loc 1 675 0
 1909 0064 3B68     		ldr	r3, [r7]
 1910 0066 1B7D     		ldrb	r3, [r3, #20]	@ zero_extendqisi2
 1911 0068 002B     		cmp	r3, #0
 1912 006a 1CD0     		beq	.L136
 676:.\Tones.c     **** 		{
 677:.\Tones.c     **** 			currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiff
 1913              		.loc 1 677 0
 1914 006c 3B68     		ldr	r3, [r7]
 1915 006e 9B88     		ldrh	r3, [r3, #4]
 1916 0070 1A46     		mov	r2, r3
 678:.\Tones.c     ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
 1917              		.loc 1 678 0
 1918 0072 3B68     		ldr	r3, [r7]
 1919 0074 9B88     		ldrh	r3, [r3, #4]
 677:.\Tones.c     ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
 1920              		.loc 1 677 0
 1921 0076 03FB02F3 		mul	r3, r3, r2
 1922              		.loc 1 678 0
 1923 007a F989     		ldrh	r1, [r7, #14]
 1924 007c BA89     		ldrh	r2, [r7, #12]
 1925 007e 8A1A     		subs	r2, r1, r2
 1926 0080 B3FBF2F3 		udiv	r3, r3, r2
 677:.\Tones.c     ****                                 (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMc
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 47


 1927              		.loc 1 677 0
 1928 0084 9AB2     		uxth	r2, r3
 1929 0086 BB89     		ldrh	r3, [r7, #12]	@ movhi
 1930 0088 1344     		add	r3, r3, r2
 1931 008a 9AB2     		uxth	r2, r3
 1932 008c 3B68     		ldr	r3, [r7]
 1933 008e 5A80     		strh	r2, [r3, #2]	@ movhi
 679:.\Tones.c     ****             
 680:.\Tones.c     ****             if(currentSpeaker->PWMcountDifference > 0)//Reached highest frequency and stays there
 1934              		.loc 1 680 0
 1935 0090 3B68     		ldr	r3, [r7]
 1936 0092 9B88     		ldrh	r3, [r3, #4]
 1937 0094 002B     		cmp	r3, #0
 1938 0096 1ED0     		beq	.L135
 681:.\Tones.c     **** 			    currentSpeaker->PWMcountDifference--;
 1939              		.loc 1 681 0
 1940 0098 3B68     		ldr	r3, [r7]
 1941 009a 9B88     		ldrh	r3, [r3, #4]
 1942 009c 013B     		subs	r3, r3, #1
 1943 009e 9AB2     		uxth	r2, r3
 1944 00a0 3B68     		ldr	r3, [r7]
 1945 00a2 9A80     		strh	r2, [r3, #4]	@ movhi
 1946 00a4 17E0     		b	.L135
 1947              	.L136:
 682:.\Tones.c     **** 		}
 683:.\Tones.c     **** 		else
 684:.\Tones.c     **** 		{
 685:.\Tones.c     **** 			currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;
 1948              		.loc 1 685 0
 1949 00a6 3B68     		ldr	r3, [r7]
 1950 00a8 9A88     		ldrh	r2, [r3, #4]
 1951 00aa BB89     		ldrh	r3, [r7, #12]	@ movhi
 1952 00ac 1344     		add	r3, r3, r2
 1953 00ae 9AB2     		uxth	r2, r3
 1954 00b0 3B68     		ldr	r3, [r7]
 1955 00b2 5A80     		strh	r2, [r3, #2]	@ movhi
 686:.\Tones.c     **** 			currentSpeaker->PWMcountDifference++;
 1956              		.loc 1 686 0
 1957 00b4 3B68     		ldr	r3, [r7]
 1958 00b6 9B88     		ldrh	r3, [r3, #4]
 1959 00b8 0133     		adds	r3, r3, #1
 1960 00ba 9AB2     		uxth	r2, r3
 1961 00bc 3B68     		ldr	r3, [r7]
 1962 00be 9A80     		strh	r2, [r3, #4]	@ movhi
 687:.\Tones.c     **** 			
 688:.\Tones.c     **** 			if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 1963              		.loc 1 688 0
 1964 00c0 3B68     		ldr	r3, [r7]
 1965 00c2 9B88     		ldrh	r3, [r3, #4]
 1966 00c4 1946     		mov	r1, r3
 1967 00c6 FA89     		ldrh	r2, [r7, #14]
 1968 00c8 BB89     		ldrh	r3, [r7, #12]
 1969 00ca D31A     		subs	r3, r2, r3
 1970 00cc 9942     		cmp	r1, r3
 1971 00ce 02DB     		blt	.L135
 689:.\Tones.c     **** 				currentSpeaker->bManualWailActiveFlag = false; //Reached lowest frequency and finishes tone
 1972              		.loc 1 689 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 48


 1973 00d0 3B68     		ldr	r3, [r7]
 1974 00d2 0022     		movs	r2, #0
 1975 00d4 DA74     		strb	r2, [r3, #19]
 1976              	.L135:
 690:.\Tones.c     **** 		}
 691:.\Tones.c     **** 	}
 692:.\Tones.c     ****     
 693:.\Tones.c     ****     if(!currentSpeaker->bManualWailActiveFlag)
 1977              		.loc 1 693 0
 1978 00d6 3B68     		ldr	r3, [r7]
 1979 00d8 DB7C     		ldrb	r3, [r3, #19]	@ zero_extendqisi2
 1980 00da 002B     		cmp	r3, #0
 1981 00dc 05D1     		bne	.L138
 694:.\Tones.c     ****     {
 695:.\Tones.c     ****         deactivateManualWail(); //Disable manual wail for both speakers after first ramp down
 1982              		.loc 1 695 0
 1983 00de FFF7FEFF 		bl	deactivateManualWail
 696:.\Tones.c     ****         //ModeStatusISR_SetPending();
 697:.\Tones.c     ****         disableAudioAndPWM();
 1984              		.loc 1 697 0
 1985 00e2 FFF7FEFF 		bl	disableAudioAndPWM
 698:.\Tones.c     ****         disableBothSpeakers();
 1986              		.loc 1 698 0
 1987 00e6 FFF7FEFF 		bl	disableBothSpeakers
 1988              	.L138:
 699:.\Tones.c     ****     }
 700:.\Tones.c     ****     
 701:.\Tones.c     ****     return true;
 1989              		.loc 1 701 0
 1990 00ea 0123     		movs	r3, #1
 1991              	.L132:
 702:.\Tones.c     **** }
 1992              		.loc 1 702 0
 1993 00ec 1846     		mov	r0, r3
 1994 00ee 1037     		adds	r7, r7, #16
 1995              		.cfi_def_cfa_offset 8
 1996 00f0 BD46     		mov	sp, r7
 1997              		.cfi_def_cfa_register 13
 1998              		@ sp needed
 1999 00f2 80BD     		pop	{r7, pc}
 2000              	.L140:
 2001              		.align	2
 2002              	.L139:
 2003 00f4 00000000 		.word	toneList
 2004              		.cfi_endproc
 2005              	.LFE73:
 2006              		.size	playManualWailTone, .-playManualWailTone
 2007              		.section	.text.playHighLowTone,"ax",%progbits
 2008              		.align	2
 2009              		.thumb
 2010              		.thumb_func
 2011              		.type	playHighLowTone, %function
 2012              	playHighLowTone:
 2013              	.LFB74:
 703:.\Tones.c     **** 
 704:.\Tones.c     **** /*******************************************************************************
 705:.\Tones.c     **** * Function Name: playHighLowTone
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 49


 706:.\Tones.c     **** ********************************************************************************
 707:.\Tones.c     **** *
 708:.\Tones.c     **** * Summary:
 709:.\Tones.c     **** *  Updates the PWM frequency value for the high low tone
 710:.\Tones.c     **** *
 711:.\Tones.c     **** * Parameters:  
 712:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 713:.\Tones.c     **** *   currentTone: The pointer to the struct for the specified tone
 714:.\Tones.c     **** *
 715:.\Tones.c     **** * Return:
 716:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 717:.\Tones.c     **** *
 718:.\Tones.c     **** *******************************************************************************/
 719:.\Tones.c     **** static uint8 playHighLowTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 720:.\Tones.c     **** {
 2014              		.loc 1 720 0
 2015              		.cfi_startproc
 2016              		@ args = 0, pretend = 0, frame = 8
 2017              		@ frame_needed = 1, uses_anonymous_args = 0
 2018 0000 80B5     		push	{r7, lr}
 2019              		.cfi_def_cfa_offset 8
 2020              		.cfi_offset 7, -8
 2021              		.cfi_offset 14, -4
 2022 0002 82B0     		sub	sp, sp, #8
 2023              		.cfi_def_cfa_offset 16
 2024 0004 00AF     		add	r7, sp, #0
 2025              		.cfi_def_cfa_register 7
 2026 0006 7860     		str	r0, [r7, #4]
 2027 0008 3960     		str	r1, [r7]
 721:.\Tones.c     ****     static const uint16 HIGH_LOW_COUNT_LIMIT = 250;
 722:.\Tones.c     ****     
 723:.\Tones.c     ****     if((currentSpeaker == NULL) || (currentTone == NULL))
 2028              		.loc 1 723 0
 2029 000a 7B68     		ldr	r3, [r7, #4]
 2030 000c 002B     		cmp	r3, #0
 2031 000e 02D0     		beq	.L142
 2032              		.loc 1 723 0 is_stmt 0 discriminator 1
 2033 0010 3B68     		ldr	r3, [r7]
 2034 0012 002B     		cmp	r3, #0
 2035 0014 01D1     		bne	.L143
 2036              	.L142:
 724:.\Tones.c     ****         return false;
 2037              		.loc 1 724 0 is_stmt 1
 2038 0016 0023     		movs	r3, #0
 2039 0018 54E0     		b	.L144
 2040              	.L143:
 725:.\Tones.c     ****     
 726:.\Tones.c     ****     if(!currentSpeaker->bTonePlaying)
 2041              		.loc 1 726 0
 2042 001a 7B68     		ldr	r3, [r7, #4]
 2043 001c 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2044 001e 002B     		cmp	r3, #0
 2045 0020 05D1     		bne	.L145
 727:.\Tones.c     ****     {
 728:.\Tones.c     ****         currentSpeaker->PWMcountDifference = 0;
 2046              		.loc 1 728 0
 2047 0022 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 50


 2048 0024 0022     		movs	r2, #0
 2049 0026 9A80     		strh	r2, [r3, #4]	@ movhi
 729:.\Tones.c     ****         currentSpeaker->bTonePlaying = true;
 2050              		.loc 1 729 0
 2051 0028 7B68     		ldr	r3, [r7, #4]
 2052 002a 0122     		movs	r2, #1
 2053 002c 9A74     		strb	r2, [r3, #18]
 2054              	.L145:
 730:.\Tones.c     ****     }
 731:.\Tones.c     ****     
 732:.\Tones.c     ****     if(!currentSpeaker->bHornPWMenable && currentTone->bHornEnable)
 2055              		.loc 1 732 0
 2056 002e 7B68     		ldr	r3, [r7, #4]
 2057 0030 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
 2058 0032 002B     		cmp	r3, #0
 2059 0034 06D1     		bne	.L146
 2060              		.loc 1 732 0 is_stmt 0 discriminator 1
 2061 0036 3B68     		ldr	r3, [r7]
 2062 0038 DB79     		ldrb	r3, [r3, #7]	@ zero_extendqisi2
 2063 003a 002B     		cmp	r3, #0
 2064 003c 02D0     		beq	.L146
 733:.\Tones.c     ****         currentSpeaker->bHornPWMenable = true;
 2065              		.loc 1 733 0 is_stmt 1
 2066 003e 7B68     		ldr	r3, [r7, #4]
 2067 0040 0122     		movs	r2, #1
 2068 0042 5A75     		strb	r2, [r3, #21]
 2069              	.L146:
 734:.\Tones.c     **** 		
 735:.\Tones.c     **** 	if(currentSpeaker->PWMcountDifference < HIGH_LOW_COUNT_LIMIT)
 2070              		.loc 1 735 0
 2071 0044 7B68     		ldr	r3, [r7, #4]
 2072 0046 9B88     		ldrh	r3, [r3, #4]
 2073 0048 FA22     		movs	r2, #250
 2074 004a 9342     		cmp	r3, r2
 2075 004c 1DD2     		bcs	.L147
 736:.\Tones.c     **** 	{
 737:.\Tones.c     **** 		if(currentSpeaker->bFrequencyChange == HIGH_PITCH)
 2076              		.loc 1 737 0
 2077 004e 7B68     		ldr	r3, [r7, #4]
 2078 0050 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2079 0052 012B     		cmp	r3, #1
 2080 0054 09D1     		bne	.L148
 738:.\Tones.c     **** 			currentSpeaker->PWMperiodCount = getCaptureValue(currentTone->highestFrequency);
 2081              		.loc 1 738 0
 2082 0056 3B68     		ldr	r3, [r7]
 2083 0058 5B88     		ldrh	r3, [r3, #2]
 2084 005a 1846     		mov	r0, r3
 2085 005c FFF7FEFF 		bl	getCaptureValue
 2086 0060 0346     		mov	r3, r0
 2087 0062 1A46     		mov	r2, r3
 2088 0064 7B68     		ldr	r3, [r7, #4]
 2089 0066 5A80     		strh	r2, [r3, #2]	@ movhi
 2090 0068 08E0     		b	.L149
 2091              	.L148:
 739:.\Tones.c     **** 		else
 740:.\Tones.c     **** 			currentSpeaker->PWMperiodCount = getCaptureValue(currentTone->lowestFrequency);
 2092              		.loc 1 740 0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 51


 2093 006a 3B68     		ldr	r3, [r7]
 2094 006c 1B88     		ldrh	r3, [r3]
 2095 006e 1846     		mov	r0, r3
 2096 0070 FFF7FEFF 		bl	getCaptureValue
 2097 0074 0346     		mov	r3, r0
 2098 0076 1A46     		mov	r2, r3
 2099 0078 7B68     		ldr	r3, [r7, #4]
 2100 007a 5A80     		strh	r2, [r3, #2]	@ movhi
 2101              	.L149:
 741:.\Tones.c     ****             
 742:.\Tones.c     ****         currentSpeaker->PWMcountDifference++;
 2102              		.loc 1 742 0
 2103 007c 7B68     		ldr	r3, [r7, #4]
 2104 007e 9B88     		ldrh	r3, [r3, #4]
 2105 0080 0133     		adds	r3, r3, #1
 2106 0082 9AB2     		uxth	r2, r3
 2107 0084 7B68     		ldr	r3, [r7, #4]
 2108 0086 9A80     		strh	r2, [r3, #4]	@ movhi
 2109 0088 1BE0     		b	.L150
 2110              	.L147:
 743:.\Tones.c     **** 	}
 744:.\Tones.c     ****     else
 745:.\Tones.c     ****     {
 746:.\Tones.c     ****         if(bEchoEnable)
 2111              		.loc 1 746 0
 2112 008a 104B     		ldr	r3, .L152
 2113 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2114 008e 002B     		cmp	r3, #0
 2115 0090 0AD0     		beq	.L151
 747:.\Tones.c     ****         {
 748:.\Tones.c     ****             playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2116              		.loc 1 748 0
 2117 0092 7B68     		ldr	r3, [r7, #4]
 2118 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2119 0096 0120     		movs	r0, #1
 2120 0098 1946     		mov	r1, r3
 2121 009a 0022     		movs	r2, #0
 2122 009c 0123     		movs	r3, #1
 2123 009e FFF7FEFF 		bl	playPWMTone
 749:.\Tones.c     ****             bEchoEnable = false;
 2124              		.loc 1 749 0
 2125 00a2 0A4B     		ldr	r3, .L152
 2126 00a4 0022     		movs	r2, #0
 2127 00a6 1A70     		strb	r2, [r3]
 2128              	.L151:
 750:.\Tones.c     ****         }
 751:.\Tones.c     ****         
 752:.\Tones.c     ****         currentSpeaker->PWMcountDifference = 0;
 2129              		.loc 1 752 0
 2130 00a8 7B68     		ldr	r3, [r7, #4]
 2131 00aa 0022     		movs	r2, #0
 2132 00ac 9A80     		strh	r2, [r3, #4]	@ movhi
 753:.\Tones.c     ****         currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2133              		.loc 1 753 0
 2134 00ae 7B68     		ldr	r3, [r7, #4]
 2135 00b0 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2136 00b2 002B     		cmp	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 52


 2137 00b4 0CBF     		ite	eq
 2138 00b6 0123     		moveq	r3, #1
 2139 00b8 0023     		movne	r3, #0
 2140 00ba DBB2     		uxtb	r3, r3
 2141 00bc 1A46     		mov	r2, r3
 2142 00be 7B68     		ldr	r3, [r7, #4]
 2143 00c0 1A74     		strb	r2, [r3, #16]
 2144              	.L150:
 754:.\Tones.c     ****     }
 755:.\Tones.c     ****     
 756:.\Tones.c     ****     return true;
 2145              		.loc 1 756 0
 2146 00c2 0123     		movs	r3, #1
 2147              	.L144:
 757:.\Tones.c     **** }
 2148              		.loc 1 757 0
 2149 00c4 1846     		mov	r0, r3
 2150 00c6 0837     		adds	r7, r7, #8
 2151              		.cfi_def_cfa_offset 8
 2152 00c8 BD46     		mov	sp, r7
 2153              		.cfi_def_cfa_register 13
 2154              		@ sp needed
 2155 00ca 80BD     		pop	{r7, pc}
 2156              	.L153:
 2157              		.align	2
 2158              	.L152:
 2159 00cc 01000000 		.word	bEchoEnable
 2160              		.cfi_endproc
 2161              	.LFE74:
 2162              		.size	playHighLowTone, .-playHighLowTone
 2163              		.section	.text.playMechanicalTone,"ax",%progbits
 2164              		.align	2
 2165              		.thumb
 2166              		.thumb_func
 2167              		.type	playMechanicalTone, %function
 2168              	playMechanicalTone:
 2169              	.LFB75:
 758:.\Tones.c     **** 
 759:.\Tones.c     **** /*******************************************************************************
 760:.\Tones.c     **** * Function Name: playMechanicalTone
 761:.\Tones.c     **** ********************************************************************************
 762:.\Tones.c     **** *
 763:.\Tones.c     **** * Summary:
 764:.\Tones.c     **** *  Updates the PWM frequency value for the mechanical tone
 765:.\Tones.c     **** *
 766:.\Tones.c     **** * Parameters:  
 767:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 768:.\Tones.c     **** *
 769:.\Tones.c     **** * Return:
 770:.\Tones.c     **** *   TRUE for valid inputs, FALSE otherwise
 771:.\Tones.c     **** *
 772:.\Tones.c     **** *******************************************************************************/
 773:.\Tones.c     **** static uint8 playMechanicalTone(CurrentToneData* currentSpeaker)
 774:.\Tones.c     **** {
 2170              		.loc 1 774 0
 2171              		.cfi_startproc
 2172              		@ args = 0, pretend = 0, frame = 16
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 53


 2173              		@ frame_needed = 1, uses_anonymous_args = 0
 2174 0000 80B5     		push	{r7, lr}
 2175              		.cfi_def_cfa_offset 8
 2176              		.cfi_offset 7, -8
 2177              		.cfi_offset 14, -4
 2178 0002 84B0     		sub	sp, sp, #16
 2179              		.cfi_def_cfa_offset 24
 2180 0004 00AF     		add	r7, sp, #0
 2181              		.cfi_def_cfa_register 7
 2182 0006 7860     		str	r0, [r7, #4]
 775:.\Tones.c     ****     static const uint16 RAMP_UP_INITIAL_DIFFERENCE = 15;
 776:.\Tones.c     ****     static const uint16 RAMP_UP_COUNT_LIMIT = 25;
 777:.\Tones.c     ****     uint16 currentDifference = 1;   
 2183              		.loc 1 777 0
 2184 0008 0123     		movs	r3, #1
 2185 000a FB81     		strh	r3, [r7, #14]	@ movhi
 778:.\Tones.c     ****     
 779:.\Tones.c     ****     if(currentSpeaker == NULL)
 2186              		.loc 1 779 0
 2187 000c 7B68     		ldr	r3, [r7, #4]
 2188 000e 002B     		cmp	r3, #0
 2189 0010 01D1     		bne	.L155
 780:.\Tones.c     ****         return false;
 2190              		.loc 1 780 0
 2191 0012 0023     		movs	r3, #0
 2192 0014 9EE0     		b	.L156
 2193              	.L155:
 781:.\Tones.c     ****     
 782:.\Tones.c     ****     uint16 highestPWMcount = getCaptureValue(toneList[MECHANICAL].lowestFrequency);
 2194              		.loc 1 782 0
 2195 0016 514B     		ldr	r3, .L165
 2196 0018 1B8E     		ldrh	r3, [r3, #48]
 2197 001a 1846     		mov	r0, r3
 2198 001c FFF7FEFF 		bl	getCaptureValue
 2199 0020 0346     		mov	r3, r0
 2200 0022 BB81     		strh	r3, [r7, #12]	@ movhi
 783:.\Tones.c     ****     uint16 lowestPWMcount = getCaptureValue(toneList[MECHANICAL].highestFrequency);
 2201              		.loc 1 783 0
 2202 0024 4D4B     		ldr	r3, .L165
 2203 0026 5B8E     		ldrh	r3, [r3, #50]
 2204 0028 1846     		mov	r0, r3
 2205 002a FFF7FEFF 		bl	getCaptureValue
 2206 002e 0346     		mov	r3, r0
 2207 0030 7B81     		strh	r3, [r7, #10]	@ movhi
 784:.\Tones.c     ****     
 785:.\Tones.c     ****     if(!currentSpeaker->bTonePlaying)
 2208              		.loc 1 785 0
 2209 0032 7B68     		ldr	r3, [r7, #4]
 2210 0034 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2211 0036 002B     		cmp	r3, #0
 2212 0038 0ED1     		bne	.L157
 786:.\Tones.c     ****     {
 787:.\Tones.c     ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 2213              		.loc 1 787 0
 2214 003a BA89     		ldrh	r2, [r7, #12]	@ movhi
 2215 003c 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2216 003e D31A     		subs	r3, r2, r3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 54


 2217 0040 9AB2     		uxth	r2, r3
 2218 0042 7B68     		ldr	r3, [r7, #4]
 2219 0044 9A80     		strh	r2, [r3, #4]	@ movhi
 788:.\Tones.c     ****         currentSpeaker->bTonePlaying = true;
 2220              		.loc 1 788 0
 2221 0046 7B68     		ldr	r3, [r7, #4]
 2222 0048 0122     		movs	r2, #1
 2223 004a 9A74     		strb	r2, [r3, #18]
 789:.\Tones.c     ****         currentSpeaker->bHornPWMenable = true;
 2224              		.loc 1 789 0
 2225 004c 7B68     		ldr	r3, [r7, #4]
 2226 004e 0122     		movs	r2, #1
 2227 0050 5A75     		strb	r2, [r3, #21]
 790:.\Tones.c     ****         currentSpeaker->mechanicalRampUpCount = 0;
 2228              		.loc 1 790 0
 2229 0052 7B68     		ldr	r3, [r7, #4]
 2230 0054 0022     		movs	r2, #0
 2231 0056 DA80     		strh	r2, [r3, #6]	@ movhi
 2232              	.L157:
 791:.\Tones.c     ****     }
 792:.\Tones.c     **** 
 793:.\Tones.c     **** 	if(currentSpeaker->bFrequencyChange == INCREASING)
 2233              		.loc 1 793 0
 2234 0058 7B68     		ldr	r3, [r7, #4]
 2235 005a 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2236 005c 012B     		cmp	r3, #1
 2237 005e 56D1     		bne	.L158
 794:.\Tones.c     ****     {
 795:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDiffe
 2238              		.loc 1 795 0
 2239 0060 7B68     		ldr	r3, [r7, #4]
 2240 0062 9B88     		ldrh	r3, [r3, #4]
 2241 0064 1A46     		mov	r2, r3
 796:.\Tones.c     ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2242              		.loc 1 796 0
 2243 0066 7B68     		ldr	r3, [r7, #4]
 2244 0068 9B88     		ldrh	r3, [r3, #4]
 795:.\Tones.c     ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2245              		.loc 1 795 0
 2246 006a 03FB02F3 		mul	r3, r3, r2
 2247              		.loc 1 796 0
 2248 006e B989     		ldrh	r1, [r7, #12]
 2249 0070 7A89     		ldrh	r2, [r7, #10]
 2250 0072 8A1A     		subs	r2, r1, r2
 2251 0074 B3FBF2F3 		udiv	r3, r3, r2
 795:.\Tones.c     ****                             (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highestPWMcount
 2252              		.loc 1 795 0
 2253 0078 9AB2     		uxth	r2, r3
 2254 007a 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2255 007c 1344     		add	r3, r3, r2
 2256 007e 9AB2     		uxth	r2, r3
 2257 0080 7B68     		ldr	r3, [r7, #4]
 2258 0082 5A80     		strh	r2, [r3, #2]	@ movhi
 797:.\Tones.c     ****         
 798:.\Tones.c     ****         if(currentSpeaker->mechanicalRampUpCount < RAMP_UP_COUNT_LIMIT)
 2259              		.loc 1 798 0
 2260 0084 7B68     		ldr	r3, [r7, #4]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 55


 2261 0086 DB88     		ldrh	r3, [r3, #6]
 2262 0088 1922     		movs	r2, #25
 2263 008a 9342     		cmp	r3, r2
 2264 008c 02D2     		bcs	.L159
 799:.\Tones.c     ****             currentDifference = RAMP_UP_INITIAL_DIFFERENCE;
 2265              		.loc 1 799 0
 2266 008e 0F23     		movs	r3, #15
 2267 0090 FB81     		strh	r3, [r7, #14]	@ movhi
 2268 0092 01E0     		b	.L160
 2269              	.L159:
 800:.\Tones.c     ****         else
 801:.\Tones.c     ****             currentDifference = 1;
 2270              		.loc 1 801 0
 2271 0094 0123     		movs	r3, #1
 2272 0096 FB81     		strh	r3, [r7, #14]	@ movhi
 2273              	.L160:
 802:.\Tones.c     ****         
 803:.\Tones.c     ****         currentSpeaker->mechanicalRampUpCount++;
 2274              		.loc 1 803 0
 2275 0098 7B68     		ldr	r3, [r7, #4]
 2276 009a DB88     		ldrh	r3, [r3, #6]
 2277 009c 0133     		adds	r3, r3, #1
 2278 009e 9AB2     		uxth	r2, r3
 2279 00a0 7B68     		ldr	r3, [r7, #4]
 2280 00a2 DA80     		strh	r2, [r3, #6]	@ movhi
 804:.\Tones.c     ****         
 805:.\Tones.c     ****         if(currentSpeaker->PWMcountDifference > 0 && currentSpeaker->PWMcountDifference < currentDi
 2281              		.loc 1 805 0
 2282 00a4 7B68     		ldr	r3, [r7, #4]
 2283 00a6 9B88     		ldrh	r3, [r3, #4]
 2284 00a8 002B     		cmp	r3, #0
 2285 00aa 08D0     		beq	.L161
 2286              		.loc 1 805 0 is_stmt 0 discriminator 1
 2287 00ac 7B68     		ldr	r3, [r7, #4]
 2288 00ae 9B88     		ldrh	r3, [r3, #4]
 2289 00b0 FA89     		ldrh	r2, [r7, #14]
 2290 00b2 9A42     		cmp	r2, r3
 2291 00b4 03D9     		bls	.L161
 806:.\Tones.c     **** 			currentSpeaker->PWMcountDifference = currentDifference;
 2292              		.loc 1 806 0 is_stmt 1
 2293 00b6 7B68     		ldr	r3, [r7, #4]
 2294 00b8 FA89     		ldrh	r2, [r7, #14]	@ movhi
 2295 00ba 9A80     		strh	r2, [r3, #4]	@ movhi
 2296 00bc 06E0     		b	.L162
 2297              	.L161:
 807:.\Tones.c     **** 		else
 808:.\Tones.c     **** 			currentSpeaker->PWMcountDifference -= currentDifference;
 2298              		.loc 1 808 0
 2299 00be 7B68     		ldr	r3, [r7, #4]
 2300 00c0 9A88     		ldrh	r2, [r3, #4]
 2301 00c2 FB89     		ldrh	r3, [r7, #14]	@ movhi
 2302 00c4 D31A     		subs	r3, r2, r3
 2303 00c6 9AB2     		uxth	r2, r3
 2304 00c8 7B68     		ldr	r3, [r7, #4]
 2305 00ca 9A80     		strh	r2, [r3, #4]	@ movhi
 2306              	.L162:
 809:.\Tones.c     ****         
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 56


 810:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference <= 0)
 2307              		.loc 1 810 0
 2308 00cc 7B68     		ldr	r3, [r7, #4]
 2309 00ce 9B88     		ldrh	r3, [r3, #4]
 2310 00d0 002B     		cmp	r3, #0
 2311 00d2 3ED1     		bne	.L164
 811:.\Tones.c     **** 		{
 812:.\Tones.c     **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency			
 2312              		.loc 1 812 0
 2313 00d4 7B68     		ldr	r3, [r7, #4]
 2314 00d6 0022     		movs	r2, #0
 2315 00d8 9A80     		strh	r2, [r3, #4]	@ movhi
 813:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2316              		.loc 1 813 0
 2317 00da 7B68     		ldr	r3, [r7, #4]
 2318 00dc 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2319 00de 002B     		cmp	r3, #0
 2320 00e0 0CBF     		ite	eq
 2321 00e2 0123     		moveq	r3, #1
 2322 00e4 0023     		movne	r3, #0
 2323 00e6 DBB2     		uxtb	r3, r3
 2324 00e8 1A46     		mov	r2, r3
 2325 00ea 7B68     		ldr	r3, [r7, #4]
 2326 00ec 1A74     		strb	r2, [r3, #16]
 814:.\Tones.c     ****             
 815:.\Tones.c     ****             if(bEchoEnable)
 2327              		.loc 1 815 0
 2328 00ee 1C4B     		ldr	r3, .L165+4
 2329 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2330 00f2 002B     		cmp	r3, #0
 2331 00f4 2DD0     		beq	.L164
 816:.\Tones.c     ****             {
 817:.\Tones.c     ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2332              		.loc 1 817 0
 2333 00f6 7B68     		ldr	r3, [r7, #4]
 2334 00f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2335 00fa 0120     		movs	r0, #1
 2336 00fc 1946     		mov	r1, r3
 2337 00fe 0022     		movs	r2, #0
 2338 0100 0123     		movs	r3, #1
 2339 0102 FFF7FEFF 		bl	playPWMTone
 818:.\Tones.c     ****                 bEchoEnable = false;
 2340              		.loc 1 818 0
 2341 0106 164B     		ldr	r3, .L165+4
 2342 0108 0022     		movs	r2, #0
 2343 010a 1A70     		strb	r2, [r3]
 2344 010c 21E0     		b	.L164
 2345              	.L158:
 819:.\Tones.c     ****             }
 820:.\Tones.c     **** 		}
 821:.\Tones.c     ****     }
 822:.\Tones.c     **** 	else
 823:.\Tones.c     ****     {
 824:.\Tones.c     **** 		currentSpeaker->PWMperiodCount = lowestPWMcount + currentSpeaker->PWMcountDifference;        
 2346              		.loc 1 824 0
 2347 010e 7B68     		ldr	r3, [r7, #4]
 2348 0110 9A88     		ldrh	r2, [r3, #4]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 57


 2349 0112 7B89     		ldrh	r3, [r7, #10]	@ movhi
 2350 0114 1344     		add	r3, r3, r2
 2351 0116 9AB2     		uxth	r2, r3
 2352 0118 7B68     		ldr	r3, [r7, #4]
 2353 011a 5A80     		strh	r2, [r3, #2]	@ movhi
 825:.\Tones.c     ****         currentSpeaker->PWMcountDifference++;
 2354              		.loc 1 825 0
 2355 011c 7B68     		ldr	r3, [r7, #4]
 2356 011e 9B88     		ldrh	r3, [r3, #4]
 2357 0120 0133     		adds	r3, r3, #1
 2358 0122 9AB2     		uxth	r2, r3
 2359 0124 7B68     		ldr	r3, [r7, #4]
 2360 0126 9A80     		strh	r2, [r3, #4]	@ movhi
 826:.\Tones.c     ****         currentSpeaker->mechanicalRampUpCount = 0;
 2361              		.loc 1 826 0
 2362 0128 7B68     		ldr	r3, [r7, #4]
 2363 012a 0022     		movs	r2, #0
 2364 012c DA80     		strh	r2, [r3, #6]	@ movhi
 827:.\Tones.c     ****         
 828:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))
 2365              		.loc 1 828 0
 2366 012e 7B68     		ldr	r3, [r7, #4]
 2367 0130 9B88     		ldrh	r3, [r3, #4]
 2368 0132 1946     		mov	r1, r3
 2369 0134 BA89     		ldrh	r2, [r7, #12]
 2370 0136 7B89     		ldrh	r3, [r7, #10]
 2371 0138 D31A     		subs	r3, r2, r3
 2372 013a 9942     		cmp	r1, r3
 2373 013c 09DB     		blt	.L164
 829:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 2374              		.loc 1 829 0
 2375 013e 7B68     		ldr	r3, [r7, #4]
 2376 0140 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2377 0142 002B     		cmp	r3, #0
 2378 0144 0CBF     		ite	eq
 2379 0146 0123     		moveq	r3, #1
 2380 0148 0023     		movne	r3, #0
 2381 014a DBB2     		uxtb	r3, r3
 2382 014c 1A46     		mov	r2, r3
 2383 014e 7B68     		ldr	r3, [r7, #4]
 2384 0150 1A74     		strb	r2, [r3, #16]
 2385              	.L164:
 830:.\Tones.c     ****     }
 831:.\Tones.c     ****     
 832:.\Tones.c     ****     return true;
 2386              		.loc 1 832 0
 2387 0152 0123     		movs	r3, #1
 2388              	.L156:
 833:.\Tones.c     **** }
 2389              		.loc 1 833 0
 2390 0154 1846     		mov	r0, r3
 2391 0156 1037     		adds	r7, r7, #16
 2392              		.cfi_def_cfa_offset 8
 2393 0158 BD46     		mov	sp, r7
 2394              		.cfi_def_cfa_register 13
 2395              		@ sp needed
 2396 015a 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 58


 2397              	.L166:
 2398              		.align	2
 2399              	.L165:
 2400 015c 00000000 		.word	toneList
 2401 0160 01000000 		.word	bEchoEnable
 2402              		.cfi_endproc
 2403              	.LFE75:
 2404              		.size	playMechanicalTone, .-playMechanicalTone
 2405              		.section	.text.playPCallTone,"ax",%progbits
 2406              		.align	2
 2407              		.thumb
 2408              		.thumb_func
 2409              		.type	playPCallTone, %function
 2410              	playPCallTone:
 2411              	.LFB76:
 834:.\Tones.c     **** 
 835:.\Tones.c     **** /*******************************************************************************
 836:.\Tones.c     **** * Function Name: playPCallTone
 837:.\Tones.c     **** ********************************************************************************
 838:.\Tones.c     **** *
 839:.\Tones.c     **** * Summary:
 840:.\Tones.c     **** *  Updates the PWM frequency value for the PCall Fast and Slow tones
 841:.\Tones.c     **** *
 842:.\Tones.c     **** * Parameters:  
 843:.\Tones.c     **** *   currentSpeaker: The pointer to the struct for the current speaker's data
 844:.\Tones.c     **** *   currentTone: The pointer to the PCall struct
 845:.\Tones.c     **** *
 846:.\Tones.c     **** * Return:
 847:.\Tones.c     **** *   TRUE for valid input, FALSE otherwise
 848:.\Tones.c     **** *
 849:.\Tones.c     **** *******************************************************************************/
 850:.\Tones.c     **** static uint8 playPCallTone(CurrentToneData* currentSpeaker, ToneStruct* currentTone)
 851:.\Tones.c     **** {
 2412              		.loc 1 851 0
 2413              		.cfi_startproc
 2414              		@ args = 0, pretend = 0, frame = 16
 2415              		@ frame_needed = 1, uses_anonymous_args = 0
 2416 0000 80B5     		push	{r7, lr}
 2417              		.cfi_def_cfa_offset 8
 2418              		.cfi_offset 7, -8
 2419              		.cfi_offset 14, -4
 2420 0002 84B0     		sub	sp, sp, #16
 2421              		.cfi_def_cfa_offset 24
 2422 0004 00AF     		add	r7, sp, #0
 2423              		.cfi_def_cfa_register 7
 2424 0006 7860     		str	r0, [r7, #4]
 2425 0008 3960     		str	r1, [r7]
 852:.\Tones.c     ****     static const uint16 HOLD_NOTE_FACTOR = 35;
 853:.\Tones.c     **** 	
 854:.\Tones.c     **** 	if((currentSpeaker == NULL) || (currentTone == NULL))
 2426              		.loc 1 854 0
 2427 000a 7B68     		ldr	r3, [r7, #4]
 2428 000c 002B     		cmp	r3, #0
 2429 000e 02D0     		beq	.L168
 2430              		.loc 1 854 0 is_stmt 0 discriminator 1
 2431 0010 3B68     		ldr	r3, [r7]
 2432 0012 002B     		cmp	r3, #0
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 59


 2433 0014 01D1     		bne	.L169
 2434              	.L168:
 855:.\Tones.c     **** 		return false;
 2435              		.loc 1 855 0 is_stmt 1
 2436 0016 0023     		movs	r3, #0
 2437 0018 95E0     		b	.L170
 2438              	.L169:
 856:.\Tones.c     ****     
 857:.\Tones.c     ****     uint16 highestPWMcount = getCaptureValue(currentTone->lowestFrequency);
 2439              		.loc 1 857 0
 2440 001a 3B68     		ldr	r3, [r7]
 2441 001c 1B88     		ldrh	r3, [r3]
 2442 001e 1846     		mov	r0, r3
 2443 0020 FFF7FEFF 		bl	getCaptureValue
 2444 0024 0346     		mov	r3, r0
 2445 0026 FB81     		strh	r3, [r7, #14]	@ movhi
 858:.\Tones.c     ****     uint16 lowestPWMcount = getCaptureValue(currentTone->highestFrequency);
 2446              		.loc 1 858 0
 2447 0028 3B68     		ldr	r3, [r7]
 2448 002a 5B88     		ldrh	r3, [r3, #2]
 2449 002c 1846     		mov	r0, r3
 2450 002e FFF7FEFF 		bl	getCaptureValue
 2451 0032 0346     		mov	r3, r0
 2452 0034 BB81     		strh	r3, [r7, #12]	@ movhi
 859:.\Tones.c     ****     
 860:.\Tones.c     ****     if(!currentSpeaker->bTonePlaying)
 2453              		.loc 1 860 0
 2454 0036 7B68     		ldr	r3, [r7, #4]
 2455 0038 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2456 003a 002B     		cmp	r3, #0
 2457 003c 08D1     		bne	.L171
 861:.\Tones.c     ****     {
 862:.\Tones.c     ****         currentSpeaker->PWMcountDifference = highestPWMcount - lowestPWMcount;
 2458              		.loc 1 862 0
 2459 003e FA89     		ldrh	r2, [r7, #14]	@ movhi
 2460 0040 BB89     		ldrh	r3, [r7, #12]	@ movhi
 2461 0042 D31A     		subs	r3, r2, r3
 2462 0044 9AB2     		uxth	r2, r3
 2463 0046 7B68     		ldr	r3, [r7, #4]
 2464 0048 9A80     		strh	r2, [r3, #4]	@ movhi
 863:.\Tones.c     ****         currentSpeaker->bTonePlaying = true;
 2465              		.loc 1 863 0
 2466 004a 7B68     		ldr	r3, [r7, #4]
 2467 004c 0122     		movs	r2, #1
 2468 004e 9A74     		strb	r2, [r3, #18]
 2469              	.L171:
 864:.\Tones.c     ****     }
 865:.\Tones.c     ****     
 866:.\Tones.c     ****     currentSpeaker->PWMperiodCount = lowestPWMcount + (uint16)((uint32)(currentSpeaker->PWMcountDif
 2470              		.loc 1 866 0
 2471 0050 7B68     		ldr	r3, [r7, #4]
 2472 0052 9B88     		ldrh	r3, [r3, #4]
 2473 0054 1A46     		mov	r2, r3
 867:.\Tones.c     ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2474              		.loc 1 867 0
 2475 0056 7B68     		ldr	r3, [r7, #4]
 2476 0058 9B88     		ldrh	r3, [r3, #4]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 60


 866:.\Tones.c     ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2477              		.loc 1 866 0
 2478 005a 03FB02F3 		mul	r3, r3, r2
 2479              		.loc 1 867 0
 2480 005e F989     		ldrh	r1, [r7, #14]
 2481 0060 BA89     		ldrh	r2, [r7, #12]
 2482 0062 8A1A     		subs	r2, r1, r2
 2483 0064 B3FBF2F3 		udiv	r3, r3, r2
 866:.\Tones.c     ****                                     (uint32)(currentSpeaker->PWMcountDifference) / (uint32)(highest
 2484              		.loc 1 866 0
 2485 0068 9AB2     		uxth	r2, r3
 2486 006a BB89     		ldrh	r3, [r7, #12]	@ movhi
 2487 006c 1344     		add	r3, r3, r2
 2488 006e 9AB2     		uxth	r2, r3
 2489 0070 7B68     		ldr	r3, [r7, #4]
 2490 0072 5A80     		strh	r2, [r3, #2]	@ movhi
 868:.\Tones.c     ****     
 869:.\Tones.c     ****     if(currentSpeaker->bFrequencyChange == INCREASING)
 2491              		.loc 1 869 0
 2492 0074 7B68     		ldr	r3, [r7, #4]
 2493 0076 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2494 0078 012B     		cmp	r3, #1
 2495 007a 17D1     		bne	.L172
 870:.\Tones.c     ****     {
 871:.\Tones.c     ****         currentSpeaker->PWMcountDifference--;
 2496              		.loc 1 871 0
 2497 007c 7B68     		ldr	r3, [r7, #4]
 2498 007e 9B88     		ldrh	r3, [r3, #4]
 2499 0080 013B     		subs	r3, r3, #1
 2500 0082 9AB2     		uxth	r2, r3
 2501 0084 7B68     		ldr	r3, [r7, #4]
 2502 0086 9A80     		strh	r2, [r3, #4]	@ movhi
 872:.\Tones.c     **** 			
 873:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference <= 0)
 2503              		.loc 1 873 0
 2504 0088 7B68     		ldr	r3, [r7, #4]
 2505 008a 9B88     		ldrh	r3, [r3, #4]
 2506 008c 002B     		cmp	r3, #0
 2507 008e 59D1     		bne	.L174
 874:.\Tones.c     **** 		{	
 875:.\Tones.c     **** 			currentSpeaker->PWMcountDifference = 0;	//Reached highest frequency
 2508              		.loc 1 875 0
 2509 0090 7B68     		ldr	r3, [r7, #4]
 2510 0092 0022     		movs	r2, #0
 2511 0094 9A80     		strh	r2, [r3, #4]	@ movhi
 876:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;
 2512              		.loc 1 876 0
 2513 0096 7B68     		ldr	r3, [r7, #4]
 2514 0098 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2515 009a 002B     		cmp	r3, #0
 2516 009c 0CBF     		ite	eq
 2517 009e 0123     		moveq	r3, #1
 2518 00a0 0023     		movne	r3, #0
 2519 00a2 DBB2     		uxtb	r3, r3
 2520 00a4 1A46     		mov	r2, r3
 2521 00a6 7B68     		ldr	r3, [r7, #4]
 2522 00a8 1A74     		strb	r2, [r3, #16]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 61


 2523 00aa 4BE0     		b	.L174
 2524              	.L172:
 877:.\Tones.c     **** 		}
 878:.\Tones.c     ****     }
 879:.\Tones.c     ****     else
 880:.\Tones.c     ****     {
 881:.\Tones.c     ****         if((currentSpeaker->PCallHoldNoteCount < (currentTone->delayUs * HOLD_NOTE_FACTOR)) && 
 2525              		.loc 1 881 0
 2526 00ac 7B68     		ldr	r3, [r7, #4]
 2527 00ae 1B89     		ldrh	r3, [r3, #8]
 2528 00b0 1A46     		mov	r2, r3
 2529 00b2 3B68     		ldr	r3, [r7]
 2530 00b4 9B88     		ldrh	r3, [r3, #4]
 2531 00b6 2321     		movs	r1, #35
 2532 00b8 01FB03F3 		mul	r3, r1, r3
 2533 00bc 9A42     		cmp	r2, r3
 2534 00be 26DA     		bge	.L175
 882:.\Tones.c     ****             (currentSpeaker->PWMcountDifference == 0))
 2535              		.loc 1 882 0 discriminator 1
 2536 00c0 7B68     		ldr	r3, [r7, #4]
 2537 00c2 9B88     		ldrh	r3, [r3, #4]
 881:.\Tones.c     ****             (currentSpeaker->PWMcountDifference == 0))
 2538              		.loc 1 881 0 discriminator 1
 2539 00c4 002B     		cmp	r3, #0
 2540 00c6 22D1     		bne	.L175
 883:.\Tones.c     ****         {
 884:.\Tones.c     ****             if((currentSpeaker->PCallHoldNoteCount == ((currentTone->delayUs * HOLD_NOTE_FACTOR) / 
 2541              		.loc 1 884 0
 2542 00c8 7B68     		ldr	r3, [r7, #4]
 2543 00ca 1B89     		ldrh	r3, [r3, #8]
 2544 00cc 1946     		mov	r1, r3
 2545 00ce 3B68     		ldr	r3, [r7]
 2546 00d0 9B88     		ldrh	r3, [r3, #4]
 2547 00d2 2322     		movs	r2, #35
 2548 00d4 02FB03F3 		mul	r3, r2, r3
 2549 00d8 DA0F     		lsrs	r2, r3, #31
 2550 00da 1344     		add	r3, r3, r2
 2551 00dc 5B10     		asrs	r3, r3, #1
 2552 00de 9942     		cmp	r1, r3
 2553 00e0 0ED1     		bne	.L176
 2554              		.loc 1 884 0 is_stmt 0 discriminator 1
 2555 00e2 1B4B     		ldr	r3, .L178
 2556 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2557 00e6 002B     		cmp	r3, #0
 2558 00e8 0AD0     		beq	.L176
 885:.\Tones.c     ****                 (bEchoEnable))
 886:.\Tones.c     ****             {
 887:.\Tones.c     ****                 playPWMTone(SPEAKER_2, currentSpeaker->currentToneNumber, false, true);
 2559              		.loc 1 887 0 is_stmt 1
 2560 00ea 7B68     		ldr	r3, [r7, #4]
 2561 00ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2562 00ee 0120     		movs	r0, #1
 2563 00f0 1946     		mov	r1, r3
 2564 00f2 0022     		movs	r2, #0
 2565 00f4 0123     		movs	r3, #1
 2566 00f6 FFF7FEFF 		bl	playPWMTone
 888:.\Tones.c     ****                 bEchoEnable = false;
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 62


 2567              		.loc 1 888 0
 2568 00fa 154B     		ldr	r3, .L178
 2569 00fc 0022     		movs	r2, #0
 2570 00fe 1A70     		strb	r2, [r3]
 2571              	.L176:
 889:.\Tones.c     ****             }
 890:.\Tones.c     ****             
 891:.\Tones.c     ****             currentSpeaker->PCallHoldNoteCount++;
 2572              		.loc 1 891 0
 2573 0100 7B68     		ldr	r3, [r7, #4]
 2574 0102 1B89     		ldrh	r3, [r3, #8]
 2575 0104 0133     		adds	r3, r3, #1
 2576 0106 9AB2     		uxth	r2, r3
 2577 0108 7B68     		ldr	r3, [r7, #4]
 2578 010a 1A81     		strh	r2, [r3, #8]	@ movhi
 2579 010c 05E0     		b	.L177
 2580              	.L175:
 892:.\Tones.c     ****         }
 893:.\Tones.c     ****         else
 894:.\Tones.c     ****             currentSpeaker->PWMcountDifference++;
 2581              		.loc 1 894 0
 2582 010e 7B68     		ldr	r3, [r7, #4]
 2583 0110 9B88     		ldrh	r3, [r3, #4]
 2584 0112 0133     		adds	r3, r3, #1
 2585 0114 9AB2     		uxth	r2, r3
 2586 0116 7B68     		ldr	r3, [r7, #4]
 2587 0118 9A80     		strh	r2, [r3, #4]	@ movhi
 2588              	.L177:
 895:.\Tones.c     **** 		
 896:.\Tones.c     **** 		if(currentSpeaker->PWMcountDifference >= (highestPWMcount - lowestPWMcount))	
 2589              		.loc 1 896 0
 2590 011a 7B68     		ldr	r3, [r7, #4]
 2591 011c 9B88     		ldrh	r3, [r3, #4]
 2592 011e 1946     		mov	r1, r3
 2593 0120 FA89     		ldrh	r2, [r7, #14]
 2594 0122 BB89     		ldrh	r3, [r7, #12]
 2595 0124 D31A     		subs	r3, r2, r3
 2596 0126 9942     		cmp	r1, r3
 2597 0128 0CDB     		blt	.L174
 897:.\Tones.c     ****         {
 898:.\Tones.c     ****             currentSpeaker->PCallHoldNoteCount = 0;
 2598              		.loc 1 898 0
 2599 012a 7B68     		ldr	r3, [r7, #4]
 2600 012c 0022     		movs	r2, #0
 2601 012e 1A81     		strh	r2, [r3, #8]	@ movhi
 899:.\Tones.c     **** 			currentSpeaker->bFrequencyChange = !currentSpeaker->bFrequencyChange;	//Reached lowest frequency
 2602              		.loc 1 899 0
 2603 0130 7B68     		ldr	r3, [r7, #4]
 2604 0132 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 2605 0134 002B     		cmp	r3, #0
 2606 0136 0CBF     		ite	eq
 2607 0138 0123     		moveq	r3, #1
 2608 013a 0023     		movne	r3, #0
 2609 013c DBB2     		uxtb	r3, r3
 2610 013e 1A46     		mov	r2, r3
 2611 0140 7B68     		ldr	r3, [r7, #4]
 2612 0142 1A74     		strb	r2, [r3, #16]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 63


 2613              	.L174:
 900:.\Tones.c     ****         }
 901:.\Tones.c     ****     }
 902:.\Tones.c     ****     
 903:.\Tones.c     ****     return true;
 2614              		.loc 1 903 0
 2615 0144 0123     		movs	r3, #1
 2616              	.L170:
 904:.\Tones.c     **** }
 2617              		.loc 1 904 0
 2618 0146 1846     		mov	r0, r3
 2619 0148 1037     		adds	r7, r7, #16
 2620              		.cfi_def_cfa_offset 8
 2621 014a BD46     		mov	sp, r7
 2622              		.cfi_def_cfa_register 13
 2623              		@ sp needed
 2624 014c 80BD     		pop	{r7, pc}
 2625              	.L179:
 2626 014e 00BF     		.align	2
 2627              	.L178:
 2628 0150 01000000 		.word	bEchoEnable
 2629              		.cfi_endproc
 2630              	.LFE76:
 2631              		.size	playPCallTone, .-playPCallTone
 2632              		.section	.text.playComboTone,"ax",%progbits
 2633              		.align	2
 2634              		.thumb
 2635              		.thumb_func
 2636              		.type	playComboTone, %function
 2637              	playComboTone:
 2638              	.LFB77:
 905:.\Tones.c     **** 
 906:.\Tones.c     **** /*******************************************************************************
 907:.\Tones.c     **** * Function Name: playComboTone
 908:.\Tones.c     **** ********************************************************************************
 909:.\Tones.c     **** *
 910:.\Tones.c     **** * Summary:
 911:.\Tones.c     **** *  Updates the PWM frequency value for the Combo Tones
 912:.\Tones.c     **** *
 913:.\Tones.c     **** * Parameters:  
 914:.\Tones.c     **** *   bSpeaker: The speaker number, SPEAKER_1 or SPEAKER_2
 915:.\Tones.c     **** *   firstToneChoice - The pointer to the struct of the first tone
 916:.\Tones.c     **** *   secondToneChoice - The pointer to the struct of the second tone
 917:.\Tones.c     **** *
 918:.\Tones.c     **** * Return:
 919:.\Tones.c     **** *   TRUE for valid input, FALSE otherwise
 920:.\Tones.c     **** *
 921:.\Tones.c     **** *******************************************************************************/
 922:.\Tones.c     **** static uint8 playComboTone(uint8 bSpeaker, ToneStruct* firstToneChoice, ToneStruct* secondToneChoic
 923:.\Tones.c     **** {
 2639              		.loc 1 923 0
 2640              		.cfi_startproc
 2641              		@ args = 0, pretend = 0, frame = 24
 2642              		@ frame_needed = 1, uses_anonymous_args = 0
 2643 0000 80B5     		push	{r7, lr}
 2644              		.cfi_def_cfa_offset 8
 2645              		.cfi_offset 7, -8
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 64


 2646              		.cfi_offset 14, -4
 2647 0002 86B0     		sub	sp, sp, #24
 2648              		.cfi_def_cfa_offset 32
 2649 0004 00AF     		add	r7, sp, #0
 2650              		.cfi_def_cfa_register 7
 2651 0006 0346     		mov	r3, r0
 2652 0008 B960     		str	r1, [r7, #8]
 2653 000a 7A60     		str	r2, [r7, #4]
 2654 000c FB73     		strb	r3, [r7, #15]
 924:.\Tones.c     ****     static const uint32 COMBO_COUNT_LIMIT = 0x3FFFF;
 925:.\Tones.c     ****     uint32 delayFactor1 = 0;
 2655              		.loc 1 925 0
 2656 000e 0023     		movs	r3, #0
 2657 0010 7B61     		str	r3, [r7, #20]
 926:.\Tones.c     ****     uint32 delayFactor2 = 0;
 2658              		.loc 1 926 0
 2659 0012 0023     		movs	r3, #0
 2660 0014 3B61     		str	r3, [r7, #16]
 927:.\Tones.c     ****     
 928:.\Tones.c     ****     if((bSpeaker != SPEAKER_1) && (bSpeaker != SPEAKER_2))
 2661              		.loc 1 928 0
 2662 0016 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2663 0018 002B     		cmp	r3, #0
 2664 001a 04D0     		beq	.L181
 2665              		.loc 1 928 0 is_stmt 0 discriminator 1
 2666 001c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2667 001e 012B     		cmp	r3, #1
 2668 0020 01D0     		beq	.L181
 929:.\Tones.c     ****         return false;
 2669              		.loc 1 929 0 is_stmt 1
 2670 0022 0023     		movs	r3, #0
 2671 0024 F4E0     		b	.L182
 2672              	.L181:
 930:.\Tones.c     ****     
 931:.\Tones.c     ****     if((firstToneChoice == NULL) || (secondToneChoice == NULL))
 2673              		.loc 1 931 0
 2674 0026 BB68     		ldr	r3, [r7, #8]
 2675 0028 002B     		cmp	r3, #0
 2676 002a 02D0     		beq	.L183
 2677              		.loc 1 931 0 is_stmt 0 discriminator 1
 2678 002c 7B68     		ldr	r3, [r7, #4]
 2679 002e 002B     		cmp	r3, #0
 2680 0030 01D1     		bne	.L184
 2681              	.L183:
 932:.\Tones.c     **** 		return false;
 2682              		.loc 1 932 0 is_stmt 1
 2683 0032 0023     		movs	r3, #0
 2684 0034 ECE0     		b	.L182
 2685              	.L184:
 933:.\Tones.c     ****     
 934:.\Tones.c     ****     delayFactor1 = COMBO_COUNT_LIMIT / (uint32)(firstToneChoice->delayUs);
 2686              		.loc 1 934 0
 2687 0036 784A     		ldr	r2, .L198
 2688 0038 BB68     		ldr	r3, [r7, #8]
 2689 003a 9B88     		ldrh	r3, [r3, #4]
 2690 003c B2FBF3F3 		udiv	r3, r2, r3
 2691 0040 7B61     		str	r3, [r7, #20]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 65


 935:.\Tones.c     ****     delayFactor2 = COMBO_COUNT_LIMIT / (uint32)(secondToneChoice->delayUs);
 2692              		.loc 1 935 0
 2693 0042 754A     		ldr	r2, .L198
 2694 0044 7B68     		ldr	r3, [r7, #4]
 2695 0046 9B88     		ldrh	r3, [r3, #4]
 2696 0048 B2FBF3F3 		udiv	r3, r2, r3
 2697 004c 3B61     		str	r3, [r7, #16]
 936:.\Tones.c     ****     
 937:.\Tones.c     ****     if(speakerDataList[bSpeaker].bComboSwitch)
 2698              		.loc 1 937 0
 2699 004e FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2700 0050 7249     		ldr	r1, .L198+4
 2701 0052 1346     		mov	r3, r2
 2702 0054 5B00     		lsls	r3, r3, #1
 2703 0056 1344     		add	r3, r3, r2
 2704 0058 DB00     		lsls	r3, r3, #3
 2705 005a 0B44     		add	r3, r3, r1
 2706 005c 1033     		adds	r3, r3, #16
 2707 005e 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2708 0060 002B     		cmp	r3, #0
 2709 0062 6AD0     		beq	.L185
 938:.\Tones.c     ****     {
 939:.\Tones.c     ****         if(speakerDataList[bSpeaker].comboCount < delayFactor2)
 2710              		.loc 1 939 0
 2711 0064 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2712 0066 6D49     		ldr	r1, .L198+4
 2713 0068 1346     		mov	r3, r2
 2714 006a 5B00     		lsls	r3, r3, #1
 2715 006c 1344     		add	r3, r3, r2
 2716 006e DB00     		lsls	r3, r3, #3
 2717 0070 0B44     		add	r3, r3, r1
 2718 0072 0833     		adds	r3, r3, #8
 2719 0074 5A68     		ldr	r2, [r3, #4]
 2720 0076 3B69     		ldr	r3, [r7, #16]
 2721 0078 9A42     		cmp	r2, r3
 2722 007a 2CD2     		bcs	.L186
 940:.\Tones.c     ****         {
 941:.\Tones.c     ****             if(secondToneChoice == &toneList[HORN])
 2723              		.loc 1 941 0
 2724 007c 7B68     		ldr	r3, [r7, #4]
 2725 007e 684A     		ldr	r2, .L198+8
 2726 0080 9342     		cmp	r3, r2
 2727 0082 0AD1     		bne	.L187
 942:.\Tones.c     ****                 playHornTone(&speakerDataList[bSpeaker]);
 2728              		.loc 1 942 0
 2729 0084 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2730 0086 1346     		mov	r3, r2
 2731 0088 5B00     		lsls	r3, r3, #1
 2732 008a 1344     		add	r3, r3, r2
 2733 008c DB00     		lsls	r3, r3, #3
 2734 008e 634A     		ldr	r2, .L198+4
 2735 0090 1344     		add	r3, r3, r2
 2736 0092 1846     		mov	r0, r3
 2737 0094 FFF7FEFF 		bl	playHornTone
 2738 0098 0AE0     		b	.L188
 2739              	.L187:
 943:.\Tones.c     ****             else
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 66


 944:.\Tones.c     ****                 playGradualChangeTone(&speakerDataList[bSpeaker], secondToneChoice);
 2740              		.loc 1 944 0
 2741 009a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2742 009c 1346     		mov	r3, r2
 2743 009e 5B00     		lsls	r3, r3, #1
 2744 00a0 1344     		add	r3, r3, r2
 2745 00a2 DB00     		lsls	r3, r3, #3
 2746 00a4 5D4A     		ldr	r2, .L198+4
 2747 00a6 1344     		add	r3, r3, r2
 2748 00a8 1846     		mov	r0, r3
 2749 00aa 7968     		ldr	r1, [r7, #4]
 2750 00ac FFF7FEFF 		bl	playGradualChangeTone
 2751              	.L188:
 945:.\Tones.c     ****                 
 946:.\Tones.c     ****             speakerDataList[bSpeaker].comboCount++;
 2752              		.loc 1 946 0
 2753 00b0 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2754 00b2 5A49     		ldr	r1, .L198+4
 2755 00b4 1346     		mov	r3, r2
 2756 00b6 5B00     		lsls	r3, r3, #1
 2757 00b8 1344     		add	r3, r3, r2
 2758 00ba DB00     		lsls	r3, r3, #3
 2759 00bc 0B44     		add	r3, r3, r1
 2760 00be 0833     		adds	r3, r3, #8
 2761 00c0 5B68     		ldr	r3, [r3, #4]
 2762 00c2 591C     		adds	r1, r3, #1
 2763 00c4 5548     		ldr	r0, .L198+4
 2764 00c6 1346     		mov	r3, r2
 2765 00c8 5B00     		lsls	r3, r3, #1
 2766 00ca 1344     		add	r3, r3, r2
 2767 00cc DB00     		lsls	r3, r3, #3
 2768 00ce 0344     		add	r3, r3, r0
 2769 00d0 0833     		adds	r3, r3, #8
 2770 00d2 5960     		str	r1, [r3, #4]
 2771 00d4 9BE0     		b	.L192
 2772              	.L186:
 947:.\Tones.c     ****         }
 948:.\Tones.c     ****         else
 949:.\Tones.c     ****         {
 950:.\Tones.c     ****             if(bSpeaker)
 2773              		.loc 1 950 0
 2774 00d6 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2775 00d8 002B     		cmp	r3, #0
 2776 00da 05D0     		beq	.L190
 951:.\Tones.c     ****                 PWMtimer2_WritePeriod(firstToneChoice->delayUs);
 2777              		.loc 1 951 0
 2778 00dc BB68     		ldr	r3, [r7, #8]
 2779 00de 9B88     		ldrh	r3, [r3, #4]
 2780 00e0 1846     		mov	r0, r3
 2781 00e2 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 2782 00e6 04E0     		b	.L191
 2783              	.L190:
 952:.\Tones.c     ****             else
 953:.\Tones.c     ****                 PWMtimer1_WritePeriod(firstToneChoice->delayUs);
 2784              		.loc 1 953 0
 2785 00e8 BB68     		ldr	r3, [r7, #8]
 2786 00ea 9B88     		ldrh	r3, [r3, #4]
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 67


 2787 00ec 1846     		mov	r0, r3
 2788 00ee FFF7FEFF 		bl	PWMtimer1_WritePeriod
 2789              	.L191:
 954:.\Tones.c     ****             
 955:.\Tones.c     ****             speakerDataList[bSpeaker].comboCount = 0;
 2790              		.loc 1 955 0
 2791 00f2 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2792 00f4 4949     		ldr	r1, .L198+4
 2793 00f6 1346     		mov	r3, r2
 2794 00f8 5B00     		lsls	r3, r3, #1
 2795 00fa 1344     		add	r3, r3, r2
 2796 00fc DB00     		lsls	r3, r3, #3
 2797 00fe 0B44     		add	r3, r3, r1
 2798 0100 0833     		adds	r3, r3, #8
 2799 0102 0022     		movs	r2, #0
 2800 0104 5A60     		str	r2, [r3, #4]
 956:.\Tones.c     ****             speakerDataList[bSpeaker].bComboSwitch = !speakerDataList[bSpeaker].bComboSwitch;
 2801              		.loc 1 956 0
 2802 0106 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2803 0108 F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2804 010a 4448     		ldr	r0, .L198+4
 2805 010c 0B46     		mov	r3, r1
 2806 010e 5B00     		lsls	r3, r3, #1
 2807 0110 0B44     		add	r3, r3, r1
 2808 0112 DB00     		lsls	r3, r3, #3
 2809 0114 0344     		add	r3, r3, r0
 2810 0116 1033     		adds	r3, r3, #16
 2811 0118 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2812 011a 002B     		cmp	r3, #0
 2813 011c 0CBF     		ite	eq
 2814 011e 0123     		moveq	r3, #1
 2815 0120 0023     		movne	r3, #0
 2816 0122 DBB2     		uxtb	r3, r3
 2817 0124 1846     		mov	r0, r3
 2818 0126 3D49     		ldr	r1, .L198+4
 2819 0128 1346     		mov	r3, r2
 2820 012a 5B00     		lsls	r3, r3, #1
 2821 012c 1344     		add	r3, r3, r2
 2822 012e DB00     		lsls	r3, r3, #3
 2823 0130 0B44     		add	r3, r3, r1
 2824 0132 1033     		adds	r3, r3, #16
 2825 0134 0246     		mov	r2, r0
 2826 0136 5A70     		strb	r2, [r3, #1]
 2827 0138 69E0     		b	.L192
 2828              	.L185:
 957:.\Tones.c     ****         }
 958:.\Tones.c     ****     }
 959:.\Tones.c     ****     else
 960:.\Tones.c     ****     {
 961:.\Tones.c     ****         if(speakerDataList[bSpeaker].comboCount < delayFactor1)
 2829              		.loc 1 961 0
 2830 013a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2831 013c 3749     		ldr	r1, .L198+4
 2832 013e 1346     		mov	r3, r2
 2833 0140 5B00     		lsls	r3, r3, #1
 2834 0142 1344     		add	r3, r3, r2
 2835 0144 DB00     		lsls	r3, r3, #3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 68


 2836 0146 0B44     		add	r3, r3, r1
 2837 0148 0833     		adds	r3, r3, #8
 2838 014a 5A68     		ldr	r2, [r3, #4]
 2839 014c 7B69     		ldr	r3, [r7, #20]
 2840 014e 9A42     		cmp	r2, r3
 2841 0150 2CD2     		bcs	.L193
 962:.\Tones.c     ****         {
 963:.\Tones.c     ****             if(firstToneChoice == &toneList[HORN])
 2842              		.loc 1 963 0
 2843 0152 BB68     		ldr	r3, [r7, #8]
 2844 0154 324A     		ldr	r2, .L198+8
 2845 0156 9342     		cmp	r3, r2
 2846 0158 0AD1     		bne	.L194
 964:.\Tones.c     ****                 playHornTone(&speakerDataList[bSpeaker]);
 2847              		.loc 1 964 0
 2848 015a FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2849 015c 1346     		mov	r3, r2
 2850 015e 5B00     		lsls	r3, r3, #1
 2851 0160 1344     		add	r3, r3, r2
 2852 0162 DB00     		lsls	r3, r3, #3
 2853 0164 2D4A     		ldr	r2, .L198+4
 2854 0166 1344     		add	r3, r3, r2
 2855 0168 1846     		mov	r0, r3
 2856 016a FFF7FEFF 		bl	playHornTone
 2857 016e 0AE0     		b	.L195
 2858              	.L194:
 965:.\Tones.c     ****             else
 966:.\Tones.c     ****                 playGradualChangeTone(&speakerDataList[bSpeaker], firstToneChoice);
 2859              		.loc 1 966 0
 2860 0170 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2861 0172 1346     		mov	r3, r2
 2862 0174 5B00     		lsls	r3, r3, #1
 2863 0176 1344     		add	r3, r3, r2
 2864 0178 DB00     		lsls	r3, r3, #3
 2865 017a 284A     		ldr	r2, .L198+4
 2866 017c 1344     		add	r3, r3, r2
 2867 017e 1846     		mov	r0, r3
 2868 0180 B968     		ldr	r1, [r7, #8]
 2869 0182 FFF7FEFF 		bl	playGradualChangeTone
 2870              	.L195:
 967:.\Tones.c     ****                 
 968:.\Tones.c     ****             speakerDataList[bSpeaker].comboCount++;
 2871              		.loc 1 968 0
 2872 0186 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2873 0188 2449     		ldr	r1, .L198+4
 2874 018a 1346     		mov	r3, r2
 2875 018c 5B00     		lsls	r3, r3, #1
 2876 018e 1344     		add	r3, r3, r2
 2877 0190 DB00     		lsls	r3, r3, #3
 2878 0192 0B44     		add	r3, r3, r1
 2879 0194 0833     		adds	r3, r3, #8
 2880 0196 5B68     		ldr	r3, [r3, #4]
 2881 0198 591C     		adds	r1, r3, #1
 2882 019a 2048     		ldr	r0, .L198+4
 2883 019c 1346     		mov	r3, r2
 2884 019e 5B00     		lsls	r3, r3, #1
 2885 01a0 1344     		add	r3, r3, r2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 69


 2886 01a2 DB00     		lsls	r3, r3, #3
 2887 01a4 0344     		add	r3, r3, r0
 2888 01a6 0833     		adds	r3, r3, #8
 2889 01a8 5960     		str	r1, [r3, #4]
 2890 01aa 30E0     		b	.L192
 2891              	.L193:
 969:.\Tones.c     ****         }
 970:.\Tones.c     ****         else
 971:.\Tones.c     ****         {
 972:.\Tones.c     ****             if(bSpeaker)
 2892              		.loc 1 972 0
 2893 01ac FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2894 01ae 002B     		cmp	r3, #0
 2895 01b0 05D0     		beq	.L196
 973:.\Tones.c     ****                 PWMtimer2_WritePeriod(secondToneChoice->delayUs);
 2896              		.loc 1 973 0
 2897 01b2 7B68     		ldr	r3, [r7, #4]
 2898 01b4 9B88     		ldrh	r3, [r3, #4]
 2899 01b6 1846     		mov	r0, r3
 2900 01b8 FFF7FEFF 		bl	PWMtimer2_WritePeriod
 2901 01bc 04E0     		b	.L197
 2902              	.L196:
 974:.\Tones.c     ****             else
 975:.\Tones.c     ****                 PWMtimer1_WritePeriod(secondToneChoice->delayUs);
 2903              		.loc 1 975 0
 2904 01be 7B68     		ldr	r3, [r7, #4]
 2905 01c0 9B88     		ldrh	r3, [r3, #4]
 2906 01c2 1846     		mov	r0, r3
 2907 01c4 FFF7FEFF 		bl	PWMtimer1_WritePeriod
 2908              	.L197:
 976:.\Tones.c     ****             
 977:.\Tones.c     ****             speakerDataList[bSpeaker].comboCount = 0;
 2909              		.loc 1 977 0
 2910 01c8 FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2911 01ca 1449     		ldr	r1, .L198+4
 2912 01cc 1346     		mov	r3, r2
 2913 01ce 5B00     		lsls	r3, r3, #1
 2914 01d0 1344     		add	r3, r3, r2
 2915 01d2 DB00     		lsls	r3, r3, #3
 2916 01d4 0B44     		add	r3, r3, r1
 2917 01d6 0833     		adds	r3, r3, #8
 2918 01d8 0022     		movs	r2, #0
 2919 01da 5A60     		str	r2, [r3, #4]
 978:.\Tones.c     ****             speakerDataList[bSpeaker].bComboSwitch = !speakerDataList[bSpeaker].bComboSwitch;
 2920              		.loc 1 978 0
 2921 01dc FA7B     		ldrb	r2, [r7, #15]	@ zero_extendqisi2
 2922 01de F97B     		ldrb	r1, [r7, #15]	@ zero_extendqisi2
 2923 01e0 0E48     		ldr	r0, .L198+4
 2924 01e2 0B46     		mov	r3, r1
 2925 01e4 5B00     		lsls	r3, r3, #1
 2926 01e6 0B44     		add	r3, r3, r1
 2927 01e8 DB00     		lsls	r3, r3, #3
 2928 01ea 0344     		add	r3, r3, r0
 2929 01ec 1033     		adds	r3, r3, #16
 2930 01ee 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 2931 01f0 002B     		cmp	r3, #0
 2932 01f2 0CBF     		ite	eq
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 70


 2933 01f4 0123     		moveq	r3, #1
 2934 01f6 0023     		movne	r3, #0
 2935 01f8 DBB2     		uxtb	r3, r3
 2936 01fa 1846     		mov	r0, r3
 2937 01fc 0749     		ldr	r1, .L198+4
 2938 01fe 1346     		mov	r3, r2
 2939 0200 5B00     		lsls	r3, r3, #1
 2940 0202 1344     		add	r3, r3, r2
 2941 0204 DB00     		lsls	r3, r3, #3
 2942 0206 0B44     		add	r3, r3, r1
 2943 0208 1033     		adds	r3, r3, #16
 2944 020a 0246     		mov	r2, r0
 2945 020c 5A70     		strb	r2, [r3, #1]
 2946              	.L192:
 979:.\Tones.c     ****         }
 980:.\Tones.c     ****     }
 981:.\Tones.c     ****     
 982:.\Tones.c     ****     return true;
 2947              		.loc 1 982 0
 2948 020e 0123     		movs	r3, #1
 2949              	.L182:
 983:.\Tones.c     **** }
 2950              		.loc 1 983 0
 2951 0210 1846     		mov	r0, r3
 2952 0212 1837     		adds	r7, r7, #24
 2953              		.cfi_def_cfa_offset 8
 2954 0214 BD46     		mov	sp, r7
 2955              		.cfi_def_cfa_register 13
 2956              		@ sp needed
 2957 0216 80BD     		pop	{r7, pc}
 2958              	.L199:
 2959              		.align	2
 2960              	.L198:
 2961 0218 FFFF0300 		.word	262143
 2962 021c 60000000 		.word	speakerDataList
 2963 0220 28000000 		.word	toneList+40
 2964              		.cfi_endproc
 2965              	.LFE77:
 2966              		.size	playComboTone, .-playComboTone
 2967              		.section	.text.playTestTone,"ax",%progbits
 2968              		.align	2
 2969              		.thumb
 2970              		.thumb_func
 2971              		.type	playTestTone, %function
 2972              	playTestTone:
 2973              	.LFB78:
 984:.\Tones.c     **** 
 985:.\Tones.c     **** /*******************************************************************************
 986:.\Tones.c     **** * Function Name: playTestTone
 987:.\Tones.c     **** ********************************************************************************
 988:.\Tones.c     **** *
 989:.\Tones.c     **** * Summary:
 990:.\Tones.c     **** *  Updates the PWM frequency value for the Test Tone
 991:.\Tones.c     **** *
 992:.\Tones.c     **** * Parameters:  
 993:.\Tones.c     **** *   currentSpeaker: The pointer to the tone data struct for the current speaker
 994:.\Tones.c     **** *
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 71


 995:.\Tones.c     **** * Return:
 996:.\Tones.c     **** *   TRUE for valid input, FALSE otherwise
 997:.\Tones.c     **** *
 998:.\Tones.c     **** *******************************************************************************/
 999:.\Tones.c     **** static uint8 playTestTone(CurrentToneData* currentSpeaker)
1000:.\Tones.c     **** {
 2974              		.loc 1 1000 0
 2975              		.cfi_startproc
 2976              		@ args = 0, pretend = 0, frame = 8
 2977              		@ frame_needed = 1, uses_anonymous_args = 0
 2978 0000 80B5     		push	{r7, lr}
 2979              		.cfi_def_cfa_offset 8
 2980              		.cfi_offset 7, -8
 2981              		.cfi_offset 14, -4
 2982 0002 82B0     		sub	sp, sp, #8
 2983              		.cfi_def_cfa_offset 16
 2984 0004 00AF     		add	r7, sp, #0
 2985              		.cfi_def_cfa_register 7
 2986 0006 7860     		str	r0, [r7, #4]
1001:.\Tones.c     ****     static const uint16 HIGH_LOW_COUNT_LIMIT = 250;
1002:.\Tones.c     ****     
1003:.\Tones.c     ****     if(currentSpeaker == NULL)
 2987              		.loc 1 1003 0
 2988 0008 7B68     		ldr	r3, [r7, #4]
 2989 000a 002B     		cmp	r3, #0
 2990 000c 01D1     		bne	.L201
1004:.\Tones.c     ****         return false;
 2991              		.loc 1 1004 0
 2992 000e 0023     		movs	r3, #0
 2993 0010 46E0     		b	.L202
 2994              	.L201:
1005:.\Tones.c     ****     
1006:.\Tones.c     ****     if(!currentSpeaker->bTonePlaying)
 2995              		.loc 1 1006 0
 2996 0012 7B68     		ldr	r3, [r7, #4]
 2997 0014 9B7C     		ldrb	r3, [r3, #18]	@ zero_extendqisi2
 2998 0016 002B     		cmp	r3, #0
 2999 0018 05D1     		bne	.L203
1007:.\Tones.c     ****     {
1008:.\Tones.c     ****         currentSpeaker->PWMcountDifference = 0;
 3000              		.loc 1 1008 0
 3001 001a 7B68     		ldr	r3, [r7, #4]
 3002 001c 0022     		movs	r2, #0
 3003 001e 9A80     		strh	r2, [r3, #4]	@ movhi
1009:.\Tones.c     ****         currentSpeaker->bTonePlaying = true;
 3004              		.loc 1 1009 0
 3005 0020 7B68     		ldr	r3, [r7, #4]
 3006 0022 0122     		movs	r2, #1
 3007 0024 9A74     		strb	r2, [r3, #18]
 3008              	.L203:
1010:.\Tones.c     ****     }
1011:.\Tones.c     ****     
1012:.\Tones.c     ****     if(currentSpeaker->PWMcountDifference < HIGH_LOW_COUNT_LIMIT)
 3009              		.loc 1 1012 0
 3010 0026 7B68     		ldr	r3, [r7, #4]
 3011 0028 9B88     		ldrh	r3, [r3, #4]
 3012 002a FA22     		movs	r2, #250
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 72


 3013 002c 9342     		cmp	r3, r2
 3014 002e 13D2     		bcs	.L204
1013:.\Tones.c     **** 	{
1014:.\Tones.c     ****         currentSpeaker->PWMperiodCount = getCaptureValue(NOTES_FREQUENCY_LIST[currentSpeaker->noteL
 3015              		.loc 1 1014 0
 3016 0030 7B68     		ldr	r3, [r7, #4]
 3017 0032 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3018 0034 1A46     		mov	r2, r3
 3019 0036 1C4B     		ldr	r3, .L209
 3020 0038 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 3021 003c 1846     		mov	r0, r3
 3022 003e FFF7FEFF 		bl	getCaptureValue
 3023 0042 0346     		mov	r3, r0
 3024 0044 1A46     		mov	r2, r3
 3025 0046 7B68     		ldr	r3, [r7, #4]
 3026 0048 5A80     		strh	r2, [r3, #2]	@ movhi
1015:.\Tones.c     ****         currentSpeaker->PWMcountDifference++;
 3027              		.loc 1 1015 0
 3028 004a 7B68     		ldr	r3, [r7, #4]
 3029 004c 9B88     		ldrh	r3, [r3, #4]
 3030 004e 0133     		adds	r3, r3, #1
 3031 0050 9AB2     		uxth	r2, r3
 3032 0052 7B68     		ldr	r3, [r7, #4]
 3033 0054 9A80     		strh	r2, [r3, #4]	@ movhi
 3034 0056 22E0     		b	.L205
 3035              	.L204:
1016:.\Tones.c     **** 	}
1017:.\Tones.c     ****     else
1018:.\Tones.c     ****     {
1019:.\Tones.c     ****         currentSpeaker->PWMcountDifference = 0;
 3036              		.loc 1 1019 0
 3037 0058 7B68     		ldr	r3, [r7, #4]
 3038 005a 0022     		movs	r2, #0
 3039 005c 9A80     		strh	r2, [r3, #4]	@ movhi
1020:.\Tones.c     ****         
1021:.\Tones.c     ****         if(currentSpeaker->bFrequencyChange == INCREASING)
 3040              		.loc 1 1021 0
 3041 005e 7B68     		ldr	r3, [r7, #4]
 3042 0060 1B7C     		ldrb	r3, [r3, #16]	@ zero_extendqisi2
 3043 0062 012B     		cmp	r3, #1
 3044 0064 06D1     		bne	.L206
1022:.\Tones.c     **** 			currentSpeaker->noteListIndex++;
 3045              		.loc 1 1022 0
 3046 0066 7B68     		ldr	r3, [r7, #4]
 3047 0068 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3048 006a 0133     		adds	r3, r3, #1
 3049 006c DAB2     		uxtb	r2, r3
 3050 006e 7B68     		ldr	r3, [r7, #4]
 3051 0070 9A75     		strb	r2, [r3, #22]
 3052 0072 05E0     		b	.L207
 3053              	.L206:
1023:.\Tones.c     **** 		else
1024:.\Tones.c     **** 			currentSpeaker->noteListIndex--;
 3054              		.loc 1 1024 0
 3055 0074 7B68     		ldr	r3, [r7, #4]
 3056 0076 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3057 0078 013B     		subs	r3, r3, #1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 73


 3058 007a DAB2     		uxtb	r2, r3
 3059 007c 7B68     		ldr	r3, [r7, #4]
 3060 007e 9A75     		strb	r2, [r3, #22]
 3061              	.L207:
1025:.\Tones.c     ****         
1026:.\Tones.c     ****         if(currentSpeaker->noteListIndex >= (NOTES_TABLE_SIZE - 1))
 3062              		.loc 1 1026 0
 3063 0080 7B68     		ldr	r3, [r7, #4]
 3064 0082 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3065 0084 172B     		cmp	r3, #23
 3066 0086 03D9     		bls	.L208
1027:.\Tones.c     ****             currentSpeaker->bFrequencyChange = DECREASING;
 3067              		.loc 1 1027 0
 3068 0088 7B68     		ldr	r3, [r7, #4]
 3069 008a 0022     		movs	r2, #0
 3070 008c 1A74     		strb	r2, [r3, #16]
 3071 008e 06E0     		b	.L205
 3072              	.L208:
1028:.\Tones.c     ****         else if(currentSpeaker->noteListIndex <= 0)
 3073              		.loc 1 1028 0
 3074 0090 7B68     		ldr	r3, [r7, #4]
 3075 0092 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 3076 0094 002B     		cmp	r3, #0
 3077 0096 02D1     		bne	.L205
1029:.\Tones.c     ****             currentSpeaker->bFrequencyChange = INCREASING;
 3078              		.loc 1 1029 0
 3079 0098 7B68     		ldr	r3, [r7, #4]
 3080 009a 0122     		movs	r2, #1
 3081 009c 1A74     		strb	r2, [r3, #16]
 3082              	.L205:
1030:.\Tones.c     ****     }
1031:.\Tones.c     ****     
1032:.\Tones.c     ****     return true;
 3083              		.loc 1 1032 0
 3084 009e 0123     		movs	r3, #1
 3085              	.L202:
1033:.\Tones.c     **** }
 3086              		.loc 1 1033 0
 3087 00a0 1846     		mov	r0, r3
 3088 00a2 0837     		adds	r7, r7, #8
 3089              		.cfi_def_cfa_offset 8
 3090 00a4 BD46     		mov	sp, r7
 3091              		.cfi_def_cfa_register 13
 3092              		@ sp needed
 3093 00a6 80BD     		pop	{r7, pc}
 3094              	.L210:
 3095              		.align	2
 3096              	.L209:
 3097 00a8 04000000 		.word	NOTES_FREQUENCY_LIST
 3098              		.cfi_endproc
 3099              	.LFE78:
 3100              		.size	playTestTone, .-playTestTone
 3101              		.section	.text.getCaptureValue,"ax",%progbits
 3102              		.align	2
 3103              		.thumb
 3104              		.thumb_func
 3105              		.type	getCaptureValue, %function
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 74


 3106              	getCaptureValue:
 3107              	.LFB79:
1034:.\Tones.c     **** 
1035:.\Tones.c     **** /*******************************************************************************
1036:.\Tones.c     **** * Function Name: getCaptureValue
1037:.\Tones.c     **** ********************************************************************************
1038:.\Tones.c     **** *
1039:.\Tones.c     **** * Summary:
1040:.\Tones.c     **** *  Converts a frequency value to the corresponding capture value for the
1041:.\Tones.c     **** *  PWM timer that ticks at a rate of 1 MHz
1042:.\Tones.c     **** *
1043:.\Tones.c     **** * Parameters:  
1044:.\Tones.c     **** *   frequency: In hertz
1045:.\Tones.c     **** *
1046:.\Tones.c     **** * Return:
1047:.\Tones.c     **** *   The capture value
1048:.\Tones.c     **** *
1049:.\Tones.c     **** *******************************************************************************/
1050:.\Tones.c     **** static uint16 getCaptureValue(uint16 frequency)
1051:.\Tones.c     **** {
 3108              		.loc 1 1051 0
 3109              		.cfi_startproc
 3110              		@ args = 0, pretend = 0, frame = 8
 3111              		@ frame_needed = 1, uses_anonymous_args = 0
 3112              		@ link register save eliminated.
 3113 0000 80B4     		push	{r7}
 3114              		.cfi_def_cfa_offset 4
 3115              		.cfi_offset 7, -4
 3116 0002 83B0     		sub	sp, sp, #12
 3117              		.cfi_def_cfa_offset 16
 3118 0004 00AF     		add	r7, sp, #0
 3119              		.cfi_def_cfa_register 7
 3120 0006 0346     		mov	r3, r0
 3121 0008 FB80     		strh	r3, [r7, #6]	@ movhi
1052:.\Tones.c     ****     static const uint32 PWM_CLOCK_FREQUENCY = 1000000;    
1053:.\Tones.c     ****     return (uint16)(PWM_CLOCK_FREQUENCY / (uint32)(frequency));
 3122              		.loc 1 1053 0
 3123 000a 054A     		ldr	r2, .L213
 3124 000c FB88     		ldrh	r3, [r7, #6]
 3125 000e B2FBF3F3 		udiv	r3, r2, r3
 3126 0012 9BB2     		uxth	r3, r3
1054:.\Tones.c     **** }
 3127              		.loc 1 1054 0
 3128 0014 1846     		mov	r0, r3
 3129 0016 0C37     		adds	r7, r7, #12
 3130              		.cfi_def_cfa_offset 4
 3131 0018 BD46     		mov	sp, r7
 3132              		.cfi_def_cfa_register 13
 3133              		@ sp needed
 3134 001a 5DF8047B 		ldr	r7, [sp], #4
 3135              		.cfi_restore 7
 3136              		.cfi_def_cfa_offset 0
 3137 001e 7047     		bx	lr
 3138              	.L214:
 3139              		.align	2
 3140              	.L213:
 3141 0020 40420F00 		.word	1000000
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 75


 3142              		.cfi_endproc
 3143              	.LFE79:
 3144              		.size	getCaptureValue, .-getCaptureValue
 3145              		.bss
 3146              	hornFrequencyCount.7315:
 3147 0002 00       		.space	1
 3148              	hornWiggleCount.7319:
 3149 0003 00       		.space	1
 3150              		.data
 3151              		.type	bFrequencyChange.7318, %object
 3152              		.size	bFrequencyChange.7318, 1
 3153              	bFrequencyChange.7318:
 3154 0090 01       		.byte	1
 3155              		.section	.rodata
 3156              		.type	HORN_WIGGLE_WIDTH.7317, %object
 3157              		.size	HORN_WIGGLE_WIDTH.7317, 1
 3158              	HORN_WIGGLE_WIDTH.7317:
 3159 0036 14       		.byte	20
 3160              		.type	HORN_FREQUENCY_COUNT_LIMIT.7314, %object
 3161              		.size	HORN_FREQUENCY_COUNT_LIMIT.7314, 1
 3162              	HORN_FREQUENCY_COUNT_LIMIT.7314:
 3163 0037 01       		.byte	1
 3164              		.bss
 3165              	hornFrequencyCount.7327:
 3166 0004 00       		.space	1
 3167              	hornWiggleCount.7331:
 3168 0005 00       		.space	1
 3169              		.data
 3170              		.type	bFrequencyChange.7330, %object
 3171              		.size	bFrequencyChange.7330, 1
 3172              	bFrequencyChange.7330:
 3173 0091 01       		.byte	1
 3174 0092 0000     		.section	.rodata
 3175              		.type	HORN_WIGGLE_WIDTH.7329, %object
 3176              		.size	HORN_WIGGLE_WIDTH.7329, 1
 3177              	HORN_WIGGLE_WIDTH.7329:
 3178 0038 14       		.byte	20
 3179              		.type	HORN_FREQUENCY_COUNT_LIMIT.7326, %object
 3180              		.size	HORN_FREQUENCY_COUNT_LIMIT.7326, 1
 3181              	HORN_FREQUENCY_COUNT_LIMIT.7326:
 3182 0039 01       		.byte	1
 3183              		.align	1
 3184              		.type	HIGH_LOW_COUNT_LIMIT.7365, %object
 3185              		.size	HIGH_LOW_COUNT_LIMIT.7365, 2
 3186              	HIGH_LOW_COUNT_LIMIT.7365:
 3187 003a FA00     		.short	250
 3188              		.align	1
 3189              		.type	RAMP_UP_COUNT_LIMIT.7370, %object
 3190              		.size	RAMP_UP_COUNT_LIMIT.7370, 2
 3191              	RAMP_UP_COUNT_LIMIT.7370:
 3192 003c 1900     		.short	25
 3193              		.align	1
 3194              		.type	RAMP_UP_INITIAL_DIFFERENCE.7369, %object
 3195              		.size	RAMP_UP_INITIAL_DIFFERENCE.7369, 2
 3196              	RAMP_UP_INITIAL_DIFFERENCE.7369:
 3197 003e 0F00     		.short	15
 3198              		.align	1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 76


 3199              		.type	HOLD_NOTE_FACTOR.7378, %object
 3200              		.size	HOLD_NOTE_FACTOR.7378, 2
 3201              	HOLD_NOTE_FACTOR.7378:
 3202 0040 2300     		.short	35
 3203 0042 0000     		.align	2
 3204              		.type	COMBO_COUNT_LIMIT.7386, %object
 3205              		.size	COMBO_COUNT_LIMIT.7386, 4
 3206              	COMBO_COUNT_LIMIT.7386:
 3207 0044 FFFF0300 		.word	262143
 3208              		.align	1
 3209              		.type	HIGH_LOW_COUNT_LIMIT.7392, %object
 3210              		.size	HIGH_LOW_COUNT_LIMIT.7392, 2
 3211              	HIGH_LOW_COUNT_LIMIT.7392:
 3212 0048 FA00     		.short	250
 3213 004a 0000     		.align	2
 3214              		.type	PWM_CLOCK_FREQUENCY.7396, %object
 3215              		.size	PWM_CLOCK_FREQUENCY.7396, 4
 3216              	PWM_CLOCK_FREQUENCY.7396:
 3217 004c 40420F00 		.word	1000000
 3218              		.text
 3219              	.Letext0:
 3220              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 3221              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\3.3\\psoc creator\\import\\gnu\\arm\\4.9.
 3222              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 3223              		.file 5 ".\\CommonVariables.h"
 3224              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 3225              		.section	.debug_info,"",%progbits
 3226              	.Ldebug_info0:
 3227 0000 57080000 		.4byte	0x857
 3228 0004 0400     		.2byte	0x4
 3229 0006 00000000 		.4byte	.Ldebug_abbrev0
 3230 000a 04       		.byte	0x4
 3231 000b 01       		.uleb128 0x1
 3232 000c D9020000 		.4byte	.LASF115
 3233 0010 01       		.byte	0x1
 3234 0011 57060000 		.4byte	.LASF116
 3235 0015 FB000000 		.4byte	.LASF117
 3236 0019 00000000 		.4byte	.Ldebug_ranges0+0
 3237 001d 00000000 		.4byte	0
 3238 0021 00000000 		.4byte	.Ldebug_line0
 3239 0025 02       		.uleb128 0x2
 3240 0026 01       		.byte	0x1
 3241 0027 06       		.byte	0x6
 3242 0028 15040000 		.4byte	.LASF0
 3243 002c 02       		.uleb128 0x2
 3244 002d 01       		.byte	0x1
 3245 002e 08       		.byte	0x8
 3246 002f FC030000 		.4byte	.LASF1
 3247 0033 02       		.uleb128 0x2
 3248 0034 02       		.byte	0x2
 3249 0035 05       		.byte	0x5
 3250 0036 C6000000 		.4byte	.LASF2
 3251 003a 02       		.uleb128 0x2
 3252 003b 02       		.byte	0x2
 3253 003c 07       		.byte	0x7
 3254 003d CF040000 		.4byte	.LASF3
 3255 0041 03       		.uleb128 0x3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 77


 3256 0042 4D060000 		.4byte	.LASF9
 3257 0046 02       		.byte	0x2
 3258 0047 3F       		.byte	0x3f
 3259 0048 4C000000 		.4byte	0x4c
 3260 004c 02       		.uleb128 0x2
 3261 004d 04       		.byte	0x4
 3262 004e 05       		.byte	0x5
 3263 004f 00050000 		.4byte	.LASF4
 3264 0053 02       		.uleb128 0x2
 3265 0054 04       		.byte	0x4
 3266 0055 07       		.byte	0x7
 3267 0056 8C040000 		.4byte	.LASF5
 3268 005a 02       		.uleb128 0x2
 3269 005b 08       		.byte	0x8
 3270 005c 05       		.byte	0x5
 3271 005d 9D020000 		.4byte	.LASF6
 3272 0061 02       		.uleb128 0x2
 3273 0062 08       		.byte	0x8
 3274 0063 07       		.byte	0x7
 3275 0064 21040000 		.4byte	.LASF7
 3276 0068 04       		.uleb128 0x4
 3277 0069 04       		.byte	0x4
 3278 006a 05       		.byte	0x5
 3279 006b 696E7400 		.ascii	"int\000"
 3280 006f 02       		.uleb128 0x2
 3281 0070 04       		.byte	0x4
 3282 0071 07       		.byte	0x7
 3283 0072 56040000 		.4byte	.LASF8
 3284 0076 03       		.uleb128 0x3
 3285 0077 1E050000 		.4byte	.LASF10
 3286 007b 03       		.byte	0x3
 3287 007c 2C       		.byte	0x2c
 3288 007d 41000000 		.4byte	0x41
 3289 0081 03       		.uleb128 0x3
 3290 0082 22020000 		.4byte	.LASF11
 3291 0086 04       		.byte	0x4
 3292 0087 C2       		.byte	0xc2
 3293 0088 2C000000 		.4byte	0x2c
 3294 008c 03       		.uleb128 0x3
 3295 008d 66050000 		.4byte	.LASF12
 3296 0091 04       		.byte	0x4
 3297 0092 C3       		.byte	0xc3
 3298 0093 3A000000 		.4byte	0x3a
 3299 0097 03       		.uleb128 0x3
 3300 0098 90050000 		.4byte	.LASF13
 3301 009c 04       		.byte	0x4
 3302 009d C4       		.byte	0xc4
 3303 009e 53000000 		.4byte	0x53
 3304 00a2 02       		.uleb128 0x2
 3305 00a3 04       		.byte	0x4
 3306 00a4 04       		.byte	0x4
 3307 00a5 82020000 		.4byte	.LASF14
 3308 00a9 02       		.uleb128 0x2
 3309 00aa 08       		.byte	0x8
 3310 00ab 04       		.byte	0x4
 3311 00ac D5060000 		.4byte	.LASF15
 3312 00b0 02       		.uleb128 0x2
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 78


 3313 00b1 01       		.byte	0x1
 3314 00b2 08       		.byte	0x8
 3315 00b3 EE040000 		.4byte	.LASF16
 3316 00b7 02       		.uleb128 0x2
 3317 00b8 04       		.byte	0x4
 3318 00b9 07       		.byte	0x7
 3319 00ba D9000000 		.4byte	.LASF17
 3320 00be 05       		.uleb128 0x5
 3321 00bf 0A000000 		.4byte	.LASF41
 3322 00c3 01       		.byte	0x1
 3323 00c4 05       		.byte	0x5
 3324 00c5 1D       		.byte	0x1d
 3325 00c6 55010000 		.4byte	0x155
 3326 00ca 06       		.uleb128 0x6
 3327 00cb AB020000 		.4byte	.LASF18
 3328 00cf 00       		.sleb128 0
 3329 00d0 06       		.uleb128 0x6
 3330 00d1 F7030000 		.4byte	.LASF19
 3331 00d5 01       		.sleb128 1
 3332 00d6 06       		.uleb128 0x6
 3333 00d7 6F070000 		.4byte	.LASF20
 3334 00db 02       		.sleb128 2
 3335 00dc 06       		.uleb128 0x6
 3336 00dd BB030000 		.4byte	.LASF21
 3337 00e1 03       		.sleb128 3
 3338 00e2 06       		.uleb128 0x6
 3339 00e3 13000000 		.4byte	.LASF22
 3340 00e7 04       		.sleb128 4
 3341 00e8 06       		.uleb128 0x6
 3342 00e9 82030000 		.4byte	.LASF23
 3343 00ed 05       		.sleb128 5
 3344 00ee 06       		.uleb128 0x6
 3345 00ef DD030000 		.4byte	.LASF24
 3346 00f3 06       		.sleb128 6
 3347 00f4 06       		.uleb128 0x6
 3348 00f5 51050000 		.4byte	.LASF25
 3349 00f9 07       		.sleb128 7
 3350 00fa 06       		.uleb128 0x6
 3351 00fb 60000000 		.4byte	.LASF26
 3352 00ff 08       		.sleb128 8
 3353 0100 06       		.uleb128 0x6
 3354 0101 9A030000 		.4byte	.LASF27
 3355 0105 09       		.sleb128 9
 3356 0106 06       		.uleb128 0x6
 3357 0107 97050000 		.4byte	.LASF28
 3358 010b 0A       		.sleb128 10
 3359 010c 06       		.uleb128 0x6
 3360 010d DC060000 		.4byte	.LASF29
 3361 0111 0B       		.sleb128 11
 3362 0112 06       		.uleb128 0x6
 3363 0113 78020000 		.4byte	.LASF30
 3364 0117 0C       		.sleb128 12
 3365 0118 06       		.uleb128 0x6
 3366 0119 9E040000 		.4byte	.LASF31
 3367 011d 0D       		.sleb128 13
 3368 011e 06       		.uleb128 0x6
 3369 011f A5030000 		.4byte	.LASF32
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 79


 3370 0123 0E       		.sleb128 14
 3371 0124 06       		.uleb128 0x6
 3372 0125 6E020000 		.4byte	.LASF33
 3373 0129 0F       		.sleb128 15
 3374 012a 06       		.uleb128 0x6
 3375 012b D0000000 		.4byte	.LASF34
 3376 012f 10       		.sleb128 16
 3377 0130 06       		.uleb128 0x6
 3378 0131 00000000 		.4byte	.LASF35
 3379 0135 11       		.sleb128 17
 3380 0136 06       		.uleb128 0x6
 3381 0137 BD020000 		.4byte	.LASF36
 3382 013b 12       		.sleb128 18
 3383 013c 06       		.uleb128 0x6
 3384 013d 7E010000 		.4byte	.LASF37
 3385 0141 13       		.sleb128 19
 3386 0142 06       		.uleb128 0x6
 3387 0143 61060000 		.4byte	.LASF38
 3388 0147 14       		.sleb128 20
 3389 0148 06       		.uleb128 0x6
 3390 0149 9C060000 		.4byte	.LASF39
 3391 014d 15       		.sleb128 21
 3392 014e 06       		.uleb128 0x6
 3393 014f B3020000 		.4byte	.LASF40
 3394 0153 16       		.sleb128 22
 3395 0154 00       		.byte	0
 3396 0155 05       		.uleb128 0x5
 3397 0156 0A040000 		.4byte	.LASF42
 3398 015a 01       		.byte	0x1
 3399 015b 01       		.byte	0x1
 3400 015c 1F       		.byte	0x1f
 3401 015d 74010000 		.4byte	0x174
 3402 0161 06       		.uleb128 0x6
 3403 0162 7C000000 		.4byte	.LASF43
 3404 0166 00       		.sleb128 0
 3405 0167 06       		.uleb128 0x6
 3406 0168 F8060000 		.4byte	.LASF44
 3407 016c 01       		.sleb128 1
 3408 016d 06       		.uleb128 0x6
 3409 016e A2010000 		.4byte	.LASF45
 3410 0172 02       		.sleb128 2
 3411 0173 00       		.byte	0
 3412 0174 07       		.uleb128 0x7
 3413 0175 08       		.byte	0x8
 3414 0176 01       		.byte	0x1
 3415 0177 27       		.byte	0x27
 3416 0178 B9010000 		.4byte	0x1b9
 3417 017c 08       		.uleb128 0x8
 3418 017d CD030000 		.4byte	.LASF46
 3419 0181 01       		.byte	0x1
 3420 0182 29       		.byte	0x29
 3421 0183 8C000000 		.4byte	0x8c
 3422 0187 00       		.byte	0
 3423 0188 08       		.uleb128 0x8
 3424 0189 3D000000 		.4byte	.LASF47
 3425 018d 01       		.byte	0x1
 3426 018e 2A       		.byte	0x2a
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 80


 3427 018f 8C000000 		.4byte	0x8c
 3428 0193 02       		.byte	0x2
 3429 0194 08       		.uleb128 0x8
 3430 0195 1A020000 		.4byte	.LASF48
 3431 0199 01       		.byte	0x1
 3432 019a 2B       		.byte	0x2b
 3433 019b 8C000000 		.4byte	0x8c
 3434 019f 04       		.byte	0x4
 3435 01a0 08       		.uleb128 0x8
 3436 01a1 AF030000 		.4byte	.LASF49
 3437 01a5 01       		.byte	0x1
 3438 01a6 2C       		.byte	0x2c
 3439 01a7 81000000 		.4byte	0x81
 3440 01ab 06       		.byte	0x6
 3441 01ac 08       		.uleb128 0x8
 3442 01ad 9C000000 		.4byte	.LASF50
 3443 01b1 01       		.byte	0x1
 3444 01b2 2D       		.byte	0x2d
 3445 01b3 81000000 		.4byte	0x81
 3446 01b7 07       		.byte	0x7
 3447 01b8 00       		.byte	0
 3448 01b9 03       		.uleb128 0x3
 3449 01ba 6F040000 		.4byte	.LASF51
 3450 01be 01       		.byte	0x1
 3451 01bf 2E       		.byte	0x2e
 3452 01c0 74010000 		.4byte	0x174
 3453 01c4 07       		.uleb128 0x7
 3454 01c5 18       		.byte	0x18
 3455 01c6 01       		.byte	0x1
 3456 01c7 40       		.byte	0x40
 3457 01c8 69020000 		.4byte	0x269
 3458 01cc 08       		.uleb128 0x8
 3459 01cd 90010000 		.4byte	.LASF52
 3460 01d1 01       		.byte	0x1
 3461 01d2 42       		.byte	0x42
 3462 01d3 BE000000 		.4byte	0xbe
 3463 01d7 00       		.byte	0
 3464 01d8 08       		.uleb128 0x8
 3465 01d9 3E060000 		.4byte	.LASF53
 3466 01dd 01       		.byte	0x1
 3467 01de 43       		.byte	0x43
 3468 01df 8C000000 		.4byte	0x8c
 3469 01e3 02       		.byte	0x2
 3470 01e4 08       		.uleb128 0x8
 3471 01e5 1D070000 		.4byte	.LASF54
 3472 01e9 01       		.byte	0x1
 3473 01ea 44       		.byte	0x44
 3474 01eb 8C000000 		.4byte	0x8c
 3475 01ef 04       		.byte	0x4
 3476 01f0 08       		.uleb128 0x8
 3477 01f1 86000000 		.4byte	.LASF55
 3478 01f5 01       		.byte	0x1
 3479 01f6 45       		.byte	0x45
 3480 01f7 8C000000 		.4byte	0x8c
 3481 01fb 06       		.byte	0x6
 3482 01fc 08       		.uleb128 0x8
 3483 01fd 3D020000 		.4byte	.LASF56
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 81


 3484 0201 01       		.byte	0x1
 3485 0202 46       		.byte	0x46
 3486 0203 8C000000 		.4byte	0x8c
 3487 0207 08       		.byte	0x8
 3488 0208 08       		.uleb128 0x8
 3489 0209 CA060000 		.4byte	.LASF57
 3490 020d 01       		.byte	0x1
 3491 020e 47       		.byte	0x47
 3492 020f 97000000 		.4byte	0x97
 3493 0213 0C       		.byte	0xc
 3494 0214 08       		.uleb128 0x8
 3495 0215 C2010000 		.4byte	.LASF58
 3496 0219 01       		.byte	0x1
 3497 021a 48       		.byte	0x48
 3498 021b 81000000 		.4byte	0x81
 3499 021f 10       		.byte	0x10
 3500 0220 08       		.uleb128 0x8
 3501 0221 61020000 		.4byte	.LASF59
 3502 0225 01       		.byte	0x1
 3503 0226 49       		.byte	0x49
 3504 0227 81000000 		.4byte	0x81
 3505 022b 11       		.byte	0x11
 3506 022c 08       		.uleb128 0x8
 3507 022d 03070000 		.4byte	.LASF60
 3508 0231 01       		.byte	0x1
 3509 0232 4A       		.byte	0x4a
 3510 0233 81000000 		.4byte	0x81
 3511 0237 12       		.byte	0x12
 3512 0238 08       		.uleb128 0x8
 3513 0239 6D050000 		.4byte	.LASF61
 3514 023d 01       		.byte	0x1
 3515 023e 4B       		.byte	0x4b
 3516 023f 81000000 		.4byte	0x81
 3517 0243 13       		.byte	0x13
 3518 0244 08       		.uleb128 0x8
 3519 0245 A2050000 		.4byte	.LASF62
 3520 0249 01       		.byte	0x1
 3521 024a 4C       		.byte	0x4c
 3522 024b 81000000 		.4byte	0x81
 3523 024f 14       		.byte	0x14
 3524 0250 08       		.uleb128 0x8
 3525 0251 E8030000 		.4byte	.LASF63
 3526 0255 01       		.byte	0x1
 3527 0256 4D       		.byte	0x4d
 3528 0257 81000000 		.4byte	0x81
 3529 025b 15       		.byte	0x15
 3530 025c 08       		.uleb128 0x8
 3531 025d 38040000 		.4byte	.LASF64
 3532 0261 01       		.byte	0x1
 3533 0262 4E       		.byte	0x4e
 3534 0263 81000000 		.4byte	0x81
 3535 0267 16       		.byte	0x16
 3536 0268 00       		.byte	0
 3537 0269 03       		.uleb128 0x3
 3538 026a 0A020000 		.4byte	.LASF65
 3539 026e 01       		.byte	0x1
 3540 026f 4F       		.byte	0x4f
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 82


 3541 0270 C4010000 		.4byte	0x1c4
 3542 0274 09       		.uleb128 0x9
 3543 0275 EB050000 		.4byte	.LASF70
 3544 0279 01       		.byte	0x1
 3545 027a 7C       		.byte	0x7c
 3546 027b 81000000 		.4byte	0x81
 3547 027f 00000000 		.4byte	.LFB63
 3548 0283 98020000 		.4byte	.LFE63-.LFB63
 3549 0287 01       		.uleb128 0x1
 3550 0288 9C       		.byte	0x9c
 3551 0289 C6020000 		.4byte	0x2c6
 3552 028d 0A       		.uleb128 0xa
 3553 028e 5D050000 		.4byte	.LASF66
 3554 0292 01       		.byte	0x1
 3555 0293 7C       		.byte	0x7c
 3556 0294 81000000 		.4byte	0x81
 3557 0298 02       		.uleb128 0x2
 3558 0299 91       		.byte	0x91
 3559 029a 6F       		.sleb128 -17
 3560 029b 0A       		.uleb128 0xa
 3561 029c C5030000 		.4byte	.LASF67
 3562 02a0 01       		.byte	0x1
 3563 02a1 7C       		.byte	0x7c
 3564 02a2 BE000000 		.4byte	0xbe
 3565 02a6 02       		.uleb128 0x2
 3566 02a7 91       		.byte	0x91
 3567 02a8 6E       		.sleb128 -18
 3568 02a9 0A       		.uleb128 0xa
 3569 02aa 2D060000 		.4byte	.LASF68
 3570 02ae 01       		.byte	0x1
 3571 02af 7C       		.byte	0x7c
 3572 02b0 81000000 		.4byte	0x81
 3573 02b4 02       		.uleb128 0x2
 3574 02b5 91       		.byte	0x91
 3575 02b6 6D       		.sleb128 -19
 3576 02b7 0A       		.uleb128 0xa
 3577 02b8 73060000 		.4byte	.LASF69
 3578 02bc 01       		.byte	0x1
 3579 02bd 7C       		.byte	0x7c
 3580 02be 81000000 		.4byte	0x81
 3581 02c2 02       		.uleb128 0x2
 3582 02c3 91       		.byte	0x91
 3583 02c4 6C       		.sleb128 -20
 3584 02c5 00       		.byte	0
 3585 02c6 09       		.uleb128 0x9
 3586 02c7 E2040000 		.4byte	.LASF71
 3587 02cb 01       		.byte	0x1
 3588 02cc EC       		.byte	0xec
 3589 02cd 81000000 		.4byte	0x81
 3590 02d1 00000000 		.4byte	.LFB64
 3591 02d5 A8000000 		.4byte	.LFE64-.LFB64
 3592 02d9 01       		.uleb128 0x1
 3593 02da 9C       		.byte	0x9c
 3594 02db EE020000 		.4byte	0x2ee
 3595 02df 0A       		.uleb128 0xa
 3596 02e0 5D050000 		.4byte	.LASF66
 3597 02e4 01       		.byte	0x1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 83


 3598 02e5 EC       		.byte	0xec
 3599 02e6 81000000 		.4byte	0x81
 3600 02ea 02       		.uleb128 0x2
 3601 02eb 91       		.byte	0x91
 3602 02ec 77       		.sleb128 -9
 3603 02ed 00       		.byte	0
 3604 02ee 0B       		.uleb128 0xb
 3605 02ef F3010000 		.4byte	.LASF72
 3606 02f3 01       		.byte	0x1
 3607 02f4 1601     		.2byte	0x116
 3608 02f6 81000000 		.4byte	0x81
 3609 02fa 00000000 		.4byte	.LFB65
 3610 02fe D0010000 		.4byte	.LFE65-.LFB65
 3611 0302 01       		.uleb128 0x1
 3612 0303 9C       		.byte	0x9c
 3613 0304 18030000 		.4byte	0x318
 3614 0308 0C       		.uleb128 0xc
 3615 0309 5D050000 		.4byte	.LASF66
 3616 030d 01       		.byte	0x1
 3617 030e 1601     		.2byte	0x116
 3618 0310 81000000 		.4byte	0x81
 3619 0314 02       		.uleb128 0x2
 3620 0315 91       		.byte	0x91
 3621 0316 77       		.sleb128 -9
 3622 0317 00       		.byte	0
 3623 0318 0D       		.uleb128 0xd
 3624 0319 44070000 		.4byte	.LASF78
 3625 031d 01       		.byte	0x1
 3626 031e 5C01     		.2byte	0x15c
 3627 0320 00000000 		.4byte	.LFB66
 3628 0324 FC000000 		.4byte	.LFE66-.LFB66
 3629 0328 01       		.uleb128 0x1
 3630 0329 9C       		.byte	0x9c
 3631 032a 98030000 		.4byte	0x398
 3632 032e 0E       		.uleb128 0xe
 3633 032f 26050000 		.4byte	.LASF73
 3634 0333 01       		.byte	0x1
 3635 0334 5E01     		.2byte	0x15e
 3636 0336 98030000 		.4byte	0x398
 3637 033a 05       		.uleb128 0x5
 3638 033b 03       		.byte	0x3
 3639 033c 37000000 		.4byte	HORN_FREQUENCY_COUNT_LIMIT.7314
 3640 0340 0E       		.uleb128 0xe
 3641 0341 87030000 		.4byte	.LASF74
 3642 0345 01       		.byte	0x1
 3643 0346 5F01     		.2byte	0x15f
 3644 0348 81000000 		.4byte	0x81
 3645 034c 05       		.uleb128 0x5
 3646 034d 03       		.byte	0x3
 3647 034e 02000000 		.4byte	hornFrequencyCount.7315
 3648 0352 0E       		.uleb128 0xe
 3649 0353 D3010000 		.4byte	.LASF75
 3650 0357 01       		.byte	0x1
 3651 0358 6001     		.2byte	0x160
 3652 035a 8C000000 		.4byte	0x8c
 3653 035e 02       		.uleb128 0x2
 3654 035f 91       		.byte	0x91
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 84


 3655 0360 76       		.sleb128 -10
 3656 0361 0E       		.uleb128 0xe
 3657 0362 5D070000 		.4byte	.LASF76
 3658 0366 01       		.byte	0x1
 3659 0367 6201     		.2byte	0x162
 3660 0369 98030000 		.4byte	0x398
 3661 036d 05       		.uleb128 0x5
 3662 036e 03       		.byte	0x3
 3663 036f 36000000 		.4byte	HORN_WIGGLE_WIDTH.7317
 3664 0373 0E       		.uleb128 0xe
 3665 0374 C2010000 		.4byte	.LASF58
 3666 0378 01       		.byte	0x1
 3667 0379 6301     		.2byte	0x163
 3668 037b 81000000 		.4byte	0x81
 3669 037f 05       		.uleb128 0x5
 3670 0380 03       		.byte	0x3
 3671 0381 90000000 		.4byte	bFrequencyChange.7318
 3672 0385 0E       		.uleb128 0xe
 3673 0386 EB000000 		.4byte	.LASF77
 3674 038a 01       		.byte	0x1
 3675 038b 6401     		.2byte	0x164
 3676 038d 81000000 		.4byte	0x81
 3677 0391 05       		.uleb128 0x5
 3678 0392 03       		.byte	0x3
 3679 0393 03000000 		.4byte	hornWiggleCount.7319
 3680 0397 00       		.byte	0
 3681 0398 0F       		.uleb128 0xf
 3682 0399 81000000 		.4byte	0x81
 3683 039d 0D       		.uleb128 0xd
 3684 039e 83060000 		.4byte	.LASF79
 3685 03a2 01       		.byte	0x1
 3686 03a3 9F01     		.2byte	0x19f
 3687 03a5 00000000 		.4byte	.LFB67
 3688 03a9 E8000000 		.4byte	.LFE67-.LFB67
 3689 03ad 01       		.uleb128 0x1
 3690 03ae 9C       		.byte	0x9c
 3691 03af 1D040000 		.4byte	0x41d
 3692 03b3 0E       		.uleb128 0xe
 3693 03b4 26050000 		.4byte	.LASF73
 3694 03b8 01       		.byte	0x1
 3695 03b9 A101     		.2byte	0x1a1
 3696 03bb 98030000 		.4byte	0x398
 3697 03bf 05       		.uleb128 0x5
 3698 03c0 03       		.byte	0x3
 3699 03c1 39000000 		.4byte	HORN_FREQUENCY_COUNT_LIMIT.7326
 3700 03c5 0E       		.uleb128 0xe
 3701 03c6 87030000 		.4byte	.LASF74
 3702 03ca 01       		.byte	0x1
 3703 03cb A201     		.2byte	0x1a2
 3704 03cd 81000000 		.4byte	0x81
 3705 03d1 05       		.uleb128 0x5
 3706 03d2 03       		.byte	0x3
 3707 03d3 04000000 		.4byte	hornFrequencyCount.7327
 3708 03d7 0E       		.uleb128 0xe
 3709 03d8 D3010000 		.4byte	.LASF75
 3710 03dc 01       		.byte	0x1
 3711 03dd A301     		.2byte	0x1a3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 85


 3712 03df 8C000000 		.4byte	0x8c
 3713 03e3 02       		.uleb128 0x2
 3714 03e4 91       		.byte	0x91
 3715 03e5 76       		.sleb128 -10
 3716 03e6 0E       		.uleb128 0xe
 3717 03e7 5D070000 		.4byte	.LASF76
 3718 03eb 01       		.byte	0x1
 3719 03ec A501     		.2byte	0x1a5
 3720 03ee 98030000 		.4byte	0x398
 3721 03f2 05       		.uleb128 0x5
 3722 03f3 03       		.byte	0x3
 3723 03f4 38000000 		.4byte	HORN_WIGGLE_WIDTH.7329
 3724 03f8 0E       		.uleb128 0xe
 3725 03f9 C2010000 		.4byte	.LASF58
 3726 03fd 01       		.byte	0x1
 3727 03fe A601     		.2byte	0x1a6
 3728 0400 81000000 		.4byte	0x81
 3729 0404 05       		.uleb128 0x5
 3730 0405 03       		.byte	0x3
 3731 0406 91000000 		.4byte	bFrequencyChange.7330
 3732 040a 0E       		.uleb128 0xe
 3733 040b EB000000 		.4byte	.LASF77
 3734 040f 01       		.byte	0x1
 3735 0410 A701     		.2byte	0x1a7
 3736 0412 81000000 		.4byte	0x81
 3737 0416 05       		.uleb128 0x5
 3738 0417 03       		.byte	0x3
 3739 0418 05000000 		.4byte	hornWiggleCount.7331
 3740 041c 00       		.byte	0
 3741 041d 10       		.uleb128 0x10
 3742 041e 69000000 		.4byte	.LASF80
 3743 0422 01       		.byte	0x1
 3744 0423 DF01     		.2byte	0x1df
 3745 0425 81000000 		.4byte	0x81
 3746 0429 00000000 		.4byte	.LFB68
 3747 042d 3C000000 		.4byte	.LFE68-.LFB68
 3748 0431 01       		.uleb128 0x1
 3749 0432 9C       		.byte	0x9c
 3750 0433 47040000 		.4byte	0x447
 3751 0437 0C       		.uleb128 0xc
 3752 0438 5D050000 		.4byte	.LASF66
 3753 043c 01       		.byte	0x1
 3754 043d DF01     		.2byte	0x1df
 3755 043f 81000000 		.4byte	0x81
 3756 0443 02       		.uleb128 0x2
 3757 0444 91       		.byte	0x91
 3758 0445 77       		.sleb128 -9
 3759 0446 00       		.byte	0
 3760 0447 11       		.uleb128 0x11
 3761 0448 28020000 		.4byte	.LASF118
 3762 044c 01       		.byte	0x1
 3763 044d F501     		.2byte	0x1f5
 3764 044f 00000000 		.4byte	.LFB69
 3765 0453 20000000 		.4byte	.LFE69-.LFB69
 3766 0457 01       		.uleb128 0x1
 3767 0458 9C       		.byte	0x9c
 3768 0459 12       		.uleb128 0x12
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 86


 3769 045a 30070000 		.4byte	.LASF83
 3770 045e 01       		.byte	0x1
 3771 045f 0B02     		.2byte	0x20b
 3772 0461 81000000 		.4byte	0x81
 3773 0465 00000000 		.4byte	.LFB70
 3774 0469 98000000 		.4byte	.LFE70-.LFB70
 3775 046d 01       		.uleb128 0x1
 3776 046e 9C       		.byte	0x9c
 3777 046f A1040000 		.4byte	0x4a1
 3778 0473 0C       		.uleb128 0xc
 3779 0474 08060000 		.4byte	.LASF81
 3780 0478 01       		.byte	0x1
 3781 0479 0B02     		.2byte	0x20b
 3782 047b BE000000 		.4byte	0xbe
 3783 047f 02       		.uleb128 0x2
 3784 0480 91       		.byte	0x91
 3785 0481 77       		.sleb128 -9
 3786 0482 0C       		.uleb128 0xc
 3787 0483 12060000 		.4byte	.LASF82
 3788 0487 01       		.byte	0x1
 3789 0488 0B02     		.2byte	0x20b
 3790 048a BE000000 		.4byte	0xbe
 3791 048e 02       		.uleb128 0x2
 3792 048f 91       		.byte	0x91
 3793 0490 76       		.sleb128 -10
 3794 0491 0C       		.uleb128 0xc
 3795 0492 73060000 		.4byte	.LASF69
 3796 0496 01       		.byte	0x1
 3797 0497 0B02     		.2byte	0x20b
 3798 0499 81000000 		.4byte	0x81
 3799 049d 02       		.uleb128 0x2
 3800 049e 91       		.byte	0x91
 3801 049f 75       		.sleb128 -11
 3802 04a0 00       		.byte	0
 3803 04a1 13       		.uleb128 0x13
 3804 04a2 10070000 		.4byte	.LASF84
 3805 04a6 01       		.byte	0x1
 3806 04a7 3602     		.2byte	0x236
 3807 04a9 81000000 		.4byte	0x81
 3808 04ad 00000000 		.4byte	.LFB71
 3809 04b1 64000000 		.4byte	.LFE71-.LFB71
 3810 04b5 01       		.uleb128 0x1
 3811 04b6 9C       		.byte	0x9c
 3812 04b7 CB040000 		.4byte	0x4cb
 3813 04bb 0C       		.uleb128 0xc
 3814 04bc 1A000000 		.4byte	.LASF85
 3815 04c0 01       		.byte	0x1
 3816 04c1 3602     		.2byte	0x236
 3817 04c3 CB040000 		.4byte	0x4cb
 3818 04c7 02       		.uleb128 0x2
 3819 04c8 91       		.byte	0x91
 3820 04c9 74       		.sleb128 -12
 3821 04ca 00       		.byte	0
 3822 04cb 14       		.uleb128 0x14
 3823 04cc 04       		.byte	0x4
 3824 04cd 69020000 		.4byte	0x269
 3825 04d1 13       		.uleb128 0x13
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 87


 3826 04d2 B9040000 		.4byte	.LASF86
 3827 04d6 01       		.byte	0x1
 3828 04d7 5402     		.2byte	0x254
 3829 04d9 81000000 		.4byte	0x81
 3830 04dd 00000000 		.4byte	.LFB72
 3831 04e1 28010000 		.4byte	.LFE72-.LFB72
 3832 04e5 01       		.uleb128 0x1
 3833 04e6 9C       		.byte	0x9c
 3834 04e7 28050000 		.4byte	0x528
 3835 04eb 0C       		.uleb128 0xc
 3836 04ec 1A000000 		.4byte	.LASF85
 3837 04f0 01       		.byte	0x1
 3838 04f1 5402     		.2byte	0x254
 3839 04f3 CB040000 		.4byte	0x4cb
 3840 04f7 02       		.uleb128 0x2
 3841 04f8 91       		.byte	0x91
 3842 04f9 6C       		.sleb128 -20
 3843 04fa 0C       		.uleb128 0xc
 3844 04fb C5050000 		.4byte	.LASF87
 3845 04ff 01       		.byte	0x1
 3846 0500 5402     		.2byte	0x254
 3847 0502 28050000 		.4byte	0x528
 3848 0506 02       		.uleb128 0x2
 3849 0507 91       		.byte	0x91
 3850 0508 68       		.sleb128 -24
 3851 0509 0E       		.uleb128 0xe
 3852 050a 46040000 		.4byte	.LASF88
 3853 050e 01       		.byte	0x1
 3854 050f 5902     		.2byte	0x259
 3855 0511 8C000000 		.4byte	0x8c
 3856 0515 02       		.uleb128 0x2
 3857 0516 91       		.byte	0x91
 3858 0517 76       		.sleb128 -10
 3859 0518 0E       		.uleb128 0xe
 3860 0519 AA040000 		.4byte	.LASF89
 3861 051d 01       		.byte	0x1
 3862 051e 5A02     		.2byte	0x25a
 3863 0520 8C000000 		.4byte	0x8c
 3864 0524 02       		.uleb128 0x2
 3865 0525 91       		.byte	0x91
 3866 0526 74       		.sleb128 -12
 3867 0527 00       		.byte	0
 3868 0528 14       		.uleb128 0x14
 3869 0529 04       		.byte	0x4
 3870 052a B9010000 		.4byte	0x1b9
 3871 052e 13       		.uleb128 0x13
 3872 052f C6020000 		.4byte	.LASF90
 3873 0533 01       		.byte	0x1
 3874 0534 9002     		.2byte	0x290
 3875 0536 81000000 		.4byte	0x81
 3876 053a 00000000 		.4byte	.LFB73
 3877 053e F8000000 		.4byte	.LFE73-.LFB73
 3878 0542 01       		.uleb128 0x1
 3879 0543 9C       		.byte	0x9c
 3880 0544 85050000 		.4byte	0x585
 3881 0548 0C       		.uleb128 0xc
 3882 0549 5D050000 		.4byte	.LASF66
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 88


 3883 054d 01       		.byte	0x1
 3884 054e 9002     		.2byte	0x290
 3885 0550 81000000 		.4byte	0x81
 3886 0554 02       		.uleb128 0x2
 3887 0555 91       		.byte	0x91
 3888 0556 6F       		.sleb128 -17
 3889 0557 0C       		.uleb128 0xc
 3890 0558 1A000000 		.4byte	.LASF85
 3891 055c 01       		.byte	0x1
 3892 055d 9002     		.2byte	0x290
 3893 055f CB040000 		.4byte	0x4cb
 3894 0563 02       		.uleb128 0x2
 3895 0564 91       		.byte	0x91
 3896 0565 68       		.sleb128 -24
 3897 0566 0E       		.uleb128 0xe
 3898 0567 46040000 		.4byte	.LASF88
 3899 056b 01       		.byte	0x1
 3900 056c 9802     		.2byte	0x298
 3901 056e 8C000000 		.4byte	0x8c
 3902 0572 02       		.uleb128 0x2
 3903 0573 91       		.byte	0x91
 3904 0574 76       		.sleb128 -10
 3905 0575 0E       		.uleb128 0xe
 3906 0576 AA040000 		.4byte	.LASF89
 3907 057a 01       		.byte	0x1
 3908 057b 9902     		.2byte	0x299
 3909 057d 8C000000 		.4byte	0x8c
 3910 0581 02       		.uleb128 0x2
 3911 0582 91       		.byte	0x91
 3912 0583 74       		.sleb128 -12
 3913 0584 00       		.byte	0
 3914 0585 13       		.uleb128 0x13
 3915 0586 B6000000 		.4byte	.LASF91
 3916 058a 01       		.byte	0x1
 3917 058b CF02     		.2byte	0x2cf
 3918 058d 81000000 		.4byte	0x81
 3919 0591 00000000 		.4byte	.LFB74
 3920 0595 D0000000 		.4byte	.LFE74-.LFB74
 3921 0599 01       		.uleb128 0x1
 3922 059a 9C       		.byte	0x9c
 3923 059b D0050000 		.4byte	0x5d0
 3924 059f 0C       		.uleb128 0xc
 3925 05a0 1A000000 		.4byte	.LASF85
 3926 05a4 01       		.byte	0x1
 3927 05a5 CF02     		.2byte	0x2cf
 3928 05a7 CB040000 		.4byte	0x4cb
 3929 05ab 02       		.uleb128 0x2
 3930 05ac 91       		.byte	0x91
 3931 05ad 74       		.sleb128 -12
 3932 05ae 0C       		.uleb128 0xc
 3933 05af C5050000 		.4byte	.LASF87
 3934 05b3 01       		.byte	0x1
 3935 05b4 CF02     		.2byte	0x2cf
 3936 05b6 28050000 		.4byte	0x528
 3937 05ba 02       		.uleb128 0x2
 3938 05bb 91       		.byte	0x91
 3939 05bc 70       		.sleb128 -16
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 89


 3940 05bd 0E       		.uleb128 0xe
 3941 05be 79070000 		.4byte	.LASF92
 3942 05c2 01       		.byte	0x1
 3943 05c3 D102     		.2byte	0x2d1
 3944 05c5 D0050000 		.4byte	0x5d0
 3945 05c9 05       		.uleb128 0x5
 3946 05ca 03       		.byte	0x3
 3947 05cb 3A000000 		.4byte	HIGH_LOW_COUNT_LIMIT.7365
 3948 05cf 00       		.byte	0
 3949 05d0 0F       		.uleb128 0xf
 3950 05d1 8C000000 		.4byte	0x8c
 3951 05d5 13       		.uleb128 0x13
 3952 05d6 E0010000 		.4byte	.LASF93
 3953 05da 01       		.byte	0x1
 3954 05db 0503     		.2byte	0x305
 3955 05dd 81000000 		.4byte	0x81
 3956 05e1 00000000 		.4byte	.LFB75
 3957 05e5 64010000 		.4byte	.LFE75-.LFB75
 3958 05e9 01       		.uleb128 0x1
 3959 05ea 9C       		.byte	0x9c
 3960 05eb 50060000 		.4byte	0x650
 3961 05ef 0C       		.uleb128 0xc
 3962 05f0 1A000000 		.4byte	.LASF85
 3963 05f4 01       		.byte	0x1
 3964 05f5 0503     		.2byte	0x305
 3965 05f7 CB040000 		.4byte	0x4cb
 3966 05fb 02       		.uleb128 0x2
 3967 05fc 91       		.byte	0x91
 3968 05fd 6C       		.sleb128 -20
 3969 05fe 0E       		.uleb128 0xe
 3970 05ff 67030000 		.4byte	.LASF94
 3971 0603 01       		.byte	0x1
 3972 0604 0703     		.2byte	0x307
 3973 0606 D0050000 		.4byte	0x5d0
 3974 060a 05       		.uleb128 0x5
 3975 060b 03       		.byte	0x3
 3976 060c 3E000000 		.4byte	RAMP_UP_INITIAL_DIFFERENCE.7369
 3977 0610 0E       		.uleb128 0xe
 3978 0611 AE010000 		.4byte	.LASF95
 3979 0615 01       		.byte	0x1
 3980 0616 0803     		.2byte	0x308
 3981 0618 D0050000 		.4byte	0x5d0
 3982 061c 05       		.uleb128 0x5
 3983 061d 03       		.byte	0x3
 3984 061e 3C000000 		.4byte	RAMP_UP_COUNT_LIMIT.7370
 3985 0622 0E       		.uleb128 0xe
 3986 0623 4E000000 		.4byte	.LASF96
 3987 0627 01       		.byte	0x1
 3988 0628 0903     		.2byte	0x309
 3989 062a 8C000000 		.4byte	0x8c
 3990 062e 02       		.uleb128 0x2
 3991 062f 91       		.byte	0x91
 3992 0630 76       		.sleb128 -10
 3993 0631 0E       		.uleb128 0xe
 3994 0632 46040000 		.4byte	.LASF88
 3995 0636 01       		.byte	0x1
 3996 0637 0E03     		.2byte	0x30e
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 90


 3997 0639 8C000000 		.4byte	0x8c
 3998 063d 02       		.uleb128 0x2
 3999 063e 91       		.byte	0x91
 4000 063f 74       		.sleb128 -12
 4001 0640 0E       		.uleb128 0xe
 4002 0641 AA040000 		.4byte	.LASF89
 4003 0645 01       		.byte	0x1
 4004 0646 0F03     		.2byte	0x30f
 4005 0648 8C000000 		.4byte	0x8c
 4006 064c 02       		.uleb128 0x2
 4007 064d 91       		.byte	0x91
 4008 064e 72       		.sleb128 -14
 4009 064f 00       		.byte	0
 4010 0650 13       		.uleb128 0x13
 4011 0651 B7050000 		.4byte	.LASF97
 4012 0655 01       		.byte	0x1
 4013 0656 5203     		.2byte	0x352
 4014 0658 81000000 		.4byte	0x81
 4015 065c 00000000 		.4byte	.LFB76
 4016 0660 54010000 		.4byte	.LFE76-.LFB76
 4017 0664 01       		.uleb128 0x1
 4018 0665 9C       		.byte	0x9c
 4019 0666 B9060000 		.4byte	0x6b9
 4020 066a 0C       		.uleb128 0xc
 4021 066b 1A000000 		.4byte	.LASF85
 4022 066f 01       		.byte	0x1
 4023 0670 5203     		.2byte	0x352
 4024 0672 CB040000 		.4byte	0x4cb
 4025 0676 02       		.uleb128 0x2
 4026 0677 91       		.byte	0x91
 4027 0678 6C       		.sleb128 -20
 4028 0679 0C       		.uleb128 0xc
 4029 067a C5050000 		.4byte	.LASF87
 4030 067e 01       		.byte	0x1
 4031 067f 5203     		.2byte	0x352
 4032 0681 28050000 		.4byte	0x528
 4033 0685 02       		.uleb128 0x2
 4034 0686 91       		.byte	0x91
 4035 0687 68       		.sleb128 -24
 4036 0688 0E       		.uleb128 0xe
 4037 0689 50020000 		.4byte	.LASF98
 4038 068d 01       		.byte	0x1
 4039 068e 5403     		.2byte	0x354
 4040 0690 D0050000 		.4byte	0x5d0
 4041 0694 05       		.uleb128 0x5
 4042 0695 03       		.byte	0x3
 4043 0696 40000000 		.4byte	HOLD_NOTE_FACTOR.7378
 4044 069a 0E       		.uleb128 0xe
 4045 069b 46040000 		.4byte	.LASF88
 4046 069f 01       		.byte	0x1
 4047 06a0 5903     		.2byte	0x359
 4048 06a2 8C000000 		.4byte	0x8c
 4049 06a6 02       		.uleb128 0x2
 4050 06a7 91       		.byte	0x91
 4051 06a8 76       		.sleb128 -10
 4052 06a9 0E       		.uleb128 0xe
 4053 06aa AA040000 		.4byte	.LASF89
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 91


 4054 06ae 01       		.byte	0x1
 4055 06af 5A03     		.2byte	0x35a
 4056 06b1 8C000000 		.4byte	0x8c
 4057 06b5 02       		.uleb128 0x2
 4058 06b6 91       		.byte	0x91
 4059 06b7 74       		.sleb128 -12
 4060 06b8 00       		.byte	0
 4061 06b9 13       		.uleb128 0x13
 4062 06ba A8000000 		.4byte	.LASF99
 4063 06be 01       		.byte	0x1
 4064 06bf 9A03     		.2byte	0x39a
 4065 06c1 81000000 		.4byte	0x81
 4066 06c5 00000000 		.4byte	.LFB77
 4067 06c9 24020000 		.4byte	.LFE77-.LFB77
 4068 06cd 01       		.uleb128 0x1
 4069 06ce 9C       		.byte	0x9c
 4070 06cf 31070000 		.4byte	0x731
 4071 06d3 0C       		.uleb128 0xc
 4072 06d4 5D050000 		.4byte	.LASF66
 4073 06d8 01       		.byte	0x1
 4074 06d9 9A03     		.2byte	0x39a
 4075 06db 81000000 		.4byte	0x81
 4076 06df 02       		.uleb128 0x2
 4077 06e0 91       		.byte	0x91
 4078 06e1 6F       		.sleb128 -17
 4079 06e2 0C       		.uleb128 0xc
 4080 06e3 E8060000 		.4byte	.LASF100
 4081 06e7 01       		.byte	0x1
 4082 06e8 9A03     		.2byte	0x39a
 4083 06ea 28050000 		.4byte	0x528
 4084 06ee 02       		.uleb128 0x2
 4085 06ef 91       		.byte	0x91
 4086 06f0 68       		.sleb128 -24
 4087 06f1 0C       		.uleb128 0xc
 4088 06f2 F7050000 		.4byte	.LASF101
 4089 06f6 01       		.byte	0x1
 4090 06f7 9A03     		.2byte	0x39a
 4091 06f9 28050000 		.4byte	0x528
 4092 06fd 02       		.uleb128 0x2
 4093 06fe 91       		.byte	0x91
 4094 06ff 64       		.sleb128 -28
 4095 0700 0E       		.uleb128 0xe
 4096 0701 7A040000 		.4byte	.LASF102
 4097 0705 01       		.byte	0x1
 4098 0706 9C03     		.2byte	0x39c
 4099 0708 31070000 		.4byte	0x731
 4100 070c 05       		.uleb128 0x5
 4101 070d 03       		.byte	0x3
 4102 070e 44000000 		.4byte	COMBO_COUNT_LIMIT.7386
 4103 0712 0E       		.uleb128 0xe
 4104 0713 D1050000 		.4byte	.LASF103
 4105 0717 01       		.byte	0x1
 4106 0718 9D03     		.2byte	0x39d
 4107 071a 97000000 		.4byte	0x97
 4108 071e 02       		.uleb128 0x2
 4109 071f 91       		.byte	0x91
 4110 0720 74       		.sleb128 -12
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 92


 4111 0721 0E       		.uleb128 0xe
 4112 0722 DE050000 		.4byte	.LASF104
 4113 0726 01       		.byte	0x1
 4114 0727 9E03     		.2byte	0x39e
 4115 0729 97000000 		.4byte	0x97
 4116 072d 02       		.uleb128 0x2
 4117 072e 91       		.byte	0x91
 4118 072f 70       		.sleb128 -16
 4119 0730 00       		.byte	0
 4120 0731 0F       		.uleb128 0xf
 4121 0732 97000000 		.4byte	0x97
 4122 0736 13       		.uleb128 0x13
 4123 0737 83050000 		.4byte	.LASF105
 4124 073b 01       		.byte	0x1
 4125 073c E703     		.2byte	0x3e7
 4126 073e 81000000 		.4byte	0x81
 4127 0742 00000000 		.4byte	.LFB78
 4128 0746 AC000000 		.4byte	.LFE78-.LFB78
 4129 074a 01       		.uleb128 0x1
 4130 074b 9C       		.byte	0x9c
 4131 074c 72070000 		.4byte	0x772
 4132 0750 0C       		.uleb128 0xc
 4133 0751 1A000000 		.4byte	.LASF85
 4134 0755 01       		.byte	0x1
 4135 0756 E703     		.2byte	0x3e7
 4136 0758 CB040000 		.4byte	0x4cb
 4137 075c 02       		.uleb128 0x2
 4138 075d 91       		.byte	0x91
 4139 075e 74       		.sleb128 -12
 4140 075f 0E       		.uleb128 0xe
 4141 0760 79070000 		.4byte	.LASF92
 4142 0764 01       		.byte	0x1
 4143 0765 E903     		.2byte	0x3e9
 4144 0767 D0050000 		.4byte	0x5d0
 4145 076b 05       		.uleb128 0x5
 4146 076c 03       		.byte	0x3
 4147 076d 48000000 		.4byte	HIGH_LOW_COUNT_LIMIT.7392
 4148 0771 00       		.byte	0
 4149 0772 12       		.uleb128 0x12
 4150 0773 41050000 		.4byte	.LASF106
 4151 0777 01       		.byte	0x1
 4152 0778 1A04     		.2byte	0x41a
 4153 077a 8C000000 		.4byte	0x8c
 4154 077e 00000000 		.4byte	.LFB79
 4155 0782 24000000 		.4byte	.LFE79-.LFB79
 4156 0786 01       		.uleb128 0x1
 4157 0787 9C       		.byte	0x9c
 4158 0788 AE070000 		.4byte	0x7ae
 4159 078c 0C       		.uleb128 0xc
 4160 078d AF060000 		.4byte	.LASF107
 4161 0791 01       		.byte	0x1
 4162 0792 1A04     		.2byte	0x41a
 4163 0794 8C000000 		.4byte	0x8c
 4164 0798 02       		.uleb128 0x2
 4165 0799 91       		.byte	0x91
 4166 079a 76       		.sleb128 -10
 4167 079b 0E       		.uleb128 0xe
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 93


 4168 079c 29000000 		.4byte	.LASF108
 4169 07a0 01       		.byte	0x1
 4170 07a1 1C04     		.2byte	0x41c
 4171 07a3 31070000 		.4byte	0x731
 4172 07a7 05       		.uleb128 0x5
 4173 07a8 03       		.byte	0x3
 4174 07a9 4C000000 		.4byte	PWM_CLOCK_FREQUENCY.7396
 4175 07ad 00       		.byte	0
 4176 07ae 15       		.uleb128 0x15
 4177 07af 88020000 		.4byte	.LASF109
 4178 07b3 01       		.byte	0x1
 4179 07b4 1D       		.byte	0x1d
 4180 07b5 D0050000 		.4byte	0x5d0
 4181 07b9 05       		.uleb128 0x5
 4182 07ba 03       		.byte	0x3
 4183 07bb 00000000 		.4byte	HORN_FIRST_FREQUENCY
 4184 07bf 16       		.uleb128 0x16
 4185 07c0 B9010000 		.4byte	0x1b9
 4186 07c4 CF070000 		.4byte	0x7cf
 4187 07c8 17       		.uleb128 0x17
 4188 07c9 B7000000 		.4byte	0xb7
 4189 07cd 0B       		.byte	0xb
 4190 07ce 00       		.byte	0
 4191 07cf 15       		.uleb128 0x15
 4192 07d0 E2000000 		.4byte	.LASF110
 4193 07d4 01       		.byte	0x1
 4194 07d5 30       		.byte	0x30
 4195 07d6 BF070000 		.4byte	0x7bf
 4196 07da 05       		.uleb128 0x5
 4197 07db 03       		.byte	0x3
 4198 07dc 00000000 		.4byte	toneList
 4199 07e0 16       		.uleb128 0x16
 4200 07e1 8C000000 		.4byte	0x8c
 4201 07e5 F0070000 		.4byte	0x7f0
 4202 07e9 17       		.uleb128 0x17
 4203 07ea B7000000 		.4byte	0xb7
 4204 07ee 18       		.byte	0x18
 4205 07ef 00       		.byte	0
 4206 07f0 15       		.uleb128 0x15
 4207 07f1 09050000 		.4byte	.LASF111
 4208 07f5 01       		.byte	0x1
 4209 07f6 51       		.byte	0x51
 4210 07f7 01080000 		.4byte	0x801
 4211 07fb 05       		.uleb128 0x5
 4212 07fc 03       		.byte	0x3
 4213 07fd 04000000 		.4byte	NOTES_FREQUENCY_LIST
 4214 0801 0F       		.uleb128 0xf
 4215 0802 E0070000 		.4byte	0x7e0
 4216 0806 16       		.uleb128 0x16
 4217 0807 69020000 		.4byte	0x269
 4218 080b 16080000 		.4byte	0x816
 4219 080f 17       		.uleb128 0x17
 4220 0810 B7000000 		.4byte	0xb7
 4221 0814 01       		.byte	0x1
 4222 0815 00       		.byte	0
 4223 0816 15       		.uleb128 0x15
 4224 0817 1D060000 		.4byte	.LASF112
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 94


 4225 081b 01       		.byte	0x1
 4226 081c 55       		.byte	0x55
 4227 081d 06080000 		.4byte	0x806
 4228 0821 05       		.uleb128 0x5
 4229 0822 03       		.byte	0x3
 4230 0823 60000000 		.4byte	speakerDataList
 4231 0827 15       		.uleb128 0x15
 4232 0828 B9060000 		.4byte	.LASF113
 4233 082c 01       		.byte	0x1
 4234 082d 59       		.byte	0x59
 4235 082e 55010000 		.4byte	0x155
 4236 0832 05       		.uleb128 0x5
 4237 0833 03       		.byte	0x3
 4238 0834 00000000 		.4byte	toneEffectStatus
 4239 0838 15       		.uleb128 0x15
 4240 0839 63040000 		.4byte	.LASF114
 4241 083d 01       		.byte	0x1
 4242 083e 5A       		.byte	0x5a
 4243 083f 81000000 		.4byte	0x81
 4244 0843 05       		.uleb128 0x5
 4245 0844 03       		.byte	0x3
 4246 0845 01000000 		.4byte	bEchoEnable
 4247 0849 18       		.uleb128 0x18
 4248 084a F3040000 		.4byte	.LASF119
 4249 084e 06       		.byte	0x6
 4250 084f 2A06     		.2byte	0x62a
 4251 0851 55080000 		.4byte	0x855
 4252 0855 19       		.uleb128 0x19
 4253 0856 76000000 		.4byte	0x76
 4254 085a 00       		.byte	0
 4255              		.section	.debug_abbrev,"",%progbits
 4256              	.Ldebug_abbrev0:
 4257 0000 01       		.uleb128 0x1
 4258 0001 11       		.uleb128 0x11
 4259 0002 01       		.byte	0x1
 4260 0003 25       		.uleb128 0x25
 4261 0004 0E       		.uleb128 0xe
 4262 0005 13       		.uleb128 0x13
 4263 0006 0B       		.uleb128 0xb
 4264 0007 03       		.uleb128 0x3
 4265 0008 0E       		.uleb128 0xe
 4266 0009 1B       		.uleb128 0x1b
 4267 000a 0E       		.uleb128 0xe
 4268 000b 55       		.uleb128 0x55
 4269 000c 17       		.uleb128 0x17
 4270 000d 11       		.uleb128 0x11
 4271 000e 01       		.uleb128 0x1
 4272 000f 10       		.uleb128 0x10
 4273 0010 17       		.uleb128 0x17
 4274 0011 00       		.byte	0
 4275 0012 00       		.byte	0
 4276 0013 02       		.uleb128 0x2
 4277 0014 24       		.uleb128 0x24
 4278 0015 00       		.byte	0
 4279 0016 0B       		.uleb128 0xb
 4280 0017 0B       		.uleb128 0xb
 4281 0018 3E       		.uleb128 0x3e
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 95


 4282 0019 0B       		.uleb128 0xb
 4283 001a 03       		.uleb128 0x3
 4284 001b 0E       		.uleb128 0xe
 4285 001c 00       		.byte	0
 4286 001d 00       		.byte	0
 4287 001e 03       		.uleb128 0x3
 4288 001f 16       		.uleb128 0x16
 4289 0020 00       		.byte	0
 4290 0021 03       		.uleb128 0x3
 4291 0022 0E       		.uleb128 0xe
 4292 0023 3A       		.uleb128 0x3a
 4293 0024 0B       		.uleb128 0xb
 4294 0025 3B       		.uleb128 0x3b
 4295 0026 0B       		.uleb128 0xb
 4296 0027 49       		.uleb128 0x49
 4297 0028 13       		.uleb128 0x13
 4298 0029 00       		.byte	0
 4299 002a 00       		.byte	0
 4300 002b 04       		.uleb128 0x4
 4301 002c 24       		.uleb128 0x24
 4302 002d 00       		.byte	0
 4303 002e 0B       		.uleb128 0xb
 4304 002f 0B       		.uleb128 0xb
 4305 0030 3E       		.uleb128 0x3e
 4306 0031 0B       		.uleb128 0xb
 4307 0032 03       		.uleb128 0x3
 4308 0033 08       		.uleb128 0x8
 4309 0034 00       		.byte	0
 4310 0035 00       		.byte	0
 4311 0036 05       		.uleb128 0x5
 4312 0037 04       		.uleb128 0x4
 4313 0038 01       		.byte	0x1
 4314 0039 03       		.uleb128 0x3
 4315 003a 0E       		.uleb128 0xe
 4316 003b 0B       		.uleb128 0xb
 4317 003c 0B       		.uleb128 0xb
 4318 003d 3A       		.uleb128 0x3a
 4319 003e 0B       		.uleb128 0xb
 4320 003f 3B       		.uleb128 0x3b
 4321 0040 0B       		.uleb128 0xb
 4322 0041 01       		.uleb128 0x1
 4323 0042 13       		.uleb128 0x13
 4324 0043 00       		.byte	0
 4325 0044 00       		.byte	0
 4326 0045 06       		.uleb128 0x6
 4327 0046 28       		.uleb128 0x28
 4328 0047 00       		.byte	0
 4329 0048 03       		.uleb128 0x3
 4330 0049 0E       		.uleb128 0xe
 4331 004a 1C       		.uleb128 0x1c
 4332 004b 0D       		.uleb128 0xd
 4333 004c 00       		.byte	0
 4334 004d 00       		.byte	0
 4335 004e 07       		.uleb128 0x7
 4336 004f 13       		.uleb128 0x13
 4337 0050 01       		.byte	0x1
 4338 0051 0B       		.uleb128 0xb
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 96


 4339 0052 0B       		.uleb128 0xb
 4340 0053 3A       		.uleb128 0x3a
 4341 0054 0B       		.uleb128 0xb
 4342 0055 3B       		.uleb128 0x3b
 4343 0056 0B       		.uleb128 0xb
 4344 0057 01       		.uleb128 0x1
 4345 0058 13       		.uleb128 0x13
 4346 0059 00       		.byte	0
 4347 005a 00       		.byte	0
 4348 005b 08       		.uleb128 0x8
 4349 005c 0D       		.uleb128 0xd
 4350 005d 00       		.byte	0
 4351 005e 03       		.uleb128 0x3
 4352 005f 0E       		.uleb128 0xe
 4353 0060 3A       		.uleb128 0x3a
 4354 0061 0B       		.uleb128 0xb
 4355 0062 3B       		.uleb128 0x3b
 4356 0063 0B       		.uleb128 0xb
 4357 0064 49       		.uleb128 0x49
 4358 0065 13       		.uleb128 0x13
 4359 0066 38       		.uleb128 0x38
 4360 0067 0B       		.uleb128 0xb
 4361 0068 00       		.byte	0
 4362 0069 00       		.byte	0
 4363 006a 09       		.uleb128 0x9
 4364 006b 2E       		.uleb128 0x2e
 4365 006c 01       		.byte	0x1
 4366 006d 3F       		.uleb128 0x3f
 4367 006e 19       		.uleb128 0x19
 4368 006f 03       		.uleb128 0x3
 4369 0070 0E       		.uleb128 0xe
 4370 0071 3A       		.uleb128 0x3a
 4371 0072 0B       		.uleb128 0xb
 4372 0073 3B       		.uleb128 0x3b
 4373 0074 0B       		.uleb128 0xb
 4374 0075 27       		.uleb128 0x27
 4375 0076 19       		.uleb128 0x19
 4376 0077 49       		.uleb128 0x49
 4377 0078 13       		.uleb128 0x13
 4378 0079 11       		.uleb128 0x11
 4379 007a 01       		.uleb128 0x1
 4380 007b 12       		.uleb128 0x12
 4381 007c 06       		.uleb128 0x6
 4382 007d 40       		.uleb128 0x40
 4383 007e 18       		.uleb128 0x18
 4384 007f 9642     		.uleb128 0x2116
 4385 0081 19       		.uleb128 0x19
 4386 0082 01       		.uleb128 0x1
 4387 0083 13       		.uleb128 0x13
 4388 0084 00       		.byte	0
 4389 0085 00       		.byte	0
 4390 0086 0A       		.uleb128 0xa
 4391 0087 05       		.uleb128 0x5
 4392 0088 00       		.byte	0
 4393 0089 03       		.uleb128 0x3
 4394 008a 0E       		.uleb128 0xe
 4395 008b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 97


 4396 008c 0B       		.uleb128 0xb
 4397 008d 3B       		.uleb128 0x3b
 4398 008e 0B       		.uleb128 0xb
 4399 008f 49       		.uleb128 0x49
 4400 0090 13       		.uleb128 0x13
 4401 0091 02       		.uleb128 0x2
 4402 0092 18       		.uleb128 0x18
 4403 0093 00       		.byte	0
 4404 0094 00       		.byte	0
 4405 0095 0B       		.uleb128 0xb
 4406 0096 2E       		.uleb128 0x2e
 4407 0097 01       		.byte	0x1
 4408 0098 3F       		.uleb128 0x3f
 4409 0099 19       		.uleb128 0x19
 4410 009a 03       		.uleb128 0x3
 4411 009b 0E       		.uleb128 0xe
 4412 009c 3A       		.uleb128 0x3a
 4413 009d 0B       		.uleb128 0xb
 4414 009e 3B       		.uleb128 0x3b
 4415 009f 05       		.uleb128 0x5
 4416 00a0 27       		.uleb128 0x27
 4417 00a1 19       		.uleb128 0x19
 4418 00a2 49       		.uleb128 0x49
 4419 00a3 13       		.uleb128 0x13
 4420 00a4 11       		.uleb128 0x11
 4421 00a5 01       		.uleb128 0x1
 4422 00a6 12       		.uleb128 0x12
 4423 00a7 06       		.uleb128 0x6
 4424 00a8 40       		.uleb128 0x40
 4425 00a9 18       		.uleb128 0x18
 4426 00aa 9642     		.uleb128 0x2116
 4427 00ac 19       		.uleb128 0x19
 4428 00ad 01       		.uleb128 0x1
 4429 00ae 13       		.uleb128 0x13
 4430 00af 00       		.byte	0
 4431 00b0 00       		.byte	0
 4432 00b1 0C       		.uleb128 0xc
 4433 00b2 05       		.uleb128 0x5
 4434 00b3 00       		.byte	0
 4435 00b4 03       		.uleb128 0x3
 4436 00b5 0E       		.uleb128 0xe
 4437 00b6 3A       		.uleb128 0x3a
 4438 00b7 0B       		.uleb128 0xb
 4439 00b8 3B       		.uleb128 0x3b
 4440 00b9 05       		.uleb128 0x5
 4441 00ba 49       		.uleb128 0x49
 4442 00bb 13       		.uleb128 0x13
 4443 00bc 02       		.uleb128 0x2
 4444 00bd 18       		.uleb128 0x18
 4445 00be 00       		.byte	0
 4446 00bf 00       		.byte	0
 4447 00c0 0D       		.uleb128 0xd
 4448 00c1 2E       		.uleb128 0x2e
 4449 00c2 01       		.byte	0x1
 4450 00c3 3F       		.uleb128 0x3f
 4451 00c4 19       		.uleb128 0x19
 4452 00c5 03       		.uleb128 0x3
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 98


 4453 00c6 0E       		.uleb128 0xe
 4454 00c7 3A       		.uleb128 0x3a
 4455 00c8 0B       		.uleb128 0xb
 4456 00c9 3B       		.uleb128 0x3b
 4457 00ca 05       		.uleb128 0x5
 4458 00cb 27       		.uleb128 0x27
 4459 00cc 19       		.uleb128 0x19
 4460 00cd 11       		.uleb128 0x11
 4461 00ce 01       		.uleb128 0x1
 4462 00cf 12       		.uleb128 0x12
 4463 00d0 06       		.uleb128 0x6
 4464 00d1 40       		.uleb128 0x40
 4465 00d2 18       		.uleb128 0x18
 4466 00d3 9642     		.uleb128 0x2116
 4467 00d5 19       		.uleb128 0x19
 4468 00d6 01       		.uleb128 0x1
 4469 00d7 13       		.uleb128 0x13
 4470 00d8 00       		.byte	0
 4471 00d9 00       		.byte	0
 4472 00da 0E       		.uleb128 0xe
 4473 00db 34       		.uleb128 0x34
 4474 00dc 00       		.byte	0
 4475 00dd 03       		.uleb128 0x3
 4476 00de 0E       		.uleb128 0xe
 4477 00df 3A       		.uleb128 0x3a
 4478 00e0 0B       		.uleb128 0xb
 4479 00e1 3B       		.uleb128 0x3b
 4480 00e2 05       		.uleb128 0x5
 4481 00e3 49       		.uleb128 0x49
 4482 00e4 13       		.uleb128 0x13
 4483 00e5 02       		.uleb128 0x2
 4484 00e6 18       		.uleb128 0x18
 4485 00e7 00       		.byte	0
 4486 00e8 00       		.byte	0
 4487 00e9 0F       		.uleb128 0xf
 4488 00ea 26       		.uleb128 0x26
 4489 00eb 00       		.byte	0
 4490 00ec 49       		.uleb128 0x49
 4491 00ed 13       		.uleb128 0x13
 4492 00ee 00       		.byte	0
 4493 00ef 00       		.byte	0
 4494 00f0 10       		.uleb128 0x10
 4495 00f1 2E       		.uleb128 0x2e
 4496 00f2 01       		.byte	0x1
 4497 00f3 3F       		.uleb128 0x3f
 4498 00f4 19       		.uleb128 0x19
 4499 00f5 03       		.uleb128 0x3
 4500 00f6 0E       		.uleb128 0xe
 4501 00f7 3A       		.uleb128 0x3a
 4502 00f8 0B       		.uleb128 0xb
 4503 00f9 3B       		.uleb128 0x3b
 4504 00fa 05       		.uleb128 0x5
 4505 00fb 27       		.uleb128 0x27
 4506 00fc 19       		.uleb128 0x19
 4507 00fd 49       		.uleb128 0x49
 4508 00fe 13       		.uleb128 0x13
 4509 00ff 11       		.uleb128 0x11
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 99


 4510 0100 01       		.uleb128 0x1
 4511 0101 12       		.uleb128 0x12
 4512 0102 06       		.uleb128 0x6
 4513 0103 40       		.uleb128 0x40
 4514 0104 18       		.uleb128 0x18
 4515 0105 9742     		.uleb128 0x2117
 4516 0107 19       		.uleb128 0x19
 4517 0108 01       		.uleb128 0x1
 4518 0109 13       		.uleb128 0x13
 4519 010a 00       		.byte	0
 4520 010b 00       		.byte	0
 4521 010c 11       		.uleb128 0x11
 4522 010d 2E       		.uleb128 0x2e
 4523 010e 00       		.byte	0
 4524 010f 3F       		.uleb128 0x3f
 4525 0110 19       		.uleb128 0x19
 4526 0111 03       		.uleb128 0x3
 4527 0112 0E       		.uleb128 0xe
 4528 0113 3A       		.uleb128 0x3a
 4529 0114 0B       		.uleb128 0xb
 4530 0115 3B       		.uleb128 0x3b
 4531 0116 05       		.uleb128 0x5
 4532 0117 27       		.uleb128 0x27
 4533 0118 19       		.uleb128 0x19
 4534 0119 11       		.uleb128 0x11
 4535 011a 01       		.uleb128 0x1
 4536 011b 12       		.uleb128 0x12
 4537 011c 06       		.uleb128 0x6
 4538 011d 40       		.uleb128 0x40
 4539 011e 18       		.uleb128 0x18
 4540 011f 9742     		.uleb128 0x2117
 4541 0121 19       		.uleb128 0x19
 4542 0122 00       		.byte	0
 4543 0123 00       		.byte	0
 4544 0124 12       		.uleb128 0x12
 4545 0125 2E       		.uleb128 0x2e
 4546 0126 01       		.byte	0x1
 4547 0127 03       		.uleb128 0x3
 4548 0128 0E       		.uleb128 0xe
 4549 0129 3A       		.uleb128 0x3a
 4550 012a 0B       		.uleb128 0xb
 4551 012b 3B       		.uleb128 0x3b
 4552 012c 05       		.uleb128 0x5
 4553 012d 27       		.uleb128 0x27
 4554 012e 19       		.uleb128 0x19
 4555 012f 49       		.uleb128 0x49
 4556 0130 13       		.uleb128 0x13
 4557 0131 11       		.uleb128 0x11
 4558 0132 01       		.uleb128 0x1
 4559 0133 12       		.uleb128 0x12
 4560 0134 06       		.uleb128 0x6
 4561 0135 40       		.uleb128 0x40
 4562 0136 18       		.uleb128 0x18
 4563 0137 9742     		.uleb128 0x2117
 4564 0139 19       		.uleb128 0x19
 4565 013a 01       		.uleb128 0x1
 4566 013b 13       		.uleb128 0x13
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 100


 4567 013c 00       		.byte	0
 4568 013d 00       		.byte	0
 4569 013e 13       		.uleb128 0x13
 4570 013f 2E       		.uleb128 0x2e
 4571 0140 01       		.byte	0x1
 4572 0141 03       		.uleb128 0x3
 4573 0142 0E       		.uleb128 0xe
 4574 0143 3A       		.uleb128 0x3a
 4575 0144 0B       		.uleb128 0xb
 4576 0145 3B       		.uleb128 0x3b
 4577 0146 05       		.uleb128 0x5
 4578 0147 27       		.uleb128 0x27
 4579 0148 19       		.uleb128 0x19
 4580 0149 49       		.uleb128 0x49
 4581 014a 13       		.uleb128 0x13
 4582 014b 11       		.uleb128 0x11
 4583 014c 01       		.uleb128 0x1
 4584 014d 12       		.uleb128 0x12
 4585 014e 06       		.uleb128 0x6
 4586 014f 40       		.uleb128 0x40
 4587 0150 18       		.uleb128 0x18
 4588 0151 9642     		.uleb128 0x2116
 4589 0153 19       		.uleb128 0x19
 4590 0154 01       		.uleb128 0x1
 4591 0155 13       		.uleb128 0x13
 4592 0156 00       		.byte	0
 4593 0157 00       		.byte	0
 4594 0158 14       		.uleb128 0x14
 4595 0159 0F       		.uleb128 0xf
 4596 015a 00       		.byte	0
 4597 015b 0B       		.uleb128 0xb
 4598 015c 0B       		.uleb128 0xb
 4599 015d 49       		.uleb128 0x49
 4600 015e 13       		.uleb128 0x13
 4601 015f 00       		.byte	0
 4602 0160 00       		.byte	0
 4603 0161 15       		.uleb128 0x15
 4604 0162 34       		.uleb128 0x34
 4605 0163 00       		.byte	0
 4606 0164 03       		.uleb128 0x3
 4607 0165 0E       		.uleb128 0xe
 4608 0166 3A       		.uleb128 0x3a
 4609 0167 0B       		.uleb128 0xb
 4610 0168 3B       		.uleb128 0x3b
 4611 0169 0B       		.uleb128 0xb
 4612 016a 49       		.uleb128 0x49
 4613 016b 13       		.uleb128 0x13
 4614 016c 02       		.uleb128 0x2
 4615 016d 18       		.uleb128 0x18
 4616 016e 00       		.byte	0
 4617 016f 00       		.byte	0
 4618 0170 16       		.uleb128 0x16
 4619 0171 01       		.uleb128 0x1
 4620 0172 01       		.byte	0x1
 4621 0173 49       		.uleb128 0x49
 4622 0174 13       		.uleb128 0x13
 4623 0175 01       		.uleb128 0x1
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 101


 4624 0176 13       		.uleb128 0x13
 4625 0177 00       		.byte	0
 4626 0178 00       		.byte	0
 4627 0179 17       		.uleb128 0x17
 4628 017a 21       		.uleb128 0x21
 4629 017b 00       		.byte	0
 4630 017c 49       		.uleb128 0x49
 4631 017d 13       		.uleb128 0x13
 4632 017e 2F       		.uleb128 0x2f
 4633 017f 0B       		.uleb128 0xb
 4634 0180 00       		.byte	0
 4635 0181 00       		.byte	0
 4636 0182 18       		.uleb128 0x18
 4637 0183 34       		.uleb128 0x34
 4638 0184 00       		.byte	0
 4639 0185 03       		.uleb128 0x3
 4640 0186 0E       		.uleb128 0xe
 4641 0187 3A       		.uleb128 0x3a
 4642 0188 0B       		.uleb128 0xb
 4643 0189 3B       		.uleb128 0x3b
 4644 018a 05       		.uleb128 0x5
 4645 018b 49       		.uleb128 0x49
 4646 018c 13       		.uleb128 0x13
 4647 018d 3F       		.uleb128 0x3f
 4648 018e 19       		.uleb128 0x19
 4649 018f 3C       		.uleb128 0x3c
 4650 0190 19       		.uleb128 0x19
 4651 0191 00       		.byte	0
 4652 0192 00       		.byte	0
 4653 0193 19       		.uleb128 0x19
 4654 0194 35       		.uleb128 0x35
 4655 0195 00       		.byte	0
 4656 0196 49       		.uleb128 0x49
 4657 0197 13       		.uleb128 0x13
 4658 0198 00       		.byte	0
 4659 0199 00       		.byte	0
 4660 019a 00       		.byte	0
 4661              		.section	.debug_aranges,"",%progbits
 4662 0000 9C000000 		.4byte	0x9c
 4663 0004 0200     		.2byte	0x2
 4664 0006 00000000 		.4byte	.Ldebug_info0
 4665 000a 04       		.byte	0x4
 4666 000b 00       		.byte	0
 4667 000c 0000     		.2byte	0
 4668 000e 0000     		.2byte	0
 4669 0010 00000000 		.4byte	.LFB63
 4670 0014 98020000 		.4byte	.LFE63-.LFB63
 4671 0018 00000000 		.4byte	.LFB64
 4672 001c A8000000 		.4byte	.LFE64-.LFB64
 4673 0020 00000000 		.4byte	.LFB65
 4674 0024 D0010000 		.4byte	.LFE65-.LFB65
 4675 0028 00000000 		.4byte	.LFB66
 4676 002c FC000000 		.4byte	.LFE66-.LFB66
 4677 0030 00000000 		.4byte	.LFB67
 4678 0034 E8000000 		.4byte	.LFE67-.LFB67
 4679 0038 00000000 		.4byte	.LFB68
 4680 003c 3C000000 		.4byte	.LFE68-.LFB68
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 102


 4681 0040 00000000 		.4byte	.LFB69
 4682 0044 20000000 		.4byte	.LFE69-.LFB69
 4683 0048 00000000 		.4byte	.LFB70
 4684 004c 98000000 		.4byte	.LFE70-.LFB70
 4685 0050 00000000 		.4byte	.LFB71
 4686 0054 64000000 		.4byte	.LFE71-.LFB71
 4687 0058 00000000 		.4byte	.LFB72
 4688 005c 28010000 		.4byte	.LFE72-.LFB72
 4689 0060 00000000 		.4byte	.LFB73
 4690 0064 F8000000 		.4byte	.LFE73-.LFB73
 4691 0068 00000000 		.4byte	.LFB74
 4692 006c D0000000 		.4byte	.LFE74-.LFB74
 4693 0070 00000000 		.4byte	.LFB75
 4694 0074 64010000 		.4byte	.LFE75-.LFB75
 4695 0078 00000000 		.4byte	.LFB76
 4696 007c 54010000 		.4byte	.LFE76-.LFB76
 4697 0080 00000000 		.4byte	.LFB77
 4698 0084 24020000 		.4byte	.LFE77-.LFB77
 4699 0088 00000000 		.4byte	.LFB78
 4700 008c AC000000 		.4byte	.LFE78-.LFB78
 4701 0090 00000000 		.4byte	.LFB79
 4702 0094 24000000 		.4byte	.LFE79-.LFB79
 4703 0098 00000000 		.4byte	0
 4704 009c 00000000 		.4byte	0
 4705              		.section	.debug_ranges,"",%progbits
 4706              	.Ldebug_ranges0:
 4707 0000 00000000 		.4byte	.LFB63
 4708 0004 98020000 		.4byte	.LFE63
 4709 0008 00000000 		.4byte	.LFB64
 4710 000c A8000000 		.4byte	.LFE64
 4711 0010 00000000 		.4byte	.LFB65
 4712 0014 D0010000 		.4byte	.LFE65
 4713 0018 00000000 		.4byte	.LFB66
 4714 001c FC000000 		.4byte	.LFE66
 4715 0020 00000000 		.4byte	.LFB67
 4716 0024 E8000000 		.4byte	.LFE67
 4717 0028 00000000 		.4byte	.LFB68
 4718 002c 3C000000 		.4byte	.LFE68
 4719 0030 00000000 		.4byte	.LFB69
 4720 0034 20000000 		.4byte	.LFE69
 4721 0038 00000000 		.4byte	.LFB70
 4722 003c 98000000 		.4byte	.LFE70
 4723 0040 00000000 		.4byte	.LFB71
 4724 0044 64000000 		.4byte	.LFE71
 4725 0048 00000000 		.4byte	.LFB72
 4726 004c 28010000 		.4byte	.LFE72
 4727 0050 00000000 		.4byte	.LFB73
 4728 0054 F8000000 		.4byte	.LFE73
 4729 0058 00000000 		.4byte	.LFB74
 4730 005c D0000000 		.4byte	.LFE74
 4731 0060 00000000 		.4byte	.LFB75
 4732 0064 64010000 		.4byte	.LFE75
 4733 0068 00000000 		.4byte	.LFB76
 4734 006c 54010000 		.4byte	.LFE76
 4735 0070 00000000 		.4byte	.LFB77
 4736 0074 24020000 		.4byte	.LFE77
 4737 0078 00000000 		.4byte	.LFB78
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 103


 4738 007c AC000000 		.4byte	.LFE78
 4739 0080 00000000 		.4byte	.LFB79
 4740 0084 24000000 		.4byte	.LFE79
 4741 0088 00000000 		.4byte	0
 4742 008c 00000000 		.4byte	0
 4743              		.section	.debug_line,"",%progbits
 4744              	.Ldebug_line0:
 4745 0000 B7040000 		.section	.debug_str,"MS",%progbits,1
 4745      02006101 
 4745      00000201 
 4745      FB0E0D00 
 4745      01010101 
 4746              	.LASF35:
 4747 0000 50554C4C 		.ascii	"PULL_OVER\000"
 4747      5F4F5645 
 4747      5200
 4748              	.LASF41:
 4749 000a 546F6E65 		.ascii	"ToneType\000"
 4749      54797065 
 4749      00
 4750              	.LASF22:
 4751 0013 50484153 		.ascii	"PHASER\000"
 4751      455200
 4752              	.LASF85:
 4753 001a 63757272 		.ascii	"currentSpeaker\000"
 4753      656E7453 
 4753      7065616B 
 4753      657200
 4754              	.LASF108:
 4755 0029 50574D5F 		.ascii	"PWM_CLOCK_FREQUENCY\000"
 4755      434C4F43 
 4755      4B5F4652 
 4755      45515545 
 4755      4E435900 
 4756              	.LASF47:
 4757 003d 68696768 		.ascii	"highestFrequency\000"
 4757      65737446 
 4757      72657175 
 4757      656E6379 
 4757      00
 4758              	.LASF96:
 4759 004e 63757272 		.ascii	"currentDifference\000"
 4759      656E7444 
 4759      69666665 
 4759      72656E63 
 4759      6500
 4760              	.LASF26:
 4761 0060 48494748 		.ascii	"HIGH_LOW\000"
 4761      5F4C4F57 
 4761      00
 4762              	.LASF80:
 4763 0069 69734D61 		.ascii	"isManualWailActive\000"
 4763      6E75616C 
 4763      5761696C 
 4763      41637469 
 4763      766500
 4764              	.LASF43:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 104


 4765 007c 4E4F5F45 		.ascii	"NO_EFFECT\000"
 4765      46464543 
 4765      5400
 4766              	.LASF55:
 4767 0086 6D656368 		.ascii	"mechanicalRampUpCount\000"
 4767      616E6963 
 4767      616C5261 
 4767      6D705570 
 4767      436F756E 
 4768              	.LASF50:
 4769 009c 62486F72 		.ascii	"bHornEnable\000"
 4769      6E456E61 
 4769      626C6500 
 4770              	.LASF99:
 4771 00a8 706C6179 		.ascii	"playComboTone\000"
 4771      436F6D62 
 4771      6F546F6E 
 4771      6500
 4772              	.LASF91:
 4773 00b6 706C6179 		.ascii	"playHighLowTone\000"
 4773      48696768 
 4773      4C6F7754 
 4773      6F6E6500 
 4774              	.LASF2:
 4775 00c6 73686F72 		.ascii	"short int\000"
 4775      7420696E 
 4775      7400
 4776              	.LASF34:
 4777 00d0 4D4F5645 		.ascii	"MOVE_OUT\000"
 4777      5F4F5554 
 4777      00
 4778              	.LASF17:
 4779 00d9 73697A65 		.ascii	"sizetype\000"
 4779      74797065 
 4779      00
 4780              	.LASF110:
 4781 00e2 746F6E65 		.ascii	"toneList\000"
 4781      4C697374 
 4781      00
 4782              	.LASF77:
 4783 00eb 686F726E 		.ascii	"hornWiggleCount\000"
 4783      57696767 
 4783      6C65436F 
 4783      756E7400 
 4784              	.LASF117:
 4785 00fb 5C5C4441 		.ascii	"\\\\DATA\\Folder Redirection\\faithc\\Desktop\\FAIT"
 4785      54415C46 
 4785      6F6C6465 
 4785      72205265 
 4785      64697265 
 4786 0128 48532052 		.ascii	"HS RELEASED FIRMWARE\\SirenProject200W_RevF\\SirenP"
 4786      454C4541 
 4786      53454420 
 4786      4649524D 
 4786      57415245 
 4787 0159 726F6A65 		.ascii	"roject200W_RevD\\ReleaseVersion.cydsn\000"
 4787      63743230 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 105


 4787      30575F52 
 4787      6576445C 
 4787      52656C65 
 4788              	.LASF37:
 4789 017e 53544550 		.ascii	"STEP_OUT_HANDS_UP\000"
 4789      5F4F5554 
 4789      5F48414E 
 4789      44535F55 
 4789      5000
 4790              	.LASF52:
 4791 0190 63757272 		.ascii	"currentToneNumber\000"
 4791      656E7454 
 4791      6F6E654E 
 4791      756D6265 
 4791      7200
 4792              	.LASF45:
 4793 01a2 44454C41 		.ascii	"DELAY_TONES\000"
 4793      595F544F 
 4793      4E455300 
 4794              	.LASF95:
 4795 01ae 52414D50 		.ascii	"RAMP_UP_COUNT_LIMIT\000"
 4795      5F55505F 
 4795      434F554E 
 4795      545F4C49 
 4795      4D495400 
 4796              	.LASF58:
 4797 01c2 62467265 		.ascii	"bFrequencyChange\000"
 4797      7175656E 
 4797      63794368 
 4797      616E6765 
 4797      00
 4798              	.LASF75:
 4799 01d3 63617074 		.ascii	"captureValue\000"
 4799      75726556 
 4799      616C7565 
 4799      00
 4800              	.LASF93:
 4801 01e0 706C6179 		.ascii	"playMechanicalTone\000"
 4801      4D656368 
 4801      616E6963 
 4801      616C546F 
 4801      6E6500
 4802              	.LASF72:
 4803 01f3 70726F63 		.ascii	"processPWMtimerRoutine\000"
 4803      65737350 
 4803      574D7469 
 4803      6D657252 
 4803      6F757469 
 4804              	.LASF65:
 4805 020a 43757272 		.ascii	"CurrentToneData\000"
 4805      656E7454 
 4805      6F6E6544 
 4805      61746100 
 4806              	.LASF48:
 4807 021a 64656C61 		.ascii	"delayUs\000"
 4807      79557300 
 4808              	.LASF11:
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 106


 4809 0222 75696E74 		.ascii	"uint8\000"
 4809      3800
 4810              	.LASF118:
 4811 0228 64656163 		.ascii	"deactivateManualWail\000"
 4811      74697661 
 4811      74654D61 
 4811      6E75616C 
 4811      5761696C 
 4812              	.LASF56:
 4813 023d 5043616C 		.ascii	"PCallHoldNoteCount\000"
 4813      6C486F6C 
 4813      644E6F74 
 4813      65436F75 
 4813      6E7400
 4814              	.LASF98:
 4815 0250 484F4C44 		.ascii	"HOLD_NOTE_FACTOR\000"
 4815      5F4E4F54 
 4815      455F4641 
 4815      43544F52 
 4815      00
 4816              	.LASF59:
 4817 0261 62436F6D 		.ascii	"bComboSwitch\000"
 4817      626F5377 
 4817      69746368 
 4817      00
 4818              	.LASF33:
 4819 026e 434F5053 		.ascii	"COPS_SONG\000"
 4819      5F534F4E 
 4819      4700
 4820              	.LASF30:
 4821 0278 484F524E 		.ascii	"HORN_YELP\000"
 4821      5F59454C 
 4821      5000
 4822              	.LASF14:
 4823 0282 666C6F61 		.ascii	"float\000"
 4823      7400
 4824              	.LASF109:
 4825 0288 484F524E 		.ascii	"HORN_FIRST_FREQUENCY\000"
 4825      5F464952 
 4825      53545F46 
 4825      52455155 
 4825      454E4359 
 4826              	.LASF6:
 4827 029d 6C6F6E67 		.ascii	"long long int\000"
 4827      206C6F6E 
 4827      6720696E 
 4827      7400
 4828              	.LASF18:
 4829 02ab 4E4F5F54 		.ascii	"NO_TONE\000"
 4829      4F4E4500 
 4830              	.LASF40:
 4831 02b3 54455354 		.ascii	"TEST_TONE\000"
 4831      5F544F4E 
 4831      4500
 4832              	.LASF36:
 4833 02bd 53544550 		.ascii	"STEP_OUT\000"
 4833      5F4F5554 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 107


 4833      00
 4834              	.LASF90:
 4835 02c6 706C6179 		.ascii	"playManualWailTone\000"
 4835      4D616E75 
 4835      616C5761 
 4835      696C546F 
 4835      6E6500
 4836              	.LASF115:
 4837 02d9 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 4837      4320342E 
 4837      392E3320 
 4837      32303135 
 4837      30333033 
 4838 030c 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 4838      20726576 
 4838      6973696F 
 4838      6E203232 
 4838      31323230 
 4839 033f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 4839      66756E63 
 4839      74696F6E 
 4839      2D736563 
 4839      74696F6E 
 4840              	.LASF94:
 4841 0367 52414D50 		.ascii	"RAMP_UP_INITIAL_DIFFERENCE\000"
 4841      5F55505F 
 4841      494E4954 
 4841      49414C5F 
 4841      44494646 
 4842              	.LASF23:
 4843 0382 484F524E 		.ascii	"HORN\000"
 4843      00
 4844              	.LASF74:
 4845 0387 686F726E 		.ascii	"hornFrequencyCount\000"
 4845      46726571 
 4845      75656E63 
 4845      79436F75 
 4845      6E7400
 4846              	.LASF27:
 4847 039a 5043414C 		.ascii	"PCALL_SLOW\000"
 4847      4C5F534C 
 4847      4F5700
 4848              	.LASF32:
 4849 03a5 4543544F 		.ascii	"ECTOSIREN\000"
 4849      53495245 
 4849      4E00
 4850              	.LASF49:
 4851 03af 62576169 		.ascii	"bWailEnable\000"
 4851      6C456E61 
 4851      626C6500 
 4852              	.LASF21:
 4853 03bb 46415354 		.ascii	"FAST_YELP\000"
 4853      5F59454C 
 4853      5000
 4854              	.LASF67:
 4855 03c5 6E657754 		.ascii	"newTone\000"
 4855      6F6E6500 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 108


 4856              	.LASF46:
 4857 03cd 6C6F7765 		.ascii	"lowestFrequency\000"
 4857      73744672 
 4857      65717565 
 4857      6E637900 
 4858              	.LASF24:
 4859 03dd 4D454348 		.ascii	"MECHANICAL\000"
 4859      414E4943 
 4859      414C00
 4860              	.LASF63:
 4861 03e8 62486F72 		.ascii	"bHornPWMenable\000"
 4861      6E50574D 
 4861      656E6162 
 4861      6C6500
 4862              	.LASF19:
 4863 03f7 5741494C 		.ascii	"WAIL\000"
 4863      00
 4864              	.LASF1:
 4865 03fc 756E7369 		.ascii	"unsigned char\000"
 4865      676E6564 
 4865      20636861 
 4865      7200
 4866              	.LASF42:
 4867 040a 546F6E65 		.ascii	"ToneEffect\000"
 4867      45666665 
 4867      637400
 4868              	.LASF0:
 4869 0415 7369676E 		.ascii	"signed char\000"
 4869      65642063 
 4869      68617200 
 4870              	.LASF7:
 4871 0421 6C6F6E67 		.ascii	"long long unsigned int\000"
 4871      206C6F6E 
 4871      6720756E 
 4871      7369676E 
 4871      65642069 
 4872              	.LASF64:
 4873 0438 6E6F7465 		.ascii	"noteListIndex\000"
 4873      4C697374 
 4873      496E6465 
 4873      7800
 4874              	.LASF88:
 4875 0446 68696768 		.ascii	"highestPWMcount\000"
 4875      65737450 
 4875      574D636F 
 4875      756E7400 
 4876              	.LASF8:
 4877 0456 756E7369 		.ascii	"unsigned int\000"
 4877      676E6564 
 4877      20696E74 
 4877      00
 4878              	.LASF114:
 4879 0463 62456368 		.ascii	"bEchoEnable\000"
 4879      6F456E61 
 4879      626C6500 
 4880              	.LASF51:
 4881 046f 546F6E65 		.ascii	"ToneStruct\000"
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 109


 4881      53747275 
 4881      637400
 4882              	.LASF102:
 4883 047a 434F4D42 		.ascii	"COMBO_COUNT_LIMIT\000"
 4883      4F5F434F 
 4883      554E545F 
 4883      4C494D49 
 4883      5400
 4884              	.LASF5:
 4885 048c 6C6F6E67 		.ascii	"long unsigned int\000"
 4885      20756E73 
 4885      69676E65 
 4885      6420696E 
 4885      7400
 4886              	.LASF31:
 4887 049e 50484153 		.ascii	"PHASER_YELP\000"
 4887      45525F59 
 4887      454C5000 
 4888              	.LASF89:
 4889 04aa 6C6F7765 		.ascii	"lowestPWMcount\000"
 4889      73745057 
 4889      4D636F75 
 4889      6E7400
 4890              	.LASF86:
 4891 04b9 706C6179 		.ascii	"playGradualChangeTone\000"
 4891      47726164 
 4891      75616C43 
 4891      68616E67 
 4891      65546F6E 
 4892              	.LASF3:
 4893 04cf 73686F72 		.ascii	"short unsigned int\000"
 4893      7420756E 
 4893      7369676E 
 4893      65642069 
 4893      6E7400
 4894              	.LASF71:
 4895 04e2 73746F70 		.ascii	"stopPWMTone\000"
 4895      50574D54 
 4895      6F6E6500 
 4896              	.LASF16:
 4897 04ee 63686172 		.ascii	"char\000"
 4897      00
 4898              	.LASF119:
 4899 04f3 49544D5F 		.ascii	"ITM_RxBuffer\000"
 4899      52784275 
 4899      66666572 
 4899      00
 4900              	.LASF4:
 4901 0500 6C6F6E67 		.ascii	"long int\000"
 4901      20696E74 
 4901      00
 4902              	.LASF111:
 4903 0509 4E4F5445 		.ascii	"NOTES_FREQUENCY_LIST\000"
 4903      535F4652 
 4903      45515545 
 4903      4E43595F 
 4903      4C495354 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 110


 4904              	.LASF10:
 4905 051e 696E7433 		.ascii	"int32_t\000"
 4905      325F7400 
 4906              	.LASF73:
 4907 0526 484F524E 		.ascii	"HORN_FREQUENCY_COUNT_LIMIT\000"
 4907      5F465245 
 4907      5155454E 
 4907      43595F43 
 4907      4F554E54 
 4908              	.LASF106:
 4909 0541 67657443 		.ascii	"getCaptureValue\000"
 4909      61707475 
 4909      72655661 
 4909      6C756500 
 4910              	.LASF25:
 4911 0551 4D414E55 		.ascii	"MANUAL_WAIL\000"
 4911      414C5F57 
 4911      41494C00 
 4912              	.LASF66:
 4913 055d 62537065 		.ascii	"bSpeaker\000"
 4913      616B6572 
 4913      00
 4914              	.LASF12:
 4915 0566 75696E74 		.ascii	"uint16\000"
 4915      313600
 4916              	.LASF61:
 4917 056d 624D616E 		.ascii	"bManualWailActiveFlag\000"
 4917      75616C57 
 4917      61696C41 
 4917      63746976 
 4917      65466C61 
 4918              	.LASF105:
 4919 0583 706C6179 		.ascii	"playTestTone\000"
 4919      54657374 
 4919      546F6E65 
 4919      00
 4920              	.LASF13:
 4921 0590 75696E74 		.ascii	"uint32\000"
 4921      333200
 4922              	.LASF28:
 4923 0597 5043414C 		.ascii	"PCALL_FAST\000"
 4923      4C5F4641 
 4923      535400
 4924              	.LASF62:
 4925 05a2 624D616E 		.ascii	"bManualWailInputFlag\000"
 4925      75616C57 
 4925      61696C49 
 4925      6E707574 
 4925      466C6167 
 4926              	.LASF97:
 4927 05b7 706C6179 		.ascii	"playPCallTone\000"
 4927      5043616C 
 4927      6C546F6E 
 4927      6500
 4928              	.LASF87:
 4929 05c5 63757272 		.ascii	"currentTone\000"
 4929      656E7454 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 111


 4929      6F6E6500 
 4930              	.LASF103:
 4931 05d1 64656C61 		.ascii	"delayFactor1\000"
 4931      79466163 
 4931      746F7231 
 4931      00
 4932              	.LASF104:
 4933 05de 64656C61 		.ascii	"delayFactor2\000"
 4933      79466163 
 4933      746F7232 
 4933      00
 4934              	.LASF70:
 4935 05eb 706C6179 		.ascii	"playPWMTone\000"
 4935      50574D54 
 4935      6F6E6500 
 4936              	.LASF101:
 4937 05f7 7365636F 		.ascii	"secondToneChoice\000"
 4937      6E64546F 
 4937      6E654368 
 4937      6F696365 
 4937      00
 4938              	.LASF81:
 4939 0608 66697273 		.ascii	"firstTone\000"
 4939      74546F6E 
 4939      6500
 4940              	.LASF82:
 4941 0612 7365636F 		.ascii	"secondTone\000"
 4941      6E64546F 
 4941      6E6500
 4942              	.LASF112:
 4943 061d 73706561 		.ascii	"speakerDataList\000"
 4943      6B657244 
 4943      6174614C 
 4943      69737400 
 4944              	.LASF68:
 4945 062d 624D616E 		.ascii	"bManualWailInput\000"
 4945      75616C57 
 4945      61696C49 
 4945      6E707574 
 4945      00
 4946              	.LASF53:
 4947 063e 50574D70 		.ascii	"PWMperiodCount\000"
 4947      6572696F 
 4947      64436F75 
 4947      6E7400
 4948              	.LASF9:
 4949 064d 5F5F696E 		.ascii	"__int32_t\000"
 4949      7433325F 
 4949      7400
 4950              	.LASF116:
 4951 0657 2E5C546F 		.ascii	".\\Tones.c\000"
 4951      6E65732E 
 4951      6300
 4952              	.LASF38:
 4953 0661 52454D41 		.ascii	"REMAIN_IN_VEHICLE\000"
 4953      494E5F49 
 4953      4E5F5645 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 112


 4953      4849434C 
 4953      4500
 4954              	.LASF69:
 4955 0673 62447561 		.ascii	"bDualDelayInput\000"
 4955      6C44656C 
 4955      6179496E 
 4955      70757400 
 4956              	.LASF79:
 4957 0683 70726F63 		.ascii	"processPWM2updateRoutine\000"
 4957      65737350 
 4957      574D3275 
 4957      70646174 
 4957      65526F75 
 4958              	.LASF39:
 4959 069c 52454D41 		.ascii	"REMAIN_WINDOW_DOWN\000"
 4959      494E5F57 
 4959      494E444F 
 4959      575F444F 
 4959      574E00
 4960              	.LASF107:
 4961 06af 66726571 		.ascii	"frequency\000"
 4961      75656E63 
 4961      7900
 4962              	.LASF113:
 4963 06b9 746F6E65 		.ascii	"toneEffectStatus\000"
 4963      45666665 
 4963      63745374 
 4963      61747573 
 4963      00
 4964              	.LASF57:
 4965 06ca 636F6D62 		.ascii	"comboCount\000"
 4965      6F436F75 
 4965      6E7400
 4966              	.LASF15:
 4967 06d5 646F7562 		.ascii	"double\000"
 4967      6C6500
 4968              	.LASF29:
 4969 06dc 484F524E 		.ascii	"HORN_PHASER\000"
 4969      5F504841 
 4969      53455200 
 4970              	.LASF100:
 4971 06e8 66697273 		.ascii	"firstToneChoice\000"
 4971      74546F6E 
 4971      6543686F 
 4971      69636500 
 4972              	.LASF44:
 4973 06f8 53594E43 		.ascii	"SYNC_TONES\000"
 4973      5F544F4E 
 4973      455300
 4974              	.LASF60:
 4975 0703 62546F6E 		.ascii	"bTonePlaying\000"
 4975      65506C61 
 4975      79696E67 
 4975      00
 4976              	.LASF84:
 4977 0710 706C6179 		.ascii	"playHornTone\000"
 4977      486F726E 
ARM GAS  C:\Users\faithc\AppData\Local\Temp\cchySoGj.s 			page 113


 4977      546F6E65 
 4977      00
 4978              	.LASF54:
 4979 071d 50574D63 		.ascii	"PWMcountDifference\000"
 4979      6F756E74 
 4979      44696666 
 4979      6572656E 
 4979      636500
 4980              	.LASF83:
 4981 0730 73657454 		.ascii	"setToneEffectStatus\000"
 4981      6F6E6545 
 4981      66666563 
 4981      74537461 
 4981      74757300 
 4982              	.LASF78:
 4983 0744 70726F63 		.ascii	"processPWM1updateRoutine\000"
 4983      65737350 
 4983      574D3175 
 4983      70646174 
 4983      65526F75 
 4984              	.LASF76:
 4985 075d 484F524E 		.ascii	"HORN_WIGGLE_WIDTH\000"
 4985      5F574947 
 4985      474C455F 
 4985      57494454 
 4985      4800
 4986              	.LASF20:
 4987 076f 534C4F57 		.ascii	"SLOW_YELP\000"
 4987      5F59454C 
 4987      5000
 4988              	.LASF92:
 4989 0779 48494748 		.ascii	"HIGH_LOW_COUNT_LIMIT\000"
 4989      5F4C4F57 
 4989      5F434F55 
 4989      4E545F4C 
 4989      494D4954 
 4990              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
